--
-- PostgreSQL database dump
--

-- Dumped from database version 9.4.5
-- Dumped by pg_dump version 9.4.5
-- Started on 2016-03-16 14:18:44 VET

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- TOC entry 555 (class 3079 OID 11861)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 7766 (class 0 OID 0)
-- Dependencies: 555
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- TOC entry 556 (class 3079 OID 86665)
-- Name: dblink; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS dblink WITH SCHEMA public;


--
-- TOC entry 7767 (class 0 OID 0)
-- Dependencies: 556
-- Name: EXTENSION dblink; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION dblink IS 'connect to other PostgreSQL databases from within a database';


SET search_path = public, pg_catalog;

--
-- TOC entry 610 (class 1255 OID 183573)
-- Name: actualizar_aporte_patronal(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_aporte_patronal(integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$  declare  	
   pIdGrupoNomina alias for $1; 
   pnumeronomina  alias for $2; 
   pIdgrupoorganismo  alias for $3;
  
   v_factor         float8=1;
   v_patrono        float8=1;
   v_id_concepto    int4=37;
   	 	
   recUltimaNomina  record; 
   recUltimaNomina2  record; 
   recconceptoaporte2  record; 	
   curUltimaNomina cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select un.id_ultima_nomina as id_ultima_nomina, 
                           un.id_trabajador    as id_trabajador,
                           un.id_concepto_tipo_personal as id_concepto_tipo_personal,
                           c.cod_concepto as cod_concepto,
                           c.id_concepto_aporte as id_concepto_aporte,
                           t.riesgo as riesgo,
                           t.regimen as regimen
                           
		from ultimanomina un, conceptotipopersonal ctp, concepto c,trabajador t
		where un.numero_nomina   = pNumeroNomina
		  and un.id_grupo_nomina = pIdGrupoNomina
                  and un.monto_aporte =0
                  and un.id_trabajador = t.id_trabajador
                  and un.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                  and ctp.id_concepto = c.id_concepto
                  and c.cod_concepto in ('5001','5002','5003','5004',
                                         '5011','5012','5013','5014');
                  

   
	
       curUltimaNomina2 cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select un.id_ultima_nomina as id_ultima_nomina, 
                           un.id_trabajador    as id_trabajador,
                           t.id_tipo_personal as id_tipo_personal,
                           un.id_concepto_tipo_personal as id_concepto_tipo_personal,
                           c.cod_concepto as cod_concepto,
                           c.id_concepto_aporte as id_concepto_aporte,
                           ctp.valor as porcentaje_trabajador
         from ultimanomina un, conceptotipopersonal ctp, concepto c,trabajador t
		where un.numero_nomina   = pNumeroNomina
		  and un.id_grupo_nomina = pIdGrupoNomina
                  and un.id_trabajador = t.id_trabajador
                  and un.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                  and ctp.id_concepto = c.id_concepto
                  and ctp.valor > 0
		  and c.cod_concepto not in ('5001','5002','5003','5004',
                                         '5011','5012','5013','5014')
                  and c.aporte_patronal ='S';
 

   recparametrogobierno  record; 	
   curparametrogobierno cursor (pIdgrupoorganismo int4)
		for select * from parametrogobierno
		    where id_grupo_organismo = pIdgrupoorganismo;
	

   curconceptoaporte2 cursor (pIdtipopersonal int4,pidconceptoaporte int4)
		for select valor as porcentaje_patronal from conceptotipopersonal
		    where id_tipo_personal = pIdtipopersonal
                      and id_concepto = pidconceptoaporte;
	
 begin 	

    
    open curparametrogobierno(pIdGrupoorganismo); 
    loop 		
       fetch curparametrogobierno into recparametrogobierno;
        exit when not found; 			 
        open curUltimaNomina(pIdGrupoNomina,pnumeronomina); 
	    loop 		
            fetch curUltimaNomina into recUltimaNomina;			 
		exit when not found; 

              if recUltimaNomina.cod_concepto in ('5001','5011') then
                 ---
                 ---bajo
                 ---
                 if recUltimaNomina.riesgo = '1' then
                    v_patrono := recparametrogobierno.porcbpat_sso;
                 end if;
                 ---
                 ---medio
                 ---
                 if recUltimaNomina.riesgo = '2' then
                    v_patrono := recparametrogobierno.porcmpat_sso;
                 end if;
                 ---
                 ---alto
                 ---
                 if recUltimaNomina.riesgo = '3' then
                    v_patrono := recparametrogobierno.porcapat_sso;
                 end if;

                 if recUltimaNomina.regimen ='I' then  --Integral
                    v_factor := v_patrono/
                                recparametrogobierno.porcentaje_integral;
                 end if;
                 if recUltimaNomina.regimen ='P' then  --Parcial
                    v_factor := v_patrono/
                                recparametrogobierno.porcentaje_parcial;
                 end if;
              end if;
              if recUltimaNomina.cod_concepto in ('5002','5012') then
                 v_factor := recparametrogobierno.porcpat_spf/recparametrogobierno.porctrab_spf;
              end if;
              if recUltimaNomina.cod_concepto in ('5003','5013') then
                 v_factor := recparametrogobierno.porcpat_lph/recparametrogobierno.porctrab_lph;
              end if;
              if recUltimaNomina.cod_concepto in ('5004','5014') then
                 v_factor := recparametrogobierno.porcpat_fju/recparametrogobierno.porctrab_fju;
              end if;

	      update ultimanomina  set monto_aporte = convert_2_decimal(monto_deduce) * v_factor ,
                                       id_concepto_aporte = recUltimaNomina.id_concepto_aporte
                    where id_grupo_nomina = pIdGrupoNomina
                      and numero_nomina   = pNumeroNomina
                      and id_trabajador = recUltimaNomina.id_trabajador
                      and id_ultima_nomina = recUltimaNomina.id_ultima_nomina
                      and id_concepto_tipo_personal = recUltimaNomina.id_concepto_tipo_personal
                      and monto_aporte = 0;

	
        end loop; 
        close curUltimaNomina; 
       
      end loop; 
      close curparametrogobierno; 

	open curUltimaNomina2(pIdGrupoNomina,pnumeronomina); 
	    loop 		
            fetch curUltimaNomina2 into recUltimaNomina2;			 
            exit when not found; 

		open curconceptoaporte2(recUltimaNomina2.id_tipo_personal,
                                     recUltimaNomina2.id_concepto_aporte);
	       loop 		
               fetch curconceptoaporte2 into recconceptoaporte2;			 
	       exit when not found; 

                if recconceptoaporte2.porcentaje_patronal > 0 then
                      v_factor := recconceptoaporte2.porcentaje_patronal/
                                  recUltimaNomina2.porcentaje_trabajador;
                else
                      v_factor := 0;
                end if;

		if v_factor > 0 then

		    update ultimanomina  set monto_aporte = convert_2_decimal(monto_deduce) * v_factor ,
                                        id_concepto_aporte = recUltimaNomina2.id_concepto_aporte
                    where id_grupo_nomina = pIdGrupoNomina
                      and numero_nomina   = pNumeroNomina
                      and id_trabajador = recUltimaNomina2.id_trabajador
                      and id_ultima_nomina = recUltimaNomina2.id_ultima_nomina
                      and id_concepto_tipo_personal = recUltimaNomina2.id_concepto_tipo_personal;
                end if;

		end loop;
                close curconceptoaporte2;



            end loop;

        close curUltimaNomina2;

     



	
      return 0;
end;  $_$;


ALTER FUNCTION public.actualizar_aporte_patronal(integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 611 (class 1255 OID 183574)
-- Name: actualizar_aporte_patronal_historicoq(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_aporte_patronal_historicoq(integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$  declare  	
   pIdGrupoNomina alias for $1; 
   pAnio  alias for $2; 
   pMes  alias for $3;
 
  
   v_factor         float8=1;
   v_patrono        float8=1;
   v_id_concepto    int4=37;
   	 	
   recHistorico  record; 
   recHistorico2  record; 
   recconceptoaporte  record; 


   curHistorico cursor (pIdGrupoNomina int4, pAnio int4, pMes int4)
		for select hq.id_historico_quincena as id_historico_quincena, 
                           hq.id_trabajador    as id_trabajador,
                           hq.id_concepto_tipo_personal as id_concepto_tipo_personal,
                           c.cod_concepto as cod_concepto,
                           c.id_concepto_aporte as id_concepto_aporte,
                           t.riesgo as riesgo,
                           t.regimen as regimen
                           
		from historicoquincena hq, conceptotipopersonal ctp, concepto c,trabajador t
		where hq.anio   = pAnio
                  and hq.mes    = pMes
		  and hq.id_grupo_nomina = pIdGrupoNomina
                  
                 
                  and hq.id_trabajador = t.id_trabajador
                  and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                  and ctp.id_concepto = c.id_concepto
                  and c.cod_concepto in ('5001','5002','5003','5004',
                                         '5011','5012','5013','5014');
                  

        curHistorico2 cursor (pIdGrupoNomina int4, pAnio int4, pMes int4)
		for select hq.id_historico_quincena as id_historico_quincena, 
                           hq.id_trabajador    as id_trabajador,
                           hq.id_concepto_tipo_personal as id_concepto_tipo_personal,
                           c.cod_concepto as cod_concepto,
                           c.id_concepto_aporte as id_concepto_aporte,
                           t.id_tipo_personal as id_tipo_personal,
                           ctp.valor as porcentaje_trabajador
                           
                           
		from historicoquincena hq, conceptotipopersonal ctp, concepto c,trabajador t
		where hq.anio   = pAnio
                  and hq.mes    = pMes
		  and hq.id_grupo_nomina = pIdGrupoNomina
                  
                  and hq.id_trabajador = t.id_trabajador
                  and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                  and ctp.id_concepto = c.id_concepto
                  and ctp.valor > 0
                  and c.cod_concepto not in ('5001','5002','5003','5004',
                                         '5011','5012','5013','5014')
                  and c.aporte_patronal ='S';
   

   recparametrogobierno  record; 	
   curparametrogobierno cursor (pIdgruponomina int4)
		for select * from parametrogobierno
		    where id_grupo_organismo in
                         (select a.id_grupo_organismo from grupoorganismo a,gruponomina b
                             where a.id_organismo  = b.id_organismo
                               and b.id_grupo_nomina = pIdgruponomina);
    curconceptoaporte cursor (pIdtipopersonal int4,pidconceptoaporte int4)
		for select valor as porcentaje_patronal from conceptotipopersonal
		    where id_tipo_personal = pIdtipopersonal
                      and id_concepto = pidconceptoaporte;

	
 begin 	

    ---
    ---Selecciona los porcentajes de gobierno
    ---
    open curparametrogobierno(pIdGruponomina); 
    loop 		
       fetch curparametrogobierno into recparametrogobierno;	
        ---
        ---Selecciona los conceptos de aportes legales
        ---		 
        open curHistorico(pIdGrupoNomina,pAnio,pMes); 
	    loop 		
            fetch curHistorico into recHistorico;			 
	      exit when not found; 
              ---
              --- Calcula aporte patronal del Seguro Social Obligatorio
              ---
              if recHistorico.cod_concepto in ('5001','5011') then
                 if recHistorico.riesgo = '1' then
                    v_patrono := recparametrogobierno.porcbpat_sso;
                 end if;
                 if recHistorico.riesgo = '2' then
                    v_patrono := recparametrogobierno.porcmpat_sso;
                 end if;
                 if recHistorico.riesgo = '3' then
                    v_patrono := recparametrogobierno.porcapat_sso;
                 end if;

                 if recHistorico.regimen ='I' then  --Integral
                    v_factor := v_patrono/
                                recparametrogobierno.porcentaje_integral;
                 end if;
                 if recHistorico.regimen ='P' then  --Parcial
                    v_factor := v_patrono/
                                recparametrogobierno.porcentaje_parcial;
                 end if;
              end if;
              ---
              --- Calcula aporte patronal del Seguro Paro Forzoso
              ---
              if recHistorico.cod_concepto in ('5002','5012') then
                 v_factor := recparametrogobierno.porcpat_spf/recparametrogobierno.porctrab_spf;
              end if;
              ---
              --- Calcula aporte patronal de politica habitacional
              ---
              if recHistorico.cod_concepto in ('5003','5013') then
                 v_factor := recparametrogobierno.porcpat_lph/recparametrogobierno.porctrab_lph;
              end if;
              ---
              --- Calcula aporte patronal del fondo de jubilacion
              ---
              if recHistorico.cod_concepto in ('5004','5014') then
                 v_factor := recparametrogobierno.porcpat_fju/recparametrogobierno.porctrab_fju;
              end if;
              ---
              ---Actualiza el campo monto_aporte en la tabla historicoquincena
              ---
	      update historicoquincena  set monto_aporte = 
                       convert_2_decimal(monto_deduce) * v_factor ,
                                       id_concepto_aporte = recHistorico.id_concepto_aporte
                    where id_grupo_nomina = pIdGrupoNomina
                      and anio   = pAnio
                      and mes    = pMes
                      and id_trabajador = recHistorico.id_trabajador
                      and id_historico_quincena = recHistorico.id_historico_quincena
                      and id_concepto_tipo_personal = recHistorico.id_concepto_tipo_personal;
                      --and monto_aporte = 0

	
        end loop; 
        close curHistorico; 
        exit when not found; 
      end loop; 
      close curparametrogobierno; 	
     

      ---
      ---   Otros aportes diferentes a los legales,como caja de ahorros. 
      ---
           open curHistorico2(pIdGrupoNomina,pAnio,pMes); 
	    loop 		
            fetch curHistorico2 into recHistorico2;			 
	    exit when not found;


            open curconceptoaporte(recHistorico2.id_tipo_personal,
                                    recHistorico2.id_concepto_aporte);
	     loop 		
              fetch curconceptoaporte into recconceptoaporte;			 
	      exit when not found; 
     
              if recconceptoaporte.porcentaje_patronal > 0 then
                 v_factor := recconceptoaporte.porcentaje_patronal/
                           recHistorico2.porcentaje_trabajador;
              else
                v_factor := 0;
              end if;
           
        
               ---
               ---Actualiza el campo monto_aporte en la tabla historicoquincena
               ---
               if v_factor > 0 then
	          update historicoquincena  set monto_aporte = 
                                convert_2_decimal(monto_deduce) * v_factor ,
                                       id_concepto_aporte = recHistorico2.id_concepto_aporte
                    where id_grupo_nomina = pIdGrupoNomina
                      and anio   = pAnio
                      and mes    = pMes
                      and id_trabajador = recHistorico2.id_trabajador
                      and id_historico_quincena = recHistorico2.id_historico_quincena
                      and id_concepto_tipo_personal = recHistorico2.id_concepto_tipo_personal;
               end if;
            end loop;
	    close curconceptoaporte;
        end loop; 
        close curHistorico2; 
      return 0;
end;  $_$;


ALTER FUNCTION public.actualizar_aporte_patronal_historicoq(integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 612 (class 1255 OID 183575)
-- Name: actualizar_aporte_patronal_historicoq(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_aporte_patronal_historicoq(integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$  declare  	
   pIdGrupoNomina alias for $1; 
   pAnio  alias for $2; 
   pMes  alias for $2;
   pIdgrupoorganismo  alias for $3;
  
   v_factor         float8=1;
   v_patrono        float8=1;
   v_id_concepto    int4=37;
   	 	
   recHistorico  record; 	
   curHistorico cursor (pIdGrupoNomina int4, pAnio int4, pMes int4)
		for select un.id_historico_quincena as id_historico_quincena, 
                           un.id_trabajador    as id_trabajador,
                           un.id_concepto_tipo_personal as id_concepto_tipo_personal,
                           c.cod_concepto as cod_concepto,
                           c.id_concepto_aporte as id_concepto_aporte,
                           t.riesgo as riesgo,
                           t.regimen as regimen
                           
		from historicoquincena un, conceptotipopersonal ctp, concepto c,trabajador t
		where un.anio   = pAnio
                  and un.mes    = pMes
		  and un.id_grupo_nomina = pIdGrupoNomina
                  and un.monto_aporte = 0
                  and un.numero_nomina = 0
                  and un.id_trabajador = t.id_trabajador
                  and un.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                  and ctp.id_concepto = c.id_concepto
                  and c.cod_concepto in ('5001','5002','5003','5004',
                                         '5011','5012','5013','5014');
                  

   recparametrogobierno  record; 	
   curparametrogobierno cursor (pIdgrupoorganismo int4)
		for select * from parametrogobierno
		    where id_grupo_organismo = pIdgrupoorganismo;
	
 begin 	

    
    open curparametrogobierno(pIdGrupoorganismo); 
    loop 		
       fetch curparametrogobierno into recparametrogobierno;			 
        open curHistorico(pIdGrupoNomina,pAnio,pMes); 
	    loop 		
            fetch curHistorico into recHistorico;			 
		exit when not found; 

              if recHistorico.cod_concepto in ('5001','5011') then
                 ---
                 ---bajo
                 ---
                 if recHistorico.riesgo = '1' then
                    v_patrono := recparametrogobierno.porcbpat_sso;
                 end if;
                 ---
                 ---medio
                 ---
                 if recHistorico.riesgo = '2' then
                    v_patrono := recparametrogobierno.porcmpat_sso;
                 end if;
                 ---
                 ---alto
                 ---
                 if recHistorico.riesgo = '3' then
                    v_patrono := recparametrogobierno.porcapat_sso;
                 end if;

                 if recHistorico.regimen ='I' then  --Integral
                    v_factor := v_patrono/
                                recparametrogobierno.porcentaje_integral;
                 end if;
                 if recHistorico.regimen ='P' then  --Parcial
                    v_factor := v_patrono/
                                recparametrogobierno.porcentaje_parcial;
                 end if;
              end if;
              if recHistorico.cod_concepto in ('5002','5012') then
                 v_factor := recparametrogobierno.porcpat_spf/recparametrogobierno.porctrab_spf;
              end if;
              if recHistorico.cod_concepto in ('5003','5013') then
                 v_factor := recparametrogobierno.porcpat_lph/recparametrogobierno.porctrab_lph;
              end if;
              if recHistorico.cod_concepto in ('5004','5014') then
                 v_factor := recparametrogobierno.porcpat_fju/recparametrogobierno.porctrab_fju;
              end if;

	      update historicoquincena  set monto_aporte = convert_2_decimal(monto_deduce) * v_factor ,
                                       id_concepto_aporte = recHistorico.id_concepto_aporte
                    where id_grupo_nomina = pIdGrupoNomina
                      and un.anio   = pAnio
                      and un.mes    = pMes
                      and id_trabajador = recHistorico.id_trabajador
                      and id_historico_quincena = recHistorico.id_historico_quincena
                      and id_concepto_tipo_personal = recHistorico.id_concepto_tipo_personal
                      and monto_aporte = 0;

	
        end loop; 
        close curHistorico; 
        exit when not found; 
      end loop; 
      close curparametrogobierno; 	
      return 0;
end;  $_$;


ALTER FUNCTION public.actualizar_aporte_patronal_historicoq(integer, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 613 (class 1255 OID 183576)
-- Name: actualizar_aporte_patronal_historicos(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_aporte_patronal_historicos(integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$  declare  	
   pIdGrupoNomina alias for $1; 
   pAnio  alias for $2; 
   pMes  alias for $3;
 
  
   v_factor         float8=1;
   v_patrono        float8=1;
   v_id_concepto    int4=37;
   	 	
   recHistorico  record; 
   recHistorico2  record; 
   recconceptoaporte  record; 


   curHistorico cursor (pIdGrupoNomina int4, pAnio int4, pMes int4)
		for select hq.id_historico_semana as id_historico_semana, 
                           hq.id_trabajador    as id_trabajador,
                           hq.id_concepto_tipo_personal as id_concepto_tipo_personal,
                           c.cod_concepto as cod_concepto,
                           c.id_concepto_aporte as id_concepto_aporte,
                           t.riesgo as riesgo,
                           t.regimen as regimen
                           
		from historicosemana hq, conceptotipopersonal ctp, concepto c,trabajador t
		where hq.anio   = pAnio
                  and hq.mes    = pMes
		  and hq.id_grupo_nomina = pIdGrupoNomina
                  
                  and hq.id_trabajador = t.id_trabajador
                  and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                  and ctp.id_concepto = c.id_concepto
                  and c.cod_concepto in ('5001','5002','5003','5004',
                                         '5011','5012','5013','5014');
                  

        curHistorico2 cursor (pIdGrupoNomina int4, pAnio int4, pMes int4)
		for select hq.id_historico_semana as id_historico_semana, 
                           hq.id_trabajador    as id_trabajador,
                           hq.id_concepto_tipo_personal as id_concepto_tipo_personal,
                           c.cod_concepto as cod_concepto,
                           c.id_concepto_aporte as id_concepto_aporte,
                           t.id_tipo_personal as id_tipo_personal,
                           ctp.valor as porcentaje_trabajador
                           
                           
		from historicosemana hq, conceptotipopersonal ctp, concepto c,trabajador t
		where hq.anio   = pAnio
                  and hq.mes    = pMes
		  and hq.id_grupo_nomina = pIdGrupoNomina
                  
                  and hq.id_trabajador = t.id_trabajador
                  and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                  and ctp.id_concepto = c.id_concepto
                  and ctp.valor > 0
                  and c.cod_concepto not in ('5001','5002','5003','5004',
                                         '5011','5012','5013','5014')
                  and c.aporte_patronal ='S';
   

   recparametrogobierno  record; 	
   curparametrogobierno cursor (pIdgruponomina int4)
		for select * from parametrogobierno
		    where id_grupo_organismo in
                         (select a.id_grupo_organismo from grupoorganismo a,gruponomina b
                             where a.id_organismo  = b.id_organismo
                               and b.id_grupo_nomina = pIdgruponomina);
    curconceptoaporte cursor (pIdtipopersonal int4,pidconceptoaporte int4)
		for select valor as porcentaje_patronal from conceptotipopersonal
		    where id_tipo_personal = pIdtipopersonal
                      and id_concepto = pidconceptoaporte;

	
 begin 	

    ---
    ---Selecciona los porcentajes de gobierno
    ---
    open curparametrogobierno(pIdGruponomina); 
    loop 		
       fetch curparametrogobierno into recparametrogobierno;	
        ---
        ---Selecciona los conceptos de aportes legales
        ---		 
        open curHistorico(pIdGrupoNomina,pAnio,pMes); 
	    loop 		
            fetch curHistorico into recHistorico;			 
	      exit when not found; 
              ---
              --- Calcula aporte patronal del Seguro Social Obligatorio
              ---
              if recHistorico.cod_concepto in ('5001','5011') then
                 if recHistorico.riesgo = '1' then
                    v_patrono := recparametrogobierno.porcbpat_sso;
                 end if;
                 if recHistorico.riesgo = '2' then
                    v_patrono := recparametrogobierno.porcmpat_sso;
                 end if;
                 if recHistorico.riesgo = '3' then
                    v_patrono := recparametrogobierno.porcapat_sso;
                 end if;

                 if recHistorico.regimen ='I' then  --Integral
                    v_factor := v_patrono/
                                recparametrogobierno.porcentaje_integral;
                 end if;
                 if recHistorico.regimen ='P' then  --Parcial
                    v_factor := v_patrono/
                                recparametrogobierno.porcentaje_parcial;
                 end if;
              end if;
              ---
              --- Calcula aporte patronal del Seguro Paro Forzoso
              ---
              if recHistorico.cod_concepto in ('5002','5012') then
                 v_factor := recparametrogobierno.porcpat_spf/recparametrogobierno.porctrab_spf;
              end if;
              ---
              --- Calcula aporte patronal de politica habitacional
              ---
              if recHistorico.cod_concepto in ('5003','5013') then
                 v_factor := recparametrogobierno.porcpat_lph/recparametrogobierno.porctrab_lph;
              end if;
              ---
              --- Calcula aporte patronal del fondo de jubilacion
              ---
              if recHistorico.cod_concepto in ('5004','5014') then
                 v_factor := recparametrogobierno.porcpat_fju/recparametrogobierno.porctrab_fju;
              end if;
              ---
              ---Actualiza el campo monto_aporte en la tabla historicosemana
              ---
	      update historicosemana  set monto_aporte = 
                       convert_2_decimal(monto_deduce) * v_factor ,
                                       id_concepto_aporte = recHistorico.id_concepto_aporte
                    where id_grupo_nomina = pIdGrupoNomina
                      and anio   = pAnio
                      and mes    = pMes
                      and id_trabajador = recHistorico.id_trabajador
                      and id_historico_semana = recHistorico.id_historico_semana
                      and id_concepto_tipo_personal = recHistorico.id_concepto_tipo_personal;
                     -- and monto_aporte = 0

	
        end loop; 
        close curHistorico; 
        exit when not found; 
      end loop; 
      close curparametrogobierno; 	
     

      ---
      ---   Otros aportes diferentes a los legales,como caja de ahorros. 
      ---
           open curHistorico2(pIdGrupoNomina,pAnio,pMes); 
	    loop 		
            fetch curHistorico2 into recHistorico2;			 
	    exit when not found;


            open curconceptoaporte(recHistorico2.id_tipo_personal,
                                    recHistorico2.id_concepto_aporte);
	     loop 		
              fetch curconceptoaporte into recconceptoaporte;			 
	      exit when not found; 
     
              if recconceptoaporte.porcentaje_patronal > 0 then
                 v_factor := recconceptoaporte.porcentaje_patronal/
                           recHistorico2.porcentaje_trabajador;
              else
                v_factor := 0;
              end if;
           
        
               ---
               ---Actualiza el campo monto_aporte en la tabla historicosemana
               ---
               if v_factor > 0 then
	          update historicosemana  set monto_aporte = 
                                convert_2_decimal(monto_deduce) * v_factor ,
                                       id_concepto_aporte = recHistorico2.id_concepto_aporte
                    where id_grupo_nomina = pIdGrupoNomina
                      and anio   = pAnio
                      and mes    = pMes
                      and id_trabajador = recHistorico2.id_trabajador
                      and id_historico_semana = recHistorico2.id_historico_semana
                      and id_concepto_tipo_personal = recHistorico2.id_concepto_tipo_personal;
               end if;
            end loop;
	    close curconceptoaporte;
        end loop; 
        close curHistorico2; 
      return 0;
end;  $_$;


ALTER FUNCTION public.actualizar_aporte_patronal_historicos(integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 616 (class 1255 OID 183577)
-- Name: actualizar_conceptomovimiento(integer, double precision, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_conceptomovimiento(integer, double precision, integer, integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare		
	pIdConceptoFijo alias for $1;
	pMonto alias for $2;
	pNumeroMovimiento alias for $3;
	pIdConceptoTipoPersonal alias for $4;
	pIdFrecuenciaTipoPersonal alias for $5;
	pIdTrabajador alias for $6;
        pAnio alias for $7;

	id int4 := 0;
begin

	update conceptofijo set monto = pMonto where id_concepto_fijo = pIdConceptoFijo;	

	id := last_id_conceptomovimiento()+1;				
	if id is null then				
		id := 1;				
	end if;
	insert into conceptomovimiento 
		(id_concepto_movimiento, numero_movimiento, id_concepto_tipo_personal, 
		id_frecuencia_tipo_personal, id_trabajador, monto, anio) values(id,pNumeroMovimiento,pIdConceptoTipoPersonal,pIdFrecuenciaTipoPersonal,pIdTrabajador,pMonto,pAnio);

	update conceptomovimiento set monto_anterior = conceptofijo.monto_anterior from conceptofijo 
		where id_concepto_fijo = pIdConceptoFijo and id_concepto_movimiento = id;

	return 0;
end;

$_$;


ALTER FUNCTION public.actualizar_conceptomovimiento(integer, double precision, integer, integer, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 617 (class 1255 OID 183578)
-- Name: actualizar_conceptomovimiento_anterior(integer, double precision, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_conceptomovimiento_anterior(integer, double precision, integer, integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare		
	pIdConceptoFijo alias for $1;
	pMonto alias for $2;
	pNumeroMovimiento alias for $3;
	pIdConceptoTipoPersonal alias for $4;
	pIdFrecuenciaTipoPersonal alias for $5;
	pIdTrabajador alias for $6;
        pAnio alias for $7;

	id int4 := 0;
begin
	
	id := last_id_conceptomovimiento()+1;				
	if id is null then				
		id := 1;				
	end if;
	insert into conceptomovimiento 
		(id_concepto_movimiento, numero_movimiento, id_concepto_tipo_personal, 
		id_frecuencia_tipo_personal, id_trabajador, monto, monto_anterior, anio) 
		values(id,pNumeroMovimiento,pIdConceptoTipoPersonal,pIdFrecuenciaTipoPersonal,pIdTrabajador,0,pMonto,pAnio);
	
	return 0;
end;

$_$;


ALTER FUNCTION public.actualizar_conceptomovimiento_anterior(integer, double precision, integer, integer, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 618 (class 1255 OID 183579)
-- Name: actualizar_cotiza_lph_femenino(integer, date, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_cotiza_lph_femenino(integer, date, date) RETURNS void
    LANGUAGE sql
    AS $_$
	update trabajador set cotiza_lph = 'N' where cotiza_lph = 'S' 
		and estatus = 'A' and id_tipo_personal in 
			(select id_tipo_personal from tipopersonal where id_grupo_nomina = $1)
		and id_personal in
			(select id_personal from personal where sexo = 'F' 
			and fecha_nacimiento between $2 and $3)

$_$;


ALTER FUNCTION public.actualizar_cotiza_lph_femenino(integer, date, date) OWNER TO postgres;

--
-- TOC entry 619 (class 1255 OID 183580)
-- Name: actualizar_cotiza_lph_masculino(integer, date, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_cotiza_lph_masculino(integer, date, date) RETURNS void
    LANGUAGE sql
    AS $_$
	update trabajador set cotiza_lph = 'N' where cotiza_lph = 'S' 
		and estatus = 'A' and id_tipo_personal in 
			(select id_tipo_personal from tipopersonal where id_grupo_nomina = $1)
		and id_personal in
			(select id_personal from personal where sexo = 'M' 
			and fecha_nacimiento between $2 and $3)

$_$;


ALTER FUNCTION public.actualizar_cotiza_lph_masculino(integer, date, date) OWNER TO postgres;

--
-- TOC entry 620 (class 1255 OID 183581)
-- Name: actualizar_lunes(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_lunes(integer) RETURNS void
    LANGUAGE sql
    AS $_$
	update trabajador set lunes_primera  = 0, lunes_segunda = 0 
			where estatus = 'A' and id_tipo_personal in 
			(select id_tipo_personal from tipopersonal where id_grupo_nomina = $1)
			

$_$;


ALTER FUNCTION public.actualizar_lunes(integer) OWNER TO postgres;

--
-- TOC entry 621 (class 1255 OID 183582)
-- Name: actualizar_lunes_retroactivo(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_lunes_retroactivo(integer) RETURNS void
    LANGUAGE sql
    AS $_$
	update trabajador set lunes_retroactivo = 0 
		where estatus = 'A' and id_tipo_personal in 
		  (select id_tipo_personal from tipopersonal where id_grupo_nomina = $1)
		  

$_$;


ALTER FUNCTION public.actualizar_lunes_retroactivo(integer) OWNER TO postgres;

--
-- TOC entry 622 (class 1255 OID 183583)
-- Name: actualizar_monto_variable(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_monto_variable(integer) RETURNS void
    LANGUAGE sql
    AS $_$
	update sueldopromedio set monto_variable_sso = 0,  monto_variable_lph = 0, monto_variable_fju = 0    
		where id_trabajador in 
		(select id_trabajador from trabajador where estatus = 'A' and id_tipo_personal in 
			(select id_tipo_personal from tipopersonal where id_grupo_nomina = $1))
			
$_$;


ALTER FUNCTION public.actualizar_monto_variable(integer) OWNER TO postgres;

--
-- TOC entry 623 (class 1255 OID 183584)
-- Name: actualizar_montos_conceptofijo(integer, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_montos_conceptofijo(integer, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
	update conceptofijo set monto = $2,
		unidades = $3, 
		monto_restituir = $4, 
		unidades_restituir = $5,
		restituir = 'S'
	where id_concepto_fijo = $1;

$_$;


ALTER FUNCTION public.actualizar_montos_conceptofijo(integer, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 624 (class 1255 OID 183585)
-- Name: actualizar_montos_conceptofijo(integer, double precision, double precision, double precision, double precision, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_montos_conceptofijo(integer, double precision, double precision, double precision, double precision, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
	update conceptofijo set monto = $2,
		unidades = $3, 
		monto_restituir = $4, 
		unidades_restituir = $5,
		restituir = $6
	where id_concepto_fijo = $1;

$_$;


ALTER FUNCTION public.actualizar_montos_conceptofijo(integer, double precision, double precision, double precision, double precision, character varying) OWNER TO postgres;

--
-- TOC entry 625 (class 1255 OID 183586)
-- Name: actualizar_rendicionmensual(integer, integer, integer, integer, integer, character varying, character varying, double precision, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_rendicionmensual(integer, integer, integer, integer, integer, character varying, character varying, double precision, integer, character varying, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdEncabezadoRendicionMensual alias for $1;
	pIdUnidadAdministradora alias for $2;
	pIdTrabajador alias for $3;
	pIdConceptoTipoPersonal alias for $4;	
	pIdCuentaPresupuesto alias for $5;
	pCodConcepto alias for $6;
	pCodPresupuesto alias for $7;	
	pMonto alias for $8;
	pQuincena alias for $9;	
	pDistribucion alias for $10;
	pAnio alias for $11;
	
	recTrabajadorEspecifica record;
	curTrabajadorEspecifica cursor (pIdTrabajador int4, pAnio int4, pIdUnidadAdministradora int4) 
		for select te.porcentaje, uel.id_uel_especifica, ue.id_unidad_ejecutora, 
		ua.id_unidad_administradora, uel.categoria_presupuesto, ue.cod_unidad_ejecutora, 
		ua.cod_unidad_administ		
		from trabajadorespecifica te, uelespecifica uel, 
		unidadejecutora ue, unidadadministradora ua, administradorauel auel
		where te.id_trabajador = pIdTrabajador
		and te.id_uel_especifica = uel.id_uel_especifica
		and uel.id_unidad_ejecutora = ue.id_unidad_ejecutora		
		and auel.id_unidad_ejecutora = ue.id_unidad_ejecutora
		and auel.id_unidad_administradora = ua.id_unidad_administradora
		and auel.id_unidad_administradora = pIdUnidadAdministradora
		and te.anio = pAnio;
	
	recConceptoEspecifica record;
	curConceptoEspecifica cursor (pIdConceptoTipoPersonal int4, pAnio int4)
		for select uel.id_uel_especifica, ue.id_unidad_ejecutora, ua.id_unidad_administradora,
		uel.categoria_presupuesto, ue.cod_unidad_ejecutora, ua.cod_unidad_administ
		from conceptoespecifica ce, unidadejecutora ue, uelespecifica uel,
		unidadadministradora ua, administradorauel auel
		where ce.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and ce.id_uel_especifica = uel.id_uel_especifica
		and uel.id_unidad_ejecutora = ue.id_unidad_ejecutora		
		and auel.id_unidad_ejecutora = ue.id_unidad_ejecutora
		and auel.id_unidad_administradora = ua.id_unidad_administradora		
		and ce.anio = pAnio
		limit 1;

	recRendicionMensual record;
	curRendicionMensual cursor(pIdUelEspecifica int4, pIdConceptoTipoPersonal int4,
		pIdEncabezado int4, pQuincena int4)
		for select id_rendicion_mensual 
		from rendicionmensual 
		where id_uel_especifica = pIdUelEspecifica
		and id_encabezado_rendicion_mensual = pIdEncabezado 
		and id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and quincena = pQuincena;
	
	monto float8 := 0;
	id int4 :=0;
	
begin
	--raise notice 'pasa 3';	
	
	if pDistribucion = 'S' then
		open curTrabajadorEspecifica(pIdTrabajador, pAnio, pIdUnidadAdministradora);
		loop
			fetch curTrabajadorEspecifica into recTrabajadorEspecifica;
			exit when not found;
			--raise notice 'pasa 4';
			monto = pMonto * (recTrabajadorEspecifica.porcentaje/100);
			open curRendicionMensual (recTrabajadorEspecifica.id_uel_especifica, 
				pIdConceptoTipoPersonal, pIdEncabezadoRendicionMensual, pQuincena);
			fetch curRendicionMensual into recRendicionMensual;
			if recRendicionMensual.id_rendicion_mensual is not null then
				perform sumar_rendicionmensual
					(recRendicionMensual.id_rendicion_mensual, convert_2_decimal(monto));
			else
				id := last_id_rendicionmensual()+1;
				if id is null then
					id := 1;
				end if;
				perform add_rendicionmensual(
					id,
					pIdUnidadAdministradora,
					pIdEncabezadoRendicionMensual,					
					recTrabajadorEspecifica.id_uel_especifica,
					pIdCuentaPresupuesto,
					recTrabajadorEspecifica.id_unidad_ejecutora,
					pIdConceptoTipoPersonal,
					convert_2_decimal(monto),
					pQuincena,
					recTrabajadorEspecifica.porcentaje,
					recTrabajadorEspecifica.categoria_presupuesto,
					pCodConcepto,
					recTrabajadorEspecifica.cod_unidad_ejecutora,
					pCodPresupuesto);
			end if;
			close curRendicionMensual;
		end loop;
		close curTrabajadorEspecifica;
	else
		--raise notice 'pasa 4';
		open curConceptoEspecifica(pIdTrabajador, pAnio);
		loop
			fetch curConceptoEspecifica into recConceptoEspecifica;
			exit when not found;
			monto = pMonto;
			open curRendicionMensual (recConceptoEspecifica.id_uel_especifica, 
				pIdConceptoTipoPersonal, pIdEncabezadoRendicionMensual, pQuincena);
			fetch curRendicionMensual into recRendicionMensual;
			if recRendicionMensual.id_rendicion_mensual is not null then
				perform sumar_rendicionmensual
					(recRendicionMensual.id_rendicion_mensual, convert_2_decimal(monto));
			else
				id := last_id_rendicionmensual()+1;
				if id is null then
					id := 1;
				end if;
				perform add_rendicionmensual(
					id,
					pIdUnidadAdministradora,
					pIdEncabezadoRendicionMensual,					
					recConceptoEspecifica.id_uel_especifica,
					pIdCuentaPresupuesto,
					recConceptoEspecifica.id_unidad_ejecutora,
					pIdConceptoTipoPersonal,
					convert_2_decimal(monto),
					pQuincena,					
					recConceptoEspecifica.porcentaje,
					recConceptoEspecifica.categoria_presupuesto,
					pCodConcepto,
					recConceptoEspecifica.cod_unidad_ejecutora,					
					pCodPresupuesto);
			end if;
			close curRendicionMensual;
		end loop;
		close curConceptoEspecifica;
	end if;
	
	return 0;

end;

$_$;


ALTER FUNCTION public.actualizar_rendicionmensual(integer, integer, integer, integer, integer, character varying, character varying, double precision, integer, character varying, integer) OWNER TO postgres;

--
-- TOC entry 626 (class 1255 OID 183587)
-- Name: actualizar_resumenmensual(integer, integer, integer, integer, integer, character varying, character varying, double precision, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_resumenmensual(integer, integer, integer, integer, integer, character varying, character varying, double precision, integer, character varying, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdEncabezadoResumenMensual alias for $1;
	pIdUnidadAdministradora alias for $2;
	pIdTrabajador alias for $3;
	pIdConceptoTipoPersonal alias for $4;	
	pIdCuentaPresupuesto alias for $5;
	pCodConcepto alias for $6;
	pCodPresupuesto alias for $7;	
	pMonto alias for $8;
	pQuincena alias for $9;	
	pDistribucion alias for $10;
	pAnio alias for $11;
	
	recTrabajadorEspecifica record;
	curTrabajadorEspecifica cursor (pIdTrabajador int4, pAnio int4, pIdUnidadAdministradora int4) 
		for select te.porcentaje, uel.id_uel_especifica, ue.id_unidad_ejecutora, 
		ua.id_unidad_administradora, uel.categoria_presupuesto, ue.cod_unidad_ejecutora, 
		ua.cod_unidad_administ		
		from trabajadorespecifica te, uelespecifica uel, 
		unidadejecutora ue, unidadadministradora ua, administradorauel auel
		where te.id_trabajador = pIdTrabajador
		and te.id_uel_especifica = uel.id_uel_especifica
		and uel.id_unidad_ejecutora = ue.id_unidad_ejecutora		
		and auel.id_unidad_ejecutora = ue.id_unidad_ejecutora
		and auel.id_unidad_administradora = ua.id_unidad_administradora
		and auel.id_unidad_administradora = pIdUnidadAdministradora
		and te.anio = pAnio;
	
	recConceptoEspecifica record;
	curConceptoEspecifica cursor (pIdConceptoTipoPersonal int4, pAnio int4)
		for select uel.id_uel_especifica, ue.id_unidad_ejecutora, ua.id_unidad_administradora,
		uel.categoria_presupuesto, ue.cod_unidad_ejecutora, ua.cod_unidad_administ
		from conceptoespecifica ce, unidadejecutora ue, uelespecifica uel,
		unidadadministradora ua, administradorauel auel
		where ce.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and ce.id_uel_especifica = uel.id_uel_especifica
		and uel.id_unidad_ejecutora = ue.id_unidad_ejecutora		
		and auel.id_unidad_ejecutora = ue.id_unidad_ejecutora
		and auel.id_unidad_administradora = ua.id_unidad_administradora
		--and auel.id_unidad_administradora = pIdUnidadAdministradora
		and ce.anio = pAnio
		limit 1;

	recResumenMensual record;
	curResumenMensual cursor(pIdUelEspecifica int4, pIdConceptoTipoPersonal int4,
		pIdEncabezado int4, pQuincena int4)
		for select id_resumen_mensual 
		from resumenmensual 
		where id_uel_especifica = pIdUelEspecifica
		and id_encabezado_resumen_mensual = pIdEncabezado 
		and id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and quincena = pQuincena;
	
	monto float8 := 0;
	id int4 :=0;
	
begin
	--raise notice 'pasa 3';	
	
	if pDistribucion = 'S' then
		open curTrabajadorEspecifica(pIdTrabajador, pAnio, pIdUnidadAdministradora);
		loop
			fetch curTrabajadorEspecifica into recTrabajadorEspecifica;
			exit when not found;

			raise notice 'pasa 1.1 ';
			--raise notice 'pIdCTP  %', pIdConceptoTipoPersonal;
			
			monto = pMonto * (recTrabajadorEspecifica.porcentaje/100);

			--raise notice 'monto  %', monto;

			open curResumenMensual (recTrabajadorEspecifica.id_uel_especifica, 
				pIdConceptoTipoPersonal, pIdEncabezadoResumenMensual, pQuincena);
			fetch curResumenMensual into recResumenMensual;
			if recResumenMensual.id_resumen_mensual is not null then
				--raise notice 'pasa 1.2 ';
				--raise notice 'id_resumen_mensual %', recResumenMensual.id_resumen_mensual;
				perform sumar_resumenmensual
					(recResumenMensual.id_resumen_mensual, convert_2_decimal(monto));
			else
				id := last_id_resumenmensual()+1;
				if id is null then
					id := 1;
				end if;
				--raise notice 'pasa 1.3 ';
				
				
				perform add_resumenmensual(
					id,
					pIdUnidadAdministradora,
					pIdEncabezadoResumenMensual,					
					recTrabajadorEspecifica.id_uel_especifica,
					pIdCuentaPresupuesto,
					recTrabajadorEspecifica.id_unidad_ejecutora,
					pIdConceptoTipoPersonal,
					convert_2_decimal(monto),
					pQuincena,
					recTrabajadorEspecifica.porcentaje,
					recTrabajadorEspecifica.categoria_presupuesto,
					pCodConcepto,
					recTrabajadorEspecifica.cod_unidad_ejecutora,
					pCodPresupuesto);
				--raise notice 'pasa 1.5 ';
			end if;
			close curResumenMensual;
		end loop;
		close curTrabajadorEspecifica;
	else
		--raise notice 'pasa 4';
		open curConceptoEspecifica(pIdConceptoTipoPersonal, pAnio);
		loop
			fetch curConceptoEspecifica into recConceptoEspecifica;
			exit when not found;
			--raise notice 'pasa 4.1';
			monto = pMonto;
			open curResumenMensual (recConceptoEspecifica.id_uel_especifica, 
				pIdConceptoTipoPersonal, pIdEncabezadoResumenMensual, pQuincena);
			fetch curResumenMensual into recResumenMensual;
			if recResumenMensual.id_resumen_mensual is not null then
				perform sumar_resumenmensual
					(recResumenMensual.id_resumen_mensual, convert_2_decimal(monto));
			else
				id := last_id_resumenmensual()+1;
				if id is null then
					id := 1;
				end if;
				perform add_resumenmensual(
					id,
					pIdUnidadAdministradora,
					pIdEncabezadoResumenMensual,					
					recConceptoEspecifica.id_uel_especifica,
					pIdCuentaPresupuesto,
					recConceptoEspecifica.id_unidad_ejecutora,
					pIdConceptoTipoPersonal,
					convert_2_decimal(monto),
					pQuincena,					
					100,
					recConceptoEspecifica.categoria_presupuesto,
					pCodConcepto,
					recConceptoEspecifica.cod_unidad_ejecutora,					
					pCodPresupuesto);
			end if;
			close curResumenMensual;
		end loop;
		close curConceptoEspecifica;
	end if;
	
	return 0;

end;

$_$;


ALTER FUNCTION public.actualizar_resumenmensual(integer, integer, integer, integer, integer, character varying, character varying, double precision, integer, character varying, integer) OWNER TO postgres;

--
-- TOC entry 627 (class 1255 OID 183588)
-- Name: actualizar_trabajador_temporal(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_trabajador_temporal(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$  declare  	
   pIdGrupoNomina alias for $1; 	 	
   recTrabajador record; 	
   curTrabajador cursor (pIdGrupoNomina int4) 	
       for select * from trabajadortemporal 
            where id_grupo_nomina = pIdGrupoNomina; 	
 begin 	
    open curTrabajador(pIdGrupoNomina); 
	loop 		
            fetch curTrabajador into recTrabajador;			 
		exit when not found; 	
	      if recTrabajador.lunes_primera = true then 		
	         update trabajador set lunes_primera = 0 
                   where id_trabajador = recTrabajador.id_trabajador; 
              end if;
	      if recTrabajador.lunes_segunda = true then 
		 update trabajador set lunes_segunda = 0 
                    where id_trabajador = recTrabajador.id_trabajador; 
              end if;
	      if recTrabajador.lunes_retroactivo = true then 
		 update trabajador set lunes_retroactivo = 0
                    where id_trabajador = recTrabajador.id_trabajador;	
              end if;	 		
              if recTrabajador.hay_retroactivo = true then 
		 update trabajador set hay_retroactivo = 'N'
                    where id_trabajador = recTrabajador.id_trabajador;	
              end if; 	
      end loop; 
      close curTrabajador; 	
      delete from trabajadortemporal where id_grupo_nomina = pIdGrupoNomina; 
      return 0;
end;  $_$;


ALTER FUNCTION public.actualizar_trabajador_temporal(integer) OWNER TO postgres;

--
-- TOC entry 628 (class 1255 OID 183589)
-- Name: actualizar_trabajador_temporal(integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION actualizar_trabajador_temporal(integer, character varying, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdTrabajador alias for $1;
	pCampo alias for $2;
	pIdGrupoNomina alias for $3;
	
	recTrabajador record;
	curTrabajador cursor (pIdTrabajador int4)
	for select id_trabajador from trabajadortemporal where id_trabajador = pIdTrabajador;
	
begin
	open curTrabajador(pIdTrabajador);
	fetch curTrabajador into recTrabajador;			
	if recTrabajador.id_trabajador is null then
		insert into trabajadortemporal values(pIdTrabajador,false,false,false,false,pIdGrupoNomina);
	end if;
	
	if pCampo = 'L1' then
		update trabajadortemporal set lunes_primera = true
                     where id_trabajador = pIdTrabajador;
      end if;
	if pCampo = 'L2' then
		update trabajadortemporal set lunes_segunda = true
                       where id_trabajador = pIdTrabajador;
      end if;
	if pCampo = 'LR' then
		update trabajadortemporal set lunes_retroactivo = true
                      where id_trabajador = pIdTrabajador;
      end if;
	if pCampo = 'HR' then
		update trabajadortemporal set hay_retroactivo = true
                       where id_trabajador = pIdTrabajador;
	end if;
	close curTrabajador;
	return 0;
end;

$_$;


ALTER FUNCTION public.actualizar_trabajador_temporal(integer, character varying, integer) OWNER TO postgres;

--
-- TOC entry 629 (class 1255 OID 183590)
-- Name: add_aplicartabulador(integer, date, integer, integer, double precision, double precision, double precision, integer, double precision, double precision, double precision, integer, double precision, integer, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_aplicartabulador(integer, date, integer, integer, double precision, double precision, double precision, integer, double precision, double precision, double precision, integer, double precision, integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into aplicartabulador(
id_aplicar_tabulador,
  fecha_proceso,
  grado_actual,
  paso_actual,
  sueldo_actual,
  ajuste_actual,
  compensacion_actual,
  paso_nuevo,
  sueldo_nuevo,
  ajuste_nuevo,
  compensacion_nueva,
  id_trabajador,
monto_retroactivo,
dias_retroactivo,
base_aumento)
values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15)
$_$;


ALTER FUNCTION public.add_aplicartabulador(integer, date, integer, integer, double precision, double precision, double precision, integer, double precision, double precision, double precision, integer, double precision, integer, double precision) OWNER TO postgres;

--
-- TOC entry 630 (class 1255 OID 183591)
-- Name: add_aumentoevaluacion(integer, integer, integer, date, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer, double precision, double precision, double precision, integer, double precision, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_aumentoevaluacion(integer, integer, integer, date, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer, double precision, double precision, double precision, integer, double precision, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into aumentoevaluacion(
id_aumento_evaluacion,
  anio,
  mes,
  fecha_proceso,
  resultado,
  grado,
  paso_anterior,
  sueldo_anterior,
  ajuste_anterior,
  compensacion_anterior,
   otros_anterior,
base_aumento,
sueldo_nuevo,
  compensacion_nueva,
  monto_aumentar,
aumento_definitivo,
paso_nuevo,
  porcentaje_aumentar,
  monto_unico,
ajuste_escala,
  dias_retroactivo,
  monto_retroactivo,
  id_trabajador,
  id_resultado_evaluacion,
  id_tipo_personal)
values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25)
$_$;


ALTER FUNCTION public.add_aumentoevaluacion(integer, integer, integer, date, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer, double precision, double precision, double precision, integer, double precision, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 631 (class 1255 OID 183592)
-- Name: add_aumentoevaluacion(integer, integer, integer, date, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer, double precision, double precision, double precision, integer, double precision, integer, integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_aumentoevaluacion(integer, integer, integer, date, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer, double precision, double precision, double precision, integer, double precision, integer, integer, integer, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
insert into aumentoevaluacion(
id_aumento_evaluacion,
  anio,
  mes,
  fecha_proceso,
  resultado,
  grado,
  paso_anterior,
  sueldo_anterior,
  ajuste_anterior,
  compensacion_anterior,
   otros_anterior,
base_aumento,
sueldo_nuevo,
  compensacion_nueva,
  monto_aumentar,
aumento_definitivo,
paso_nuevo,
  porcentaje_aumentar,
  monto_unico,
ajuste_escala,
  dias_retroactivo,
  monto_retroactivo,
  id_trabajador,
  id_resultado_evaluacion,
  id_tipo_personal,
estatus)
values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26)
$_$;


ALTER FUNCTION public.add_aumentoevaluacion(integer, integer, integer, date, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer, double precision, double precision, double precision, integer, double precision, integer, integer, integer, character varying) OWNER TO postgres;

--
-- TOC entry 632 (class 1255 OID 183593)
-- Name: add_calculobonofinanio(integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_calculobonofinanio(integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer) RETURNS void
    LANGUAGE sql
    AS $_$
	insert into calculobonofinanio
	  (id_calculo_bono_fin_anio,
	  id_trabajador,
	  id_tipo_personal,
	  total_bono,
	  monto_alicuota,
	  bono_sin_alicuota,
	  dias,
	  base_fijo,
	  base_promedio,
	  base_devengado,
	  base_mensual,
	  base_proyectado,
	  base_alicuota,
	  anios_servicio)
	  values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)
	
$_$;


ALTER FUNCTION public.add_calculobonofinanio(integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer) OWNER TO postgres;

--
-- TOC entry 633 (class 1255 OID 183594)
-- Name: add_calculobonofinanio(integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_calculobonofinanio(integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer) RETURNS void
    LANGUAGE sql
    AS $_$

	insert into calculobonofinanio

	  (id_calculo_bono_fin_anio,
	  id_trabajador,
	  id_tipo_personal,
	  total_bono,
	  monto_alicuota,
	  bono_sin_alicuota,
	  dias,
	  base_fijo,
	  base_promedio,
	  base_devengado,
	  base_mensual,
	  base_variable,
	  base_proyectado, bono_vacacional,
	  anios_servicio)
	  values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15)

	

$_$;


ALTER FUNCTION public.add_calculobonofinanio(integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer) OWNER TO postgres;

--
-- TOC entry 634 (class 1255 OID 183595)
-- Name: add_calculoticket(integer, integer, integer, integer, double precision, double precision, integer, integer, double precision, character varying, date, integer, integer, character varying, integer, integer, integer, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_calculoticket(integer, integer, integer, integer, double precision, double precision, integer, integer, double precision, character varying, date, integer, integer, character varying, integer, integer, integer, character varying, character varying, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into calculoticket(
id_calculo_ticket,
  anio,
  mes,
  cantidad_ticket,
denominacion_ticket,
  monto_cobrar,
total_descuentos_ticket,
neto_cantidad_ticket,
neto_monto_cobrar,
  especial,
  fecha_proceso,
anio_proceso,
mes_proceso,
  cod_ticket,
  id_trabajador,
  id_concepto_tipo_personal,
  id_proveedor_ticket,
	cod_dependencia,
	nombre_dependencia,
id_tipo_personal
)
values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20)
$_$;


ALTER FUNCTION public.add_calculoticket(integer, integer, integer, integer, double precision, double precision, integer, integer, double precision, character varying, date, integer, integer, character varying, integer, integer, integer, character varying, character varying, integer) OWNER TO postgres;

--
-- TOC entry 635 (class 1255 OID 183596)
-- Name: add_conceptofijo(integer, integer, integer, integer, double precision, double precision, date, date, date, character varying, character varying, character varying, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_conceptofijo(integer, integer, integer, integer, double precision, double precision, date, date, date, character varying, character varying, character varying, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into conceptofijo
  (id_concepto_fijo,
  id_trabajador,
  id_concepto_tipo_personal,
  id_frecuencia_tipo_personal,
  unidades,
  monto,
  fecha_registro,
  fecha_comienzo,
  fecha_eliminar,
  documento_soporte,
  estatus,
  restituir,
  monto_restituir,
  unidades_restituir,
  monto_anterior) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15)

$_$;


ALTER FUNCTION public.add_conceptofijo(integer, integer, integer, integer, double precision, double precision, date, date, date, character varying, character varying, character varying, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 637 (class 1255 OID 183597)
-- Name: add_conceptofijo_reverso_nomina(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_conceptofijo_reverso_nomina(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---insertar los conceptos fijos eliminados
    ---por tener fecha de eliminacion dentro del
    ---periodo de nomina cerrada
    ---
insert into conceptofijo
  (id_concepto_fijo,
  id_trabajador,
  id_concepto_tipo_personal,
  id_frecuencia_tipo_personal,
  unidades,
  monto,
  fecha_registro,
  fecha_comienzo,
  fecha_eliminar,
  documento_soporte,
  estatus) values ($1,$2,$3,$4,$5,$6,$7,$7,$7,$8,$9)

$_$;


ALTER FUNCTION public.add_conceptofijo_reverso_nomina(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 638 (class 1255 OID 183598)
-- Name: add_conceptoresumen(integer, integer, integer, integer, integer, integer, integer, integer, double precision, double precision, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_conceptoresumen(integer, integer, integer, integer, integer, integer, integer, integer, double precision, double precision, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
insert into conceptoresumen
  (id_concepto_resumen,
  id_trabajador,
  id_concepto_tipo_personal,
  id_frecuencia_tipo_personal,
id_unidad_administradora,
anio,
mes,
numero_nomina,
  unidades,
  monto,
  tipo) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)

$_$;


ALTER FUNCTION public.add_conceptoresumen(integer, integer, integer, integer, integer, integer, integer, integer, double precision, double precision, character varying) OWNER TO postgres;

--
-- TOC entry 639 (class 1255 OID 183599)
-- Name: add_conceptovariable(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_conceptovariable(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
insert into conceptovariable
  (id_concepto_variable,
  id_trabajador,
  id_concepto_tipo_personal,
  id_frecuencia_tipo_personal,
  unidades,
  monto,
  fecha_registro,
  documento_soporte,
  estatus) values ($1,$2,$3,$4,$5,$6,$7,$8,$9)

$_$;


ALTER FUNCTION public.add_conceptovariable(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 640 (class 1255 OID 183600)
-- Name: add_conceptovariable(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_conceptovariable(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into conceptovariable
  (id_concepto_variable,
  id_trabajador,
  id_concepto_tipo_personal,
  id_frecuencia_tipo_personal,
  unidades,
  monto,
  fecha_registro,
  documento_soporte,
  estatus,
  anio_sobretiempo,
  mes_sobretiempo) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)

$_$;


ALTER FUNCTION public.add_conceptovariable(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying, integer, integer) OWNER TO postgres;

--
-- TOC entry 641 (class 1255 OID 183601)
-- Name: add_conceptovariable_reverso_nomina(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_conceptovariable_reverso_nomina(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---insertar los conceptos variables eliminados
    ---por tener fecha de eliminacion dentro del
    ---periodo de nomina cerrada
    ---

insert into conceptovariable
  (id_concepto_variable,
  id_trabajador,
  id_concepto_tipo_personal,
  id_frecuencia_tipo_personal,
  unidades,
  monto,
  fecha_registro,
  documento_soporte,
  estatus,
  anio_sobretiempo,
  mes_sobretiempo) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)

$_$;


ALTER FUNCTION public.add_conceptovariable_reverso_nomina(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying, integer, integer) OWNER TO postgres;

--
-- TOC entry 642 (class 1255 OID 183602)
-- Name: add_cuadroonapre(integer, integer, integer, integer, integer, integer, character varying, character varying, character varying, integer, double precision, double precision, double precision, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_cuadroonapre(integer, integer, integer, integer, integer, integer, character varying, character varying, character varying, integer, double precision, double precision, double precision, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
	insert into cuadroonapre
	(id_cuadro_onapre,
id_organismo,
  id_proyecto,
  id_accion_centralizada,
  id_clasificacion_personal,
  anio,
  tipo_cargo,
  jornada,
  sexo_vacante,
  cantidad,
  sueldo,
  compensacion,
  primas,tipo)
	values
	($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)
	
$_$;


ALTER FUNCTION public.add_cuadroonapre(integer, integer, integer, integer, integer, integer, character varying, character varying, character varying, integer, double precision, double precision, double precision, character varying) OWNER TO postgres;

--
-- TOC entry 643 (class 1255 OID 183603)
-- Name: add_days(date, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_days(date, numeric) RETURNS date
    LANGUAGE plpgsql
    AS $_$
 DECLARE
       feFecha         ALIAS FOR $1;
       inDias          ALIAS FOR $2;
       feFechFin       DATE;
       sbIntervalo     INTERVAL;
       interval__units VARCHAR;
 BEGIN
       interval__units := 'day';
       sbIntervalo := ('''' || inDias || ' ' ||
 interval__units || '''')::INTERVAL;
       SELECT feFecha + sbIntervalo  into feFechFin;
       RETURN feFechFin;
 END;
 $_$;


ALTER FUNCTION public.add_days(date, numeric) OWNER TO postgres;

--
-- TOC entry 644 (class 1255 OID 183604)
-- Name: add_descuentoticket(integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_descuentoticket(integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, character varying, text) RETURNS void
    LANGUAGE sql
    AS $_$
	insert into descuentoticket
	  (id_descuento_ticket,
	id_trabajador,
	anio,
	mes ,
	referencia_ticket,
	referencia_embargo,
	referencia_ausencia,
	descuento_ausencia,
	descuento_reposo,
	descuento_permiso,
	descuento_vacaciones,
	descuento_otros,
	pagado,
	observaciones)
	  values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)
	
$_$;


ALTER FUNCTION public.add_descuentoticket(integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, character varying, text) OWNER TO postgres;

--
-- TOC entry 645 (class 1255 OID 183605)
-- Name: add_historicobaseislr(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_historicobaseislr(integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
	insert into historicobaseislr
	  (id_grupo_nomina,
	  id_tipo_personal,
	   numero_nomina,
	   id_nomina_especial,
	   anio,
	   mes,
	   semana_quincena,
	   id_trabajador,
	   porcentaje,
	   asignaciones,
	   deducciones
	  )
		select distinct un.id_grupo_nomina,
		un.id_tipo_personal,
		un.numero_nomina,
		un.id_nomina_especial,
		hn.anio,
		hn.mes,
		hn.semana_quincena,
		un.id_trabajador, 
		max(CASE WHEN c.cod_concepto='9999' THEN un.unidades ELSE 0 END) as porcentaje,
		sum(monto_asigna) as asignaciones,
		sum(CASE WHEN c.cod_concepto='9999' THEN 0 ELSE un.monto_deduce END) as deducciones
		from ultimanomina un, historiconomina hn, conceptotipopersonal ctp, concepto c  
		where un.id_trabajador = hn.id_trabajador 
		and un.id_grupo_nomina = hn.id_grupo_nomina
		and hn.numero_nomina = un.numero_nomina
		and un.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and (c.gravable = 'S' or c.cod_concepto='9999')
		and hn.id_grupo_nomina = $1
		and un.numero_nomina = $2 
		and hn.anio = $3 
		and hn.mes = $4 
		and hn.semana_quincena = $5 
		group by un.id_grupo_nomina,un.id_tipo_personal, 
		un.numero_nomina,un.id_nomina_especial,
		hn.anio,hn.mes,hn.semana_quincena,
		un.id_trabajador; 
	  
$_$;


ALTER FUNCTION public.add_historicobaseislr(integer, integer, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 646 (class 1255 OID 183606)
-- Name: add_historiconomina(integer, integer, integer, integer, integer, integer, date, integer, integer, integer, integer, character varying, integer, character varying, character varying, character varying, character varying, integer, integer, integer, integer, integer, integer, character varying, character varying, character varying, character varying, integer, integer, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_historiconomina(integer, integer, integer, integer, integer, integer, date, integer, integer, integer, integer, character varying, integer, character varying, character varying, character varying, character varying, integer, integer, integer, integer, integer, integer, character varying, character varying, character varying, character varying, integer, integer, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
insert into historiconomina
  (id_historico_nomina,
  id_trabajador,
  numero_nomina,
  anio,
  mes,
  semana_quincena,
  fecha,
  id_dependencia,
  id_cargo,
  numero_registro,
  codigo_nomina,
  forma_pago,
  id_banco,
  tipo_cta_nomina,
  cuenta_nomina,
  estatus,
  situacion,
  id_tipo_personal,
  id_grupo_nomina,
  id_nomina_especial,
  id_lugar_pago,
  id_unidad_ejecutora,
  id_unidad_administradora,
  cod_dependencia,
  cod_cargo,
  cod_unidad_ejecutora,
  cod_unidad_administ,
  id_sede,
  id_region,
  cod_sede,
  cod_region) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,
			$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,
			$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,31)

$_$;


ALTER FUNCTION public.add_historiconomina(integer, integer, integer, integer, integer, integer, date, integer, integer, integer, integer, character varying, integer, character varying, character varying, character varying, character varying, integer, integer, integer, integer, integer, integer, character varying, character varying, character varying, character varying, integer, integer, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 650 (class 1255 OID 183607)
-- Name: add_historiconomina(integer, integer, integer, integer, integer, integer, date, integer, integer, integer, integer, character varying, integer, character varying, character varying, character varying, character varying, integer, integer, integer, integer, integer, integer, character varying, character varying, character varying, character varying, integer, integer, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_historiconomina(integer, integer, integer, integer, integer, integer, date, integer, integer, integer, integer, character varying, integer, character varying, character varying, character varying, character varying, integer, integer, integer, integer, integer, integer, character varying, character varying, character varying, character varying, integer, integer, character varying, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$ 
insert into historiconomina   (id_historico_nomina,   id_trabajador,   numero_nomina,   anio,   mes, 
         semana_quincena,   fecha,   id_dependencia,   id_cargo,   numero_registro,   codigo_nomina,
         forma_pago,   id_banco,   tipo_cta_nomina,   cuenta_nomina,   estatus,   situacion,  
         id_tipo_personal,   id_grupo_nomina,   id_nomina_especial,   id_lugar_pago,   
         id_unidad_ejecutora,   id_unidad_administradora,   cod_dependencia,   cod_cargo,   
         cod_unidad_ejecutora,   cod_unidad_administ,   id_sede,   id_region,   cod_sede,   
         cod_region,codigo_patronal) 
         values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,
                 $17,$18,$19,$20, $21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32)  
$_$;


ALTER FUNCTION public.add_historiconomina(integer, integer, integer, integer, integer, integer, date, integer, integer, integer, integer, character varying, integer, character varying, character varying, character varying, character varying, integer, integer, integer, integer, integer, integer, character varying, character varying, character varying, character varying, integer, integer, character varying, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 651 (class 1255 OID 183608)
-- Name: add_historicoquincena(integer, integer, integer, integer, integer, integer, integer, integer, date, double precision, double precision, double precision, character varying, character varying, integer, integer, integer, integer, integer, double precision, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_historicoquincena(integer, integer, integer, integer, integer, integer, integer, integer, date, double precision, double precision, double precision, character varying, character varying, integer, integer, integer, integer, integer, double precision, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into historicoquincena
  (id_historico_quincena,
  id_trabajador,
  id_concepto_tipo_personal,
  id_frecuencia_tipo_personal,
  numero_nomina,
  anio,
  mes,
  semana_quincena,
  fecha,
  unidades,
  monto_asigna,
  monto_deduce,
  origen,
  documento_soporte,
  id_tipo_personal,
  id_grupo_nomina,
  id_nomina_especial,
  id_historico_nomina,
  id_concepto,
  monto_aporte,
  id_concepto_aporte) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,
			$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21)

$_$;


ALTER FUNCTION public.add_historicoquincena(integer, integer, integer, integer, integer, integer, integer, integer, date, double precision, double precision, double precision, character varying, character varying, integer, integer, integer, integer, integer, double precision, integer) OWNER TO postgres;

--
-- TOC entry 652 (class 1255 OID 183609)
-- Name: add_historicosemana(integer, integer, integer, integer, integer, integer, integer, integer, date, double precision, double precision, double precision, character varying, character varying, integer, integer, integer, integer, integer, double precision, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_historicosemana(integer, integer, integer, integer, integer, integer, integer, integer, date, double precision, double precision, double precision, character varying, character varying, integer, integer, integer, integer, integer, double precision, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into historicosemana
  (id_historico_semana,
  id_trabajador,
  id_concepto_tipo_personal,
  id_frecuencia_tipo_personal,
  numero_nomina,
  anio,
  mes,
  semana_quincena,
  fecha,
  unidades,
  monto_asigna,
  monto_deduce,
  origen,
  documento_soporte,
  id_tipo_personal,
  id_grupo_nomina,
  id_nomina_especial,
  id_historico_nomina,
  id_concepto,
  monto_aporte,
  id_concepto_aporte) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,
			$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21)

$_$;


ALTER FUNCTION public.add_historicosemana(integer, integer, integer, integer, integer, integer, integer, integer, date, double precision, double precision, double precision, character varying, character varying, integer, integer, integer, integer, integer, double precision, integer) OWNER TO postgres;

--
-- TOC entry 653 (class 1255 OID 183610)
-- Name: add_historicoticket(integer, integer, integer, integer, double precision, double precision, integer, integer, double precision, character varying, date, integer, integer, character varying, integer, integer, integer, character varying, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_historicoticket(integer, integer, integer, integer, double precision, double precision, integer, integer, double precision, character varying, date, integer, integer, character varying, integer, integer, integer, character varying, character varying, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into historicoticket(
id_historico_ticket,
  anio,
  mes,
  cantidad_ticket,
denominacion_ticket,
  monto_cobrar,
total_descuentos_ticket,
neto_cantidad_ticket,
neto_monto_cobrar,
  especial,
  fecha_proceso,
anio_proceso,
mes_proceso,
  cod_ticket,
  id_trabajador,
  id_concepto_tipo_personal,
  id_proveedor_ticket,
	cod_dependencia,
	nombre_dependencia,
id_dependencia,
id_tipo_personal
)
values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21)
$_$;


ALTER FUNCTION public.add_historicoticket(integer, integer, integer, integer, double precision, double precision, integer, integer, double precision, character varying, date, integer, integer, character varying, integer, integer, integer, character varying, character varying, integer, integer) OWNER TO postgres;

--
-- TOC entry 654 (class 1255 OID 183611)
-- Name: add_interesadicional(integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_interesadicional(integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into interesadicional
  (
  id_interes_adicional,
  id_trabajador,
  anio,
  mes,
  dias,
  tasa_interes,
  monto_capital,
  monto_interes_mensual,
  monto_interes_acumulado,
  monto_anticipo,
  monto_anticipo_acumulado,
  saldo_al_18061997
) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)

$_$;


ALTER FUNCTION public.add_interesadicional(integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 655 (class 1255 OID 183612)
-- Name: add_interesnuevoregimen(integer, integer, integer, integer, double precision, double precision, double precision, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_interesnuevoregimen(integer, integer, integer, integer, double precision, double precision, double precision, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into interesnuevoregimen
  (id_interes_nuevo_regimen,
  id_trabajador, 
  anio,
  mes,
  dias,
  tasa_interes,
  monto_prestaciones,
  monto_adicional,
  dias_mensuales,
  dias_adicionales,
  monto_prestaciones_acumuladas,
  monto_capital,
  monto_interes_mensual,
  monto_interes_acumulado,
  monto_anticipo,
  monto_anticipo_acumulado,
  monto_fideicomiso,
  monto_fideicomiso_acumulado)
 values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18)

$_$;


ALTER FUNCTION public.add_interesnuevoregimen(integer, integer, integer, integer, double precision, double precision, double precision, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 656 (class 1255 OID 183613)
-- Name: add_interesviejoregimen(integer, integer, integer, integer, double precision, double precision, double precision, integer, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_interesviejoregimen(integer, integer, integer, integer, double precision, double precision, double precision, integer, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into interesviejoregimen
  (id_interes_viejo_regimen,
  id_trabajador, 
  anio,
  mes,
  dias,
  sueldo_integral,
  tasa_interes,
  anios_servicio,
  monto_prestaciones,
  monto_capital,
  monto_interes_mensual,
  monto_interes_acumulado,
  monto_anticipo,monto_anticipo_acumulado) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)

$_$;


ALTER FUNCTION public.add_interesviejoregimen(integer, integer, integer, integer, double precision, double precision, double precision, integer, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 657 (class 1255 OID 183614)
-- Name: add_liquidacioninteresadicional(integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_liquidacioninteresadicional(integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into liquidacioninteresadicional
  (
  id_liquidacion_interes_adicional,
  id_trabajador,
  anio,
  mes,
  dias,
  tasa_interes,
  monto_capital,
  monto_interes_mensual,
  monto_interes_acumulado,
  monto_anticipo,
  monto_anticipo_acumulado,
  saldo_al_18061997
) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)

$_$;


ALTER FUNCTION public.add_liquidacioninteresadicional(integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 658 (class 1255 OID 183615)
-- Name: add_liquidacioninteresnuevoregimen(integer, integer, integer, integer, double precision, double precision, double precision, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_liquidacioninteresnuevoregimen(integer, integer, integer, integer, double precision, double precision, double precision, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into liquidacioninteresnuevoregimen
  (id_liquidacion_interes_nuevo_regimen,
  id_trabajador, 
  anio,
  mes,
  dias,
  tasa_interes,
  monto_prestaciones,
  monto_adicional,
  dias_mensuales,
  dias_adicionales,
  monto_prestaciones_acumuladas,
  monto_capital,
  monto_interes_mensual,
  monto_interes_acumulado,
  monto_anticipo,
  monto_anticipo_acumulado,
  monto_fideicomiso,
  monto_fideicomiso_acumulado)
 values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18)

$_$;


ALTER FUNCTION public.add_liquidacioninteresnuevoregimen(integer, integer, integer, integer, double precision, double precision, double precision, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 659 (class 1255 OID 183616)
-- Name: add_liquidacioninteresviejoregimen(integer, integer, integer, integer, double precision, double precision, double precision, integer, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_liquidacioninteresviejoregimen(integer, integer, integer, integer, double precision, double precision, double precision, integer, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into liquidacioninteresviejoregimen
  (id_liquidacion_interes_viejo_regimen,
  id_trabajador, 
  anio,
  mes,
  dias,
  sueldo_integral,
  tasa_interes,
  anios_servicio,
  monto_prestaciones,
  monto_capital,
  monto_interes_mensual,
  monto_interes_acumulado,
  monto_anticipo,monto_anticipo_acumulado) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)

$_$;


ALTER FUNCTION public.add_liquidacioninteresviejoregimen(integer, integer, integer, integer, double precision, double precision, double precision, integer, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 660 (class 1255 OID 183617)
-- Name: add_liquidacionprestacionesmensuales(integer, integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_liquidacionprestacionesmensuales(integer, integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
	insert into liquidacionprestacionesmensuales
	(id_liquidacion_prestaciones_mensuales,
  id_tipo_personal,
  id_trabajador,
  anio,
  mes,
  dias_mensuales,
  dias_adicionales,
  base_mensual,
  base_adicional,
  monto_prestaciones,
  monto_adicional,
  fideicomiso,
  dias_cancelados )
	values
	($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
	
$_$;


ALTER FUNCTION public.add_liquidacionprestacionesmensuales(integer, integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 647 (class 1255 OID 183618)
-- Name: add_liquidacionresumennuevoregimen(integer, integer, double precision, double precision, double precision, double precision, integer, integer, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_liquidacionresumennuevoregimen(integer, integer, double precision, double precision, double precision, double precision, integer, integer, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into liquidacionresumennuevoregimen
  (  id_liquidacion_resumen_nuevo_regimen,
  id_trabajador,
  monto_prestaciones_acumuladas,
  monto_interes_acumulado,
  monto_anticipo_acumulado,
  monto_fideicomiso_acumulado,
  dias_mensuales,dias_adicionales,
  monto_fraccion_adicional,
  monto_fraccion_mensual)
  values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)

$_$;


ALTER FUNCTION public.add_liquidacionresumennuevoregimen(integer, integer, double precision, double precision, double precision, double precision, integer, integer, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 662 (class 1255 OID 183619)
-- Name: add_liquidacionresumenviejoregimen(integer, integer, double precision, integer, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_liquidacionresumenviejoregimen(integer, integer, double precision, integer, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into liquidacionresumenviejoregimen
  (  id_liquidacion_resumen_viejo_regimen,
  id_trabajador,
  sueldo_transferencia,
  aniosservicios,
  monto_prestaciones,
  monto_interes_acumulado,
  monto_anticipo_acumulado,
  monto_transferencia,
  saldo_al_18061997,
  monto_interes_adicional) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)

$_$;


ALTER FUNCTION public.add_liquidacionresumenviejoregimen(integer, integer, double precision, integer, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 663 (class 1255 OID 183620)
-- Name: add_months(date, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_months(date, numeric) RETURNS date
    LANGUAGE plpgsql
    AS $_$
DECLARE
       feFecha ALIAS FOR $1;
       inMeses ALIAS FOR $2;
       feFechFin       DATE;
       sbIntervalo     INTERVAL;
       interval__units VARCHAR;
 BEGIN
       interval__units := 'month';
       sbIntervalo := ('''' || inMeses || ' ' ||
 interval__units || '''')::INTERVAL;
       SELECT feFecha + sbIntervalo  into feFechFin;
       RETURN feFechFin;
 END;
 $_$;


ALTER FUNCTION public.add_months(date, numeric) OWNER TO postgres;

--
-- TOC entry 664 (class 1255 OID 183621)
-- Name: add_planillaarc(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_planillaarc(integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
 insert into planillaarc
(id_planilla_arc,id_trabajador,anio) values ($1,$2,$3)


$_$;


ALTER FUNCTION public.add_planillaarc(integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 665 (class 1255 OID 183622)
-- Name: add_prestacionesmensuales(integer, integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_prestacionesmensuales(integer, integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
	insert into prestacionesmensuales
	(id_prestaciones_mensuales,
         id_tipo_personal,
         id_trabajador,
         anio,
         mes,
         dias_mensuales,
         dias_adicionales,
         base_mensual,
         base_adicional,
         monto_prestaciones,
         monto_adicional,
         fideicomiso,
         dias_cancelados)
	values
	($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
	
$_$;


ALTER FUNCTION public.add_prestacionesmensuales(integer, integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 666 (class 1255 OID 183623)
-- Name: add_rendicionmensual(integer, integer, integer, integer, integer, integer, integer, double precision, integer, double precision, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_rendicionmensual(integer, integer, integer, integer, integer, integer, integer, double precision, integer, double precision, character varying, character varying, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
insert into rendicionmensual(
id_rendicion_mensual,
  id_unidad_administradora,
id_encabezado_rendicion_mensual,
  id_uel_especifica,
  id_cuenta_presupuesto,
  id_unidad_ejecutora,
  id_concepto_tipo_personal,
  monto,
  quincena,
  porcentaje,
  categoria_presupuesto,
  cod_concepto,
  cod_unidad_ejecutora,
  cod_presupuesto)
values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)
$_$;


ALTER FUNCTION public.add_rendicionmensual(integer, integer, integer, integer, integer, integer, integer, double precision, integer, double precision, character varying, character varying, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 667 (class 1255 OID 183624)
-- Name: add_resumenmensual(integer, integer, integer, integer, integer, integer, integer, double precision, integer, double precision, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_resumenmensual(integer, integer, integer, integer, integer, integer, integer, double precision, integer, double precision, character varying, character varying, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
insert into resumenmensual(
id_resumen_mensual,
  id_unidad_administradora,
id_encabezado_resumen_mensual,
  id_uel_especifica,
  id_cuenta_presupuesto,
  id_unidad_ejecutora,
  id_concepto_tipo_personal,
  monto,
  quincena,
  porcentaje,
  categoria_presupuesto,
  cod_concepto,
  cod_unidad_ejecutora,
  cod_presupuesto)
values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)
$_$;


ALTER FUNCTION public.add_resumenmensual(integer, integer, integer, integer, integer, integer, integer, double precision, integer, double precision, character varying, character varying, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 668 (class 1255 OID 183625)
-- Name: add_resumennuevoregimen(integer, integer, double precision, double precision, double precision, double precision, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_resumennuevoregimen(integer, integer, double precision, double precision, double precision, double precision, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into resumennuevoregimen
  (  id_resumen_nuevo_regimen,
  id_trabajador,
  monto_prestaciones_acumuladas,
  monto_interes_acumulado,
  monto_anticipo_acumulado,
  monto_fideicomiso_acumulado,
  dias_mensuales,dias_adicionales) values ($1,$2,$3,$4,$5,$6,$7,$8)

$_$;


ALTER FUNCTION public.add_resumennuevoregimen(integer, integer, double precision, double precision, double precision, double precision, integer, integer) OWNER TO postgres;

--
-- TOC entry 669 (class 1255 OID 183626)
-- Name: add_resumenviejoregimen(integer, integer, double precision, integer, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_resumenviejoregimen(integer, integer, double precision, integer, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into resumenviejoregimen
  (  id_resumen_viejo_regimen,
  id_trabajador,
  sueldo_transferencia,
  aniosservicios,
  monto_prestaciones,
  monto_interes_acumulado,
  monto_anticipo_acumulado,
  monto_transferencia,
  saldo_al_18061997) values ($1,$2,$3,$4,$5,$6,$7,$8,$9)

$_$;


ALTER FUNCTION public.add_resumenviejoregimen(integer, integer, double precision, integer, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 670 (class 1255 OID 183627)
-- Name: add_seguridadespecial(integer, integer, integer, date, date, integer, date, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_seguridadespecial(integer, integer, integer, date, date, integer, date, character varying, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into 
seguridadespecial
(
  id_seguridad_especial,
  anio,
  mes,
  fecha_inicio,
  fecha_fin ,
  semana_quincena,
  fecha_proceso ,
  usuario,
  id_grupo_nomina,
  id_nomina_especial) 
	values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
$_$;


ALTER FUNCTION public.add_seguridadespecial(integer, integer, integer, date, date, integer, date, character varying, integer, integer) OWNER TO postgres;

--
-- TOC entry 671 (class 1255 OID 183628)
-- Name: add_seguridadinteresadicional(integer, integer, integer, integer, double precision, date, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_seguridadinteresadicional(integer, integer, integer, integer, double precision, date, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
insert into 
seguridadinteresadicional
(
  id_seguridad_interes_adicional,
  id_tipo_personal ,
  anio,
  mes,
  tasa_aplicada,
  fecha_proceso,
  usuario) 
	values ($1,$2,$3,$4,$5,$6,$7)
$_$;


ALTER FUNCTION public.add_seguridadinteresadicional(integer, integer, integer, integer, double precision, date, character varying) OWNER TO postgres;

--
-- TOC entry 672 (class 1255 OID 183629)
-- Name: add_seguridadnuevoregimen(integer, integer, integer, integer, double precision, date, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_seguridadnuevoregimen(integer, integer, integer, integer, double precision, date, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
insert into 
seguridadnuevoregimen
(
  id_seguridad_nuevo_regimen,
  id_tipo_personal ,
  anio,
  mes,
  tasa_aplicada,
  fecha_proceso,
  usuario) 
	values ($1,$2,$3,$4,$5,$6,$7)
$_$;


ALTER FUNCTION public.add_seguridadnuevoregimen(integer, integer, integer, integer, double precision, date, character varying) OWNER TO postgres;

--
-- TOC entry 673 (class 1255 OID 183630)
-- Name: add_seguridadordinaria(integer, integer, integer, date, date, integer, date, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_seguridadordinaria(integer, integer, integer, date, date, integer, date, character varying, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into 
seguridadordinaria
(
  id_seguridad_ordinaria,
  anio,
  mes,
  fecha_inicio,
  fecha_fin ,
  semana_quincena,
  fecha_proceso ,
  usuario,
  id_grupo_nomina ) 
	values ($1,$2,$3,$4,$5,$6,$7,$8,$9)
$_$;


ALTER FUNCTION public.add_seguridadordinaria(integer, integer, integer, date, date, integer, date, character varying, integer) OWNER TO postgres;

--
-- TOC entry 674 (class 1255 OID 183631)
-- Name: add_seguridadticket(integer, integer, integer, character varying, date, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_seguridadticket(integer, integer, integer, character varying, date, character varying, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into 
seguridadticket
(
   id_seguridad_ticket,
  anio,
  mes,
  especial,
  fecha_proceso,
  usuario,
  id_grupo_ticket) 
	values ($1,$2,$3,$4,$5,$6,$7)
$_$;


ALTER FUNCTION public.add_seguridadticket(integer, integer, integer, character varying, date, character varying, integer) OWNER TO postgres;

--
-- TOC entry 675 (class 1255 OID 183632)
-- Name: add_ultimanomina(integer, integer, integer, integer, integer, double precision, double precision, double precision, character varying, character varying, integer, integer, integer, integer, double precision, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_ultimanomina(integer, integer, integer, integer, integer, double precision, double precision, double precision, character varying, character varying, integer, integer, integer, integer, double precision, integer) RETURNS void
    LANGUAGE sql
    AS $_$
	insert into ultimanomina
	(id_ultima_nomina,
	id_trabajador,
	id_concepto_tipo_personal,
	id_frecuencia_tipo_personal,
	numero_nomina,
	unidades,
	monto_asigna,
	monto_deduce,
	origen,
	documento_soporte,
	id_tipo_personal,
	id_grupo_nomina,
	id_nomina_especial,
	id_concepto,
	monto_aporte,
	id_concepto_aporte)
	values
	($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16)
	
$_$;


ALTER FUNCTION public.add_ultimanomina(integer, integer, integer, integer, integer, double precision, double precision, double precision, character varying, character varying, integer, integer, integer, integer, double precision, integer) OWNER TO postgres;

--
-- TOC entry 676 (class 1255 OID 183633)
-- Name: add_ultimaprenomina(integer, integer, integer, integer, integer, double precision, double precision, double precision, character varying, character varying, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_ultimaprenomina(integer, integer, integer, integer, integer, double precision, double precision, double precision, character varying, character varying, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
	insert into ultimaprenomina
	(id_ultima_prenomina,
	id_trabajador,
	id_concepto_tipo_personal,
	id_frecuencia_tipo_personal,
	numero_nomina,
	unidades,
	monto_asigna,
	monto_deduce,
	origen,
	documento_soporte,
	id_tipo_personal,
	id_grupo_nomina,
	id_nomina_especial)
	values
	($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
	
$_$;


ALTER FUNCTION public.add_ultimaprenomina(integer, integer, integer, integer, integer, double precision, double precision, double precision, character varying, character varying, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 678 (class 1255 OID 183634)
-- Name: add_years(date, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION add_years(date, numeric) RETURNS date
    LANGUAGE plpgsql
    AS $_$
DECLARE
       feFecha ALIAS FOR $1;
       inAnios ALIAS FOR $2;
       feFechFin       DATE;
       sbIntervalo     INTERVAL;
       interval__units VARCHAR;
BEGIN
       interval__units := 'year';
       sbIntervalo := ('''' || inAnios || ' ' ||
interval__units || '''')::INTERVAL;
       SELECT feFecha + sbIntervalo  into feFechFin;
       RETURN feFechFin;
END;
$_$;


ALTER FUNCTION public.add_years(date, numeric) OWNER TO postgres;

--
-- TOC entry 679 (class 1255 OID 183635)
-- Name: aplicar_nuevo_clasificador_cargo_01052008(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION aplicar_nuevo_clasificador_cargo_01052008(character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare 
	pIdTipoPersonal alias for $1;	
	pIdTabuladorActual alias for $2;	
	pIdTabuladorNuevo alias for $3;	
	--pProceso alias for $4;
	--pUsuario alias for $5;	
	--pFecha alias for $6;
	--pMantenerPaso alias for $7;
	--pPeriodicidad alias for $8;
	

begin

-- INSERT EN TRAYECTORIA POR TIPO DE PERSONAL 


--delete from trayectoria 
 -- where numero_movimiento = 9999
  --  and fecha_preparacion = '2008-05-01'
  --  and anio_preparacion = 2008 
  --  and cedula in (select tr9.cedula from trabajador tr9
   --                              where  tr9.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
     --                                                                          where tp.cod_tipo_personal = pIdTipoPersonal));    -->  CODIGO DE TIPO PERSONAL 


insert into trayectoria 
select (tr.id_trabajador + 99999), tr.cedula, pr.primer_apellido, pr.segundo_apellido, pr.primer_nombre, pr.segundo_nombre, 2008, '2008-05-01',
  0, 0, 9999, 0, ' ', o.nombre_organismo,0, '2008-05-01','2008-05-01','00101', es.nombre, cu.nombre,' ','01','REGION CENTRALIZADA',
  dp.cod_dependencia, dp.nombre,'000','Cambio Tabulador Segun G.O 38.921',' ', o.nombre_organismo,0, mc.cod_manual_cargo,
  ca.cod_cargo,ca.descripcion_cargo, cp.id_clasificacion_personal, cat.desc_categoria, cp.id_clasificacion_personal, cat.desc_categoria,
  ' ',ca.grado, tr.paso, tr.codigo_nomina, 0,0,0,0,0,0,0,0,0,
  tr.sueldo_basico, sp.promedio_compensacion,0,0,0,0,0,sp.promedio_primasc,sp.promedio_primast, pr.id_personal,0,' ','2008-05-01',
  'Cambio Tabulador Segun G.O 38.921','S',' ','promafe','1',o.cod_organismo, '2008-05-01'
 
   from trabajador tr, personal pr, sueldopromedio sp, dependencia dp, organismo o, sede se, ciudad cu, estado es, 
      cargo ca, manualcargo mc, clasificacionpersonal cp, tipopersonal tp, categoriapersonal cat
                                             where tr.id_personal  = pr.id_personal
                                                and sp.id_trabajador = tr.id_trabajador 
                                                and tr.id_tipo_personal = tp.id_tipo_personal
                                                and tp.cod_tipo_personal = pIdTipoPersonal                       -->  CODIGO DE TIPO PERSONAL 
                                                and cp.id_clasificacion_personal = tp.id_clasificacion_personal
                                                and cat.id_categoria_personal = cp.id_categoria_personal
                                                and tr.estatus ='A'
                                                and tr.id_dependencia = dp.id_dependencia 
                                                and tr.id_cargo = ca.id_cargo
                                                and ca.id_manual_cargo = mc.id_manual_cargo
                                                and dp.id_organismo = o.id_organismo
                                                and dp.id_sede      = se.id_sede
                                                and se.id_ciudad    = cu.id_ciudad
                                                and cu.id_estado    = es.id_estado
                                                and mc.id_tabulador = (select ta.id_tabulador from tabulador ta
                                                                                   where ta.cod_tabulador = pIdTabuladorActual); ---> CODIGO DE TABULADOR VIEJO


raise notice 'Salio de trayectoria ';
-- Salio de  TRAYECTORIA POR TIPO DE PERSONAL 

 -- SCRIP PARA APLICAR NUEVO TABULADOR 


-- FUNCION PARA BACHILLER 1, MONTO = 799

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 799 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN BACHILLER I';

 update trabajador set sueldo_basico = 799, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 1                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =1                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 1                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =1                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 1                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =1                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado between '1' and '6'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico/2) from trabajador tr  --> PERIODICIDAD DE PAGO 2(quincenal), 1(MENSUAL)
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0001'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  799);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 799      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 799      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA BACHILLER 1, MONTO = 799


-- FUNCION PARA BACHILLER II, MONTO = 1165

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 1165 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN BACHILLER II';

 update trabajador set sueldo_basico = 1165, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 2                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 2                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 2                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 2                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 2                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 2                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado between '7' and '10'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico/2) from trabajador tr  --> PERIODICIDAD DE PAGO 2(quincenal), 1(MENSUAL)
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0001'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  1165);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 1165      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 1165      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA BACHILLER II, MONTO = 1165

-- FUNCION PARA BACHILLER III, MONTO = 1324

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 1324 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN BACHILLER III';

 update trabajador set sueldo_basico = 1324, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 3                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 3                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 3                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 3                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 3                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 3                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado between '11' and '14'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico/2) from trabajador tr  --> PERIODICIDAD DE PAGO 2(quincenal), 1(MENSUAL)
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0001'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  1324);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 1324      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 1324      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA BACHILLER III, MONTO = 1324

-- FUNCION PARA TSU I, MONTO = 1394

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 1394 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN TECNICO I';

 update trabajador set sueldo_basico = 1394, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 4                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 4                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 4                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 4                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 4                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 4                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado between '15' and '16'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico/2) from trabajador tr  --> PERIODICIDAD DE PAGO 2(quincenal), 1(MENSUAL)
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0001'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  1394);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 1394      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 1394      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA TECNICO I, MONTO = 1394

-- FUNCION PARA TSU II, MONTO = 1440

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 1440 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN TECNICO II';

--- FIN FUNCION PARA TECNICO   II, MONTO = 1440

-- FUNCION PARA PROFESIONAL I, MONTO = 1483

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 1483 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN PROFESIONAL  I';

 update trabajador set sueldo_basico = 1483, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 6                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 6                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 6                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 6                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 6                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 6                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
			where  car.grado between '17' and '20'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico/2) from trabajador tr  --> PERIODICIDAD DE PAGO 2(quincenal), 1(MENSUAL)
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0001'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  1483);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 1483      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 1483      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA PROFESIONAL  II, MONTO = 1483

-- FUNCION PARA PROFESIONAL II, MONTO = 1566

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 1566 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN PROFESIONAL  II';

 update trabajador set sueldo_basico = 1566, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 7                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 7                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 7                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 7                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 7                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 7                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
			where  car.grado between '21' and '23'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico/2) from trabajador tr  --> PERIODICIDAD DE PAGO 2(quincenal), 1(MENSUAL)
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0001'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  1566);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 1566      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 1566      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA PROFESIONAL II, MONTO = 1566

-- FUNCION PARA PROFESIONAL III, MONTO = 1594

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 1566 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN PROFESIONAL  III';

 update trabajador set sueldo_basico = 1594, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 8                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 8                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 8                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 8                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 8                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 8                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
			where  car.grado between '24' and '26'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico/2) from trabajador tr  --> PERIODICIDAD DE PAGO 2(quincenal), 1(MENSUAL)
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0001'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  1594);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 1594      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 1594      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA PROFESIONAL III, MONTO = 1594



-- CAMBIO DE CARGO PARA LOS PUESTOS VACANTES, EN REGISTRO CARGOS

--VACANTES BACHILLER I

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 1                       --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =1                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado between '1' and '6'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));

--VACANTES BACHILLER II

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 2                       --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =2                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado between '7' and '10'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));


--VACANTES BACHILLER III


update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 3                      --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =3                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado between '11' and '14'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));




--VACANTES TECNICOS I


update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 4                      --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =4                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado between '15' and '16'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));

--VACANTES TECNICOS II

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 5                      --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =5                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado = '17'                  --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));




--VACANTES PROFESIONAL I

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 6                      --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =6                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where   car.grado between '18' and '20'                  --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));


--VACANTES PROFESIONAL II

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 7                     --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =7                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where   car.grado between '21' and '23'                  --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));

--VACANTES PROFESIONAL IIi

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 8                     --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =8                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where   car.grado between '24' and '26'                  --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));


--fin de cargo vacantes


raise notice 'sALIO';
	return 1;
end;
$_$;


ALTER FUNCTION public.aplicar_nuevo_clasificador_cargo_01052008(character varying, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 680 (class 1255 OID 183637)
-- Name: aplicar_nuevo_clasificador_obrero_01052008(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION aplicar_nuevo_clasificador_obrero_01052008(character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare 
	pIdTipoPersonal alias for $1;	
	pIdTabuladorActual alias for $2;	
	pIdTabuladorNuevo alias for $3;	
	

begin

-- INSERT EN TRAYECTORIA POR TIPO DE PERSONAL 



insert into trayectoria 
select (tr.id_trabajador + 99999), tr.cedula, pr.primer_apellido, pr.segundo_apellido, pr.primer_nombre, pr.segundo_nombre, 2008, '2008-05-01',
  0, 0, 9999, 0, ' ', o.nombre_organismo,0, '2008-05-01','2008-05-01','00101', es.nombre, cu.nombre,' ','01','REGION CENTRALIZADA',
  dp.cod_dependencia, dp.nombre,'000','Cambio Tabulador Segun G.O 38.921',' ', o.nombre_organismo,0, mc.cod_manual_cargo,
  ca.cod_cargo,ca.descripcion_cargo, cp.id_clasificacion_personal, cat.desc_categoria, cp.id_clasificacion_personal, cat.desc_categoria,
  ' ',ca.grado, tr.paso, tr.codigo_nomina, 0,0,0,0,0,0,0,0,0,
  tr.sueldo_basico, sp.promedio_compensacion,0,0,0,0,0,sp.promedio_primasc,sp.promedio_primast, pr.id_personal,0,' ','2008-05-01',
  'Cambio Tabulador Segun G.O 38.921','S',' ','promafe','1',o.cod_organismo, '2008-05-01'
 
   from trabajador tr, personal pr, sueldopromedio sp, dependencia dp, organismo o, sede se, ciudad cu, estado es, 
      cargo ca, manualcargo mc, clasificacionpersonal cp, tipopersonal tp, categoriapersonal cat
                                             where tr.id_personal  = pr.id_personal
                                                and sp.id_trabajador = tr.id_trabajador 
                                                and tr.id_tipo_personal = tp.id_tipo_personal
                                                and tp.cod_tipo_personal = pIdTipoPersonal                       -->  CODIGO DE TIPO PERSONAL 
                                                and cp.id_clasificacion_personal = tp.id_clasificacion_personal
                                                and cat.id_categoria_personal = cp.id_categoria_personal
                                                and tr.estatus ='A'
                                                and tr.id_dependencia = dp.id_dependencia 
                                                and tr.id_cargo = ca.id_cargo
                                                and ca.id_manual_cargo = mc.id_manual_cargo
                                                and dp.id_organismo = o.id_organismo
                                                and dp.id_sede      = se.id_sede
                                                and se.id_ciudad    = cu.id_ciudad
                                                and cu.id_estado    = es.id_estado
                                                and mc.id_tabulador = (select ta.id_tabulador from tabulador ta
                                                                                   where ta.cod_tabulador = pIdTabuladorActual); ---> CODIGO DE TABULADOR VIEJO


raise notice 'Salio de trayectoria ';
-- Salio de  TRAYECTORIA POR TIPO DE PERSONAL 

 -- SCRIP PARA APLICAR NUEVO TABULADOR 


-- FUNCION PARA NO CALIFICADO 1, MONTO = 799

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 799 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN BACHILLER I';

 update trabajador set sueldo_basico = 26.64, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 1                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =1                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 1                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =1                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 1                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =1                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado = '1'            --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO (semanal)
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  26.64);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 26.64      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico =26.64    --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA Obrero No calificado, MONTO = 815


-- FUNCION OBRERO I, MONTO = 815

-- MODIFICACION TRABAJADOR


raise notice 'ENTRO EN OBRERO II';

 update trabajador set sueldo_basico = 27.17, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 2                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 2                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 2                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 2                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 2                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 2                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado = 2           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico= 27.17);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 27.17   --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico =27.17      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA OBRERO II, 

-- FUNCION PARA OBRERO III, MONTO = 831

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 1324 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN BACHILLER III';

 update trabajador set sueldo_basico = 27.70, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 3                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 3                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 3                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 3                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 3                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 3                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado= 3           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  27.70);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 27.70     --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 27.70      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA OBRERO IV



Raise notice 'ENTRO EN OBRERO  IV';

 update trabajador set sueldo_basico = 28.27, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 4                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 4                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 4                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 4                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 4                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 4                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado = 4            --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  28.27);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 28.27      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico =28.27      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA OBERO V




raise notice 'ENTRO EN OBERRO V';

 update trabajador set sueldo_basico = 29.40, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 5                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 5                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 5                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 5                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 5                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 5                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado =5         --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  29.40);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 29.40      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 29.40     --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA OBERRO VI
-- FUNCION PARA PROFESIONAL I, MONTO = 1483


raise notice 'ENTRO EN OBERRO VI';

 update trabajador set sueldo_basico = 30.30, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 6                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 6                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 6                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 6                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 6                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 6                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
			where  car.grado=6           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  30.30);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 30.30      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 30.30      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA OBRERO VI


-- FUNCION PARA OBRERO VII


raise notice 'ENTRO EN OBRERO VII';

 update trabajador set sueldo_basico = 31.20, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 7                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 7                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 7                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 7                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 7                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 7                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
			where  car.grado = 7            --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  31.20);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico =31.20     --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 31.20      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA OBRERE VII,

-- FUNCION PARA OBRERO III


raise notice 'ENTRO EN OBRERO VIII';

 update trabajador set sueldo_basico = 32.14, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 8                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 8                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 8                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 8                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 8                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 8                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
			where  car.grado=8           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  32.14);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico =  32.14      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico =  32.14     --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');




-- FUNCION PARA OBRERO VIIII


raise notice 'ENTRO EN OBRERO VIIII';

 update trabajador set sueldo_basico = 33.74, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 9                           --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =9                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 9                           --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 9                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 9                           --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 9                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
			where  car.grado=9           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  33.74);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 33.74     --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico =  33.74     --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');




-- FUNCION PARA OBRERO VIIII


raise notice 'ENTRO EN OBRERO X';

 update trabajador set sueldo_basico = 35.07, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 10                           --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =10                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado =10                           --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 10                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 10                         --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 10                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
			where  car.grado=10           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  35.07);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico =35.07     --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico =  35.07     --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


-- PUESTOS VACANTES, 



-- CAMBIO DE CARGO PARA LOS PUESTOS VACANTES, EN REGISTRO CARGOS

--VACANTES OBRERO I

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 1                       --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =1                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado = 1           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));

--VACANTES OBRERO II

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 2                       --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =2                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado= 2           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));


--VACANTES OBRERO III

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 3                      --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =3                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado= 3           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));




--VACANTES OBRERO IV


update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 4                      --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =4                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado = 4           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));

--VACANTES OBRERO V

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 5                      --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =5                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado =5                --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));




--VACANTES OBRERO VI
update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 6                      --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =6                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where   car.grado = 6                 --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));


--VACANTES OBRERO VII

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 7                     --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =7                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where   car.grado = 7               --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));

--VACANTES OBRERO VIII

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 8                     --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =8                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where   car.grado= 8                --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));

--VACANTES OBRERO VIIII

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 9                    --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =9                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where   car.grado=9                --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));

--VACANTES OBRERO X

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 10                    --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =10                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where   car.grado=10               --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));


--fin de cargo vacantes


raise notice 'sALIO';
	return 1;
end;
$_$;


ALTER FUNCTION public.aplicar_nuevo_clasificador_obrero_01052008(character varying, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 681 (class 1255 OID 183639)
-- Name: asignar_cestaticket(integer, integer, integer, integer, character varying, date, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asignar_cestaticket(integer, integer, integer, integer, character varying, date, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdGrupoTicket alias for $1;
	pMes alias for $2;
	pAnio alias for $3;
	pProceso alias for $4;
	pEspecial alias for $5;
	pFecha alias for $6;
	pUsuario alias for $7;

	pt parametroticket;
	recCtp conceptotipopersonal;
	
	recCierreUnidad record;
	curCierreUnidad cursor (pMes int4, pAnio int4, pIdTipoPersonal int4) 
		for select distinct * 
		from cierreunidad
		where mes_cierre = pMes 
		and anio_cierre = pAnio 
		and id_tipo_personal = pIdTipoPersonal;

	recTrabajadoresBasico record;
	curTrabajadoresBasico cursor(pIdTipoPersonal int4, pSueldo1 float8, pSueldo2 float8, pMes int4, pAnio int4)
		for select t.id_trabajador, dt.tickets_por_dia, dt.valor, 
		t.id_dependencia, d.cod_dependencia, d.nombre as nombre_dependencia, 
		d.cod_cesta, dt.id_proveedor_ticket, lg.cod_cesta as cod_cesta_2, s.cod_cesta as cod_cesta_3,
		'N' as excepcion, 'N' as retroactivo, 'N' as fraccionado, 
		t.dias_trabajados, 0 as cantidad_retroactivo, 0 as cantidad_excepcion,
		0 as anio, 0 as mes
		from trabajador t, sueldopromedio sp, dependencia d, 
		denominacionticket dt, lugarpago lg, sede s
		where t.id_trabajador = sp.id_trabajador
		and t.id_dependencia = d.id_dependencia
		and t.id_tipo_personal = dt.id_tipo_personal
            and dt.estatus = 'A'
		and t.id_lugar_pago = lg.id_lugar_pago
		and d.id_sede = s.id_sede
		and (sp.promedio_sueldo <= pSueldo1  and sp.promedio_integral <= pSueldo2)  
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A'
		and  not (t.mes_ingreso = pMes and t.anio_ingreso = pAnio and dias_trabajados > 0)
		and t.id_trabajador not in (select id_trabajador from excepcionticket )
		union
		select t.id_trabajador, dt.tickets_por_dia, dt.valor, 
		t.id_dependencia,d.cod_dependencia, d.nombre as nombre_dependencia, 
		d.cod_cesta, dt.id_proveedor_ticket, lg.cod_cesta as cod_cesta_2, s.cod_cesta as cod_cesta_3,
		'N' as excepcion, 'S' as retroactivo, 'N' as fraccionado, 
		t.dias_trabajados, r.numero_tickets as cantidad_retroactivo, 0 as cantidad_excepcion,
		r.anio as anio, r.mes as mes
		from trabajador t, sueldopromedio sp, dependencia d, retroactivoticket r, 
		denominacionticket dt, lugarpago lg, sede s
		where t.id_trabajador = sp.id_trabajador
		and t.id_trabajador = r.id_trabajador
		and t.id_dependencia = d.id_dependencia		
		and t.id_lugar_pago = lg.id_lugar_pago
		and d.id_sede = s.id_sede
		and t.id_tipo_personal = dt.id_tipo_personal
		and t.id_tipo_personal = pIdTipoPersonal
	      and t.estatus = 'A'
		and (sp.promedio_sueldo <= pSueldo1  and sp.promedio_integral <= pSueldo2)  
		and r.mes_proceso = pMes
		and r.anio_proceso = pAnio
		and dt.estatus = 'A'
		and t.id_trabajador not in (select id_trabajador from excepcionticket)
		union
		select t.id_trabajador, dt.tickets_por_dia, dt.valor, 
		t.id_dependencia,d.cod_dependencia, d.nombre as nombre_dependencia, 
		d.cod_cesta, dt.id_proveedor_ticket, lg.cod_cesta as cod_cesta_2, s.cod_cesta as cod_cesta_3,
		'S' as excepcion, 'N' as retroactivo, 'N' as fraccionado, 
		t.dias_trabajados, 0 as cantidad_retroactivo, 
		et.numero_tickets as cantidad_excepcion,
		0 as anio, 0 as mes
		from trabajador t, sueldopromedio sp, dependencia d, 
		denominacionticket dt, excepcionticket et, lugarpago lg, sede s
		where t.id_trabajador = sp.id_trabajador
		and t.id_dependencia = d.id_dependencia
		and t.id_lugar_pago = lg.id_lugar_pago
		and d.id_sede = s.id_sede
		and t.id_tipo_personal = dt.id_tipo_personal
            and t.estatus = 'A'
		and (sp.promedio_sueldo <= pSueldo1  and sp.promedio_integral <= pSueldo2)  
		and t.id_tipo_personal = pIdTipoPersonal
		and dt.estatus = 'A'
		and t.id_trabajador = et.id_trabajador		
		union 		
		select  t.id_trabajador, dt.tickets_por_dia, dt.valor, 
		t.id_dependencia, d.cod_dependencia, d.nombre as nombre_dependencia, 
		d.cod_cesta, dt.id_proveedor_ticket, lg.cod_cesta as cod_cesta_2, s.cod_cesta as cod_cesta_3,
		'N' as excepcion, 'N' as retroactivo, 'S' as fraccionado, 
		t.dias_trabajados, 0 as cantidad_retroactivo, 0 as cantidad_excepcion,
		0 as anio, 0 as mes
		from trabajador t, sueldopromedio sp, dependencia d, 
		denominacionticket dt, lugarpago lg, sede s
		where t.id_trabajador = sp.id_trabajador
		and t.id_dependencia = d.id_dependencia
		and t.id_lugar_pago = lg.id_lugar_pago
		and d.id_sede = s.id_sede
		and t.id_tipo_personal = dt.id_tipo_personal
	      and (t.estatus = 'A' or t.estatus = 'E')
	      and (sp.promedio_sueldo <= pSueldo1  and sp.promedio_integral <= pSueldo2)  
		and t.id_tipo_personal = pIdTipoPersonal
		and dt.estatus = 'A'
                and 
			((t.mes_ingreso = pMes and t.anio_ingreso = pAnio) or 
			(t.mes_egreso = pMes and t.anio_egreso = pAnio))
		and dias_trabajados >0		
		and t.id_trabajador not in (select id_trabajador from excepcionticket);
	


	recAusencias record;
	curAusencias cursor(pIdTrabajador int4, pMes int4, pAnio int4)
		for select distinct id_ausencia, dias_habiles
		from ausencia
		where id_personal 
			in (select id_personal 
			from trabajador 
			where id_trabajador = pIdTrabajador)
		and anio = pAnio
		and mes = pMes
		and cesta_ticket = 'S';
		
	recMes record;
	curMes cursor (pMes int4, pAnio int4)
		for select distinct id_mes, dias_habiles, con_sabados
		from mes where anio = pAnio and mes = pMes;

	--recSede record;
	--curSede cursor(pIdDependencia int4)
	--	for select distinct s.id_sede, r.id_region, s.cod_cesta, pr.id_proveedor_ticket 
	--	from sede s, dependencia d, region r, proveedorregion pr
	--	where s.id_sede = d.id_sede
	--	and s.id_region = r.id_region
	--	and r.id_region = pr.id_region
	--	and d.id_dependencia = pIdDependencia;

	recEmbargo record;
	curEmbargo cursor(pIdTrabajador int4)
		for select sum(numero_tickets) as cantidad
		from embargo
		where embargo.id_personal 
			in (select id_personal 
			from trabajador where id_trabajador = pIdTrabajador limit 1);
	
	recDescuento record;
	curDescuento cursor(pIdTrabajador int4, pAnio int4, pMes int4)
		for select (descuento_ausencia + descuento_reposo + 
		descuento_permiso + descuento_vacaciones + descuento_otros+referencia_embargo+referencia_ausencia) as descuento
		from descuentoticket dt
		where dt.id_trabajador = pIdTrabajador and dt.anio = pAnio and dt.mes = pMes;

	recTipoPersonal record;
	curTipoPersonal cursor(pIdGrupoTicket int4)
		for select distinct tp.id_tipo_personal
		from grupoticket gt, tipopersonal tp
		where gt.id_grupo_ticket = pIdGrupoTicket
		and gt.id_grupo_ticket = tp.id_grupo_ticket
		and tp.beneficio_cesta_ticket = 'S';

	cantidadTickets int4 = 0;
	cantidadTicketsTrabajador int4 = 0;
	cantidadAusencias int4 := 0;
	idCalculoTicket int4:= 0;
	idHistoricoTicket int4:= 0;
	montoTicket float8:= 0;
	diasHabiles float8 :=0;
	referenciaEmbargo int4 := 0;
	descuento int4 := 0;
	idDescuentoTicket int4 :=0;
	existeDescuento int4 := 0;
	mes int4 := 0;
	anio int4 := 0;
	netoTicket int4 := 0;
	netoCobrar float8 := 0;
      psueldo1 float8:=0;
      psueldo2 float8:=0;
	idSeguridadTicket int4 := 0;
	codCesta varchar;
	pIdTipoPersonal int4 := 0;
        id_concepto_variable int4 :=0;

begin
         id_concepto_variable := last_id_conceptovariable();
	open curTipoPersonal(pIdGrupoTicket);				
	loop		
		fetch curTipoPersonal into recTipoPersonal;			
		exit when not found;
		pIdTipoPersonal = recTipoPersonal.id_tipo_personal;

		delete from calculoticket 
              where id_tipo_personal = pIdTipoPersonal;
		raise notice 'INICIA paso 1';
		select into pt * from parametroticket  where id_tipo_personal = pIdTipoPersonal;
		
		if pt.id_parametro_ticket is  null then
			return 10;
		end if;
	        raise notice 'leyo pv';
		select into recCtp * from conceptotipopersonal  where id_concepto_tipo_personal = pt.id_concepto_tipo_personal;
		raise notice 'leyo pv 2';
		if recCtp.id_concepto_tipo_personal is  null then
raise notice 'salio ';
			return 11;
		end if;
		
		
	raise notice 'continua 1  ';

		
		if pt.dias_fijos =  0 then
   		raise notice 'INICIA paso 23';

			open curMes(pMes,pAnio);							
			fetch curMes into recMes;			
	
			if recMes.id_mes = null then
				return 12;
			end if;
			
			if pt.dias_habiles = 'S' and pt.incluye_sabados = 'N' and pt.monto_fijo = 'N'then
				diasHabiles := recMes.dias_habiles;				
			elsif pt.incluye_sabados = 'S' then
				diasHabiles := recMes.con_sabados;									
			end if;
			close curMes;
			
		else
                   raise notice 'dias fijos ';


			diasHabiles := pt.dias_fijos;
			raise notice 'dias fijos';
			
		end if;
raise notice 'continua 2  ';

        idCalculoTicket := last_id_calculoticket()+1;				
				if idCalculoTicket is null then				
					idCalculoTicket := 1;				
				end if;

       idHistoricoTicket := last_id_historicoticket()+1;				
					if idHistoricoTicket is null then				
						idHistoricoTicket := 1;				
					end if;

	
	if pt.sueldo_basico_integral = 'B' then
         pSueldo2 := pt.sueldo_maximo;
         pSueldo1  := 999999999;
      elsif pt.sueldo_basico_integral = 'I' then
         pSueldo1 := pt.sueldo_maximo;
         pSueldo2  := 999999999;
	else
	   pSueldo1 := 999999999;
         pSueldo2  := 999999999;
     end if;


			raise notice 'basico';
			open curTrabajadoresBasico(pIdTipoPersonal, pSueldo1,pSueldo2,  pMes, pAnio);				
			loop
				
raise notice 'personal a basico ';


				fetch curTrabajadoresBasico into recTrabajadoresBasico;			
				exit when not found;
				
				cantidadAusencias := 0;
				descuento :=0;	
				netoCobrar :=0;
				netoTicket :=0;
				referenciaEmbargo := 0;
				cantidadTicketsTrabajador := 0;
				
				if pt.distribucion = 'D' then
					codCesta := recTrabajadoresBasico.cod_cesta;
				elsif pt.distribucion = 'L' then
					codCesta := recTrabajadoresBasico.cod_cesta_2;
				else
					codCesta := recTrabajadoresBasico.cod_cesta_3;
				end if;
				if pt.deducir_ausencias = 'S' and recTrabajadoresBasico.retroactivo = 'N' then
					
					open curAusencias(recTrabajadoresBasico.id_trabajador,pMes,pAnio);
					loop
						fetch curAusencias into recAusencias;
						exit when not found;						
						cantidadAusencias := cantidadAusencias + recAusencias.dias_habiles;
						
		
					end loop;
					close curAusencias;
					
				end if;
				mes := pMes;
				anio := pAnio;
				
				if recTrabajadoresBasico.excepcion = 'N' and recTrabajadoresBasico.retroactivo = 'N' and recTrabajadoresBasico.fraccionado = 'N' then
					cantidadTicketsTrabajador := (diasHabiles*recTrabajadoresBasico.tickets_por_dia);
					
				elsif recTrabajadoresBasico.excepcion = 'S' then
					cantidadTicketsTrabajador  := recTrabajadoresBasico.cantidad_excepcion;
					
				elsif recTrabajadoresBasico.retroactivo = 'S' then
					
					cantidadTicketsTrabajador:= recTrabajadoresBasico.cantidad_retroactivo;
					mes:= recTrabajadoresBasico.mes;
					anio:= recTrabajadoresBasico.anio;
				elsif recTrabajadoresBasico.fraccionado = 'S' then
					cantidadTicketsTrabajador:= (recTrabajadoresBasico.dias_trabajados*recTrabajadoresBasico.tickets_por_dia);
					
				end if;
				
				montoTicket := cantidadTicketsTrabajador * recTrabajadoresBasico.valor;
				
	raise notice 'continua 3  ';


				if recTrabajadoresBasico.retroactivo = 'N' and recTrabajadoresBasico.excepcion = 'N' then
					open curEmbargo(recTrabajadoresBasico.id_trabajador);
					fetch curEmbargo into recEmbargo;
					if recEmbargo.cantidad is not null then
						referenciaEmbargo := recEmbargo.cantidad;
					end if;
					close curEmbargo;
					existeDescuento:= count_descuentoticket(
						recTrabajadoresBasico.id_trabajador,
						pMes, pAnio);
					
					if existeDescuento = 0 then
						idDescuentoTicket := last_id_descuentoticket()+1;				
						if idDescuentoTicket is null then				
							idDescuentoTicket := 1;				
						end if;
	
						perform add_descuentoticket(
							idDescuentoTicket, 
							recTrabajadoresBasico.id_trabajador,
							pAnio, pMes,
							cantidadTicketsTrabajador,
							referenciaEmbargo, cantidadAusencias,
							0,0,0,0,0, 'N', null);
					else
						perform update_descuentoticket( 
							recTrabajadoresBasico.id_trabajador,
							pAnio, pMes,
							cantidadTicketsTrabajador,
							referenciaEmbargo, cantidadAusencias);
					end if;
					
					open curDescuento(recTrabajadoresBasico.id_trabajador, pAnio, pMes);
					fetch curDescuento into recDescuento;
	
					if recDescuento.descuento is not null then
						descuento := recDescuento.descuento;
					end if;
					close curDescuento;
					
				end if;
	
raise notice 'continua 4  ';



				idCalculoTicket := idCalculoTicket + 1;				
				
				netoTicket := cantidadTicketsTrabajador - descuento;
				netoCobrar := recTrabajadoresBasico.valor*netoTicket;
	
				perform add_calculoticket(
					idCalculoTicket,
					anio,
					mes,
					cantidadTicketsTrabajador,
					recTrabajadoresBasico.valor,
					montoTicket, 				
					descuento,
					netoTicket,
					netoCobrar,
					'N',
					current_date,
					pAnio,
					pMes,
					codCesta, 
					recTrabajadoresBasico.id_trabajador,
					pt.id_concepto_tipo_personal, 
					recTrabajadoresBasico.id_proveedor_ticket,
					recTrabajadoresBasico.cod_dependencia,
					recTrabajadoresBasico.nombre_dependencia,
					pIdTipoPersonal);
					raise notice 'grabo calculo ticket %', idCalculoTicket;
				if pProceso = 2 then
					
					idHistoricoTicket :=  idHistoricoTicket +1;				
			
					perform add_historicoticket(
						idHistoricoTicket,
						anio,
						mes,
						cantidadTicketsTrabajador,
						recTrabajadoresBasico.valor,
						montoTicket, 					
						descuento,
						netoTicket,
						netoCobrar,
						'N',
						current_date,
						pAnio,
						pMes,
						codCesta, 
						recTrabajadoresBasico.id_trabajador,
						pt.id_concepto_tipo_personal, 
						recTrabajadoresBasico.id_proveedor_ticket,
						recTrabajadoresBasico.cod_dependencia,
						recTrabajadoresBasico.nombre_dependencia,
						recTrabajadoresBasico.id_dependencia,
						pIdTipoPersonal);
						raise notice 'grabo historico ticket';


If pt.pago_nomina ='S' THEN

                                     

                                      -- Se le incluyo para que tome el concepto Cesta_ticket 4300, como concepto Variable
                                      -- Modifiacion realizada el 19-01-2009

                                        id_concepto_variable := id_concepto_variable+1;
                                 
                                       -- id_concepto_variable := last_id_conceptovariable()+1;

                                        if id_concepto_variable is null then
                                            id_concepto_variable := 1;
                                        end if;

                                        Perform add_conceptovariable(id_concepto_variable,
                                                                     recTrabajadoresBasico.id_trabajador,
                                                                     pt.id_concepto_tipo_personal,
                                                                     recCtp.id_frecuencia_tipo_personal,
                                                                     cantidadTicketsTrabajador,
                                                                     netoCobrar,
                                                                     current_date,
                                                                     'Ticket',
                                                                     'A',
                                                                     0,0);  
                                 end if;             
				end if;							
			end loop;
			close curTrabajadoresBasico;
	
			if pProceso = 2 then
				delete from descuentoticket where anio = pAnio and mes = pMes 
				and (referencia_embargo + referencia_ausencia + descuento_ausencia + descuento_reposo + 
				descuento_vacaciones + descuento_permiso + descuento_otros)=0
				and id_trabajador in (select id_trabajador from trabajador where id_tipo_personal = pIdTipoPersonal);
					
			end if;					
		
	end loop;
	if pProceso = 2 then		
		idSeguridadTicket := last_id_seguridadticket()+1;				
		if idSeguridadTicket is null then				
			idSeguridadTicket := 1;				
		end if;

		perform add_seguridadticket(idSeguridadTicket, pAnio, pMes, pEspecial, pFecha, 
			pUsuario, pIdGrupoTicket);
	end if;
	return 0;
end;

$_$;


ALTER FUNCTION public.asignar_cestaticket(integer, integer, integer, integer, character varying, date, character varying) OWNER TO postgres;

--
-- TOC entry 682 (class 1255 OID 183641)
-- Name: asignar_juguetes(integer, date, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asignar_juguetes(integer, date, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
	
	pIdTipoPersonal ALIAS FOR $1;
	pFecha ALIAS FOR $2;
	pProceso ALIAS FOR $3;

	curFamiliar refcursor;
	recFamiliar record;

	curPersonal refcursor;
	recPersonal record;

	recParametros record;
	recIdentificadores record;

	fechaDesde date;
	fechaHasta date;
	fechaActual date;
	cantidadMaxima int4;
	cantidadInsertar int4;
	cuentaFamiliar int4 = 0;
	ultimoIdPersonal int4 = 0;
	montoFamiliar float8;
	montoConcepto float8;
        quienCobra varchar(1);

	idConceptoVariable int4;
	idJuguete int4;
	validado bool;
begin

	DELETE FROM juguete WHERE id_juguete IN ( 
		SELECT id_juguete FROM
			( juguete AS j INNER JOIN personal AS p USING (id_personal)
			INNER JOIN trabajador AS t USING (id_personal) )
			INNER JOIN tipopersonal AS tp USING (id_tipo_personal) 
			WHERE tp.id_tipo_personal = pIdTipoPersonal );

	SELECT INTO recIdentificadores id_concepto_tipo_personal, id_frecuencia_tipo_personal 
		FROM ConceptoTipoPersonal AS ctp INNER JOIN concepto AS c USING (id_concepto)
		WHERE c.cod_concepto = '4002' AND
			ctp.id_tipo_personal = pIdTipoPersonal;


       DELETE FROM conceptovariable
             WHERE id_trabajador in (select id_trabajador from trabajador
                                       where id_tipo_personal = Pidtipopersonal  )
               AND id_concepto_tipo_personal = recIdentificadores.id_concepto_tipo_personal;


	SELECT INTO recParametros edad_minima, edad_maxima, cantidad_beneficiarios, monto_juguetes, quien_cobra 
		FROM parametrojuguete WHERE id_tipo_personal = pIdTipoPersonal;

	fechaDesde = add_years(pFecha, -recParametros.edad_maxima);
	fechaHasta = add_years(pFecha, -recParametros.edad_minima);
	cantidadMaxima = recParametros.cantidad_beneficiarios;
	montoFamiliar = recParametros.monto_juguetes;

        quienCobra := 'A';
	IF recParametros.quien_cobra = 'M' THEN
           quienCobra := 'F';
        END IF;
        IF recParametros.quien_cobra = 'P' THEN
           quienCobra := 'M';
        END IF;
	
	ultimoIdPersonal = ultimoIdPersonal + 1;
	fechaActual = current_date;
	
	OPEN curPersonal FOR 
		SELECT p.id_personal, MAX(t.id_trabajador) as id_trabajador, max(p.sexo) as sexo
		FROM ( familiar AS f INNER JOIN personal AS p USING (id_personal) )
			INNER JOIN trabajador AS t USING ( id_personal)
		WHERE f.fecha_nacimiento BETWEEN fechaDesde AND fechaHasta AND
			t.id_tipo_personal = pIdTipoPersonal AND
			f.parentesco = 'H' AND
			t.estatus = 'A'
		GROUP BY (p.id_personal);

	idConceptoVariable = last_id_conceptovariable();
	idJuguete = last_id_juguete();

	LOOP
		FETCH curPersonal INTO recPersonal;
		EXIT WHEN NOT FOUND;
		cuentaFamiliar = 0;
		validado = TRUE;
		IF quienCobra <> recPersonal.sexo AND 
			recParametros.quien_cobra <> 'A' THEN
			IF  (validar_conyuge(recPersonal.id_personal)=0) THEN
				validado = TRUE;
			ELSE
				validado = FALSE;
			END IF;
		END IF;
		IF validado = TRUE THEN
			OPEN curFamiliar FOR 
				SELECT f.id_familiar, f.fecha_nacimiento, f.sexo
				FROM familiar f
				WHERE f.id_personal = recPersonal.id_personal
				AND f.fecha_nacimiento BETWEEN fechaDesde AND fechaHasta AND
				f.parentesco = 'H';
			
			LOOP
				FETCH curFamiliar INTO recFamiliar;
				EXIT WHEN NOT FOUND;
				IF (cuentaFamiliar < cantidadMaxima) THEN
                                   cuentaFamiliar = cuentaFamiliar + 1;			
	                           idJuguete = idJuguete + 1;
				   INSERT INTO juguete (id_juguete, id_personal, 
					id_familiar, fecha_nacimiento, sexo, monto)
					VALUES (
						idJuguete,
						recPersonal.id_personal,
						recFamiliar.id_familiar,
						recFamiliar.fecha_nacimiento,
						recFamiliar.sexo,
						montoFamiliar);
				END IF;
			END LOOP;
			CLOSE curFamiliar;
		END IF;
		IF (pProceso = 'D') AND validado = TRUE THEN
			montoConcepto = montoFamiliar * cuentaFamiliar;
			idConceptoVariable = idConceptoVariable + 1;
			INSERT INTO conceptovariable
				(id_concepto_variable,
				id_trabajador,
				id_concepto_tipo_personal,
				id_frecuencia_tipo_personal,
				monto,
				fecha_registro,
				estatus)
			VALUES (
				idConceptoVariable,
				recPersonal.id_trabajador,
				recIdentificadores.id_concepto_tipo_personal,
				recIdentificadores.id_frecuencia_tipo_personal,
				montoConcepto,
				fechaActual,
				'A');
		END IF;

	END LOOP;
	CLOSE curPersonal;

		
	return 0;
end;
$_$;


ALTER FUNCTION public.asignar_juguetes(integer, date, character varying) OWNER TO postgres;

--
-- TOC entry 683 (class 1255 OID 183642)
-- Name: asignar_utiles(integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asignar_utiles(integer, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
	
	pIdTipoPersonal ALIAS FOR $1;	
	pProceso ALIAS FOR $2;

	curFamiliar refcursor;
	recFamiliar record;

	fechaActual date;
	cantidadMaxima int4;
	cantidadInsertar int4;
	cuentaFamiliar int4 = 0;
	montoFamiliar float8;
	montoConcepto float8;
        quienCobra varchar(1);

	idConceptoVariable int4;
	idUtiles int4;
	validado bool;
        inserto  bool;

  	recParametros RECORD;
        recConceptoUtiles record;
        recConceptoVariable record;
        CurConceptoUtiles CURSOR(pIdTipoPersonal int4) FOR
		SELECT  ctp.id_concepto_tipo_personal , 
	       		ctp.id_frecuencia_tipo_personal 
		FROM ConceptoTipoPersonal  ctp, concepto  c 
		WHERE   ctp.id_concepto = c.id_concepto AND
                        c.cod_concepto = '4001' AND
			ctp.id_tipo_personal = pIdTipoPersonal;

  	curParametros CURSOR(pIdTipoPersonal int4)
  		FOR SELECT cantidad_beneficiarios, monto_utiles, quien_cobra, nivel_educativo
  		FROM parametroutiles 
  		WHERE id_tipo_personal = pIdTipoPersonal;


	recPersonal RECORD;
	curPersonal CURSOR (pIdTipoPersonal int4, pNivelEducativo varchar) 
		FOR SELECT p.id_personal, MAX(t.id_trabajador) as id_trabajador, 
		       max(t.id_tipo_personal) as id_tipo_personal, MAX(p.sexo) as sexo
		FROM familiar f, personal p, trabajador  t 
		WHERE   t.id_tipo_personal = pIdTipoPersonal AND
			t.id_personal = p.id_personal AND
			t.estatus = 'A' AND
			t.id_personal = f.id_personal AND
			f.parentesco = 'H' AND
                        f.nivel_educativo=pNivelEducativo
		GROUP BY (p.id_personal);

BEGIN

-- Lee el conceptotipopersonal correspondiente a utiles	
	
        OPEN curConceptoUtiles(pIdTipoPersonal);
	LOOP
		FETCH curConceptoUtiles INTO recConceptoUtiles;
		EXIT WHEN NOT FOUND;
	
-- Verifica si esta asociado al tipo de persoal

	if recConceptoUtiles.id_concepto_tipo_personal is null or
           recConceptoUtiles.id_frecuencia_tipo_personal is null then
           return 10;
        end if;

-- Elimina los registros de utiles

        DELETE FROM utiles WHERE id_tipo_personal = pIdTipoPersonal;

-- Elimina el concepto variable

        DELETE FROM conceptovariable
             WHERE id_trabajador in (select id_trabajador from trabajador
                                       where id_tipo_personal = Pidtipopersonal  )
               AND id_concepto_tipo_personal = recConceptoUtiles.id_concepto_tipo_personal;

	fechaActual = current_date;
		

	idConceptoVariable = last_id_conceptovariable();
	idUtiles = last_id_utiles();
        inserto :=FALSE;

	OPEN curParametros(pIdTipoPersonal);
	LOOP
		FETCH curParametros INTO recParametros;
		EXIT WHEN NOT FOUND;

		cantidadMaxima = recParametros.cantidad_beneficiarios;
		montoFamiliar = recParametros.monto_utiles;

                quienCobra := 'A';
	        IF recParametros.quien_cobra = 'M' THEN
                    quienCobra := 'F';
                END IF;
                IF recParametros.quien_cobra = 'P' THEN
                    quienCobra := 'M';
                END IF;

-- Lee los trabajadores con sus familiares del nivel educativo correspondiente

		OPEN curPersonal (pIdTipoPersonal, recParametros.nivel_educativo);
		LOOP
			FETCH curPersonal INTO recPersonal;
			EXIT WHEN NOT FOUND;

                        raise notice 'CICLO personal';

			cuentaFamiliar = 0;
			
			validado = TRUE;

			IF quienCobra <> recPersonal.sexo AND 
				recParametros.quien_cobra <> 'A' THEN
				IF  (validar_conyuge(recPersonal.id_personal)=0) THEN
					validado = TRUE;
				ELSE
					validado = FALSE;
				END IF;
			END IF;

			IF validado = TRUE THEN

				OPEN curFamiliar FOR 
					SELECT f.id_familiar, f.fecha_nacimiento,f.grado,f.sexo
					FROM familiar f
					WHERE f.id_personal = recPersonal.id_personal 
					AND f.parentesco = 'H' 
					AND f.nivel_educativo = recParametros.nivel_educativo;
-- Inserta en la tabla utiles
				LOOP
					
					FETCH curFamiliar INTO recFamiliar;
					EXIT WHEN NOT FOUND;
	
					IF (cuentaFamiliar < cantidadMaxima) THEN
                                           CuentaFamiliar = cuentaFamiliar + 1;
					   idUtiles = idUtiles + 1;
                                           INSERT INTO utiles (id_utiles, id_personal, 
						id_familiar, fecha_nacimiento, monto, 
						nivel_educativo, id_trabajador, id_tipo_personal,
                                                grado,sexo)
						VALUES (
							idUtiles,
							recPersonal.id_personal,
							recFamiliar.id_familiar,
							recFamiliar.fecha_nacimiento,
							montoFamiliar,
 							recParametros.nivel_educativo,
							recPersonal.id_trabajador,
							recPersonal.id_tipo_personal,
                                                        recFamiliar.grado,
                                                        recFamiliar.sexo);
                                 
                                       END IF;
					
				END LOOP;
				CLOSE curFamiliar;
	                        IF (pProceso = 'D') AND cuentaFamiliar > 0 THEN

-- Modo definitivo resgitra el concepto variable

                                   SELECT INTO recConceptoVariable id_concepto_tipo_personal
		                      FROM ConceptoVariable AS cv
                                       WHERE cv.id_trabajador = recPersonal.id_trabajador
                                         AND cv.id_concepto_tipo_personal=
                                           recconceptoutiles.id_concepto_tipo_personal;
                                   IF recConceptoVariable.id_concepto_tipo_personal is null then

	 		              montoConcepto = montoFamiliar * cuentaFamiliar;
			              idConceptoVariable = idConceptoVariable + 1;
			              INSERT INTO conceptovariable
			 	          (id_concepto_variable,
				           id_trabajador,
				           id_concepto_tipo_personal,
			   	           id_frecuencia_tipo_personal,
				           monto,
				           fecha_registro,
				           estatus)
			              VALUES (
				        idConceptoVariable,
				        recPersonal.id_trabajador,
				        recconceptoutiles.id_concepto_tipo_personal,
				        recconceptoutiles.id_frecuencia_tipo_personal,
				        montoConcepto,
				        fechaActual,
				        'A');
                                      inserto := TRUE;
                                  ELSE

                                     montoConcepto = montoFamiliar * cuentaFamiliar;
                                     UPDATE ConceptoVariable set monto=monto + montoConcepto
		                        WHERE id_trabajador = recPersonal.id_trabajador
                                          AND id_concepto_tipo_personal=
                                     recconceptoutiles.id_concepto_tipo_personal;
                                  END IF;
	                    END IF;  --definitivo
			END IF;  --validado
	
		END LOOP;
		CLOSE curPersonal;
	END LOOP;
	CLOSE curParametros;
      END LOOP;
      CLOSE curConceptoUtiles;
	
     IF (pProceso = 'D') AND inserto=TRUE THEN
            UPDATE identity set last = idConceptoVariable
              WHERE name ='ConceptoVariable';
     END IF;	
     return 0;
end;
$_$;


ALTER FUNCTION public.asignar_utiles(integer, character varying) OWNER TO postgres;

--
-- TOC entry 684 (class 1255 OID 183644)
-- Name: bisiesto(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION bisiesto(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
   panio alias for $1;
   
begin
      if panio in (2080,2076,2072,2068,2064,2060,2056,2052,2048,2044,2040,2036,2032,2028,2024,2020,2016,2012,2008,2004,2000,1996,1992,1988,1984,1980,1976,1972) then
         return 1;
      else
         return 0;
      end if;
end;
$_$;


ALTER FUNCTION public.bisiesto(integer) OWNER TO postgres;

--
-- TOC entry 685 (class 1255 OID 183645)
-- Name: borrar_conceptofijo(integer, date, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION borrar_conceptofijo(integer, date, date) RETURNS void
    LANGUAGE sql
    AS $_$
	delete from conceptofijo where fecha_eliminar between $2 and $3
		and id_concepto_fijo in 
		(select id_concepto from ultimanomina where id_grupo_nomina = $1 
		and numero_nomina=0)

$_$;


ALTER FUNCTION public.borrar_conceptofijo(integer, date, date) OWNER TO postgres;

--
-- TOC entry 686 (class 1255 OID 183646)
-- Name: calcular_aumento_evaluacion(integer, integer, integer, character varying, character varying, character varying, character varying, character varying, character varying, date, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_aumento_evaluacion(integer, integer, integer, character varying, character varying, character varying, character varying, character varying, character varying, date, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;
	pAnio alias for $2;
	pMes alias for $3;
	pProceso alias for $4;
	pUsuario alias for $5;
	pPeriodicidad alias for $6;
	pMetodo alias for $7;
	pRegistro alias for $8;
	pGrabar alias for $9;
	pFecha alias for $10;
	pIdConcepto alias for $11;
	maxpaso int4 := 0;
        pasofueratab int4 := 0;
        montopaso float8 :=0;
        EstatusP varchar(2) = ' ';


	recTrabajadores record;
	curTrabajadores cursor(pIdTipoPersonal int4, pAnio int4, pMes int4)
		for select distinct t.id_trabajador, t.paso, c.grado,
		c.sub_grado, tu.jornada_diaria, tu.jornada_semanal,
		tp.formula_integral, tp.formula_semanal, c.id_cargo,
		e.id_resultado_evaluacion, 
		(e.resultado_competencias + e.resultado_objetivos) as total_evaluacion, 
		e.porcentaje_aumento, mc.id_tabulador, e.numero_pasos, 
		e.monto_aumentar, e.monto_unico
		from trabajador t, evaluacion e, cargo c, manualcargo mc,
		tipopersonal tp, turno tu
		where t.id_tipo_personal = pIdTipoPersonal 
		and t.id_personal = e.id_personal
		and t.id_cargo = c.id_cargo
		and c.id_manual_cargo = mc.id_manual_cargo
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.id_turno = tu.id_turno
		and (e.porcentaje_aumento > 0 or e.numero_pasos >0 
			or e.monto_aumentar >0 or monto_unico >0)
		and t.estatus = 'A'
		and e.anio = pAnio
		and e.mes = pMes;


	recConceptoEvaluacion record;
	curConceptoEvaluacion cursor (pIdTrabajador int4)
		for select monto, fp.cod_frecuencia_pago, 
		c.sueldo_basico, c.compensacion, c.ajuste_sueldo
		from conceptoevaluacion ce, conceptofijo cf, 
		frecuenciatipopersonal ftp, frecuenciapago fp, 
		concepto c, conceptotipopersonal ctp
		where cf.id_trabajador = pIdTrabajador
		and ce.id_concepto_tipo_personal = cf.id_concepto_tipo_personal
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;


	recTabulador record;
	curTabulador cursor (pIdTabulador int4, pMonto float8, pGrado int4, pSubgrado int4)
		for select min(monto) as monto, min(paso) as paso
		from detalletabulador 
		where id_tabulador = pIdTabulador
		and monto >= pMonto
		and grado = pGrado
		and sub_grado = pSubgrado;


	recTabuladorNuevoPaso record;
	curTabuladorNuevoPaso cursor (pIdTabulador int4, pPaso int4, pGrado int4, pSubgrado int4)
		for select monto
		from detalletabulador 
		where id_tabulador = pIdTabulador
		and paso = pPaso
		and grado = pGrado
		and sub_grado = pSubgrado;


	recPromedios record;
	curPromedios cursor (key1 int4) for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, fp.cod_frecuencia_pago, cf.monto,   
		c.sueldo_basico, c.compensacion, c.primas_trabajador, c.primas_cargo, c.ajuste_sueldo
		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		concepto c, frecuenciapago fp
		where
		cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ctp.cod_concepto < '5000'
		and cf.id_trabajador = key1
		and (c.sueldo_basico = 'S' 
		or c.compensacion = 'S' 
		or c.primas_trabajador = 'S' 
		or c.primas_cargo = 'S' 
		or c.ajuste_sueldo= 'S');


	recCompensacion record;
	curCompensacion cursor (pIdTipoPersonal int4) 
		for select distinct fp.cod_frecuencia_pago, 
		ctp.id_concepto_tipo_personal, ftp.id_frecuencia_tipo_personal 
		from conceptotipopersonal ctp, concepto c, 
		frecuenciatipopersonal ftp, frecuenciapago fp
		where ctp.id_concepto = c.id_concepto
		and c.compensacion = 'S'
		and ctp.id_tipo_personal = pIdTipoPersonal
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;

	recSueldo record;
	curSueldo cursor (pIdTipoPersonal int4) 
		for select distinct fp.cod_frecuencia_pago, 
		ctp.id_concepto_tipo_personal, ftp.id_frecuencia_tipo_personal 
		from conceptotipopersonal ctp, concepto c, 
		frecuenciatipopersonal ftp, frecuenciapago fp
		where ctp.id_concepto = c.id_concepto
		and c.sueldo_basico = 'S'
		and ctp.id_tipo_personal = pIdTipoPersonal
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;

	recOtroConcepto record;
	curOtroConcepto cursor (pIdConceptoTipoPersonal int4) 
		for select distinct fp.cod_frecuencia_pago, ftp.id_frecuencia_tipo_personal 
		from conceptotipopersonal ctp,  
		frecuenciatipopersonal ftp, frecuenciapago fp
		where ctp.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;

	recConceptosRecalcular record;
	curConceptosRecalcular cursor (pIdTrabajador int4, pIdConcepto int4)
		for select distinct fp.cod_frecuencia_pago, cf.unidades,
		'F' as tipo_concepto, ctp.tipo, cf.id_concepto_tipo_personal, ctp.tope_minimo, 
		ctp.valor, ctp.tope_maximo, cf.id_concepto_fijo
		from conceptofijo cf, conceptotipopersonal ctp, 
		frecuenciatipopersonal ftp, frecuenciapago fp
		where cf.id_trabajador = pIdTrabajador
		and ctp.id_concepto_tipo_personal = cf.id_concepto_tipo_personal
		and ctp.tipo in ('P', 'I')
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and fp.id_frecuencia_pago = ftp.id_frecuencia_pago
		and cf.id_concepto_tipo_personal in (select id_concepto_tipo_personal
		from conceptoasociado where id_concepto_asociar=pIdConcepto);


	montoSueldoBasico float8 := 0;
	montoCompensacion float8 := 0;
	montoAjusteSueldo float8 := 0;
	montoOtros float8 := 0;
	montoA float8 := 0;
	montoB float8 := 0;
	sueldoNuevo float8 :=0;
	compensacionNueva float8 := 0;
	ajusteEscala float8 := 0;
	pasoNuevo int4 :=0;
	sueldoEscala float8 :=0;
	montoAumentar float8:= 0;
	id int4 := 0;
	aumentoDefinitivo float8 := 0;
        montoRetroactivo float8 := 0;
	idConceptoVariable int4 := 0;
	idConceptoFijo int4 := 0;
	idSueldo int4 := 0;
	idCompensacion int4 := 0;
	montoConceptoCalculado float8 := 0;

begin
	-- Errores
	-- 10 - Se escogiÃ³ el registro en compensacion 
	-- 	y no existe el Concepto 0020 para el tipo de personal
	-- 11 - Se escogiÃ³ el registro en otro concepto 
	-- 	y no existe el Concepto para el tipo de personal

	-- 12 - No existe el concepto sueldo para el tipo de personal

	open curCompensacion (pIdTipoPersonal);
	fetch curCompensacion into recCompensacion;
	if recCompensacion.cod_frecuencia_pago is null then
		return 10;
	end if;
	idCompensacion := recCompensacion.id_concepto_tipo_personal; 

	open curSueldo (pIdTipoPersonal);
	fetch curSueldo into recSueldo;
	if recSueldo.cod_frecuencia_pago is null then
		return 12;
	end if;
	idSueldo := recSueldo.id_concepto_tipo_personal;

	delete from aumentoevaluacion where id_tipo_personal = pIdTipoPersonal;

	if pRegistro = 'C' or pRegistro = 'A' then
		--open curCompensacion (pIdTipoPersonal);
		--fetch curCompensacion into recCompensacion;
		--if recCompensacion.cod_frecuencia_pago is null then
		--	return 10;
		--end if;

	elsif pRegistro = 'O' and pProceso = '2'then
		open curOtroConcepto (pIdConcepto);
		fetch curOtroConcepto into recOtroConcepto;
		if recOtroConcepto.cod_frecuencia_pago is null then
			return 11;
		end if;
	end if;

	

	open curTrabajadores(pIdTipoPersonal, pAnio, pMes);
	raise notice 'pasa 1';
	loop
		fetch curTrabajadores into recTrabajadores;	
		exit when not found;
		raise notice 'pasa 2';
		montoSueldoBasico := 0;
		montoCompensacion := 0;
		montoAjusteSueldo := 0;
		montoOtros := 0;
		montoA := 0;
		montoB := 0;
		sueldoNuevo :=0;
		compensacionNueva := 0;
		ajusteEscala := 0;
		pasoNuevo :=0;
		sueldoEscala :=0;
		montoAumentar :=0;
		aumentoDefinitivo := 0;
		montoRetroactivo := 0;
                maxpaso := 0;
                pasofueratab := 0;
                montopaso:= 0;
		EstatusP := '  ';


		open curConceptoEvaluacion(recTrabajadores.id_trabajador);
		loop			
			fetch curConceptoEvaluacion into recConceptoEvaluacion;	
			exit when not found;	

			if recConceptoEvaluacion.cod_frecuencia_pago = 3 then
                                montoB := recConceptoEvaluacion.monto*2;
			elsif recConceptoEvaluacion.cod_frecuencia_pago = 4 then
				montoB := (recConceptoEvaluacion.monto/7)*30;
			elsif recConceptoEvaluacion.cod_frecuencia_pago = 10 then
				montoB := (recConceptoEvaluacion.monto*4);
			elsif recConceptoEvaluacion.cod_frecuencia_pago = 1 or 
				recConceptoEvaluacion.cod_frecuencia_pago = 2 or 
				recConceptoEvaluacion.cod_frecuencia_pago > 4 then									
				montoB := recConceptoEvaluacion.monto;
			end if;

			montoA := montoA + montoB;

		end loop;
		close curConceptoEvaluacion;

		montoB := 0;
		open curPromedios(recTrabajadores.id_trabajador);
		loop			
			fetch curPromedios into recPromedios;	
			exit when not found;	

			if recPromedios.cod_frecuencia_pago = 3 then
                                montoB := recPromedios.monto*2;
			elsif recPromedios.cod_frecuencia_pago = 4 then
				montoB := (recPromedios.monto/7)*30;
			elsif recPromedios.cod_frecuencia_pago = 10 then
				montoB := (recPromedios.monto*4);
			elsif recPromedios.cod_frecuencia_pago = 1 or 
				recPromedios.cod_frecuencia_pago = 2 or 
				recPromedios.cod_frecuencia_pago > 4 then									
				montoB := recPromedios.monto;
			end if;

			if recPromedios.sueldo_basico = 'S' then
				montoSueldoBasico := montoSueldoBasico + montoB;
			elsif recPromedios.compensacion = 'S' then
				montoCompensacion := montoCompensacion + montoB;
			elsif recPromedios.ajuste_sueldo = 'S' then
				montoAjusteSueldo := montoAjusteSueldo + montoB;
			else 
				montoOtros := montoOtros + montoB;
			end if;

		end loop;
		close curPromedios;
		sueldoNuevo := montoSueldoBasico;
		compensacionNueva := montoCompensacion;
		pasoNuevo := recTrabajadores.paso;
		

		if pMetodo = 'P' then
			montoAumentar := montoA * (recTrabajadores.porcentaje_aumento/100);
		elsif pMetodo = 'M' then
			montoAumentar := recTrabajadores.monto_aumentar;
		elsif pMetodo = 'U' then
			montoAumentar := recTrabajadores.monto_unico;
		elsif pMetodo = 'N' then
			pasoNuevo := recTrabajadores.paso + recTrabajadores.numero_pasos;
			open curTabuladorNuevoPaso(recTrabajadores.id_tabulador, pasoNuevo, 
				recTrabajadores.grado, recTrabajadores.sub_grado);
			fetch curTabuladorNuevoPaso into recTabuladorNuevoPaso;
			if recTabuladorNuevoPaso.monto is not null then				
				compensacionNueva := recTabuladorNuevoPaso.monto - montoSueldoBasico;
				aumentoDefinitivo := compensacionNueva - montoCompensacion;
			
			else
				EstatusP := 'FE';
                                                       select de.paso, de.monto into maxpaso, montopaso from detalletabulador de
                                                             where de.id_tabulador = recTrabajadores.id_tabulador
                                                               and de.grado = recTrabajadores.grado
                                                               and de.sub_grado = recTrabajadores.sub_grado
                                                               and de.paso = (select max(paso) from detalletabulador  
                                                                                        where id_tabulador =  recTrabajadores.id_tabulador
                                                                                          and grado = recTrabajadores.grado
                                                                                          and sub_grado =recTrabajadores.sub_grado);
                                                        
                                                          pasofueratab := maxpaso - recTrabajadores.paso;
                                                          pasofueratab := recTrabajadores.numero_pasos - pasofueratab;
							aumentoDefinitivo := montopaso; 
							FOR i IN 1..pasofueratab LOOP
							  iF montoSueldoBasico > montopaso THEN
								aumentoDefinitivo := aumentoDefinitivo + ((aumentoDefinitivo   * 2.5) / 100);
							  else
								aumentoDefinitivo := aumentoDefinitivo + ((aumentoDefinitivo   * 2.5) / 100);
							  end if;
							END LOOP;

				pasoNuevo := maxpaso;
				compensacionNueva := aumentoDefinitivo - montoSueldoBasico;
				aumentoDefinitivo := compensacionNueva - montoCompensacion;


			end if;
			close curTabuladorNuevoPaso;
		end if;

		if pMetodo = 'P' or pMetodo = 'M' then
			aumentoDefinitivo := montoAumentar;
			if pRegistro = 'S' then
				sueldoNuevo := sueldoNuevo + montoAumentar;
			elsif pRegistro = 'C' then
				compensacionNueva := compensacionNueva + montoAumentar;
			elsif pRegistro = 'A' then
				compensacionNueva := compensacionNueva + montoAumentar;
				sueldoEscala := montoSueldoBasico + compensacionNueva;
				open curTabulador(recTrabajadores.id_tabulador, sueldoEscala, 
					recTrabajadores.grado, recTrabajadores.sub_grado);
				fetch curTabulador into recTabulador;
				if recTabulador.monto is not null then				
					compensacionNueva := recTabulador.monto - montoSueldoBasico;
					ajusteEscala := recTabulador.monto;
					pasoNuevo := recTabulador.paso;
					aumentoDefinitivo := ajusteEscala - (montoSueldoBasico+montoCompensacion);
				end if;
				close curTabulador;
			end if;
		end if;

		id := last_id_aumentoevaluacion()+1;
		raise notice 'id %',id;
		if id is null then 
			id := 1;
		end if;

		--montoRetroactivo := (aumentoDefinitivo / 30) * pDiasRetroactivo;
		perform  add_aumentoevaluacion(
			id,
			pAnio,
			pMes,
			pFecha,
			recTrabajadores.total_evaluacion,
			recTrabajadores.grado,
			recTrabajadores.paso,
			convert_2_decimal(montoSueldoBasico),
			convert_2_decimal(montoAjusteSueldo),
			convert_2_decimal(montoCompensacion),
			convert_2_decimal(montoOtros),
			convert_2_decimal(montoA),
			convert_2_decimal(sueldoNuevo),
			  convert_2_decimal(compensacionNueva),
			  convert_2_decimal(montoAumentar),
			convert_2_decimal(aumentoDefinitivo),
			pasoNuevo,
			  recTrabajadores.porcentaje_aumento,
			  convert_2_decimal(montoAumentar),
			convert_2_decimal(ajusteEscala),
                        0,
                        0, 
			  recTrabajadores.id_trabajador,
			  recTrabajadores.id_resultado_evaluacion,
			  pIdTipoPersonal,
			  EstatusP);	

			if pRegistro = 'S' then
				if pPeriodicidad = 'Q' then
					sueldoNuevo := convert_2_decimal(sueldoNuevo/2);
				elsif pPeriodicidad = 'S' then
					sueldoNuevo := convert_2_decimal(sueldoNuevo/30*7);
				end if;
				--- Actualiza el monto proyetado del concepto sueldo
				update conceptofijo set monto_proyectado = sueldoNuevo 
				where id_trabajador = recTrabajadores.id_trabajador
				and id_concepto_tipo_personal = idSueldo;
	
				--- Realcula los conceptos (fijos y variables) que tienen asociado al sueldo
				open curConceptosRecalcular(recTrabajadores.id_trabajador, idSueldo);
				loop
					fetch curConceptosRecalcular into recConceptosRecalcular;
					exit when not found;
					montoConceptoCalculado:= calcular_concepto_proyectado(
					recConceptosRecalcular.id_concepto_tipo_personal,
					recTrabajadores.id_trabajador,	
					recConceptosRecalcular.unidades,
					recConceptosRecalcular.tipo,
					recConceptosRecalcular.cod_frecuencia_pago,
					recTrabajadores.jornada_diaria,
					recTrabajadores.jornada_semanal,
					recTrabajadores.formula_integral,
					recTrabajadores.formula_semanal,	
					recTrabajadores.id_cargo,	
					recConceptosRecalcular.valor,
					recConceptosRecalcular.tope_minimo,
					recConceptosRecalcular.tope_maximo);
					if recConceptosRecalcular.tipo_concepto = 'F' then
						update conceptofijo set monto_proyectado = montoConceptoCalculado
							where id_concepto_fijo = recConceptosRecalcular.id_concepto_fijo;
					end if;
				end loop;
				close curConceptosRecalcular;
			elsif pRegistro = 'C' or  pRegistro = 'A' then
				if montoCompensacion > 0 and compensacionNueva <> 0 then 
					if recCompensacion.cod_frecuencia_pago = 3 then
						compensacionNueva := convert_2_decimal(compensacionNueva/2);
					elsif recCompensacion.cod_frecuencia_pago = 4 then
						compensacionNueva := convert_2_decimal(compensacionNueva/30*7);
					end if;						
	
					update conceptofijo set monto_proyectado = compensacionNueva
					where id_trabajador = recTrabajadores.id_trabajador
					and id_concepto_tipo_personal = idCompensacion;
					--- Realcula los conceptos (fijos y variables) que tienen asociado al sueldo
					open curConceptosRecalcular(recTrabajadores.id_trabajador, idCompensacion);
					loop
						fetch curConceptosRecalcular into recConceptosRecalcular;
						exit when not found;
						perform calcular_concepto_proyectado(
						recConceptosRecalcular.id_concepto_tipo_personal,
						recTrabajadores.id_trabajador,	
						recConceptosRecalcular.unidades,
						recConceptosRecalcular.tipo,
						recConceptosRecalcular.cod_frecuencia_pago,
						recTrabajadores.jornada_diaria,
						recTrabajadores.jornada_semanal,
						recTrabajadores.formula_integral,
						recTrabajadores.formula_semanal,	
						recTrabajadores.id_cargo,	
						recConceptosRecalcular.valor,
						recConceptosRecalcular.tope_minimo,
						recConceptosRecalcular.tope_maximo);
		
						if recConceptosRecalcular.tipo = 'F' then
							update conceptofijo set monto_proyectado = montoConceptoCalculado
								where id_concepto_fijo = recConceptosRecalcular.id_concepto_fijo;
						end if;
					end loop;
					close curConceptosRecalcular;
				end if;
			end if;

		if pProceso = '2' then			
			if pRegistro = 'S' then
				if pPeriodicidad = 'Q' then
					sueldoNuevo := convert_2_decimal(sueldoNuevo*2);
				elsif pPeriodicidad = 'S' then
					sueldoNuevo := convert_2_decimal(sueldoNuevo*30/7);
				end if;

				update trabajador set sueldo_basico = sueldoNuevo 
					where id_trabajador = recTrabajadores.id_trabajador;

				if pPeriodicidad = 'Q' then
					sueldoNuevo := convert_2_decimal(sueldoNuevo/2);
				elsif pPeriodicidad = 'S' then
					sueldoNuevo := convert_2_decimal(sueldoNuevo/30*7);
				end if;

				update conceptofijo set monto_anterior = monto, monto = sueldoNuevo 
					where id_trabajador = recTrabajadores.id_trabajador
					and id_concepto_tipo_personal = 
					(select ctp.id_concepto_tipo_personal 
					from conceptotipopersonal ctp, concepto c
					where ctp.id_concepto = c.id_concepto
					and c.sueldo_basico = 'S' limit 1);

			elsif pRegistro = 'C' or  pRegistro = 'A' then
				--if recCompensacion.cod_frecuencia_pago = 3 then
				--	compensacionNueva := convert_2_decimal(compensacionNueva/2);
				--elsif recCompensacion.cod_frecuencia_pago = 4 then
				--	compensacionNueva := convert_2_decimal(compensacionNueva/30*7);
				--end if;

				if montoCompensacion > 0 then
					update conceptofijo set monto_anterior = monto, monto = compensacionNueva
						where id_trabajador = recTrabajadores.id_trabajador
						and id_concepto_tipo_personal = recCompensacion.id_concepto_tipo_personal;
				else
					idConceptoFijo := last_id_conceptofijo()+1;
					if idConceptoFijo is null then
						idConceptoFijo = 1;
					end if;

					perform add_conceptofijo(
						idConceptoFijo,
						recTrabajadores.id_trabajador,
						recCompensacion.id_concepto_tipo_personal,
						recCompensacion.id_frecuencia_tipo_personal,
						0,
						convert_2_decimal(compensacionNueva),
						pFecha,
						pFecha,
						null,
						null,
						'A',
						'N',
						0,
						0,
						0);

				end if;

			else

				if recOtroConcepto.cod_frecuencia_pago = 3 then
					montoAumentar := convert_2_decimal(montoAumentar/2);
				elsif recOtroConcepto.cod_frecuencia_pago = 4 then
					montoAumentar := convert_2_decimal(montoAumentar/30*7);
				end if;

				if pGrabar = 'V' then

					idConceptoVariable := last_id_conceptovariable()+1;
					if idConceptoVariable is null then
						idConceptoVariable = 1;
					end if;

					perform add_conceptovariable(
						idConceptoVariable,
						recTrabajadores.id_trabajador,
						pIdConcepto,
						recOtroConcepto.id_frecuencia_tipo_personal,
						0,
						montoAumentar,
						pFecha,
						null,
						'A',
						0,0);
				else

					idConceptoFijo := last_id_conceptofijo()+1;
					if idConceptoFijo is null then
						idConceptoFijo = 1;
					end if;
					perform add_conceptofijo(
						idConceptoFijo,
						recTrabajadores.id_trabajador,
						pIdConcepto,
						recOtroConcepto.id_frecuencia_tipo_personal,
						0,
						montoAumentar,
						pFecha,
						pFecha,
						null,
						null,
						'A',
						'N',
						0,
						0,
						0);
				end if;
			end if;			
		end if;

	end loop;

	close curTrabajadores;

	



	delete from identity;



	return 1;

end;

$_$;


ALTER FUNCTION public.calcular_aumento_evaluacion(integer, integer, integer, character varying, character varying, character varying, character varying, character varying, character varying, date, integer) OWNER TO postgres;

--
-- TOC entry 687 (class 1255 OID 183648)
-- Name: calcular_aumento_evaluacion(integer, integer, integer, character varying, character varying, character varying, character varying, character varying, character varying, date, integer, character varying, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_aumento_evaluacion(integer, integer, integer, character varying, character varying, character varying, character varying, character varying, character varying, date, integer, character varying, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;

	pAnio alias for $2;

	pMes alias for $3;

	pProceso alias for $4;

	pUsuario alias for $5;

	pPeriodicidad alias for $6;

	pMetodo alias for $7;

	pRegistro alias for $8;

	pGrabar alias for $9;

	pFecha alias for $10;

	pIdConcepto alias for $11;

	pPagarRetroactivo alias for $12;

	pDiasRetroactivo alias for $13;

	pIdConceptoRetroactivo alias for $14;

	pIdFrecuenciaRetroactivo alias for $15;

	



	recTrabajadores record;

	curTrabajadores cursor(pIdTipoPersonal int4, pAnio int4, pMes int4)

		for select distinct t.id_trabajador, t.paso, c.grado, c.sub_grado,

		e.id_resultado_evaluacion, 

		(e.resultado_competencias + e.resultado_objetivos) as total_evaluacion, 

		e.porcentaje_aumento, mc.id_tabulador, e.numero_pasos, 

		e.monto_aumentar, e.monto_unico

		from trabajador t, evaluacion e, cargo c, manualcargo mc

		where t.id_tipo_personal = pIdTipoPersonal 

		and t.id_personal = e.id_personal

		and t.id_cargo = c.id_cargo

		and c.id_manual_cargo = mc.id_manual_cargo

		and (e.porcentaje_aumento > 0 or e.numero_pasos >0 

			or e.monto_aumentar >0 or monto_unico >0)

		and t.estatus = 'A'

		and e.anio = pAnio

		and e.mes = pMes;



	recConceptoEvaluacion record;

	curConceptoEvaluacion cursor (pIdTrabajador int4)

		for select monto, fp.cod_frecuencia_pago, 

		c.sueldo_basico, c.compensacion, c.ajuste_sueldo

		from conceptoevaluacion ce, conceptofijo cf, 

		frecuenciatipopersonal ftp, frecuenciapago fp, 

		concepto c, conceptotipopersonal ctp

		where cf.id_trabajador = pIdTrabajador

		and ce.id_concepto_tipo_personal = cf.id_concepto_tipo_personal

		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal

		and ctp.id_concepto = c.id_concepto

		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal

		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;



	recTabulador record;

	curTabulador cursor (pIdTabulador int4, pMonto float8, pGrado int4, pSubgrado int4)

		for select min(monto) as monto, min(paso) as paso

		from detalletabulador 

		where id_tabulador = pIdTabulador

		and monto => pMonto

		and grado = pGrado

		and sub_grado = pSubgrado;



	recTabuladorNuevoPaso record;

	curTabuladorNuevoPaso cursor (pIdTabulador int4, pPaso int4, pGrado int4, pSubgrado int4)

		for select monto

		from detalletabulador 

		where id_tabulador = pIdTabulador

		and paso = pPaso

		and grado = pGrado

		and sub_grado = pSubgrado;



	recPromedios record;

	curPromedios cursor (key1 int4) for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, fp.cod_frecuencia_pago, cf.monto,   

		c.sueldo_basico, c.compensacion, c.primas_trabajador, c.primas_cargo, c.ajuste_sueldo

		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 

		concepto c, frecuenciapago fp

		where

		cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal

		and ctp.id_concepto = c.id_concepto

		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal

		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago

		and ctp.cod_concepto < '5000'

		and cf.id_trabajador = key1

		and (c.sueldo_basico = 'S' 

		or c.compensacion = 'S' 

		or c.primas_trabajador = 'S' 

		or c.primas_cargo = 'S' 

		or c.ajuste_sueldo= 'S');



	recCompensacion record;

	curCompensacion cursor (pIdTipoPersonal int4) 

		for select distinct fp.cod_frecuencia_pago, 

		ctp.id_concepto_tipo_personal, ftp.id_frecuencia_tipo_personal 

		from conceptotipopersonal ctp, concepto c, 

		frecuenciatipopersonal ftp, frecuenciapago fp

		where ctp.id_concepto = c.id_concepto

		and c.cod_concepto = '0020'

		and ctp.id_tipo_personal = pIdTipoPersonal

		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal

		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;



	recOtroConcepto record;

	curOtroConcepto cursor (pIdConceptoTipoPersonal int4) 

		for select distinct fp.cod_frecuencia_pago, ftp.id_frecuencia_tipo_personal 

		from conceptotipopersonal ctp,  

		frecuenciatipopersonal ftp, frecuenciapago fp

		where ctp.id_concepto_tipo_personal = pIdConceptoTipoPersonal

		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal

		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;



	montoSueldoBasico float8 := 0;

	montoCompensacion float8 := 0;

	montoAjusteSueldo float8 := 0;

	montoOtros float8 := 0;

	montoA float8 := 0;

	montoB float8 := 0;

	sueldoNuevo float8 :=0;

	compensacionNueva float8 := 0;

	ajusteEscala float8 := 0;

	pasoNuevo int4 :=0;

	sueldoEscala float8 :=0;

	montoAumentar float8:= 0;

	id int4 := 0;

	aumentoDefinitivo float8 := 0;

        montoRetroactivo float8 := 0;

	idConceptoVariable int4 := 0;

	idConceptoFijo int4 := 0;

begin



	delete from aumentoevaluacion where id_tipo_personal = pIdTipoPersonal;



	-- Errores

	-- 10 - Se escogió el registro en compensacion 

	-- 	y no existe el Concepto 0020 para el tipo de personal

	-- 11 - Se escogió el registro en otro concepto 

	-- 	y no existe el Concepto para el tipo de personal



	if pRegistro = 'C' or pRegistro = 'A' then

		open curCompensacion (pIdTipoPersonal);

		fetch curCompensacion into recCompensacion;

		if recCompensacion.cod_frecuencia_pago is null then

			return 10;

		end if;

	elsif pRegistro = 'O' then

		open curOtroConcepto (pIdConceptoTipoPersonal);

		fetch curOtroConcepto into recOtroConcepto;

		if recOtroConcepto is null then

			return 11;

		end if;

	end if;

	

	open curTrabajadores(pIdTipoPersonal, pAnio, pMes);

	raise notice 'pasa 1';

	loop

		fetch curTrabajadores into recTrabajadores;	

		exit when not found;

		raise notice 'pasa 2';

		montoSueldoBasico := 0;

		montoCompensacion := 0;

		montoAjusteSueldo := 0;

		montoOtros := 0;

		montoA := 0;

		montoB := 0;

		sueldoNuevo :=0;

		compensacionNueva := 0;

		ajusteEscala := 0;

		pasoNuevo :=0;

		sueldoEscala :=0;

		montoAumentar :=0;

		aumentoDefinitivo := 0;

		montoRetroactivo := 0;



		open curConceptoEvaluacion(recTrabajadores.id_trabajador);

		loop			

			fetch curConceptoEvaluacion into recConceptoEvaluacion;	

			exit when not found;	

			

			if recConceptoEvaluacion.cod_frecuencia_pago = 3 then

                                montoB := recConceptoEvaluacion.monto*2;

			elsif recConceptoEvaluacion.cod_frecuencia_pago = 4 then

				montoB := (recConceptoEvaluacion.monto/7)*30;

			elsif recConceptoEvaluacion.cod_frecuencia_pago = 10 then

				montoB := (recConceptoEvaluacion.monto*4);

			elsif recConceptoEvaluacion.cod_frecuencia_pago = 1 or 

				recConceptoEvaluacion.cod_frecuencia_pago = 2 or 

				recConceptoEvaluacion.cod_frecuencia_pago > 4 then									

				montoB := recConceptoEvaluacion.monto;

			end if;



			montoA := montoA + montoB;



			

			

		end loop;

		close curConceptoEvaluacion;

		

		montoB := 0;

		open curPromedios(recTrabajadores.id_trabajador);

		loop			

			fetch curPromedios into recPromedios;	

			exit when not found;	



			if recPromedios.cod_frecuencia_pago = 3 then

                                montoB := recPromedios.monto*2;

			elsif recPromedios.cod_frecuencia_pago = 4 then

				montoB := (recPromedios.monto/7)*30;

			elsif recPromedios.cod_frecuencia_pago = 10 then

				montoB := (recPromedios.monto*4);

			elsif recPromedios.cod_frecuencia_pago = 1 or 

				recPromedios.cod_frecuencia_pago = 2 or 

				recPromedios.cod_frecuencia_pago > 4 then									

				montoB := recPromedios.monto;

			end if;

	



			if recPromedios.sueldo_basico = 'S' then

				montoSueldoBasico := montoSueldoBasico + montoB;

			elsif recPromedios.compensacion = 'S' then

				montoCompensacion := montoCompensacion + montoB;

			elsif recPromedios.ajuste_sueldo = 'S' then

				montoAjusteSueldo := montoAjusteSueldo + montoB;

			else 

				montoOtros := montoOtros + montoB;

			end if;

			

		end loop;

		close curPromedios;

		sueldoNuevo := montoSueldoBasico;

		compensacionNueva := montoCompensacion;

		pasoNuevo := recTrabajadores.paso;



		

		if pMetodo = 'P' then

			montoAumentar := montoA * (recTrabajadores.porcentaje_aumento/100);

		elsif pMetodo = 'M' then

			montoAumentar := recTrabajadores.monto_aumentar;

		elsif pMetodo = 'U' then

			montoAumentar := recTrabajadores.monto_unico;

		elsif pMetodo = 'N' then

			pasoNuevo := recTrabajadores.paso + recTrabajadores.numero_pasos;

			open curTabuladorNuevoPaso(recTrabajadores.id_tabulador, pasoNuevo, 

				recTrabajadores.grado, recTrabajadores.sub_grado);

			fetch curTabuladorNuevoPaso into recTabuladorNuevoPaso;

			if recTabuladorNuevoPaso.monto is not null then				

				compensacionNueva := recTabuladorNuevoPaso.monto - montoSueldoBasico;

				aumentoDefinitivo := compensacionNueva - montoCompensacion;

			end if;

			close curTabuladorNuevoPaso;

		end if;



		

		if pMetodo = 'P' or pMetodo = 'M' then

			aumentoDefinitivo := montoAumentar;

			if pRegistro = 'S' then

				sueldoNuevo := sueldoNuevo + montoAumentar;

			elsif pRegistro = 'C' then

				compensacionNueva := compensacionNueva + montoAumentar;

			elsif pRegistro = 'A' then

				compensacionNueva := compensacionNueva + montoAumentar;

				sueldoEscala := montoSueldoBasico + compensacionNueva;

				open curTabulador(recTrabajadores.id_tabulador, sueldoEscala, 

					recTrabajadores.grado, recTrabajadores.sub_grado);

				fetch curTabulador into recTabulador;

				if recTabulador.monto is not null then				

					compensacionNueva := recTabulador.monto - montoSueldoBasico;

					ajusteEscala := recTabulador.monto;

					pasoNuevo := recTabulador.paso;

					aumentoDefinitivo := ajusteEscala - (montoSueldoBasico+montoCompensacion);

				end if;

				close curTabulador;

			end if;

			

		end if;



		id := last_id_aumentoevaluacion()+1;

		raise notice 'id %',id;

		if id is null then 

			id := 1;

		end if;

		

		montoRetroactivo := (aumentoDefinitivo / 30) * pDiasRetroactivo;



		perform  add_aumentoevaluacion(

			id,

			pAnio,

			pMes,

			pFecha,

			recTrabajadores.total_evaluacion,

			recTrabajadores.grado,

			recTrabajadores.paso,

			convert_2_decimal(montoSueldoBasico),

			convert_2_decimal(montoAjusteSueldo),

			convert_2_decimal(montoCompensacion),

			convert_2_decimal(montoOtros),

			convert_2_decimal(montoA),

			convert_2_decimal(sueldoNuevo),

			  convert_2_decimal(compensacionNueva),

			  convert_2_decimal(montoAumentar),

			convert_2_decimal(aumentoDefinitivo),

			pasoNuevo,

			  recTrabajadores.porcentaje_aumento,

			  convert_2_decimal(montoAumentar),

			convert_2_decimal(ajusteEscala),

                        pDiasRetroactivo,

                        convert_2_decimal(montoRetroactivo), 

			  recTrabajadores.id_trabajador,

			  recTrabajadores.id_resultado_evaluacion,

			  pIdTipoPersonal);	



		if pProceso = '2' then

			

			if pRegistro = 'S' then

				update trabajador set sueldo_basico = sueldoNuevo 

					where id_trabajador = recTrabajadores.id_trabajador;

				if pPeriodicidad = 'Q' then

					sueldoNuevo := convert_2_decimal(sueldoNuevo/2);

				elsif pPeriodicidad = 'S' then

					sueldoNuevo := convert_2_decimal(sueldoNuevo/30*7);

				end if;

				update conceptofijo set monto = sueldoNuevo 

					where id_trabajador = recTrabajadores.id_trabajador

					and id_concepto_tipo_personal = 

					(select ctp.id_concepto_tipo_personal 

					from conceptotipopersonal ctp, concepto c

					where ctp.id_concepto = c.id_concepto

					and c.sueldo_basico = 'S' limit 1);

			elsif pRegistro = 'C' or  pRegistro = 'A' then

				if recCompensacion.cod_frecuencia_pago = 3 then

					compensacionNueva := convert_2_decimal(compensacionNueva/2);

				elsif recCompensacion.cod_frecuencia_pago = 4 then

					compensacionNueva := convert_2_decimal(compensacionNueva/30*7);

				end if;

				if montoCompensacion > 0 then

					update conceptofijo set monto = compensacionNueva

						where id_trabajador = recTrabajadores.id_trabajador

						and id_concepto_tipo_personal = recCompensacion.id_concepto_tipo_personal;

				else

					idConceptoFijo := last_id_conceptofijo()+1;

					if idConceptoFijo is null then

						idConceptoFijo = 1;

					end if;

					perform add_conceptofijo(

						idConceptoFijo,

						recTrabajadores.id_trabajador,

						recCompensacion.id_concepto_tipo_personal,

						recCompensacion.id_frecuencia_tipo_personal,

						0,

						convert_2_decimal(compensacionNueva),

						pFecha,

						pFecha,

						null,

						null,

						'A',

						'N',

						0,

						0,

						0);

				end if;

			else

				if recOtroConcepto.cod_frecuencia_pago = 3 then

					montoAumentar := convert_2_decimal(montoAumentar/2);

				elsif recOtroConcepto.cod_frecuencia_pago = 4 then

					montoAumentar := convert_2_decimal(montoAumentar/30*7);

				end if;

				if pGrabar = 'V' then

					idConceptoVariable := last_id_conceptovariable()+1;

					if idConceptoVariable is null then

						idConceptoVariable = 1;

					end if;

					perform add_conceptovariable(

						idConceptoVariable,

						recTrabajadores.id_trabajador,

						recOtroConcepto.id_concepto_tipo_personal,

						recOtroConcepto.id_frecuencia_tipo_personal,

						0,

						montoAumentar,

						pFecha,

						null,

						'A',

						0,0);

				else

					idConceptoFijo := last_id_conceptofijo()+1;

					if idConceptoFijo is null then

						idConceptoFijo = 1;

					end if;

					perform add_conceptofijo(

						idConceptoFijo,

						recTrabajadores.id_trabajador,

						recOtroConcepto.id_concepto_tipo_personal,

						recOtroConcepto.id_frecuencia_tipo_personal,

						0,

						montoAumentar,

						pFecha,

						pFecha,

						null,

						null,

						'A',

						'N',

						0,

						0,

						0);

				end if;

			end if;

			if pPagarRetroactivo = 'S' and montoRetroactivo > 0 then

				idConceptoVariable := last_id_conceptovariable()+1;

					if idConceptoVariable is null then

						idConceptoVariable = 1;

					end if;

					perform add_conceptovariable(

						idConceptoVariable,

						recTrabajadores.id_trabajador,

						pIdConceptoRetroactivo,

						pIdFrecuenciaRetroactivo,

						pDiasRetroactivo,

						convert_2_decimal(montoRetroactivo),

						pFecha,

						null,

						'A',

						0,0);

			end if;

		end if;

		

	end loop;

	close curTrabajadores;

	



	delete from identity;



	return 1;

end;

$_$;


ALTER FUNCTION public.calcular_aumento_evaluacion(integer, integer, integer, character varying, character varying, character varying, character varying, character varying, character varying, date, integer, character varying, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 688 (class 1255 OID 183650)
-- Name: calcular_aumento_tabulador(integer, integer, integer, character varying, character varying, date, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_aumento_tabulador(integer, integer, integer, character varying, character varying, date, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare 
	pIdTipoPersonal alias for $1;	
	pIdTabuladorActual alias for $2;	
	pIdTabuladorNuevo alias for $3;	
	pProceso alias for $4;
	pUsuario alias for $5;	
	pFecha alias for $6;
	pMantenerPaso alias for $7;
	pPeriodicidad alias for $8;
	
	recTrabajadores record;
	curTrabajadores cursor(pIdTipoPersonal int4, pIdTabulador int4)
		for select distinct t.id_trabajador, t.paso, c.grado,
		c.sub_grado, tu.jornada_diaria, tu.jornada_semanal,
		tp.formula_integral, tp.formula_semanal, c.id_cargo
		from trabajador t, cargo c, manualcargo mc, 
		tipopersonal tp, turno tu
		where t.id_tipo_personal = pIdTipoPersonal
 		and t.id_cargo = c.id_cargo
                and c.id_manual_cargo = mc.id_manual_cargo 
                and mc.id_tabulador = pIdTabulador
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.id_turno = tu.id_turno
		and t.estatus = 'A';

	recConceptoEvaluacion record;
	curConceptoEvaluacion cursor (pIdTrabajador int4)
		for select monto, fp.cod_frecuencia_pago, 
		c.sueldo_basico, c.compensacion, c.ajuste_sueldo
		from conceptoevaluacion ce, conceptofijo cf, 
		frecuenciatipopersonal ftp, frecuenciapago fp, 
		concepto c, conceptotipopersonal ctp
		where cf.id_trabajador = pIdTrabajador
		and ce.id_concepto_tipo_personal = cf.id_concepto_tipo_personal
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;

	recTabuladorNuevoSemanal record;
	curTabuladorNuevoSemanal cursor (pIdTabulador int4, pGrado int4, pPaso int4)
		for select monto
		from detalletabulador 
		where id_tabulador = pIdTabulador		
		and grado = pGrado
		and sub_grado = 1
		and paso = pPaso;

	recTabuladorNuevo record;
	curTabuladorNuevo cursor (pIdTabulador int4, pGrado int4, pSubGrado int4)
		for select monto
		from detalletabulador 
		where id_tabulador = pIdTabulador		
		and grado = pGrado
		and sub_grado = pSubGrado
		and paso = 1;

	recTabuladorNuevoPaso record;
	curTabuladorNuevoPaso cursor (pIdTabulador int4, pGrado int4, pSubgrado int4, pMonto float8)
		for select min(monto) as monto, min(paso) as paso
		from detalletabulador 
		where id_tabulador = pIdTabulador
		and monto >= pMonto
		and grado = pGrado
		and sub_grado = pSubgrado;

	recTabuladorNuevoPasoViejo record;
	curTabuladorNuevoPasoViejo cursor (pIdTabulador int4, pGrado int4, pPaso int4, pSubGrado int4)
		for select monto, paso
		from detalletabulador 
		where id_tabulador = pIdTabulador		
		and grado = pGrado
		and sub_grado = pSubGrado
		and paso = pPaso;

	recPromedios record;
	curPromedios cursor (pIdTrabajador int4) 
		for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, 
		fp.cod_frecuencia_pago, cf.monto, c.sueldo_basico, c.compensacion, 
		c.primas_trabajador, c.primas_cargo, c.ajuste_sueldo
		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		concepto c, frecuenciapago fp
		where
		cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ctp.cod_concepto < '5000'
		and cf.id_trabajador = pIdTrabajador
		and (c.sueldo_basico = 'S' 
		or c.compensacion = 'S' 
		or c.primas_trabajador = 'S' 
		or c.primas_cargo = 'S' 
		or c.ajuste_sueldo= 'S');

	recCompensacion record;
	curCompensacion cursor (pIdTipoPersonal int4) 
		for select distinct fp.cod_frecuencia_pago, 
		ctp.id_concepto_tipo_personal, ftp.id_frecuencia_tipo_personal 
		from conceptotipopersonal ctp, concepto c, 
		frecuenciatipopersonal ftp, frecuenciapago fp
		where ctp.id_concepto = c.id_concepto
		and c.compensacion = 'S'
		and ctp.id_tipo_personal = pIdTipoPersonal
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;

	recSueldo record;
	curSueldo cursor (pIdTipoPersonal int4) 
		for select distinct fp.cod_frecuencia_pago, 
		ctp.id_concepto_tipo_personal, ftp.id_frecuencia_tipo_personal, c.cod_concepto 
		from conceptotipopersonal ctp, concepto c, 
		frecuenciatipopersonal ftp, frecuenciapago fp
		where ctp.id_concepto = c.id_concepto
		and c.sueldo_basico = 'S'
		and ctp.id_tipo_personal = pIdTipoPersonal
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		order by c.cod_concepto;

	recConceptosRecalcular record;
	curConceptosRecalcular cursor (pIdTrabajador int4, pIdConcepto int4)
		for select distinct fp.cod_frecuencia_pago, cf.unidades,
		'F' as tipo_concepto, ctp.tipo, cf.id_concepto_tipo_personal, ctp.tope_minimo, 
		ctp.valor, ctp.tope_maximo, cf.id_concepto_fijo
		from conceptofijo cf, conceptotipopersonal ctp, 
		frecuenciatipopersonal ftp, frecuenciapago fp
		where cf.id_trabajador = pIdTrabajador
		and ctp.id_concepto_tipo_personal = cf.id_concepto_tipo_personal
		and ctp.tipo in ('P', 'I')
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and fp.id_frecuencia_pago = ftp.id_frecuencia_pago
		and cf.id_concepto_tipo_personal in (select id_concepto_tipo_personal
		from conceptoasociado where id_concepto_asociar=pIdConcepto);


	montoA float8 := 0;
	montoB float8 := 0;
	montoSueldoBasico float8 := 0;
	montoCompensacion float8 := 0;
	montoAjusteSueldo float8 := 0;
	montoOtros float8 := 0;	
	remuneracionActual float8 := 0;
	id int4 := 0;
	sueldoNuevo float8 := 0;
	compensacionNueva float8 :=0;
	diferencia float8 := 0;
	pasoNuevo int4 := 0;
	ajusteNuevo float8 :=0;	
	idConceptoVariable int4 := 0;
	idConceptoFijo int4 := 0;
	remuneracionNueva float8 := 0;
	aumentoDefinitivo float8 := 0;
	ajuste float8 :=0;
	idSueldo int4 := 0;
	idCompensacion int4 := 0;
	montoConceptoCalculado float8 := 0;
begin
	open curCompensacion (pIdTipoPersonal);
	fetch curCompensacion into recCompensacion;
	if recCompensacion.cod_frecuencia_pago is null then
		return 10;
	end if;
	idCompensacion := recCompensacion.id_concepto_tipo_personal; 

	open curSueldo (pIdTipoPersonal);
	fetch curSueldo into recSueldo;
	if recSueldo.cod_frecuencia_pago is null then
		return 10;
	end if;
	idSueldo := recSueldo.id_concepto_tipo_personal;

	delete from aplicartabulador where id_trabajador in 
		(select id_trabajador from trabajador where id_tipo_personal = pIdTipoPersonal);
	
	open curTrabajadores(pIdTipoPersonal, pIdTabuladorActual);	
	loop
		fetch curTrabajadores into recTrabajadores;	
		exit when not found;		

		montoA := 0;
		montoB := 0;
		montoSueldoBasico := 0;
		montoCompensacion := 0;
		montoAjusteSueldo := 0;
		montoOtros := 0;			
		remuneracionNueva := 0;
		aumentoDefinitivo := 0;

		open curConceptoEvaluacion(recTrabajadores.id_trabajador);
		loop			
			fetch curConceptoEvaluacion into recConceptoEvaluacion;	
			exit when not found;	
			
			if recConceptoEvaluacion.cod_frecuencia_pago = 3 then
                                montoB := recConceptoEvaluacion.monto*2;
			elsif recConceptoEvaluacion.cod_frecuencia_pago = 4 then
				montoB := recConceptoEvaluacion.monto;
			elsif recConceptoEvaluacion.cod_frecuencia_pago = 10 then
				montoB := (recConceptoEvaluacion.monto*4)/30*7;
			elsif recConceptoEvaluacion.cod_frecuencia_pago = 1 or 
				recConceptoEvaluacion.cod_frecuencia_pago = 2 then
				montoB := recConceptoEvaluacion.monto;
			elsif	recConceptoEvaluacion.cod_frecuencia_pago > 4 then
				montoB := (recConceptoEvaluacion.monto/30)*7;
			end if;

			montoA := montoA + montoB;

--montoA es el monto contra el cual se va a evaluar el aumento en obreros semanal
					
		end loop;
		close curConceptoEvaluacion;

		sueldoNuevo := 0;

		if pPeriodicidad = 'Q' then
			open curTabuladorNuevo(pIdTabuladorNuevo, 
                             recTrabajadores.grado, recTrabajadores.sub_grado);	

			fetch curTabuladorNuevo into recTabuladorNuevo;	
			if recTabuladorNuevo.monto is not null then
	
				montoB := 0;				
				diferencia := 0;
				compensacionNueva := 0;
				pasoNuevo := 0;
                                ajuste := 0;
	
				sueldoNuevo := recTabuladorNuevo.monto;
	
				open curPromedios(recTrabajadores.id_trabajador);
				loop			
					fetch curPromedios into recPromedios;	
					exit when not found;	
		
					if recPromedios.cod_frecuencia_pago = 3 then
						montoB := recPromedios.monto*2;
					elsif recPromedios.cod_frecuencia_pago = 4 then
						montoB := (recPromedios.monto/7)*30;
					elsif recPromedios.cod_frecuencia_pago = 10 then
						montoB := (recPromedios.monto*4);
					elsif recPromedios.cod_frecuencia_pago = 1 or 
						recPromedios.cod_frecuencia_pago = 2 or 
						recPromedios.cod_frecuencia_pago > 4 then
						montoB := recPromedios.monto;
					end if;
			
		
					if recPromedios.sueldo_basico = 'S' then
						montoSueldoBasico := montoSueldoBasico + montoB;
					elsif recPromedios.compensacion = 'S' then
						montoCompensacion := montoCompensacion + montoB;
					elsif recPromedios.ajuste_sueldo = 'S' then
						montoAjusteSueldo := montoAjusteSueldo + montoB;
					else
						montoOtros := montoOtros + montoB;
					end if;
					
				end loop;
				close curPromedios;
		
		
				remuneracionActual :=  montoA;
		
				diferencia := remuneracionActual - sueldoNuevo;
				ajuste := sueldoNuevo + montoCompensacion;

-- Se ajusta la diferencia
				if pMantenerPaso = 'N' then
					if diferencia <= 0 then
						pasoNuevo = 1;
						compensacionNueva := 0;
					else
						diferencia := diferencia + sueldoNuevo;
						open curTabuladorNuevoPaso(pIdTabuladorNuevo,
							recTrabajadores.grado,
							recTrabajadores.sub_grado,
 							diferencia);
						fetch curTabuladorNuevoPaso into
							recTabuladorNuevoPaso;
						if recTabuladorNuevoPaso.monto is not null then
						    compensacionNueva := 								recTabuladorNuevoPaso.monto - sueldoNuevo;
							pasoNuevo := recTabuladorNuevoPaso.paso;
						else
							compensacionNueva := diferencia - 								sueldoNuevo;
							pasoNuevo := 16;
						end if;
						close curTabuladorNuevoPaso;
					end if;
-- Se mantiene el paso
				elsif pMantenerPaso = 'P' then
					open curTabuladorNuevoPasoViejo(pIdTabuladorNuevo,
						recTrabajadores.grado, recTrabajadores.paso, 							recTrabajadores.sub_grado);
					fetch curTabuladorNuevoPasoViejo into 							recTabuladorNuevoPasoViejo;
					if recTabuladorNuevoPasoViejo.monto is not null 						then compensacionNueva := recTabuladorNuevoPasoViejo.monto 							- sueldoNuevo;
						pasoNuevo := recTabuladorNuevoPasoViejo.paso;
					end if;
					close curTabuladorNuevoPasoViejo;
				else
-- Se ajusta la compensacion
					open curTabuladorNuevoPaso(pIdTabuladorNuevo,
						recTrabajadores.grado, 
						recTrabajadores.sub_grado, ajuste);
					fetch curTabuladorNuevoPaso into recTabuladorNuevoPaso;
					if recTabuladorNuevoPaso.monto is not null then 							compensacionNueva := recTabuladorNuevoPaso.monto - 							sueldoNuevo;
						pasoNuevo := recTabuladorNuevoPaso.paso;
					else
					
						compensacionNueva := montoCompensacion;
						pasoNuevo := 16;
						
					end if;
					close curTabuladorNuevoPaso;
				end if;
				id := last_id_aplicartabulador()+1;			
				if id is null then 
					id := 1;
				end if;
	
				remuneracionNueva := sueldoNuevo + compensacionNueva;
				aumentoDefinitivo := remuneracionNueva - remuneracionActual;
					
				perform  add_aplicartabulador(
					id,				
					pFecha,
					recTrabajadores.grado,
					recTrabajadores.paso,
					montoSueldoBasico,
					montoAjusteSueldo,
					montoCompensacion,
					pasoNuevo,
					sueldoNuevo,
					ajusteNuevo,
					compensacionNueva,
					recTrabajadores.id_trabajador,
					0.0,
					0,
					0.0);

				
			end if;
			close curTabuladorNuevo;
		else

-- aumento semanal
			if pMantenerPaso = 'N' then
				open curTabuladorNuevoSemanal
                               (pIdTabuladorNuevo, recTrabajadores.grado, 1);	
			else
				open curTabuladorNuevoSemanal
  				(pIdTabuladorNuevo, recTrabajadores.grado, 
				recTrabajadores.paso);	
			end if;

			fetch curTabuladorNuevoSemanal into recTabuladorNuevoSemanal;	

			if recTabuladorNuevoSemanal.monto is not null then
				sueldoNuevo := recTabuladorNuevoSemanal.monto;
			end if;


			open curPromedios(recTrabajadores.id_trabajador);
				loop			
					fetch curPromedios into recPromedios;	
					exit when not found;	
		
					if recPromedios.cod_frecuencia_pago = 4 then
						montoB := recPromedios.monto/7;
					elsif recPromedios.cod_frecuencia_pago = 10 then
						montoB := (recPromedios.monto*4)/30;
					elsif recPromedios.cod_frecuencia_pago > 4 then
						montoB := recPromedios.monto/30;
					end if;
			
		
					if recPromedios.sueldo_basico = 'S' then
						montoSueldoBasico := montoSueldoBasico + montoB;
					elsif recPromedios.compensacion = 'S' then
						montoCompensacion := montoCompensacion + montoB;
					elsif recPromedios.ajuste_sueldo = 'S' then
						montoAjusteSueldo := montoAjusteSueldo + montoB;
					else
						montoOtros := montoOtros + montoB;
					end if;
					
				end loop;
				close curPromedios;
		
		
				remuneracionActual :=  montoA;
		
				diferencia := remuneracionActual - sueldoNuevo*7;

			id := last_id_aplicartabulador()+1;			
			if id is null then 
				id := 1;
			end if;
			perform  add_aplicartabulador(
				id,				
				pFecha,
				recTrabajadores.grado,
				recTrabajadores.paso,
				montoSueldoBasico*7,
				montoAjusteSueldo*7,
				0.0,
				pasoNuevo,
				sueldoNuevo*7,
				0,
				0,
				recTrabajadores.id_trabajador,
				0.0,
				0,
				0.0);
			close curTabuladorNuevoSemanal;
	
		end if;
		if pPeriodicidad = 'Q' then
			sueldoNuevo := convert_2_decimal(sueldoNuevo/2);
		elsif pPeriodicidad = 'S' then
			sueldoNuevo := convert_2_decimal(sueldoNuevo)*7;
		end if;

		if recCompensacion.cod_frecuencia_pago = 3 then
			compensacionNueva := convert_2_decimal(compensacionNueva/2);			
		end if;

		--- Actualiza el monto proyetado del concepto sueldo
		update conceptofijo set monto_proyectado = sueldoNuevo 
			where id_trabajador = recTrabajadores.id_trabajador
			and id_concepto_tipo_personal = idSueldo;

		--- Realcula los conceptos (fijos y variables) que tienen asociado al sueldo
		open curConceptosRecalcular(recTrabajadores.id_trabajador, idSueldo);
		loop
			fetch curConceptosRecalcular into recConceptosRecalcular;
			exit when not found;
			montoConceptoCalculado:= calcular_concepto_proyectado(
			recConceptosRecalcular.id_concepto_tipo_personal,
			recTrabajadores.id_trabajador,	
			recConceptosRecalcular.unidades,
			recConceptosRecalcular.tipo,
			recConceptosRecalcular.cod_frecuencia_pago,
			recTrabajadores.jornada_diaria,
			recTrabajadores.jornada_semanal,
			recTrabajadores.formula_integral,
			recTrabajadores.formula_semanal,	
			recTrabajadores.id_cargo,	
			recConceptosRecalcular.valor,
			recConceptosRecalcular.tope_minimo,
			recConceptosRecalcular.tope_maximo);
			if recConceptosRecalcular.tipo_concepto = 'F' then
				update conceptofijo set monto_proyectado = montoConceptoCalculado
					where id_concepto_fijo = recConceptosRecalcular.id_concepto_fijo;
			end if;
		end loop;
		close curConceptosRecalcular;

		if compensacionNueva <> 0 then
			update conceptofijo set monto_proyectado = compensacionNueva
				where id_trabajador = recTrabajadores.id_trabajador
				and id_concepto_tipo_personal = idCompensacion;
			--- Realcula los conceptos (fijos y variables) que tienen asociado al sueldo
			open curConceptosRecalcular(recTrabajadores.id_trabajador, idCompensacion);
			loop
				fetch curConceptosRecalcular into recConceptosRecalcular;
				exit when not found;
				perform calcular_concepto_proyectado(
				recConceptosRecalcular.id_concepto_tipo_personal,
				recTrabajadores.id_trabajador,	
				recConceptosRecalcular.unidades,
				recConceptosRecalcular.tipo,
				recConceptosRecalcular.cod_frecuencia_pago,
				recTrabajadores.jornada_diaria,
				recTrabajadores.jornada_semanal,
				recTrabajadores.formula_integral,
				recTrabajadores.formula_semanal,	
				recTrabajadores.id_cargo,	
				recConceptosRecalcular.valor,
				recConceptosRecalcular.tope_minimo,
				recConceptosRecalcular.tope_maximo);

				if recConceptosRecalcular.tipo = 'F' then
					update conceptofijo set monto_proyectado = montoConceptoCalculado
						where id_concepto_fijo = recConceptosRecalcular.id_concepto_fijo;
				end if;
			end loop;
			close curConceptosRecalcular;
		end if;
		if pProceso = '2' then
			if pPeriodicidad = 'Q' then
				sueldoNuevo = sueldoNuevo*2;
			elsif pPeriodicidad = 'S' then
				sueldoNuevo = sueldoNuevo/7;
			end if;

			update trabajador set sueldo_basico = sueldoNuevo,
				paso = pasoNuevo
				where id_trabajador = recTrabajadores.id_trabajador;

			if pPeriodicidad = 'Q' then
				sueldoNuevo = sueldoNuevo/2;
                                montoAjusteSueldo = montoAjusteSueldo/2;
			elsif pPeriodicidad = 'S' then
				sueldoNuevo = sueldoNuevo*7;
				montoAjusteSueldo = montoAjusteSueldo*7;
                        end if;
		

			update conceptofijo set monto_anterior = monto+montoAjusteSueldo,
                                                monto = sueldoNuevo 
				where id_trabajador = recTrabajadores.id_trabajador
				and id_concepto_tipo_personal = idSueldo;				

			if compensacionNueva <> 0 then
				
				if montoCompensacion > 0 then
					if compensacionNueva = 0 then
						delete from conceptofijo 
							where id_trabajador = recTrabajadores.id_trabajador 
							and id_concepto_tipo_personal = idCompensacion;
					else
						update conceptofijo set monto_anterior = monto,
                                                              monto = compensacionNueva
							where id_trabajador = recTrabajadores.id_trabajador
							and id_concepto_tipo_personal = idCompensacion;
					end if;
				else
					if compensacionNueva <> 0 then
						idConceptoFijo := last_id_conceptofijo()+1;
						if idConceptoFijo is null then
							idConceptoFijo = 1;
						end if;
						perform add_conceptofijo(
							idConceptoFijo,
							recTrabajadores.id_trabajador,
							recCompensacion.id_concepto_tipo_personal,
							recCompensacion.id_frecuencia_tipo_personal,
							0,
							convert_2_decimal(compensacionNueva),
							pFecha,
							pFecha,
							null,
							null,
							'A',
							'N',
							0,
							0,
							0);
					end if;
				end if;								
			end if;
			
		end if;
		--end if;
		--close curTabuladorNuevo;
	end loop;
	close curTrabajadores;

	if pProceso = '2' then
		delete from conceptofijo 
			where id_trabajador in(
			select distinct t.id_trabajador		
			from trabajador t, cargo c, manualcargo mc
			where t.id_tipo_personal = pIdTipoPersonal
			and t.id_cargo = c.id_cargo
			and c.id_manual_cargo = mc.id_manual_cargo
			and mc.id_tabulador = pIdTabuladorActual
			and t.estatus = 'A')
			and id_concepto_tipo_personal in
			(select id_concepto_tipo_personal 
			from conceptoevaluacion 
			where id_tipo_personal = pIdTipoPersonal 
			and eliminar_despues_aumento = 'S');
	end if;

	delete from identity;

	return 1;
end;
$_$;


ALTER FUNCTION public.calcular_aumento_tabulador(integer, integer, integer, character varying, character varying, date, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 689 (class 1255 OID 183652)
-- Name: calcular_bono_fin_anio(integer, date, date, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_bono_fin_anio(integer, date, date, character varying, character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;
	pFechaInicio alias for $2;
	pFechaFin alias for $3;
	pProceso alias for $4;
	pEstatus alias for $5;
	pUsuario alias for $6;
	pPeriodicidad alias for $7;


	recConceptoAlicuota record;
	curConceptoAlicuota cursor(pIdTipoPersonal int4)
		for select ctp.id_concepto_tipo_personal, ctp.tipo, ctp.unidades
			from conceptotipopersonal ctp, concepto c
			where ctp.id_tipo_personal = pIdTipoPersonal 
                        and c.cod_concepto = '1601'
			and ctp.id_concepto = c.id_concepto;

	recConceptoBonoVacacional record;
	curConceptoBonoVacacional cursor(pIdTipoPersonal int4)
		for select id_concepto_tipo_personal, id_frecuencia_tipo_personal
		from conceptotipopersonal, concepto 
		where conceptotipopersonal.id_concepto = concepto.id_concepto
		and id_tipo_personal = pIdTipoPersonal 
                and concepto.cod_concepto = '1500';

	recParametroVarios record;
	curParametroVarios cursor (pIdTipoPersonal int4)
		for select * from parametrovarios 
                where id_tipo_personal = pIdtipoPersonal;

	recConceptoUtilidades record;
	curConceptoUtilidades cursor (pIdTipoPersonal int4) 
		for select distinct id_concepto_tipo_personal, tipo, tope_unidades, 
		tope_monto, numero_meses, numero_dias,  mes_inicio, mes_final, semana_buscar,
                mes_buscar, factor
		from conceptoutilidades 
		where id_tipo_personal = pIdTipoPersonal;

	recConceptoPetrolero record;
	curConceptoPetrolero cursor (pIdTipoPersonal int4)
		for select distinct ctp.id_concepto_tipo_personal, ctp.tipo, ctp.unidades 
		from conceptotipopersonal ctp, concepto c 
		where ctp.id_tipo_personal = pIdTipoPersonal 
                and c.cod_concepto = '1701'
		and ctp.id_concepto = c.id_concepto;

	recConceptoBonoFinAnio record;
	curConceptoBonoFinAnio cursor (pIdTipoPersonal int4)
		for select distinct id_concepto_tipo_personal, id_frecuencia_tipo_personal 
		from conceptotipopersonal, concepto 
		where conceptotipopersonal.id_concepto = concepto.id_concepto
		and id_tipo_personal = pIdTipoPersonal 
                and concepto.cod_concepto = '1600';

	recTrabajadores record;
	curTrabajadores cursor (pIdTipoPersonal int4, pEstatus varchar, pFecha date)
		for select distinct t.id_trabajador, t.anio_ingreso, t.mes_vacaciones, 	
		t.anio_vacaciones, t.mes_ingreso, t.dia_ingreso, t.dia_ingreso, t.id_cargo, 
		p.anios_servicio_apn, tu.jornada_diaria, tu.jornada_semanal, tp.formula_integral, 
		tp.formula_semanal, t.dia_egreso, t.mes_egreso, t.anio_egreso
		from trabajador t, personal p, tipopersonal tp, turno tu
		where t.id_personal = p.id_personal
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.id_turno = tu.id_turno
                and t.fecha_ingreso < pFecha
		and t.id_tipo_personal = pIdTipoPersonal 
                and t.estatus = pEstatus;

	recUtilidadesPorAnio record;
	curUtilidadesPoranio cursor(pIdTipoPersonal int4, pAniosCumple int4)
		for select * from utilidadesporanio 
		where id_tipo_personal = pIdTipoPersonal 
                and anios_servicio <= pAniosCumple
		order by anios_servicio desc limit 1;


	recConceptosTipoB record;
	curConceptosTipoB cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		for select distinct cf.monto, cf.unidades, fp.cod_frecuencia_pago 
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = pIdTrabajador 
		and cf.estatus = 'A'; 


	recConceptosTipoX record;
	curConceptosTipoX cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		for select distinct cv.monto, cv.unidades, fp.cod_frecuencia_pago 
		from conceptovariable cv, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cv.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cv.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cv.id_trabajador = pIdTrabajador 
		and cv.estatus = 'A'; 

	recHistoricoQuincenaTipoD record;
	curHistoricoQuincenaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
		pAnio int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades 
		from historicoquincena hq 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;


	recHistoricoSemanaTipoD record;
	curHistoricoSemanaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
		pAnio int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades 
		from historicosemana hs 
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;

	recHistoricoQuincenaTipoM record;
	curHistoricoQuincenaTipoM cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
		pAnio int4, pMes int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades
		from historicoquincena hq
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio and mes = pMes
		group by id_trabajador;

	recHistoricoSemanaTipoM record;
	curHistoricoSemanaTipoM cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
		pAnio int4, pSemana int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades
		from historicosemana hq
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio 
                and semana_quincena = pSemana
		group by id_trabajador;

	recHistoricoQuincenaTipoP record;
	curHistoricoQuincenaTipoP cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
	periodoInicio int4, periodoFin int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades 
		from historicoquincena hq 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio*100+mes >= periodoInicio 
                and  anio*100+mes <= periodoFin
		group by id_trabajador;

	recHistoricoSemanaTipoP record;
	curHistoricoSemanaTipoP cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 	
	periodoInicio int4, periodoFin int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades 
		from historicosemana hs 
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio*100+mes >= periodoInicio 
                and anio*100+mes <= periodoFin
		group by id_trabajador;

	recTrabajadoresSinBonoVacacionalQuincena record;
	curTrabajadoresSinBonoVacacionalQuincena cursor(pIdTrabajador int4, pAnio int4)
		for select count(*) as contador from historicoquincena hq, conceptotipopersonal
                ctp, concepto c
		where hq.id_trabajador = pIdTrabajador
		and hq.anio = pAnio
		and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto = '1500';

	recTrabajadoresSinBonoVacacionalSemana record;
	curTrabajadoresSinBonoVacacionalSemana cursor(pIdTrabajador int4, pAnio int4)
		for select count(*) as contador from historicosemana hs, conceptotipopersonal ctp,
                concepto c
                where hs.id_trabajador = pIdTrabajador
		and hs.anio = pAnio
		and hs.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto = '1500';

	recUltimaNomina record;
	curUltimaNomina cursor(pIdTipoPersonal int4, pAnio int4)
		for select max(mes) as mes_promedio, max(semana_quincena) as periodo_promedio
		from seguridadordinaria so, tipopersonal tp
                where so.anio = pAnio
		and so.id_grupo_nomina = tp.id_grupo_nomina
		and tp.id_tipo_personal = pIdTipoPersonal;

	recUltimaSemana record;
	curUltimaSemana cursor(pIdTipoPersonal int4, pAnio int4, pMes int4)
		for select max(semana_anio) as ultima_semana
		from semana se, tipopersonal tp
                where se.anio = pAnio
		and se.mes = pMes
		and se.id_grupo_nomina = tp.id_grupo_nomina
		and tp.id_tipo_personal = pIdTipoPersonal;

	recNumeroSemana record;
	curNumeroSemana cursor(pIdTipoPersonal int4, pAnio int4, pMes int4)
		for select max(semana_mes) as numero_semana
		from semana se, tipopersonal tp
                where se.anio = pAnio
		and se.mes = pMes
		and se.id_grupo_nomina = tp.id_grupo_nomina
		and tp.id_tipo_personal = pIdTipoPersonal;

        
                    
	id int4 := 0;
	montoA float8 := 0;	
	montoB float8 := 0;	
	montoC float8 := 0;	
	montoD float8 := 0;
        montoE float8 := 0;
	montoF float8 := 0;
        montoG float8 := 0;
	totalMontoA float8 := 0; -- basicos (B)	
	totalMontoB float8 := 0; -- proyectados variables (X)
	totalMontoC float8 := 0; -- de un mes (M)
	totalMontoD float8 := 0; -- devengado anual (D)
        totalMontoE float8 := 0; -- promedio de meses (P)
	totalMontoF float8 := 0; -- proyectado fijos (E)
	totalMontoG float8 := 0; -- proyectado fijos (E)
	totalUnidades float8 := 0;
	aniosCumple int4 := 0;	
	diasBono float8 := 0;		
	otrasAlicuotas float8 := 0;
	bonoSinAlicuota float8 := 0;
	totalBono float8 := 0;
	montoVariable float8 := 0;
	bonoExtra float8 := 0;
	mes int4 := 0;
	dividir int4 := 0;	
	montoPetrolero float8 := 0;
	montoBonoVacacional float8 := 0;
	fechaFin date;
        pFecha date;
	periodoInicio int4 := 0;
	periodoFin int4 := 0;
	diasDividir int4 := 0;
        fin date;
	inicio date;
	dias int4 := 0;
        dias_dividir float8 := 0;
	frecuencia int4 := 0; 
	mesesTrabajando int4 := 0;
	aniosCumpleVacaciones int4 := 0;
	idConceptoTipoPersonalAlicuota int4 := 0;
	tipoAlicuota varchar;
	unidadesAlicuota float8 := 0;
	idConceptoTipoPersonalPetrolero int4 := 0;
	tipoPetrolero varchar;
	unidadesPetrolero float8 := 0;
        mes_inicio int4 := 0;
	mes_final int4 := 0;
	anio_inicio int4 := 0;
	anio_final int4 := 0;
	
begin

        raise notice 'si pasa PV ';
	open curParametroVarios(pIdTipoPersonal);
	fetch curParametroVarios into recParametroVarios;			
	if not found then
		return 10;
	end if;
raise notice 'si pasa CBFA ';
       
        if recParametroVarios.fecha_tope_utilidades is null then
           pFecha := pFechaFin;
        else
           pFecha := recParametroVarios.fecha_tope_utilidades;
	end if;

       

        if recParametroVarios.tipo_calculo_bfa= 'D'  then
           dias_dividir := recParametroVarios.dias_anio;
        else
           dias_dividir := 1;
	end if;

-- Se lee la ultima nomina procesada

	open curUltimaNomina(pIdTipoPersonal, extract(year from pFechaFin));
        fetch curUltimaNomina into recUltimaNomina;			
	if not found then
		return 14;
	end if;

-- Se lee el numero de semanas del mes de la ultima nomina

        if pPeriodicidad = 'S' then
	raise notice 'va a abrir ultima semana ';
		open curUltimaSemana(pIdTipoPersonal, extract(year from pFechaFin),
				recUltimaNomina.mes_promedio);
        	fetch curUltimaSemana into recUltimaSemana;
		raise notice 'leyo ultima semana ';			
		if not found then
			return 15;
		end if;
        end if;

	mes := recUltimaNomina.mes_promedio;

        if pPeriodicidad <> 'S' then
	   dividir := 30;
           if recUltimaNomina.periodo_promedio = 1 then
              mes := mes - 1;
              if mes = 0 then
                 mes := 1;
              end if;
           end if;
        else
           if recUltimaNomina.periodo_promedio <> recUltimaSemana.ultima_semana then
	      raise notice 'no es la ultima semana ';
              mes := mes - 1;
              if mes = 0 then
                 mes := 1;
              end if;
           end if;
        	open curNumeroSemana(pIdTipoPersonal, extract(year from pFechaFin), mes);
       		fetch curNumeroSemana into recNumeroSemana;
		raise notice 'leyo cuantas semanas ';			
		if not found then
			return 15;
		end if;

 	   dividir := 7 * recNumeroSemana.numero_semana;
	
         end if;

	



	raise notice 'si pasa CBFA ';
	open curConceptoBonoFinAnio(pIdTipoPersonal);
	fetch curConceptoBonoFinAnio into recConceptoBonoFinAnio;			
	if not found then
		return 11;
	end if;

	open curConceptoAlicuota(pIdTipoPersonal);
	fetch curConceptoAlicuota into recConceptoAlicuota;			
	if not found then		
	else
		idConceptoTipoPersonalAlicuota := recConceptoAlicuota.id_concepto_tipo_personal;
		tipoAlicuota := recConceptoAlicuota.tipo;
		unidadesAlicuota := recConceptoAlicuota.unidades;
	end if;

	open curConceptoBonoVacacional(pIdTipoPersonal);
	fetch curConceptoBonoVacacional into recConceptoBonoVacacional;			
	if not found then
		return 13;
	end if;

	open curConceptoPetrolero(pIdTipoPersonal);
	fetch curConceptoPetrolero into recConceptoPetrolero;			
	if not found then		
	else
		idConceptoTipoPersonalPetrolero := recConceptoPetrolero.id_concepto_tipo_personal;
		tipoPetrolero := recConceptoPetrolero.tipo;
		unidadesPetrolero := recConceptoPetrolero.unidades;
	end if;

	delete from calculobonofinanio where id_tipo_personal = pIdTipoPersonal;

	open curTrabajadores(pIdTipoPersonal, pEstatus, pFecha);

	loop
	     fetch curTrabajadores into recTrabajadores;	
	     exit when not found;

                        
             if pEstatus =  'E' and 
                recTrabajadores.anio_egreso < extract(year from pFechaFin) then

             else
               
               	totalUnidades := 0;
		totalMontoA := 0;	
		totalMontoB := 0;	
		totalMontoC := 0;
		totalMontoD := 0;
		totalMontoE := 0;
		totalMontoF := 0;
		totalMontoG := 0;
		aniosCumple := 0;
		aniosCumpleVacaciones := 0;

		aniosCumple := extract(year from pFechaFin) - recTrabajadores.anio_ingreso;
		aniosCumpleVacaciones := extract(year from pFechaFin) -
	 				 recTrabajadores.anio_vacaciones;

		if recParametroVarios.sumo_apn = 'S'  and 
                   recTrabajadores.anios_servicio_apn > 0 then
			aniosCumple := aniosCumple + recTrabajadores.anios_servicio_apn;
			aniosCumpleVacaciones := aniosCumpleVacaciones +
					 recTrabajadores.anios_servicio_apn;

			raise notice 'aniosCumple mas APN %', aniosCumple;

		end if;

		open curUtilidadesPorAnio(pIdTipoPersonal, aniosCumple);
		fetch curUtilidadesPorAnio into recUtilidadesPorAnio;			
		exit when not found;

		diasBono := 0;

		open curConceptoUtilidades(pIdTipoPersonal);

		loop			
		   fetch curConceptoUtilidades into recConceptoUtilidades;	
	           exit when not found;

		   montoA := 0;	
		   montoB := 0;	
		   montoC := 0;	
		   montoD := 0;
		   montoE := 0;
		   montoF := 0;
		   montoG := 0;

		 
-- conceptos fijos
		   if recConceptoUtilidades.tipo = 'B'  then
		      open curConceptosTipoB 
		        (recConceptoUtilidades.id_concepto_tipo_personal, 
		         recTrabajadores.id_trabajador);

		      loop			
			fetch curConceptosTipoB into recConceptosTipoB;	
			exit when not found;

			totalUnidades = totalUnidades + recConceptosTipoB.unidades;

			recConceptosTipoB.monto := recConceptosTipoB.monto *
					 recConceptoUtilidades.factor;
			if recConceptosTipoB.cod_frecuencia_pago = 3 then
				montoA := montoA + recConceptosTipoB.monto*2;
			elsif recConceptosTipoB.cod_frecuencia_pago = 4 then
				montoA := montoA + (recConceptosTipoB.monto/7)*30;
			elsif recConceptosTipoB.cod_frecuencia_pago = 10 then
				montoA := montoA + (recConceptosTipoB.monto*4);
			elsif recConceptosTipoB.cod_frecuencia_pago = 1 or 
				recConceptosTipoB.cod_frecuencia_pago = 2 or 
				recConceptosTipoB.cod_frecuencia_pago > 4 then
 				montoA := montoA + recConceptosTipoB.monto;
			end if;

		      end loop;

			if recConceptoUtilidades.tope_unidades <> 0 and 			   				   recConceptoUtilidades.tope_unidades < totalUnidades then
			   montoA := (montoA /totalUnidades) *
					recConceptoUtilidades.tope_unidades;
			end if;

			if recConceptoUtilidades.tope_monto <> 0 and
			   recConceptoUtilidades.tope_monto < montoA then
			   montoA := recConceptoUtilidades.tope_monto;
			end if;	

			   montoA := montoA/30;
			   totalMontoA := totalMontoA + montoA;
		           close curConceptosTipoB;
                           raise notice 'termino Basico';

		  end if;

-- conceptos variables
		   if recConceptoUtilidades.tipo = 'X' then

	              open curConceptosTipoX 
		       	(recConceptoUtilidades.id_concepto_tipo_personal, 
			recTrabajadores.id_trabajador);

		      loop			
			fetch curConceptosTipoX into recConceptosTipoX;	
			exit when not found;

			totalUnidades = totalUnidades + recConceptosTipoX.unidades;

			recConceptosTipoX.monto := recConceptosTipoX.monto *
				 recConceptoUtilidades.factor;

			montoB := montoB + recConceptosTipoX.monto;
					
		      end loop;

			if recConceptoUtilidades.tope_unidades <> 0 and 			   				   recConceptoUtilidades.tope_unidades < totalUnidades then
			   montoB := (montoB /totalUnidades) *
					recConceptoUtilidades.tope_unidades;
			end if;

			if recConceptoUtilidades.tope_monto <> 0 and
			   recConceptoUtilidades.tope_monto < montoB then
			   montoB := recConceptoUtilidades.tope_monto;
			end if;	

			montoB := montoB/recParametroVarios.dias_anio;
		        totalMontoB := totalMontoB + montoB;
                        raise notice 'termino Variable';
			close curConceptosTipoX;

		    end if;

-- Devengado a un mes
		    if recConceptoUtilidades.tipo = 'M' then

		       if pPeriodicidad = 'S' then

			  open curHistoricoSemanaTipoM 
		               (recConceptoUtilidades.id_concepto_tipo_personal, 
				recTrabajadores.id_trabajador, 
				extract(year from pFechaFin), 
				recConceptoUtilidades.semana_buscar);

			  loop			
			    fetch curHistoricoSemanaTipoM into recHistoricoSemanaTipoM;	
			    exit when not found;

			    totalUnidades := totalUnidades +recHistoricoSemanaTipoM.unidades;
                            recHistoricoSemanaTipoM.monto := recHistoricoSemanaTipoM.monto * 
					     recConceptoUtilidades.factor;

			    montoC := montoC + recHistoricoSemanaTipoM.monto;

			  end loop;	

			  close curHistoricoSemanaTipoM;				

		       else
			  open curHistoricoQuincenaTipoM
			       (recConceptoUtilidades.id_concepto_tipo_personal, 
				recTrabajadores.id_trabajador, 
				extract(year from pFechaFin), 
				recConceptoUtilidades.mes_buscar);

			  loop			
			     fetch curHistoricoQuincenaTipoM into recHistoricoQuincenaTipoM;
			     exit when not found;

			     totalUnidades := totalUnidades + recHistoricoQuincenaTipoM.unidades;

                             recHistoricoQuincenaTipoM.monto := recHistoricoQuincenaTipoM.monto * 
					recConceptoUtilidades.factor;

			     montoC := montoC + recHistoricoQuincenaTipoM.monto;

			     
			   end loop;

				close curHistoricoQuincenaTipoM;

		       end if;

				if recConceptoUtilidades.tope_unidades <> 0 and 				   recConceptoUtilidades.tope_unidades < totalUnidades then
				   montoC := (montoC /totalUnidades) *
						recConceptoUtilidades.tope_unidades;
				end if;

				if recConceptoUtilidades.tope_monto <> 0 and
				   recConceptoUtilidades.tope_monto < montoC then
				   montoC := recConceptoUtilidades.tope_monto;
				end if;	
						                             
                                montoC := montoC / recParametroVarios.dias_anio;
				totalMontoC := totalMontoC + montoC;
                                raise notice 'termino Promedio';	
				
		      end if;

-- conceptos devengados
			if recConceptoUtilidades.tipo = 'D' then
				if pPeriodicidad = 'S' then
				   open curHistoricoSemanaTipoD 
				     (recConceptoUtilidades.id_concepto_tipo_personal, 
				      recTrabajadores.id_trabajador, 
				      extract(year from pFechaFin));

				   loop			
				      fetch curHistoricoSemanaTipoD into
				            recHistoricoSemanaTipoD;	
                  		      exit when not found;

				      totalUnidades := totalUnidades +
					recHistoricoSemanaTipoD.unidades;

				      recHistoricoSemanaTipoD.monto :=
					recHistoricoSemanaTipoD.monto * 
					recConceptoUtilidades.factor;	

				      montoD := montoD + recHistoricoSemanaTipoD.monto;

				     
				  end loop;

				  close curHistoricoSemanaTipoD;

				else

				  open curHistoricoQuincenaTipoD
					(recConceptoUtilidades.id_concepto_tipo_personal,
					 recTrabajadores.id_trabajador, 
					 extract(year from pFechaFin));

				  loop			
				     fetch curHistoricoQuincenaTipoD into 
					   recHistoricoQuincenaTipoD;	
				     exit when not found;

				     totalUnidades := totalUnidades +
	 					recHistoricoQuincenaTipoD.unidades;

				     recHistoricoQuincenaTipoD.monto := 
						recHistoricoQuincenaTipoD.monto *
 						recConceptoUtilidades.factor;	

				     montoD := montoD + recHistoricoQuincenaTipoD.monto;

				   end loop;

				   close curHistoricoQuincenaTipoD;

				end if;

				 if recConceptoUtilidades.tope_unidades <> 0 and
 				    recConceptoUtilidades.tope_unidades < totalUnidades then
				    montoD := (montoD /totalUnidades)*
						 recConceptoUtilidades.tope_unidades; 
				 end if;

				 if recConceptoUtilidades.tope_monto <> 0 and
				    recConceptoUtilidades.tope_monto < montoD then
				    montoD := recConceptoUtilidades.tope_monto;
		                 end if;	

                                montoD := montoD / dias_dividir;
                                totalMontoD := totalMontoD + montoD;

                                raise notice 'termino Devengado';

                        end if;
-- conceptos promedio
			if recConceptoUtilidades.tipo = 'P' then
                           anio_inicio   := extract(year from pFechaFin);
                           anio_final    := extract(year from pFechaFin);
                           mes_inicio    := recConceptoUtilidades.mes_Inicio;
                           mes_final     := recConceptoUtilidades.mes_Final;
			   periodoInicio := (anio_inicio * 100)+ mes_inicio;
			   periodoFin    := (anio_final * 100)+ mes_final;
			   totalUnidades := 0;
			
-- grupos quincenales
                           if pPeriodicidad <> 'S' then
                     
                              open curHistoricoQuincenaTipoP
 				  (recConceptoUtilidades.id_concepto_tipo_personal,
				   recTrabajadores.id_trabajador, periodoInicio, periodoFin);

                              loop

				fetch curHistoricoQuincenaTipoP into recHistoricoQuincenaTipoP;
				exit when not found;

				totalUnidades := totalUnidades +
						 recHistoricoQuincenaTipoP.unidades;

				recHistoricoQuincenaTipoP.monto := 
				     	      recHistoricoQuincenaTipoP.monto *
					      recConceptoUtilidades.factor;
				montoE := montoE + recHistoricoQuincenaTipoP.monto;

			      end loop;

				close curHistoricoQuincenaTipoP;
				   					
			   else

				open curHistoricoSemanaTipoP
 				  (recConceptoUtilidades.id_concepto_tipo_personal,
				   recTrabajadores.id_trabajador, periodoInicio, periodoFin);

                              loop

				fetch curHistoricoSemanaTipoP into recHistoricoSemanaTipoP;
				exit when not found;

				totalUnidades := totalUnidades +
						 recHistoricoSemanaTipoP.unidades;

				recHistoricoSemanaTipoP.monto := 
				     	      recHistoricoSemanaTipoP.monto *
					      recConceptoUtilidades.factor;
				montoE := montoE + recHistoricoSemanaTipoP.monto;

			      end loop;

				close curHistoricoSemanaTipoP;

			   end if;
			

				montoE := montoE/recConceptoUtilidades.numero_dias;

				totalMontoE  := totalMontoE + montoE;

                                raise notice 'termino Promedio';

		        end if;

--conceptos devengados y proyectados

			if recConceptoUtilidades.tipo = 'E' then
                           
			   totalUnidades := 0;
			
-- grupos quincenales
                           if pPeriodicidad <> 'S' then
                     
                              open curHistoricoQuincenaTipoD
					(recConceptoUtilidades.id_concepto_tipo_personal,
					 recTrabajadores.id_trabajador, 
					 extract(year from pFechaFin));

				  loop			
				     fetch curHistoricoQuincenaTipoD into 
					   recHistoricoQuincenaTipoD;	
				     exit when not found;

				     totalUnidades := totalUnidades +
	 					recHistoricoQuincenaTipoD.unidades;

				     recHistoricoQuincenaTipoD.monto := 
						recHistoricoQuincenaTipoD.monto *
 						recConceptoUtilidades.factor;	

				     montoF := montoF + recHistoricoQuincenaTipoD.monto;

				   end loop;

			       close curHistoricoQuincenaTipoD;

				                     
                               open curConceptosTipoB 
		                 (recConceptoUtilidades.id_concepto_tipo_personal, 
		                  recTrabajadores.id_trabajador);

		               loop			
			         fetch curConceptosTipoB into recConceptosTipoB;	
			         exit when not found;

			         totalUnidades = totalUnidades + recConceptosTipoB.unidades;

			         recConceptosTipoB.monto := recConceptosTipoB.monto *
					         recConceptoUtilidades.factor;
			         if recConceptosTipoB.cod_frecuencia_pago = 3 then
				   montoG := montoG + recConceptosTipoB.monto*2;
			         elsif recConceptosTipoB.cod_frecuencia_pago = 4 then
				   montoG := montoG + (recConceptosTipoB.monto/7)*30;
			         elsif recConceptosTipoB.cod_frecuencia_pago = 10 then
				   montoG := montoG + (recConceptosTipoB.monto*4);
			         elsif recConceptosTipoB.cod_frecuencia_pago = 1 or 
				   recConceptosTipoB.cod_frecuencia_pago = 2 or 
				   recConceptosTipoB.cod_frecuencia_pago > 4 then
 				   montoG := montoG + recConceptosTipoB.monto;
			         end if;

		              end loop;

			      close curConceptosTipoB;
			
			        montoG := montoG * recConceptoUtilidades.numero_meses;

			     	        
			   else
 				open curHistoricoSemanaTipoD
					(recConceptoUtilidades.id_concepto_tipo_personal,
					 recTrabajadores.id_trabajador, 
					 extract(year from pFechaFin));

				  loop			
				     fetch curHistoricoSemanaTipoD into 
					   recHistoricoSemanaTipoD;	
				     exit when not found;

				     totalUnidades := totalUnidades +
	 					recHistoricoSemanaTipoD.unidades;

				     recHistoricoSemanaTipoD.monto := 
						recHistoricoSemanaTipoD.monto *
 						recConceptoUtilidades.factor;	

				     montoF := montoF + recHistoricoSemanaTipoD.monto;

				   end loop;

			       close curHistoricoSemanaTipoD;

				                     
                               open curConceptosTipoB 
		                 (recConceptoUtilidades.id_concepto_tipo_personal, 
		                  recTrabajadores.id_trabajador);

		               loop			
			         fetch curConceptosTipoB into recConceptosTipoB;	
			         exit when not found;

			         totalUnidades = totalUnidades + recConceptosTipoB.unidades;

			         recConceptosTipoB.monto := recConceptosTipoB.monto *
					         recConceptoUtilidades.factor;
			         if recConceptosTipoB.cod_frecuencia_pago = 3 then
				   montoG := montoG + recConceptosTipoB.monto*2;
			         elsif recConceptosTipoB.cod_frecuencia_pago = 4 then
				   montoG := montoG + (recConceptosTipoB.monto/7)*30;
			         elsif recConceptosTipoB.cod_frecuencia_pago = 10 then
				   montoG := montoG + (recConceptosTipoB.monto*4);
			         elsif recConceptosTipoB.cod_frecuencia_pago = 1 or 
				   recConceptosTipoB.cod_frecuencia_pago = 2 or 
				   recConceptosTipoB.cod_frecuencia_pago > 4 then
 				   montoG := montoG + recConceptosTipoB.monto;
			         end if;

		              end loop;

			      close curConceptosTipoB;
			
			      montoG := montoG * recConceptoUtilidades.numero_meses;

			   end if;
				
			      montoF := (montoF + montoG) / recParametroVarios.dias_anio;

			      totalMontoF := totalMontoF + montoF;

                              raise notice 'termino Proyectado';
		
		        end if;


		end loop;

		montoPetrolero := 0;

		montoBonoVacacional := 0;

		diasBono := recUtilidadesPorAnio.dias_bono;

		if pEstatus = 'A'  then

                   if recParametroVarios.tipo_calculo_bfa = 'D' then 

		       if aniosCumple = 0 then
			    mesesTrabajando := 12 - recTrabajadores.mes_ingreso;
			    if recTrabajadores.dia_ingreso = 1 then
			 	mesesTrabajando := mesesTrabajando +1;
			    end if;			
			    diasBono := (diasBono*mesesTrabajando)/12;
		       end if;

                    end if;


		    if recParametroVarios.alicuota_bvac_bfa = 'S' then
			if pPeriodicidad = 'Q'  then
                           
                       	   if recTrabajadores.anio_vacaciones < extract(year from pFechaFin) then
				open curTrabajadoresSinBonoVacacionalQuincena
					(recTrabajadores.id_trabajador,
					 extract(year from pFechaFin));
				loop

				 fetch curTrabajadoresSinBonoVacacionalQuincena into
				       recTrabajadoresSinBonoVacacionalQuincena;	
                                 exit when recTrabajadoresSinBonoVacacionalQuincena.contador > 0;

				 montoBonoVacacional := calcular_bonovacacional_trabajador
						(recTrabajadores.id_trabajador,
						 recConceptoAlicuota.id_concepto_tipo_personal,
						 recConceptoAlicuota.tipo,
						 recConceptoAlicuota.unidades,
						 recConceptoPetrolero.id_concepto_tipo_personal,
						 recConceptoPetrolero.tipo,
						 recConceptoPetrolero.unidades,
						 aniosCumpleVacaciones, pIdTipoPersonal,
						 cast(extract(year from pFechaFin) as int4),
						 pPeriodicidad,
						 recParametroVarios.dias_anio,
						 recParametroVarios.alicuota_bfa_bvac,
						 recParametroVarios.alicuota_bono_petrolero, 
						 recTrabajadores.jornada_diaria,
						 recTrabajadores.jornada_semanal,
						 recTrabajadores.formula_integral,
						 recTrabajadores.formula_semanal,
						 recParametroVarios.constante_petrolero_a,
						 recParametroVarios.constante_petrolero_b,
						 recParametroVarios.constante_petrolero_c,
                                                 mes, dividir);

		                montoBonoVacacional := montoBonoVacacional /  dias_dividir;
				exit;		

				end loop;

				close curTrabajadoresSinBonoVacacionalQuincena;

                              end if;

			else
                           if recTrabajadores.anio_vacaciones < extract(year from pFechaFin) then
				open curTrabajadoresSinBonoVacacionalSemana
					(recTrabajadores.id_trabajador, 
					  extract(year from pFechaFin));

				loop

				fetch curTrabajadoresSinBonoVacacionalSemana into
					 recTrabajadoresSinBonoVacacionalSemana;
 				exit when recTrabajadoresSinBonoVacacionalSemana.contador > 0;

                                montoBonoVacacional := calcular_bonovacacional_trabajador
						(recTrabajadores.id_trabajador,
						 recConceptoAlicuota.id_concepto_tipo_personal,
						 recConceptoAlicuota.tipo,
						 recConceptoAlicuota.unidades,
						 recConceptoPetrolero.id_concepto_tipo_personal,
						 recConceptoPetrolero.tipo,
						 recConceptoPetrolero.unidades,
						 aniosCumpleVacaciones,pIdTipoPersonal,
						 cast(extract(year from pFechaFin) as int4),
						 pPeriodicidad,
						 recParametroVarios.dias_anio,
						 recParametroVarios.alicuota_bfa_bvac,
						 recParametroVarios.alicuota_bono_petrolero,
						 recTrabajadores.jornada_diaria,
						 recTrabajadores.jornada_semanal,
						 recTrabajadores.formula_integral,
						 recTrabajadores.formula_semanal, 							 recParametroVarios.constante_petrolero_a, 
						 recParametroVarios.constante_petrolero_b, 
						 recParametroVarios.constante_petrolero_c,
						 mes, dividir);

				montoBonoVacacional := montoBonoVacacional /  dias_dividir;	
				
				exit;
			           
				end loop;
				close curTrabajadoresSinBonoVacacionalSemana;
                                end if;

			    end if;

		    end if;
     
             else
-- egresados
	     if recParametroVarios.tipo_calculo_bfa= 'D'  then

	       if aniosCumple = 0 then
	          mesesTrabajando := recTrabajadores.mes_egreso - recTrabajadores.mes_ingreso;
             
			if recTrabajadores.dia_ingreso = 1 and
                           ((recTrabajadores.dia_egreso = 30 and
                            recTrabajadores.mes_egreso in (4,6,9,11)) or
                           (recTrabajadores.dia_egreso = 31 and
                            recTrabajadores.mes_egreso in (1,3,5,7,8,10,12)) or
                           (recTrabajadores.dia_egreso in (28, 29) and
                            recTrabajadores.mes_egreso = 2) )
                         then
			 	mesesTrabajando := mesesTrabajando +1;
			 else
			   if recTrabajadores.dia_ingreso > 1 and
                             ((recTrabajadores.dia_egreso < 30 and
                              recTrabajadores.mes_egreso in (4,6,9,11)) or
                             (recTrabajadores.dia_egreso < 31 and
                              recTrabajadores.mes_egreso in (1,3,5,7,8,10,12)) or
                             (recTrabajadores.dia_egreso not in (28, 29) and
                              recTrabajadores.mes_egreso = 2) ) 
			    then

                              mesesTrabajando := mesesTrabajando - 1;

                             end if;
			
			   diasBono := (diasBono*mesesTrabajando)/12;

		         end if;

                 else
			mesesTrabajando := recTrabajadores.mes_egreso - 1;

                        if ((recTrabajadores.dia_egreso = 30 and
                            recTrabajadores.mes_egreso in (4,6,9,11)) or
                           (recTrabajadores.dia_egreso = 31 and
                            recTrabajadores.mes_egreso in (1,3,5,7,8,10,12)) or
                           (recTrabajadores.dia_egreso in (28, 29) and
                            recTrabajadores.mes_egreso = 2) )
                         then
			 	mesesTrabajando := mesesTrabajando +1;

			 end if;

			diasBono := (diasBono*mesesTrabajando)/12;

                 end if;
 
              end if;
 
            end if;
	

		totalBono := (totalMontoA + totalMontoB + totalMontoC +
                              totalMontoD + totalMontoE + totalMontoF +
                              montoBonoVacacional)* diasBono;
			
		id := last_id_calculobonofinanio()+1;

		if id is null then 
			id := 1;
		end if;

		perform add_calculobonofinanio(id, recTrabajadores.id_trabajador, pIdTipoPersonal,
			convert_2_decimal(totalBono),0,0,diasBono,
			convert_2_decimal(totalMontoA),
			convert_2_decimal(totalMontoE),
			convert_2_decimal(totalMontoD),
			convert_2_decimal(totalMontoC),
			convert_2_decimal(totalMontoB),
			convert_2_decimal(totalMontoF),
                        convert_2_decimal(montoBonoVacacional),	aniosCumple);	

		if pProceso = '2'  and totalBono > 0 then
			id := last_id_conceptovariable()+1;
			if id is null then 
				id := 1;
			end if;

			perform add_conceptovariable(id, recTrabajadores.id_trabajador,
				recConceptoBonoFinAnio.id_concepto_tipo_personal,
				recConceptoBonoFinAnio.id_frecuencia_tipo_personal,
				recUtilidadesPoranio.dias_bono,
				convert_2_decimal(totalBono),
				current_date,
				null, 'A');	

			if recParametroVarios.alicuota_bono_petrolero = 'S' then
			id := last_id_conceptovariable()+1;
				if id is null then 
					id := 1;
				end if;
		

				perform add_conceptovariable(id, recTrabajadores.id_trabajador,
					recConceptoPetrolero.id_concepto_tipo_personal,
					recConceptoBonoFinAnio.id_frecuencia_tipo_personal,
					0,
					convert_2_decimal(montoPetrolero),
					current_date,
					null, 'A');
			end if;
		end if;

		close curUtilidadesPorAnio;

		close curConceptoUtilidades;
  
           end if;

	end loop;

	
	raise notice 'fecha %',fechaFin;

	delete from identity;
	return 1;

end;

$_$;


ALTER FUNCTION public.calcular_bono_fin_anio(integer, date, date, character varying, character varying, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 690 (class 1255 OID 183654)
-- Name: calcular_bono_fin_anio_constancia(integer, integer, date, date, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_bono_fin_anio_constancia(integer, integer, date, date, character varying, character varying) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;
              pIdTrabajador alias for $2;
	pFechaInicio alias for $3;
	pFechaFin alias for $4;
	pEstatus alias for $5;
            	pPeriodicidad alias for $6;

	recConceptoAlicuota record;
	curConceptoAlicuota cursor(pIdTipoPersonal int4)
		for select ctp.id_concepto_tipo_personal, ctp.tipo, ctp.unidades
			from conceptotipopersonal ctp, concepto c
			where ctp.id_tipo_personal = pIdTipoPersonal 
                                           and c.cod_concepto = '1601'
			and ctp.id_concepto = c.id_concepto;

	recConceptoBonoVacacional record;
	curConceptoBonoVacacional cursor(pIdTipoPersonal int4)
		for select id_concepto_tipo_personal, id_frecuencia_tipo_personal
		from conceptotipopersonal, concepto 
		where conceptotipopersonal.id_concepto = concepto.id_concepto
		and id_tipo_personal = pIdTipoPersonal 
                            and concepto.cod_concepto = '1500';

	recParametroVarios record;
	curParametroVarios cursor (pIdTipoPersonal int4)
		for select * from parametrovarios 
                where id_tipo_personal = pIdtipoPersonal;

	recConceptoUtilidades record;
	curConceptoUtilidades cursor (pIdTipoPersonal int4) 
		for select distinct id_concepto_tipo_personal, tipo, tope_unidades, 
		tope_monto, numero_meses, numero_dias,  mes_inicio, mes_final, semana_buscar,
                            mes_buscar, factor
		from conceptoutilidades 
		where id_tipo_personal = pIdTipoPersonal;

	recConceptoPetrolero record;
	curConceptoPetrolero cursor (pIdTipoPersonal int4)
		for select distinct ctp.id_concepto_tipo_personal, ctp.tipo, ctp.unidades 
		from conceptotipopersonal ctp, concepto c 
		where ctp.id_tipo_personal = pIdTipoPersonal 
                               and c.cod_concepto = '1701'
		   and ctp.id_concepto = c.id_concepto;

	recConceptoBonoFinAnio record;
	curConceptoBonoFinAnio cursor (pIdTipoPersonal int4)
		for select distinct id_concepto_tipo_personal, id_frecuencia_tipo_personal 
		from conceptotipopersonal, concepto 
		where conceptotipopersonal.id_concepto = concepto.id_concepto
		and id_tipo_personal = pIdTipoPersonal 
                            and concepto.cod_concepto = '1600';

	recTrabajadores record;
	curTrabajadores cursor (pIdTipoPersonal int4, pEstatus varchar, pFecha date)
		for select distinct t.id_trabajador, t.anio_ingreso, t.mes_vacaciones, 	
		t.anio_vacaciones, t.mes_ingreso, t.dia_ingreso, t.dia_ingreso, t.id_cargo, 
		p.anios_servicio_apn, tu.jornada_diaria, tu.jornada_semanal, tp.formula_integral, 
		tp.formula_semanal, t.dia_egreso, t.mes_egreso, t.anio_egreso
		from trabajador t, personal p, tipopersonal tp, turno tu
		where t.id_personal = p.id_personal
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.id_turno = tu.id_turno
                          --  and t.fecha_ingreso < pFecha
		and t.id_tipo_personal = pIdTipoPersonal 

-- OJO MODIFICACION PARA CONSTANCIAS.
                           and t.id_trabajador     = pIdTrabajador; 
              

	recUtilidadesPorAnio record;
	curUtilidadesPoranio cursor(pIdTipoPersonal int4, pAniosCumple int4)
		for select * from utilidadesporanio 
		where id_tipo_personal = pIdTipoPersonal 
                               and anios_servicio <= pAniosCumple  
		   order by anios_servicio desc limit 1;


	recConceptosTipoB record;
	curConceptosTipoB cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		for select distinct cf.monto, cf.unidades, fp.cod_frecuencia_pago 
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = pIdTrabajador 
		and cf.estatus = 'A'; 


	recConceptosTipoX record;
	curConceptosTipoX cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		for select distinct cv.monto, cv.unidades, fp.cod_frecuencia_pago 
		from conceptovariable cv, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cv.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cv.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cv.id_trabajador = pIdTrabajador 
		and cv.estatus = 'A'; 

	recHistoricoQuincenaTipoD record;
	curHistoricoQuincenaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
		pAnio int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades 
		from historicoquincena hq 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio                        
		group by id_trabajador;


	recHistoricoSemanaTipoD record;
	curHistoricoSemanaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
		pAnio int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades 
		from historicosemana hs 
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio    -- OJO CON ESTO 
		group by id_trabajador;

	recHistoricoQuincenaTipoM record;
	curHistoricoQuincenaTipoM cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
		pAnio int4, pMes int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades
		from historicoquincena hq
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio and mes = pMes   
		group by id_trabajador;

	recHistoricoSemanaTipoM record;
	curHistoricoSemanaTipoM cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
		pAnio int4, pSemana int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades
		from historicosemana hq
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio 
                            and semana_quincena = pSemana
		group by id_trabajador;

	recHistoricoQuincenaTipoP record;
	curHistoricoQuincenaTipoP cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
	periodoInicio int4, periodoFin int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades 
		from historicoquincena hq 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio*100+mes >= periodoInicio 
                            and  anio*100+mes <= periodoFin
		group by id_trabajador;

	recHistoricoSemanaTipoP record;
	curHistoricoSemanaTipoP cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 	
	periodoInicio int4, periodoFin int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades 
		from historicosemana hs 
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio*100+mes >= periodoInicio 
                and anio*100+mes <= periodoFin
		group by id_trabajador;

	recTrabajadoresSinBonoVacacionalQuincena record;
	curTrabajadoresSinBonoVacacionalQuincena cursor(pIdTrabajador int4, pAnio int4)
		for select count(*) as contador from historicoquincena hq, conceptotipopersonal
                ctp, concepto c
		where hq.id_trabajador = pIdTrabajador
		and hq.anio = pAnio
		and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto = '1500';

	recTrabajadoresSinBonoVacacionalSemana record;
	curTrabajadoresSinBonoVacacionalSemana cursor(pIdTrabajador int4, pAnio int4)
		for select count(*) as contador from historicosemana hs, conceptotipopersonal ctp,
                concepto c
                where hs.id_trabajador = pIdTrabajador
		and hs.anio = pAnio
		and hs.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto = '1500';

	recUltimaNomina record;
	curUltimaNomina cursor(pIdTipoPersonal int4, pAnio int4)
		for select max(mes) as mes_promedio, max(semana_quincena) as periodo_promedio
		from seguridadordinaria so, tipopersonal tp
                            where so.anio = pAnio
		and so.id_grupo_nomina = tp.id_grupo_nomina
		and tp.id_tipo_personal = pIdTipoPersonal;

	recUltimaSemana record;
	curUltimaSemana cursor(pIdTipoPersonal int4, pAnio int4, pMes int4)
		for select max(semana_anio) as ultima_semana
		from semana se, tipopersonal tp
                where se.anio = pAnio
		and se.mes = pMes
		and se.id_grupo_nomina = tp.id_grupo_nomina
		and tp.id_tipo_personal = pIdTipoPersonal;

	recNumeroSemana record;
	curNumeroSemana cursor(pIdTipoPersonal int4, pAnio int4, pMes int4)
		for select max(semana_mes) as numero_semana
		from semana se, tipopersonal tp
                where se.anio = pAnio
		and se.mes = pMes
		and se.id_grupo_nomina = tp.id_grupo_nomina
		and tp.id_tipo_personal = pIdTipoPersonal;

        
                    
	id int4 := 0;
        montoTotal1 float8 := 0;	
	montoA float8 := 0;	
	montoB float8 := 0;	
	montoC float8 := 0;	
	montoD float8 := 0;
        montoE float8 := 0;
	montoF float8 := 0;
        montoG float8 := 0;
	totalMontoA float8 := 0; -- basicos (B)	
	totalMontoB float8 := 0; -- proyectados variables (X)
	totalMontoC float8 := 0; -- de un mes (M)
	totalMontoD float8 := 0; -- devengado anual (D)
        totalMontoE float8 := 0; -- promedio de meses (P)
	totalMontoF float8 := 0; -- proyectado fijos (E)
	totalMontoG float8 := 0; -- proyectado fijos (E)
	totalUnidades float8 := 0;
	aniosCumple int4 := 0;	
	diasBono float8 := 0;		
	otrasAlicuotas float8 := 0;
	bonoSinAlicuota float8 := 0;
	totalBono float8 := 0;
	montoVariable float8 := 0;
	bonoExtra float8 := 0;
	mes int4 := 0;
	dividir int4 := 0;	
	montoPetrolero float8 := 0;
	montoBonoVacacional float8 := 0;
	fechaFin date;
        pFecha date;
	periodoInicio int4 := 0;
	periodoFin int4 := 0;
	diasDividir int4 := 0;
        fin date;
	inicio date;
	dias int4 := 0;
        dias_dividir float8 := 0;
	frecuencia int4 := 0; 
	mesesTrabajando int4 := 0;
	aniosCumpleVacaciones int4 := 0;
	idConceptoTipoPersonalAlicuota int4 := 0;
	tipoAlicuota varchar;
	unidadesAlicuota float8 := 0;
	idConceptoTipoPersonalPetrolero int4 := 0;
	tipoPetrolero varchar;
	unidadesPetrolero float8 := 0;
        mes_inicio int4 := 0;
	mes_final int4 := 0;
	anio_inicio int4 := 0;
	anio_final int4 := 0;
	
begin

        raise notice 'si pasa PV ';
	open curParametroVarios(pIdTipoPersonal);
	fetch curParametroVarios into recParametroVarios;			
	if not found then
		return 10;
	end if;
raise notice 'si pasa CBFA ';
       
        if recParametroVarios.fecha_tope_utilidades is null then
           pFecha := pFechaFin;
        else
           pFecha := recParametroVarios.fecha_tope_utilidades;
	end if;

       

        if recParametroVarios.tipo_calculo_bfa= 'D'  then
           dias_dividir := recParametroVarios.dias_anio;
        else
           dias_dividir := 1;
        end if;

-- Se lee la ultima nomina procesada

	open curUltimaNomina(pIdTipoPersonal, extract(year from pFechaFin));
        fetch curUltimaNomina into recUltimaNomina;			
	if not found then
		return 14;
	end if;

-- Se lee el numero de semanas del mes de la ultima nomina

        if pPeriodicidad = 'S' then
	raise notice 'va a abrir ultima semana ';
		open curUltimaSemana(pIdTipoPersonal, extract(year from pFechaFin),
				recUltimaNomina.mes_promedio);
        	fetch curUltimaSemana into recUltimaSemana;
		raise notice 'leyo ultima semana ';			
		if not found then
			return 15;
		end if;
        end if;

	mes := recUltimaNomina.mes_promedio;

        if pPeriodicidad <> 'S' then
	   dividir := 30;
           if recUltimaNomina.periodo_promedio = 1 then
              mes := mes - 1;
              if mes = 0 then
                 mes := 1;
              end if;
           end if;
        else
           if recUltimaNomina.periodo_promedio <> recUltimaSemana.ultima_semana then
	      raise notice 'no es la ultima semana ';
              mes := mes - 1;
              if mes = 0 then
                 mes := 1;
              end if;
           end if;
        	open curNumeroSemana(pIdTipoPersonal, extract(year from pFechaFin), mes);
       		fetch curNumeroSemana into recNumeroSemana;
		raise notice 'leyo cuantas semanas ';			
		if not found then
			return 15;
		end if;

 	   dividir := 7 * recNumeroSemana.numero_semana;
	
         end if;

	



	raise notice 'si pasa CBFA ';
	open curConceptoBonoFinAnio(pIdTipoPersonal);
	fetch curConceptoBonoFinAnio into recConceptoBonoFinAnio;			
	if not found then
		return 11;
	end if;

	open curConceptoAlicuota(pIdTipoPersonal);
	fetch curConceptoAlicuota into recConceptoAlicuota;			
	if not found then		
	else
		idConceptoTipoPersonalAlicuota := recConceptoAlicuota.id_concepto_tipo_personal;
		tipoAlicuota := recConceptoAlicuota.tipo;
		unidadesAlicuota := recConceptoAlicuota.unidades;
	end if;

	open curConceptoBonoVacacional(pIdTipoPersonal);
	fetch curConceptoBonoVacacional into recConceptoBonoVacacional;			
	if not found then
		return 13;
	end if;

	open curConceptoPetrolero(pIdTipoPersonal);
	fetch curConceptoPetrolero into recConceptoPetrolero;			
	if not found then		
	else
		idConceptoTipoPersonalPetrolero := recConceptoPetrolero.id_concepto_tipo_personal;
		tipoPetrolero := recConceptoPetrolero.tipo;
		unidadesPetrolero := recConceptoPetrolero.unidades;
	end if;

	delete from calculobonofinanio where id_tipo_personal = pIdTipoPersonal;

	open curTrabajadores(pIdTipoPersonal, pEstatus, pFecha);

	loop
	     fetch curTrabajadores into recTrabajadores;	
	     exit when not found;

                        
             if pEstatus =  'E' and 
                recTrabajadores.anio_egreso < extract(year from pFechaFin) then

             else
               
               	totalUnidades := 0;
		totalMontoA := 0;	
		totalMontoB := 0;	
		totalMontoC := 0;
		totalMontoD := 0;
		totalMontoE := 0;
		totalMontoF := 0;
		totalMontoG := 0;
		aniosCumple := 0;
		aniosCumpleVacaciones := 0;

		aniosCumple := extract(year from pFechaFin) - recTrabajadores.anio_ingreso;
		aniosCumpleVacaciones := extract(year from pFechaFin) -
	 				 recTrabajadores.anio_vacaciones;

		if recParametroVarios.sumo_apn = 'S'  and 
                   recTrabajadores.anios_servicio_apn > 0 then
			aniosCumple := aniosCumple + recTrabajadores.anios_servicio_apn;
			aniosCumpleVacaciones := aniosCumpleVacaciones +
					 recTrabajadores.anios_servicio_apn;

			raise notice 'aniosCumple mas APN %', aniosCumple;

		end if;

		open curUtilidadesPorAnio(pIdTipoPersonal, aniosCumple);
		fetch curUtilidadesPorAnio into recUtilidadesPorAnio;			
		exit when not found;

		diasBono := 0;

		open curConceptoUtilidades(pIdTipoPersonal);

		loop			
		   fetch curConceptoUtilidades into recConceptoUtilidades;	
	           exit when not found;

		   montoA := 0;	
		   montoB := 0;	
		   montoC := 0;	
		   montoD := 0;
		   montoE := 0;
		   montoF := 0;
		   montoG := 0;

		 
-- conceptos fijos
		   if recConceptoUtilidades.tipo = 'B'  then
		      open curConceptosTipoB 
		        (recConceptoUtilidades.id_concepto_tipo_personal, 
		         recTrabajadores.id_trabajador);

		      loop			
			fetch curConceptosTipoB into recConceptosTipoB;	
			exit when not found;

			totalUnidades = totalUnidades + recConceptosTipoB.unidades;

			recConceptosTipoB.monto := recConceptosTipoB.monto *
					 recConceptoUtilidades.factor;
			if recConceptosTipoB.cod_frecuencia_pago = 3 then
				montoA := montoA + recConceptosTipoB.monto*2;
			elsif recConceptosTipoB.cod_frecuencia_pago = 4 then
				montoA := montoA + (recConceptosTipoB.monto/7)*30;
			elsif recConceptosTipoB.cod_frecuencia_pago = 10 then
				montoA := montoA + (recConceptosTipoB.monto*4);
			elsif recConceptosTipoB.cod_frecuencia_pago = 1 or 
				recConceptosTipoB.cod_frecuencia_pago = 2 or 
				recConceptosTipoB.cod_frecuencia_pago > 4 then
 				montoA := montoA + recConceptosTipoB.monto;
			end if;

		      end loop;

			if recConceptoUtilidades.tope_unidades <> 0 and 			   				   

recConceptoUtilidades.tope_unidades < totalUnidades then
			   montoA := (montoA /totalUnidades) *
					recConceptoUtilidades.tope_unidades;
			end if;

			if recConceptoUtilidades.tope_monto <> 0 and
			   recConceptoUtilidades.tope_monto < montoA then
			   montoA := recConceptoUtilidades.tope_monto;
			end if;	

			   montoA := montoA/30;
			   totalMontoA := totalMontoA + montoA;
		           close curConceptosTipoB;
                           raise notice 'termino Basico';

		  end if;

-- conceptos variables
		   if recConceptoUtilidades.tipo = 'X' then

	              open curConceptosTipoX 
		       	(recConceptoUtilidades.id_concepto_tipo_personal, 
			recTrabajadores.id_trabajador);

		      loop			
			fetch curConceptosTipoX into recConceptosTipoX;	
			exit when not found;

			totalUnidades = totalUnidades + recConceptosTipoX.unidades;

			recConceptosTipoX.monto := recConceptosTipoX.monto *
				 recConceptoUtilidades.factor;

			montoB := montoB + recConceptosTipoX.monto;
					
		      end loop;

			if recConceptoUtilidades.tope_unidades <> 0 and 			   				   

recConceptoUtilidades.tope_unidades < totalUnidades then
			   montoB := (montoB /totalUnidades) *
					recConceptoUtilidades.tope_unidades;
			end if;

			if recConceptoUtilidades.tope_monto <> 0 and
			   recConceptoUtilidades.tope_monto < montoB then
			   montoB := recConceptoUtilidades.tope_monto;
			end if;	

			montoB := montoB/recParametroVarios.dias_anio;
		        totalMontoB := totalMontoB + montoB;
                        raise notice 'termino Variable';
			close curConceptosTipoX;

		    end if;

-- Devengado a un mes
		    if recConceptoUtilidades.tipo = 'M' then

		       if pPeriodicidad = 'S' then

			  open curHistoricoSemanaTipoM 
		               (recConceptoUtilidades.id_concepto_tipo_personal, 
				recTrabajadores.id_trabajador, 
				extract(year from pFechaFin), 
				recConceptoUtilidades.semana_buscar);

			  loop			
			    fetch curHistoricoSemanaTipoM into recHistoricoSemanaTipoM;	
			    exit when not found;

			    totalUnidades := totalUnidades +recHistoricoSemanaTipoM.unidades;
                            recHistoricoSemanaTipoM.monto := recHistoricoSemanaTipoM.monto * 
					     recConceptoUtilidades.factor;

			    montoC := montoC + recHistoricoSemanaTipoM.monto;

			  end loop;	

			  close curHistoricoSemanaTipoM;				

		       else
			  open curHistoricoQuincenaTipoM
			       (recConceptoUtilidades.id_concepto_tipo_personal, 
				recTrabajadores.id_trabajador, 
				extract(year from pFechaFin), 
				recConceptoUtilidades.mes_buscar);

			  loop			
			     fetch curHistoricoQuincenaTipoM into recHistoricoQuincenaTipoM;
			     exit when not found;

			     totalUnidades := totalUnidades + recHistoricoQuincenaTipoM.unidades;

                             recHistoricoQuincenaTipoM.monto := recHistoricoQuincenaTipoM.monto * 
					recConceptoUtilidades.factor;

			     montoC := montoC + recHistoricoQuincenaTipoM.monto;

			     
			   end loop;

				close curHistoricoQuincenaTipoM;

		       end if;

				if recConceptoUtilidades.tope_unidades <> 0 and 				   recConceptoUtilidades.tope_unidades < 

totalUnidades then
				   montoC := (montoC /totalUnidades) *
						recConceptoUtilidades.tope_unidades;
				end if;

				if recConceptoUtilidades.tope_monto <> 0 and
				   recConceptoUtilidades.tope_monto < montoC then
				   montoC := recConceptoUtilidades.tope_monto;
				end if;	
						                             
                                montoC := montoC / recParametroVarios.dias_anio;
				totalMontoC := totalMontoC + montoC;
                                raise notice 'termino Promedio';	
				
		      end if;

-- conceptos devengados
			if recConceptoUtilidades.tipo = 'D' then
				if pPeriodicidad = 'S' then
				   open curHistoricoSemanaTipoD 
				     (recConceptoUtilidades.id_concepto_tipo_personal, 
				      recTrabajadores.id_trabajador, 
				      extract(year from pFechaFin));

				   loop			
				      fetch curHistoricoSemanaTipoD into
				            recHistoricoSemanaTipoD;	
                  		      exit when not found;

				      totalUnidades := totalUnidades +
					recHistoricoSemanaTipoD.unidades;

				      recHistoricoSemanaTipoD.monto :=
					recHistoricoSemanaTipoD.monto * 
					recConceptoUtilidades.factor;	

				      montoD := montoD + recHistoricoSemanaTipoD.monto;

				     
				  end loop;

				  close curHistoricoSemanaTipoD;

				else

				  open curHistoricoQuincenaTipoD
					(recConceptoUtilidades.id_concepto_tipo_personal,
					 recTrabajadores.id_trabajador, 
					 extract(year from pFechaFin));

				  loop			
				     fetch curHistoricoQuincenaTipoD into 
					   recHistoricoQuincenaTipoD;	
				     exit when not found;

				     totalUnidades := totalUnidades +
	 					recHistoricoQuincenaTipoD.unidades;

				     recHistoricoQuincenaTipoD.monto := 
						recHistoricoQuincenaTipoD.monto *
 						recConceptoUtilidades.factor;	

				     montoD := montoD + recHistoricoQuincenaTipoD.monto;

				   end loop;

				   close curHistoricoQuincenaTipoD;

				end if;

				 if recConceptoUtilidades.tope_unidades <> 0 and
 				    recConceptoUtilidades.tope_unidades < totalUnidades then
				    montoD := (montoD /totalUnidades)*
						 recConceptoUtilidades.tope_unidades; 
				 end if;

				 if recConceptoUtilidades.tope_monto <> 0 and
				    recConceptoUtilidades.tope_monto < montoD then
				    montoD := recConceptoUtilidades.tope_monto;
		                 end if;	

                                montoD := montoD / dias_dividir;
                                totalMontoD := totalMontoD + montoD;

                                raise notice 'termino Devengado';

                        end if;
-- conceptos promedio
			if recConceptoUtilidades.tipo = 'P' then
                           anio_inicio   := extract(year from pFechaFin);
                           anio_final    := extract(year from pFechaFin);
                           mes_inicio    := recConceptoUtilidades.mes_Inicio;
                           mes_final     := recConceptoUtilidades.mes_Final;
			   periodoInicio := (anio_inicio * 100)+ mes_inicio;
			   periodoFin    := (anio_final * 100)+ mes_final;
			   totalUnidades := 0;
			
-- grupos quincenales
                           if pPeriodicidad <> 'S' then
                     
                              open curHistoricoQuincenaTipoP
 				  (recConceptoUtilidades.id_concepto_tipo_personal,
				   recTrabajadores.id_trabajador, periodoInicio, periodoFin);

                              loop

				fetch curHistoricoQuincenaTipoP into recHistoricoQuincenaTipoP;
				exit when not found;

				totalUnidades := totalUnidades +
						 recHistoricoQuincenaTipoP.unidades;

				recHistoricoQuincenaTipoP.monto := 
				     	      recHistoricoQuincenaTipoP.monto *
					      recConceptoUtilidades.factor;
				montoE := montoE + recHistoricoQuincenaTipoP.monto;

			      end loop;

				close curHistoricoQuincenaTipoP;
				   					
			   else

				open curHistoricoSemanaTipoP
 				  (recConceptoUtilidades.id_concepto_tipo_personal,
				   recTrabajadores.id_trabajador, periodoInicio, periodoFin);

                              loop

				fetch curHistoricoSemanaTipoP into recHistoricoSemanaTipoP;
				exit when not found;

				totalUnidades := totalUnidades +
						 recHistoricoSemanaTipoP.unidades;

				recHistoricoSemanaTipoP.monto := 
				     	      recHistoricoSemanaTipoP.monto *
					      recConceptoUtilidades.factor;
				montoE := montoE + recHistoricoSemanaTipoP.monto;

			      end loop;

				close curHistoricoSemanaTipoP;

			   end if;
			

				montoE := montoE/recConceptoUtilidades.numero_dias;

				totalMontoE  := totalMontoE + montoE;

                                raise notice 'termino Promedio';

		        end if;

--conceptos devengados y proyectados

			if recConceptoUtilidades.tipo = 'E' then
                           
			   totalUnidades := 0;
			
-- grupos quincenales
                           if pPeriodicidad <> 'S' then
                     
                              open curHistoricoQuincenaTipoD
					(recConceptoUtilidades.id_concepto_tipo_personal,
					 recTrabajadores.id_trabajador, 
					 extract(year from pFechaFin));

				  loop			
				     fetch curHistoricoQuincenaTipoD into 
					   recHistoricoQuincenaTipoD;	
				     exit when not found;

				     totalUnidades := totalUnidades +
	 					recHistoricoQuincenaTipoD.unidades;

				     recHistoricoQuincenaTipoD.monto := 
						recHistoricoQuincenaTipoD.monto *
 						recConceptoUtilidades.factor;	

				     montoF := montoF + recHistoricoQuincenaTipoD.monto;

				   end loop;

			       close curHistoricoQuincenaTipoD;

				                     
                               open curConceptosTipoB 
		                 (recConceptoUtilidades.id_concepto_tipo_personal, 
		                  recTrabajadores.id_trabajador);

		               loop			
			         fetch curConceptosTipoB into recConceptosTipoB;	
			         exit when not found;

			         totalUnidades = totalUnidades + recConceptosTipoB.unidades;

			         recConceptosTipoB.monto := recConceptosTipoB.monto *
					         recConceptoUtilidades.factor;
			         if recConceptosTipoB.cod_frecuencia_pago = 3 then
				   montoG := montoG + recConceptosTipoB.monto*2;
			         elsif recConceptosTipoB.cod_frecuencia_pago = 4 then
				   montoG := montoG + (recConceptosTipoB.monto/7)*30;
			         elsif recConceptosTipoB.cod_frecuencia_pago = 10 then
				   montoG := montoG + (recConceptosTipoB.monto*4);
			         elsif recConceptosTipoB.cod_frecuencia_pago = 1 or 
				   recConceptosTipoB.cod_frecuencia_pago = 2 or 
				   recConceptosTipoB.cod_frecuencia_pago > 4 then
 				   montoG := montoG + recConceptosTipoB.monto;
			         end if;

		              end loop;

			      close curConceptosTipoB;
			
			        montoG := montoG * recConceptoUtilidades.numero_meses;

			     	        
			   else
 				open curHistoricoSemanaTipoD
					(recConceptoUtilidades.id_concepto_tipo_personal,
					 recTrabajadores.id_trabajador, 
					 extract(year from pFechaFin));

				  loop			
				     fetch curHistoricoSemanaTipoD into 
					   recHistoricoSemanaTipoD;	
				     exit when not found;

				     totalUnidades := totalUnidades +
	 					recHistoricoSemanaTipoD.unidades;

				     recHistoricoSemanaTipoD.monto := 
						recHistoricoSemanaTipoD.monto *
 						recConceptoUtilidades.factor;	

				     montoF := montoF + recHistoricoSemanaTipoD.monto;

				   end loop;

			       close curHistoricoSemanaTipoD;

				                     
                               open curConceptosTipoB 
		                 (recConceptoUtilidades.id_concepto_tipo_personal, 
		                  recTrabajadores.id_trabajador);

		               loop			
			         fetch curConceptosTipoB into recConceptosTipoB;	
			         exit when not found;

			         totalUnidades = totalUnidades + recConceptosTipoB.unidades;

			         recConceptosTipoB.monto := recConceptosTipoB.monto *
					         recConceptoUtilidades.factor;
			         if recConceptosTipoB.cod_frecuencia_pago = 3 then
				   montoG := montoG + recConceptosTipoB.monto*2;
			         elsif recConceptosTipoB.cod_frecuencia_pago = 4 then
				   montoG := montoG + (recConceptosTipoB.monto/7)*30;
			         elsif recConceptosTipoB.cod_frecuencia_pago = 10 then
				   montoG := montoG + (recConceptosTipoB.monto*4);
			         elsif recConceptosTipoB.cod_frecuencia_pago = 1 or 
				   recConceptosTipoB.cod_frecuencia_pago = 2 or 
				   recConceptosTipoB.cod_frecuencia_pago > 4 then
 				   montoG := montoG + recConceptosTipoB.monto;
			         end if;

		              end loop;

			      close curConceptosTipoB;
			
			      montoG := montoG * recConceptoUtilidades.numero_meses;

			   end if;
				
			      montoF := (montoF + montoG) / recParametroVarios.dias_anio;

			      totalMontoF := totalMontoF + montoF;

                              raise notice 'termino Proyectado';
		
		        end if;


		end loop;

		montoPetrolero := 0;

		montoBonoVacacional := 0;

		diasBono := recUtilidadesPorAnio.dias_bono;

		if pEstatus = 'A'  then

                   if recParametroVarios.tipo_calculo_bfa = 'D' then 

		       if aniosCumple = 0 then
			    mesesTrabajando := 12 - recTrabajadores.mes_ingreso;
			    if recTrabajadores.dia_ingreso = 1 then
			 	mesesTrabajando := mesesTrabajando +1;
			    end if;			
			    diasBono := (diasBono*mesesTrabajando)/12;
		       end if;

                    end if;


		    if recParametroVarios.alicuota_bvac_bfa = 'S' then
			if pPeriodicidad = 'Q'  then
                           
                       	   if recTrabajadores.anio_vacaciones < extract(year from pFechaFin) then
				open curTrabajadoresSinBonoVacacionalQuincena
					(recTrabajadores.id_trabajador,
					 extract(year from pFechaFin));
				loop

				 fetch curTrabajadoresSinBonoVacacionalQuincena into
				       recTrabajadoresSinBonoVacacionalQuincena;	
                                 exit when recTrabajadoresSinBonoVacacionalQuincena.contador > 0;

				 montoBonoVacacional := calcular_bonovacacional_trabajador
						(recTrabajadores.id_trabajador,
						 recConceptoAlicuota.id_concepto_tipo_personal,
						 recConceptoAlicuota.tipo,
						 recConceptoAlicuota.unidades,
						 recConceptoPetrolero.id_concepto_tipo_personal,
						 recConceptoPetrolero.tipo,
						 recConceptoPetrolero.unidades,
						 aniosCumpleVacaciones, pIdTipoPersonal,
						 cast(extract(year from pFechaFin) as int4),
						 pPeriodicidad,
						 recParametroVarios.dias_anio,
						 recParametroVarios.alicuota_bfa_bvac,
						 recParametroVarios.alicuota_bono_petrolero, 
						 recTrabajadores.jornada_diaria,
						 recTrabajadores.jornada_semanal,
						 recTrabajadores.formula_integral,
						 recTrabajadores.formula_semanal,
						 recParametroVarios.constante_petrolero_a,
						 recParametroVarios.constante_petrolero_b,
						 recParametroVarios.constante_petrolero_c,
                                                 mes, dividir);

		                montoBonoVacacional := montoBonoVacacional /  dias_dividir;
				exit;		

				end loop;

				close curTrabajadoresSinBonoVacacionalQuincena;

                              end if;

			else
                           if recTrabajadores.anio_vacaciones < extract(year from pFechaFin) then
				open curTrabajadoresSinBonoVacacionalSemana
					(recTrabajadores.id_trabajador, 
					  extract(year from pFechaFin));

				loop

				fetch curTrabajadoresSinBonoVacacionalSemana into
					 recTrabajadoresSinBonoVacacionalSemana;
 				exit when recTrabajadoresSinBonoVacacionalSemana.contador > 0;

                                montoBonoVacacional := calcular_bonovacacional_trabajador
						(recTrabajadores.id_trabajador,
						 recConceptoAlicuota.id_concepto_tipo_personal,
						 recConceptoAlicuota.tipo,
						 recConceptoAlicuota.unidades,
						 recConceptoPetrolero.id_concepto_tipo_personal,
						 recConceptoPetrolero.tipo,
						 recConceptoPetrolero.unidades,
						 aniosCumpleVacaciones,pIdTipoPersonal,
						 cast(extract(year from pFechaFin) as int4),
						 pPeriodicidad,
						 recParametroVarios.dias_anio,
						 recParametroVarios.alicuota_bfa_bvac,
						 recParametroVarios.alicuota_bono_petrolero,
						 recTrabajadores.jornada_diaria,
						 recTrabajadores.jornada_semanal,
						 recTrabajadores.formula_integral,
						 recTrabajadores.formula_semanal, 							 

recParametroVarios.constante_petrolero_a, 
						 recParametroVarios.constante_petrolero_b, 
						 recParametroVarios.constante_petrolero_c,
						 mes, dividir);

				montoBonoVacacional := montoBonoVacacional /  dias_dividir;	
				
				exit;
			           
				end loop;
				close curTrabajadoresSinBonoVacacionalSemana;
                                end if;

			    end if;

		    end if;
     
             else
-- egresados
	     if recParametroVarios.tipo_calculo_bfa= 'D'  then

	       if aniosCumple = 0 then
	          mesesTrabajando := recTrabajadores.mes_egreso - recTrabajadores.mes_ingreso;
             
			if recTrabajadores.dia_ingreso = 1 and
                           ((recTrabajadores.dia_egreso = 30 and
                            recTrabajadores.mes_egreso in (4,6,9,11)) or
                           (recTrabajadores.dia_egreso = 31 and
                            recTrabajadores.mes_egreso in (1,3,5,7,8,10,12)) or
                           (recTrabajadores.dia_egreso in (28, 29) and
                            recTrabajadores.mes_egreso = 2) )
                         then
			 	mesesTrabajando := mesesTrabajando +1;
			 else
			   if recTrabajadores.dia_ingreso > 1 and
                             ((recTrabajadores.dia_egreso < 30 and
                              recTrabajadores.mes_egreso in (4,6,9,11)) or
                             (recTrabajadores.dia_egreso < 31 and
                              recTrabajadores.mes_egreso in (1,3,5,7,8,10,12)) or
                             (recTrabajadores.dia_egreso not in (28, 29) and
                              recTrabajadores.mes_egreso = 2) ) 
			    then

                              mesesTrabajando := mesesTrabajando - 1;

                             end if;
			
			   diasBono := (diasBono*mesesTrabajando)/12;

		         end if;

                 else
			mesesTrabajando := recTrabajadores.mes_egreso - 1;

                        if ((recTrabajadores.dia_egreso = 30 and
                            recTrabajadores.mes_egreso in (4,6,9,11)) or
                           (recTrabajadores.dia_egreso = 31 and
                            recTrabajadores.mes_egreso in (1,3,5,7,8,10,12)) or
                           (recTrabajadores.dia_egreso in (28, 29) and
                            recTrabajadores.mes_egreso = 2) )
                         then
			 	mesesTrabajando := mesesTrabajando +1;

			 end if;

			diasBono := (diasBono*mesesTrabajando)/12;

                 end if;
 
              end if;
 
            end if;
	

		    totalBono := (totalMontoA + totalMontoB + totalMontoC +
                                                    totalMontoD + totalMontoE + totalMontoF +
                                                    montoBonoVacacional)* diasBono;
			
		close curUtilidadesPorAnio;

		close curConceptoUtilidades;
  
           end if;

	end loop;

	montoTotal1 := totalBono;
        raise notice 'muestra monto';
        raise notice 'montototalbono_%', montoTotal1;
	return montoTotal1;
end;

$_$;


ALTER FUNCTION public.calcular_bono_fin_anio_constancia(integer, integer, date, date, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 691 (class 1255 OID 183656)
-- Name: calcular_bonovacacional_constancia(integer, integer, integer, integer, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_bonovacacional_constancia(integer, integer, integer, integer, character varying, integer, integer) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTrabajador alias for $1;	
	pAniosCumple alias for $2;
	pIdTipoPersonal alias for $3;
	pAnio alias for $4;
	pPeriodicidad alias for $5;
	pDiasAnio alias for $6;
	pMes alias for $7;
	
	
              recConceptoVacaciones record;
	curConceptoVacaciones cursor (pIdTipoPersonal int4) 
		for select id_concepto_tipo_personal, tipo, tope_unidades, 
		tope_monto, numero_meses, mes_cerrado, alicuota_vacacional, 
		id_concepto_alicuota, mes30 
		from conceptovacaciones 
		where id_tipo_personal = pIdTipoPersonal;


	recVacacionesPorAnio record;
	curVacacionesPoranio cursor(pIdTipoPersonal int4, pAniosCumple int4)
		for select * from vacacionesporanio 
		where id_tipo_personal = pIdTipoPersonal 
                               and anios_servicio <= pAniosCumple
		order by anios_servicio desc limit 1;


	recConceptosTipoB record;
	curConceptosTipoB cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		for select cf.monto, cf.unidades, fp.cod_frecuencia_pago 
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = pIdTrabajador
		and cf.estatus = 'A';

	recHistoricoQuincenaTipoD record;
	curHistoricoQuincenaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades 
		from historicoquincena hq 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;


	recHistoricoSemanaTipoD record;
	curHistoricoSemanaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades 
		from historicosemana hs 
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;

	recHistoricoQuincenaTipoP record;
	curHistoricoQuincenaTipoP cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4, pMes int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades,
		    max(hq.id_frecuencia_tipo_personal) as frecuencia,
                    max(fp.cod_frecuencia_pago) as cod_frecuencia 
		from historicoquincena hq, frecuenciatipopersonal ftp, frecuenciapago fp 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		and mes = pMes
		and hq.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		group by id_trabajador;


	recHistoricoSemanaTipoP record;
	curHistoricoSemanaTipoP cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				      pAnio int4, pMes int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades,
		    max(hs.id_frecuencia_tipo_personal) as frecuencia,
  		    max(fp.cod_frecuencia_pago) as cod_frecuencia 
		from historicosemana hs, frecuenciatipopersonal ftp, frecuenciapago fp  
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		and mes = pMes
		and hs.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		group by id_trabajador;


	montoA float8 := 0;	
	montoB float8 := 0;
               montoC float8 := 0;	
	bonoExtra float8 := 0;
	totalUnidades float8 := 0;
	totalMontoA float8 := 0;	
	totalMontoB float8 := 0;
	totalMontoC float8 := 0;	
	montoAlicuota float8 := 0;
	montoPetrolero float8 := 0;
	bonoSinAlicuota float8 := 0;	
	totalBono float8 := 0;
              montoTotal float8 := 0;

begin		

	open curVacacionesPorAnio(pIdTipoPersonal, pAniosCumple);

	fetch curVacacionesPorAnio into recVacacionesPorAnio;			
	exit when not found;

	open curConceptoVacaciones(pIdTipoPersonal);

	loop

		raise notice 'si pasa 2 ';

		fetch curConceptoVacaciones into recConceptoVacaciones;	
		exit when not found;

                montoA := 0;
		montoB := 0;

		if recConceptoVacaciones.tipo = 'B' then

			open curConceptosTipoB(recConceptoVacaciones.id_concepto_tipo_personal,
					pIdTrabajador);

			loop

				raise notice 'si pasa 2 ';

				fetch curConceptosTipoB into recConceptosTipoB;	
				exit when not found;

				totalUnidades := totalUnidades + recConceptosTipoB.unidades;

				if recConceptosTipoB.cod_frecuencia_pago = 3 then

					montoA := montoA + (recConceptosTipoB.monto*2);

				elsif recConceptosTipoB.cod_frecuencia_pago = 4 then

					montoA := montoA + (recConceptosTipoB.monto/7)*30;

				elsif recConceptosTipoB.cod_frecuencia_pago = 10 then

					montoA := montoA + (recConceptosTipoB.monto*4);

				elsif recConceptosTipoB.cod_frecuencia_pago = 1 or

					recConceptosTipoB.cod_frecuencia_pago = 2 or 
					recConceptosTipoB.cod_frecuencia_pago > 4 then

					montoA := montoA + recConceptosTipoB.monto;

				end if;

			end loop;

			if recConceptoVacaciones.tope_unidades <> 0 and
			   recConceptoVacaciones.tope_unidades < totalUnidades then

			   montoA := (montoA /totalUnidades)*recConceptoVacaciones.tope_unidades; 

			end if;

			if recConceptoVacaciones.tope_monto <> 0 and
			   recConceptoVacaciones.tope_monto < montoA then
			   montoA := recConceptoVacaciones.tope_monto; 		

			end if;

				montoA := montoA/30;
				totalMontoA := totalMontoA + montoA;

			close curConceptosTipoB;

		elsif recConceptoVacaciones.tipo = 'D' then

			if pPeriodicidad = 'S' then
			open curHistoricoSemanaTipoD(
			 	recConceptoVacaciones.id_concepto_tipo_personal,
				pIdTrabajador, pAnio);

				loop			
				  fetch curHistoricoSemanaTipoD into recHistoricoSemanaTipoD;	
				  exit when not found;

				  totalUnidades := totalUnidades +
						   recHistoricoSemanaTipoD.unidades;

				  montoB := montoB + recHistoricoSemanaTipoD.monto;

				  if recConceptoVacaciones.tope_unidades <> 0 and
				     recConceptoVacaciones.tope_unidades < totalUnidades then
				     montoB := (montoB /totalUnidades)*
						recConceptoVacaciones.tope_unidades; 
				  end if;

				  if recConceptoVacaciones.tope_monto <> 0 and
 				     recConceptoVacaciones.tope_monto < montoB then
					montoB := recConceptoVacaciones.tope_monto;
				  end if;	

				end loop;

				close curHistoricoSemanaTipoD;

			else

				open curHistoricoQuincenaTipoD
	  			     (recConceptoVacaciones.id_concepto_tipo_personal, 
 					pIdTrabajador, pAnio);

				loop			

					fetch curHistoricoQuincenaTipoD into
					      recHistoricoQuincenaTipoD;	

					exit when not found;
	
					totalUnidades := totalUnidades +
						recHistoricoQuincenaTipoD.unidades;

					montoB := montoB + recHistoricoQuincenaTipoD.monto;

					if recConceptoVacaciones.tope_unidades <> 0 and 			

		

recConceptoVacaciones.tope_unidades < totalUnidades then

					   montoB := (montoB /totalUnidades) *
							recConceptoVacaciones.tope_unidades;
					end if;

					if recConceptoVacaciones.tope_monto <> 0 and
					   recConceptoVacaciones.tope_monto < montoB then
					   montoB := recConceptoVacaciones.tope_monto;
					end if;	

				end loop;

				close curHistoricoQuincenaTipoD;

			end if;

			montoB := montoB/pDiasAnio;

			totalMontoB := totalMontoB + montoB;

		elsif  recConceptoVacaciones.tipo = 'P' then

			if pPeriodicidad = 'S' then
			open curHistoricoSemanaTipoP(
			 	recConceptoVacaciones.id_concepto_tipo_personal,
				pIdTrabajador, pAnio, pMes);

				loop			
				  fetch curHistoricoSemanaTipoP into recHistoricoSemanaTipoP;	
				  exit when not found;

				  totalUnidades := totalUnidades +
						   recHistoricoSemanaTipoP.unidades;

				  montoC := montoC + recHistoricoSemanaTipoP.monto;

				  if recConceptoVacaciones.tope_unidades <> 0 and
				     recConceptoVacaciones.tope_unidades < totalUnidades then
				     montoC := (montoC /totalUnidades)*
						recConceptoVacaciones.tope_unidades; 
				  end if;

				  if recConceptoVacaciones.tope_monto <> 0 and
 				     recConceptoVacaciones.tope_monto < montoC then
					montoC := recConceptoVacaciones.tope_monto;
				  end if;	

				end loop;

				if recHistoricoSemanaTipoP.cod_frecuencia = 4 then
                                   montoC := montoC / dividir;
                                else
                                   montoC := montoC / 30;
                                end if;                                   

				close curHistoricoSemanaTipoP;

			else

				open curHistoricoQuincenaTipoP
	  			     (recConceptoVacaciones.id_concepto_tipo_personal, 
 					pIdTrabajador, pAnio, pMes);

				loop			

					fetch curHistoricoQuincenaTipoP into
					      recHistoricoQuincenaTipoP;	

					exit when not found;
	
					totalUnidades := totalUnidades +
						recHistoricoQuincenaTipoP.unidades;

					montoC := montoC + recHistoricoQuincenaTipoP.monto;

					if recConceptoVacaciones.tope_unidades <> 0 and 			

		

recConceptoVacaciones.tope_unidades < totalUnidades then

					   montoC := (montoC /totalUnidades) *
							recConceptoVacaciones.tope_unidades;
					end if;

					if recConceptoVacaciones.tope_monto <> 0 and
					   recConceptoVacaciones.tope_monto < montoC then
					   montoC := recConceptoVacaciones.tope_monto;
					end if;	

				end loop;

                                  montoC := montoC / 30;

                                close curHistoricoQuincenaTipoP;

			end if;

			

			totalMontoC := totalMontoC + montoC;


		end if;

	end loop;

	raise notice 'SALIO DEL CURSOR DE CONCEPTOVACACIONES ';

	montoAlicuota := 0;

	montoPetrolero := 0;

	bonoSinAlicuota := 0;
	bonoExtra := 0;
	totalBono := 0;

	bonoSinAlicuota := (totalMontoA+totalMontoB+totalMontoC)* recVacacionesPorAnio.dias_bono;
	bonoExtra := (totalMontoA+totalMontoB+totalMontoC)* recVacacionesPorAnio.dias_extra;
	totalBono := bonoSinAlicuota + montoAlicuota+montoPetrolero;

	totalBono := convert_2_decimal(totalBono);
	close curConceptoVacaciones;

	close curVacacionesPorAnio;

	montoTotal :=  totalBono;
	return montoTotal; 

end;

$_$;


ALTER FUNCTION public.calcular_bonovacacional_constancia(integer, integer, integer, integer, character varying, integer, integer) OWNER TO postgres;

--
-- TOC entry 692 (class 1255 OID 183658)
-- Name: calcular_bonovacacional_trabajador(integer, integer, character varying, double precision, integer, character varying, double precision, integer, integer, integer, character varying, integer, character varying, character varying, double precision, double precision, character varying, character varying, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_bonovacacional_trabajador(integer, integer, character varying, double precision, integer, character varying, double precision, integer, integer, integer, character varying, integer, character varying, character varying, double precision, double precision, character varying, character varying, integer, integer, integer) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTrabajador alias for $1;	
	pIdConceptoTipoPersonalAlicuota alias for $2;	
	pTipoAlicuota alias for $3;
	pUnidadesAlicuota alias for $4;
	pIdConceptoTipoPersonalPetrolero alias for $5;	
	pTipoPetrolero alias for $6;
	pUnidadesPetrolero alias for $7;	
	pAniosCumple alias for $8;
	pIdTipoPersonal alias for $9;
	pAnio alias for $10;
	pPeriodicidad alias for $11;
	pDiasAnio alias for $12;
	pAlicuotaBfaBvac alias for $13;
	pAlicuotaBonoPetrolero alias for $14;
	pJornadaDiaria alias for $15;
	pJornadaSemanal alias for $16;
	pFormulaIntegral alias for $17;
	pFormulaSemanal alias for $18;
	pConstantePetroleroA alias for $19;
	pConstantePetroleroB alias for $20;
	pConstantePetroleroC alias for $21;

	recConceptoVacaciones record;
	curConceptoVacaciones cursor (pIdTipoPersonal int4) 
		for select id_concepto_tipo_personal, tipo, tope_unidades, 
		tope_monto, numero_meses, mes_cerrado, alicuota_vacacional, 
		id_concepto_alicuota, mes30 
		from conceptovacaciones 
		where id_tipo_personal = pIdTipoPersonal;


	recVacacionesPorAnio record;
	curVacacionesPoranio cursor(pIdTipoPersonal int4, pAniosCumple int4)
		for select * from vacacionesporanio 
		where id_tipo_personal = pIdTipoPersonal and anios_servicio <= pAniosCumple
		order by anios_servicio desc limit 1;


	recConceptosTipoB record;
	curConceptosTipoB cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		for select cf.monto, cf.unidades, fp.cod_frecuencia_pago 
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = pIdTrabajador
		and cf.estatus = 'A';

	recHistoricoQuincenaTipoD record;
	curHistoricoQuincenaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades 
		from historicoquincena hq 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;


	recHistoricoSemanaTipoD record;
	curHistoricoSemanaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades 
		from historicosemana hs 
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;


	montoA float8 := 0;	
	montoB float8 := 0;	
	bonoExtra float8 := 0;
	totalUnidades float8 := 0;
	totalMontoA float8 := 0;	
	totalMontoB float8 := 0;	
	montoAlicuota float8 := 0;
	montoPetrolero float8 := 0;
	bonoSinAlicuota float8 := 0;	
	totalBono float8 := 0;

begin		

	open curVacacionesPorAnio(pIdTipoPersonal, pAniosCumple);

	fetch curVacacionesPorAnio into recVacacionesPorAnio;			
	exit when not found;

	open curConceptoVacaciones(pIdTipoPersonal);

	loop

		
		fetch curConceptoVacaciones into recConceptoVacaciones;	
		exit when not found;

		if recConceptoVacaciones.tipo = 'B' then
                    
                        montoA := 0;

			open curConceptosTipoB(recConceptoVacaciones.id_concepto_tipo_personal,
					pIdTrabajador);

			loop

				fetch curConceptosTipoB into recConceptosTipoB;	
				exit when not found;

				totalUnidades := totalUnidades + recConceptosTipoB.unidades;

				if recConceptosTipoB.cod_frecuencia_pago = 3 then

					montoA := montoA + (recConceptosTipoB.monto*2);

				elsif recConceptosTipoB.cod_frecuencia_pago = 4 then

					montoA := montoA + (recConceptosTipoB.monto/7)*30;

				elsif recConceptosTipoB.cod_frecuencia_pago = 10 then

					montoA := montoA + (recConceptosTipoB.monto*4);

				elsif recConceptosTipoB.cod_frecuencia_pago = 1 or

					recConceptosTipoB.cod_frecuencia_pago = 2 or 
					recConceptosTipoB.cod_frecuencia_pago > 4 then
					montoA := montoA + recConceptosTipoB.monto;

				end if;
                                      

			end loop;

                                   

			if recConceptoVacaciones.tope_unidades <> 0 and
			   recConceptoVacaciones.tope_unidades < totalUnidades then
			   montoA := (montoA /totalUnidades)*recConceptoVacaciones.tope_unidades; 
			end if;

			if recConceptoVacaciones.tope_monto <> 0 and
			   recConceptoVacaciones.tope_monto < montoA then
			   montoA := recConceptoVacaciones.tope_monto; 		
			end if;

				montoA := montoA/30;

			 	totalMontoA := totalMontoA + montoA;

                                      
	               close curConceptosTipoB;
                      
                                  

		elsif recConceptoVacaciones.tipo = 'D' then

                        montoB := 0;

			if pPeriodicidad = 'S' then
			open curHistoricoSemanaTipoD(
			 	recConceptoVacaciones.id_concepto_tipo_personal,
				pIdTrabajador, pAnio);

				loop			
				  fetch curHistoricoSemanaTipoD into recHistoricoSemanaTipoD;	
				  exit when not found;

				  totalUnidades := totalUnidades +
						   recHistoricoSemanaTipoD.unidades;

				  montoB := montoB + recHistoricoSemanaTipoD.monto;

				  if recConceptoVacaciones.tope_unidades <> 0 and
				     recConceptoVacaciones.tope_unidades < totalUnidades then
				     montoB := (montoB /totalUnidades)*
						recConceptoVacaciones.tope_unidades; 
				  end if;

				  if recConceptoVacaciones.tope_monto <> 0 and
 				     recConceptoVacaciones.tope_monto < montoB then
					montoB := recConceptoVacaciones.tope_monto;
				  end if;	

				end loop;

				close curHistoricoSemanaTipoD;

			else

				open curHistoricoQuincenaTipoD
	  			     (recConceptoVacaciones.id_concepto_tipo_personal, 
 					pIdTrabajador, pAnio);

				loop			

					fetch curHistoricoQuincenaTipoD into
					      recHistoricoQuincenaTipoD;	

					exit when not found;
	
					totalUnidades := totalUnidades +
						recHistoricoQuincenaTipoD.unidades;

					montoB := montoB + recHistoricoQuincenaTipoD.monto;

					if recConceptoVacaciones.tope_unidades <> 0 and 					                                                    recConceptoVacaciones.tope_unidades < totalUnidades then

					   montoB := (montoB /totalUnidades) *
							recConceptoVacaciones.tope_unidades;
					end if;

					if recConceptoVacaciones.tope_monto <> 0 and
					   recConceptoVacaciones.tope_monto < montoB then
					   montoB := recConceptoVacaciones.tope_monto;
					end if;	


				end loop;

				close curHistoricoQuincenaTipoD;

			end if;

			montoB := montoB/pDiasAnio;

			totalMontoB := totalMontoB + montoB;

		end if;

	end loop;

	montoAlicuota := 0;
	montoPetrolero := 0;

	bonoSinAlicuota := 0;
	bonoExtra := 0;
	totalBono := 0;

	bonoSinAlicuota := (totalMontoA+totalMontoB)* recVacacionesPorAnio.dias_bono;
	bonoExtra := (totalMontoA+totalMontoB)* recVacacionesPorAnio.dias_extra;
	totalBono := bonoSinAlicuota + montoAlicuota+montoPetrolero;

	totalBono := convert_2_decimal(totalBono);
	close curConceptoVacaciones;

	close curVacacionesPorAnio;

	return totalBono;
	

end;

$_$;


ALTER FUNCTION public.calcular_bonovacacional_trabajador(integer, integer, character varying, double precision, integer, character varying, double precision, integer, integer, integer, character varying, integer, character varying, character varying, double precision, double precision, character varying, character varying, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 693 (class 1255 OID 183660)
-- Name: calcular_bonovacacional_trabajador(integer, integer, character varying, double precision, integer, character varying, double precision, integer, integer, integer, character varying, integer, character varying, character varying, double precision, double precision, character varying, character varying, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_bonovacacional_trabajador(integer, integer, character varying, double precision, integer, character varying, double precision, integer, integer, integer, character varying, integer, character varying, character varying, double precision, double precision, character varying, character varying, integer, integer, integer, integer, integer) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTrabajador alias for $1;	
	pIdConceptoTipoPersonalAlicuota alias for $2;	
	pTipoAlicuota alias for $3;
	pUnidadesAlicuota alias for $4;
	pIdConceptoTipoPersonalPetrolero alias for $5;	
	pTipoPetrolero alias for $6;
	pUnidadesPetrolero alias for $7;	
	pAniosCumple alias for $8;
	pIdTipoPersonal alias for $9;
	pAnio alias for $10;
	pPeriodicidad alias for $11;
	pDiasAnio alias for $12;
	pAlicuotaBfaBvac alias for $13;
	pAlicuotaBonoPetrolero alias for $14;
	pJornadaDiaria alias for $15;
	pJornadaSemanal alias for $16;
	pFormulaIntegral alias for $17;
	pFormulaSemanal alias for $18;
	pConstantePetroleroA alias for $19;
	pConstantePetroleroB alias for $20;
	pConstantePetroleroC alias for $21;
	pMes alias for $22;
	pDividir alias for $23;
	

	recConceptoVacaciones record;
	curConceptoVacaciones cursor (pIdTipoPersonal int4) 
		for select id_concepto_tipo_personal, tipo, tope_unidades, 
		tope_monto, numero_meses, mes_cerrado, alicuota_vacacional, 
		id_concepto_alicuota, mes30 
		from conceptovacaciones 
		where id_tipo_personal = pIdTipoPersonal;


	recVacacionesPorAnio record;
	curVacacionesPoranio cursor(pIdTipoPersonal int4, pAniosCumple int4)
		for select * from vacacionesporanio 
		where id_tipo_personal = pIdTipoPersonal and anios_servicio <= pAniosCumple
		order by anios_servicio desc limit 1;


	recConceptosTipoB record;
	curConceptosTipoB cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		for select cf.monto, cf.unidades, fp.cod_frecuencia_pago 
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = pIdTrabajador
		and cf.estatus = 'A';

	recHistoricoQuincenaTipoD record;
	curHistoricoQuincenaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades 
		from historicoquincena hq 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;


	recHistoricoSemanaTipoD record;
	curHistoricoSemanaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades 
		from historicosemana hs 
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;

	recHistoricoQuincenaTipoP record;
	curHistoricoQuincenaTipoP cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4, pMes int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades,
		    max(hq.id_frecuencia_tipo_personal) as frecuencia,
                    max(fp.cod_frecuencia_pago) as cod_frecuencia 
		from historicoquincena hq, frecuenciatipopersonal ftp, frecuenciapago fp 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		and mes = pMes
		and hq.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		group by id_trabajador;


	recHistoricoSemanaTipoP record;
	curHistoricoSemanaTipoP cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4, pMes int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades,
		    max(hs.id_frecuencia_tipo_personal) as frecuencia,
  		    max(fp.cod_frecuencia_pago) as cod_frecuencia 
		from historicosemana hs, frecuenciatipopersonal ftp, frecuenciapago fp  
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		and mes = pMes
		and hs.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		group by id_trabajador;


	montoA float8 := 0;	
	montoB float8 := 0;
        montoC float8 := 0;	
	bonoExtra float8 := 0;
	totalUnidades float8 := 0;
	totalMontoA float8 := 0;	
	totalMontoB float8 := 0;
	totalMontoC float8 := 0;	
	montoAlicuota float8 := 0;
	montoPetrolero float8 := 0;
	bonoSinAlicuota float8 := 0;	
	totalBono float8 := 0;

begin		

	open curVacacionesPorAnio(pIdTipoPersonal, pAniosCumple);

	fetch curVacacionesPorAnio into recVacacionesPorAnio;			
	exit when not found;

	open curConceptoVacaciones(pIdTipoPersonal);

	loop

		raise notice 'si pasa 2 ';

		fetch curConceptoVacaciones into recConceptoVacaciones;	
		exit when not found;

                montoA := 0;
		montoB := 0;

		if recConceptoVacaciones.tipo = 'B' then

			open curConceptosTipoB(recConceptoVacaciones.id_concepto_tipo_personal,
					pIdTrabajador);

			loop

				raise notice 'si pasa 2 ';

				fetch curConceptosTipoB into recConceptosTipoB;	
				exit when not found;

				totalUnidades := totalUnidades + recConceptosTipoB.unidades;

				if recConceptosTipoB.cod_frecuencia_pago = 3 then

					montoA := montoA + (recConceptosTipoB.monto*2);

				elsif recConceptosTipoB.cod_frecuencia_pago = 4 then

					montoA := montoA + (recConceptosTipoB.monto/7)*30;

				elsif recConceptosTipoB.cod_frecuencia_pago = 10 then

					montoA := montoA + (recConceptosTipoB.monto*4);

				elsif recConceptosTipoB.cod_frecuencia_pago = 1 or

					recConceptosTipoB.cod_frecuencia_pago = 2 or 
					recConceptosTipoB.cod_frecuencia_pago > 4 then

					montoA := montoA + recConceptosTipoB.monto;

				end if;

			end loop;

			if recConceptoVacaciones.tope_unidades <> 0 and
			   recConceptoVacaciones.tope_unidades < totalUnidades then

			   montoA := (montoA /totalUnidades)*recConceptoVacaciones.tope_unidades; 

			end if;

			if recConceptoVacaciones.tope_monto <> 0 and
			   recConceptoVacaciones.tope_monto < montoA then
			   montoA := recConceptoVacaciones.tope_monto; 		

			end if;

				montoA := montoA/30;
				totalMontoA := totalMontoA + montoA;

			close curConceptosTipoB;

		elsif recConceptoVacaciones.tipo = 'D' then

			if pPeriodicidad = 'S' then
			open curHistoricoSemanaTipoD(
			 	recConceptoVacaciones.id_concepto_tipo_personal,
				pIdTrabajador, pAnio);

				loop			
				  fetch curHistoricoSemanaTipoD into recHistoricoSemanaTipoD;	
				  exit when not found;

				  totalUnidades := totalUnidades +
						   recHistoricoSemanaTipoD.unidades;

				  montoB := montoB + recHistoricoSemanaTipoD.monto;

				  if recConceptoVacaciones.tope_unidades <> 0 and
				     recConceptoVacaciones.tope_unidades < totalUnidades then
				     montoB := (montoB /totalUnidades)*
						recConceptoVacaciones.tope_unidades; 
				  end if;

				  if recConceptoVacaciones.tope_monto <> 0 and
 				     recConceptoVacaciones.tope_monto < montoB then
					montoB := recConceptoVacaciones.tope_monto;
				  end if;	

				end loop;

				close curHistoricoSemanaTipoD;

			else

				open curHistoricoQuincenaTipoD
	  			     (recConceptoVacaciones.id_concepto_tipo_personal, 
 					pIdTrabajador, pAnio);

				loop			

					fetch curHistoricoQuincenaTipoD into
					      recHistoricoQuincenaTipoD;	

					exit when not found;
	
					totalUnidades := totalUnidades +
						recHistoricoQuincenaTipoD.unidades;

					montoB := montoB + recHistoricoQuincenaTipoD.monto;

					if recConceptoVacaciones.tope_unidades <> 0 and 					recConceptoVacaciones.tope_unidades < totalUnidades then

					   montoB := (montoB /totalUnidades) *
							recConceptoVacaciones.tope_unidades;
					end if;

					if recConceptoVacaciones.tope_monto <> 0 and
					   recConceptoVacaciones.tope_monto < montoB then
					   montoB := recConceptoVacaciones.tope_monto;
					end if;	

				end loop;

				close curHistoricoQuincenaTipoD;

			end if;

			montoB := montoB/pDiasAnio;

			totalMontoB := totalMontoB + montoB;

		elsif  recConceptoVacaciones.tipo = 'P' then

			if pPeriodicidad = 'S' then
			open curHistoricoSemanaTipoP(
			 	recConceptoVacaciones.id_concepto_tipo_personal,
				pIdTrabajador, pAnio, pMes);

				loop			
				  fetch curHistoricoSemanaTipoP into recHistoricoSemanaTipoP;	
				  exit when not found;

				  totalUnidades := totalUnidades +
						   recHistoricoSemanaTipoP.unidades;

				  montoC := montoC + recHistoricoSemanaTipoP.monto;

				  if recConceptoVacaciones.tope_unidades <> 0 and
				     recConceptoVacaciones.tope_unidades < totalUnidades then
				     montoC := (montoC /totalUnidades)*
						recConceptoVacaciones.tope_unidades; 
				  end if;

				  if recConceptoVacaciones.tope_monto <> 0 and
 				     recConceptoVacaciones.tope_monto < montoC then
					montoC := recConceptoVacaciones.tope_monto;
				  end if;	

				end loop;

				if recHistoricoSemanaTipoP.cod_frecuencia = 4 then
                                   montoC := montoC / dividir;
                                else
                                   montoC := montoC / 30;
                                end if;                                   

				close curHistoricoSemanaTipoP;

			else

				open curHistoricoQuincenaTipoP
	  			     (recConceptoVacaciones.id_concepto_tipo_personal, 
 					pIdTrabajador, pAnio, pMes);

				loop			

					fetch curHistoricoQuincenaTipoP into
					      recHistoricoQuincenaTipoP;	

					exit when not found;
	
					totalUnidades := totalUnidades +
						recHistoricoQuincenaTipoP.unidades;

					montoC := montoC + recHistoricoQuincenaTipoP.monto;

					if recConceptoVacaciones.tope_unidades <> 0 and 					recConceptoVacaciones.tope_unidades < totalUnidades then

					   montoC := (montoC /totalUnidades) *
							recConceptoVacaciones.tope_unidades;
					end if;

					if recConceptoVacaciones.tope_monto <> 0 and
					   recConceptoVacaciones.tope_monto < montoC then
					   montoC := recConceptoVacaciones.tope_monto;
					end if;	

				end loop;

                                  montoC := montoC / 30;

                                close curHistoricoQuincenaTipoP;

			end if;

			

			totalMontoC := totalMontoC + montoC;


		end if;

	end loop;

	raise notice 'SALIO DEL CURSOR DE CONCEPTOVACACIONES ';

	montoAlicuota := 0;

	montoPetrolero := 0;

	bonoSinAlicuota := 0;
	bonoExtra := 0;
	totalBono := 0;

	bonoSinAlicuota := (totalMontoA+totalMontoB+totalMontoC)* recVacacionesPorAnio.dias_bono;
	bonoExtra := (totalMontoA+totalMontoB+totalMontoC)* recVacacionesPorAnio.dias_extra;
	totalBono := bonoSinAlicuota + montoAlicuota+montoPetrolero;

	totalBono := convert_2_decimal(totalBono);
	close curConceptoVacaciones;

	close curVacacionesPorAnio;

	return totalBono;
	

end;

$_$;


ALTER FUNCTION public.calcular_bonovacacional_trabajador(integer, integer, character varying, double precision, integer, character varying, double precision, integer, integer, integer, character varying, integer, character varying, character varying, double precision, double precision, character varying, character varying, integer, integer, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 694 (class 1255 OID 183662)
-- Name: calcular_bonovacacional_trabajador(integer, integer, character varying, double precision, double precision, double precision, double precision, integer, character varying, double precision, double precision, double precision, double precision, integer, integer, integer, character varying, integer, character varying, character varying, double precision, double precision, character varying, character varying, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_bonovacacional_trabajador(integer, integer, character varying, double precision, double precision, double precision, double precision, integer, character varying, double precision, double precision, double precision, double precision, integer, integer, integer, character varying, integer, character varying, character varying, double precision, double precision, character varying, character varying, integer, integer, integer) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$
declare 
	pIdTrabajador alias for $1;	
	pIdConceptoTipoPersonalAlicuota alias for $2;	
	pTipoAlicuota alias for $3;
	pUnidadesAlicuota alias for $4;
	pValorAlicuota alias for $5;
	pTopeMinimoAlicuota alias for $6;
	pTopeMaximoAlicuota alias for $7;
	pIdConceptoTipoPersonalPetrolero alias for $8;	
	pTipoPetrolero alias for $9;
	pUnidadesPetrolero alias for $10;
	pValorPetrolero alias for $11;
	pTopeMinimoPetrolero alias for $12;
	pTopeMaximoPetrolero alias for $13;	
	pAniosCumple alias for $14;
	pIdTipoPersonal alias for $15;
	pAnio alias for $16;
	pPeriodicidad alias for $17;
	pDiasAnio alias for $18;
	pAlicuotaBfaBvac alias for $19;
	pAlicuotaBonoPetrolero alias for $20;
	pJornadaDiaria alias for $21;
	pJornadaSemanal alias for $22;
	pFormulaIntegral alias for $23;
	pFormulaSemanal alias for $24;
	pConstantePetroleroA alias for $25;
	pConstantePetroleroB alias for $26;
	pConstantePetroleroC alias for $27;

	recConceptoVacaciones record;

	curConceptoVacaciones cursor (pIdTipoPersonal int4) 
		for select id_concepto_tipo_personal, tipo, tope_unidades, 
		tope_monto, numero_meses, mes_cerrado, alicuota_vacacional, id_concepto_alicuota, mes30 
		from conceptovacaciones 
		where id_tipo_personal = pIdTipoPersonal;

	recVacacionesPorAnio record;
	curVacacionesPoranio cursor(pIdTipoPersonal int4, pAniosCumple int4)
		for select * from vacacionesporanio 
		where id_tipo_personal = pIdTipoPersonal and anios_servicio <= pAniosCumple
		order by anios_servicio desc limit 1;

	recConceptosTipoB record;
	curConceptosTipoB cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		for select cf.monto, cf.unidades, fp.cod_frecuencia_pago 
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = pIdTrabajador
		and cf.estatus = 'A';

	recHistoricoQuincenaTipoD record;
	curHistoricoQuincenaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, pAnio int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades 
		from historicoquincena hq 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;

	recHistoricoSemanaTipoD record;
	curHistoricoSemanaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, pAnio int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades 
		from historicosemana hs 
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;

	montoA float8 := 0;	
	montoB float8 := 0;	
	bonoExtra float8 := 0;
	totalUnidades float8 := 0;
	totalMontoA float8 := 0;	
	totalMontoB float8 := 0;	
	montoAlicuota float8 := 0;
	montoPetrolero float8 := 0;
	bonoSinAlicuota float8 := 0;	
	totalBono float8 := 0;
begin		
	open curVacacionesPorAnio(pIdTipoPersonal, pAniosCumple);
	fetch curVacacionesPorAnio into recVacacionesPorAnio;			
	exit when not found;

	open curConceptoVacaciones(pIdTipoPersonal);
	loop
		raise notice 'si pasa 2 ';
		fetch curConceptoVacaciones into recConceptoVacaciones;	
		exit when not found;

		if recConceptoVacaciones.tipo = 'B' then
			open curConceptosTipoB(recConceptoVacaciones.id_concepto_tipo_personal, pIdTrabajador);
			loop
				raise notice 'si pasa 2 ';
				fetch curConceptosTipoB into recConceptosTipoB;	
				exit when not found;
				totalUnidades := totalUnidades + recConceptosTipoB.unidades;
				if recConceptosTipoB.cod_frecuencia_pago = 3 then
					montoA := montoA + (recConceptosTipoB.monto*2);
				elsif recConceptosTipoB.cod_frecuencia_pago = 4 then
					montoA := montoA + (recConceptosTipoB.monto/7)*30;
				elsif recConceptosTipoB.cod_frecuencia_pago = 10 then
					montoA := montoA + (recConceptosTipoB.monto*4);
				elsif recConceptosTipoB.cod_frecuencia_pago = 1 or
					recConceptosTipoB.cod_frecuencia_pago = 2 or 
					recConceptosTipoB.cod_frecuencia_pago > 4 then
						
					montoA := montoA + recConceptosTipoB.monto;
				end if;
			end loop;
			if recConceptoVacaciones.tope_unidades <> 0 and recConceptoVacaciones.tope_unidades < totalUnidades then
				montoA := (montoA /totalUnidades)*recConceptoVacaciones.tope_unidades; 
			end if;
			if recConceptoVacaciones.tope_monto <> 0 and recConceptoVacaciones.tope_monto < montoA then
				montoA := recConceptoVacaciones.tope_monto;																
			end if;
				
			montoA := montoA/30;
			totalMontoA := totalMontoA + montoA;

			close curConceptosTipoB;
		elsif recConceptoVacaciones.tipo = 'D' then
			if pPeriodicidad = 'S' then
				open curHistoricoSemanaTipoD(recConceptoVacaciones.id_concepto_tipo_personal, recTrabajadores.id_trabajador, pAnio);
				loop			
					fetch curHistoricoSemanaTipoD into recHistoricoSemanaTipoD;	
					exit when not found;

					totalUnidades := totalUnidades + recHistoricoSemanaTipoD.unidades;							
					montoB := montoB + recHistoricoSemanaTipoD.monto;

					if recConceptoVacaciones.tope_unidades <> 0 and recConceptoVacaciones.tope_unidades < totalUnidades then
						montoB := (montoB /totalUnidades)*recConceptoVacaciones.tope_unidades; 
					end if;
					if recConceptoVacaciones.tope_monto <> 0 and recConceptoVacaciones.tope_monto < montoB then
						montoB := recConceptoVacaciones.tope_monto;																
					end if;	

				end loop;
				close curHistoricoSemanaTipoD;
			else
				open curHistoricoQuincenaTipoD(recConceptoUtilidades.id_concepto_tipo_personal, recTrabajadores.id_trabajador, extract(year from pFechaFin));
				loop			
					fetch curHistoricoQuincenaTipoD into recHistoricoQuincenaTipoD;	
					exit when not found;

					totalUnidades := totalUnidades + recHistoricoQuincenaTipoD.unidades;							
					montoB := montoB + recHistoricoQuincenaTipoD.monto;

					if recConceptoVacaciones.tope_unidades <> 0 and recConceptoVacaciones.tope_unidades < totalUnidades then
						montoB := (montoB /totalUnidades)*recConceptoVacaciones.tope_unidades; 
					end if;
					if recConceptoVacaciones.tope_monto <> 0 and recConceptoVacaciones.tope_monto < montoB then
						montoB := recConceptoVacaciones.tope_monto;																
					end if;	

				end loop;
				close curHistoricoQuincenaTipoD;
			end if;
			montoB := montoB/pDiasAnio;
			totalMontoB := totalMontoB + montoB;
		end if;
	end loop;
	
	raise notice 'SALIO DEL CURSOR DE CONCEPTOVACACIONES ';

	montoAlicuota := 0;
	
	if pAlicuotaBfaBvac = 'S' then					
		montoAlicuota := calcular_concepto(pIdConceptoTipoPersonalAlicuota, pIdTrabajador, pUnidadesAlicuota, pTipoAlicuota, 1, pJornadaDiaria, pJornada_semanal, pF0ormula_integral, rsTrabajadores.getString("formula_semanal"), pIdCargo, pValorAlicuota, pTopeMinimoAlicuota, pTopeMaximoAlicuota);
		montoAlicuota := montoAlicuota / pDiasAnio;
		montoAlicuota := montoAlicuota * recVacacionesPorAnio.dias_bono;
	else
		montoAlicuota := 0;

	end if;
	
	montoPetrolero := 0;
	if pAlicuotaBonoPetrolero = 'S' then					
		montoPetrolero := calcular_concepto(pIdConceptoTipoPersonalPetrolero, pIdTrabajador, 1, pTipoPetrolero, 1, pJornadaDiaria, pJornadaSemanal, pFormulaIntegral, pFormulaSemanal, pIdCargo, pValorPetrolero, pTopeMinimoPetrolero, pTopeMaximoPetrolero);
		montoPetrolero := ((pConstantePetroleroA + (pConstantePetroleroB*recVacacionesPorAnio.dias_bono)) * montoPetrolero);
		montoPetrolero := montoPetrolero /pConstantePetroleroC;	
		montoPetrolero := montoPetrolero / pDiasAnio;
		montoPetrolero := montoPetrolero * recVacacionesPorAnio.dias_bono;				
	else
		montoPetrolero := 0;

	end if;
	
	bonoSinAlicuota := 0;
	bonoExtra := 0;
	totalBono := 0;

	bonoSinAlicuota := (totalMontoA+totalMontoB)* recVacacionesPorAnio.dias_bono;
	bonoExtra := (totalMontoA+totalMontoB)* recVacacionesPorAnio.dias_extra;
	totalBono := bonoSinAlicuota + montoAlicuota+montoPetrolero;
	
	close curConceptoVacaciones;
	close curVacacionesPorAnio;
	return totalBono;
	
end;
$_$;


ALTER FUNCTION public.calcular_bonovacacional_trabajador(integer, integer, character varying, double precision, double precision, double precision, double precision, integer, character varying, double precision, double precision, double precision, double precision, integer, integer, integer, character varying, integer, character varying, character varying, double precision, double precision, character varying, character varying, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 695 (class 1255 OID 183664)
-- Name: calcular_concepto(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_concepto(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$ 

declare  	
	pIdConceptoTipoPersonal alias for $1;	
	pIdTrabajador alias for $2;
	pUnidades alias for $3;	
	pTipo alias for $4;
	pCodFrecuenciaPago alias for $5;
	pJornadaDiaria alias for $6;
	pJornadaSemanal alias for $7;
	pFormulaIntegral alias for $8;
	pFormulaSemanal alias for $9;
	pIdCargo alias for $10;
	pValor alias for $11;
	pTopeMinimo alias for $12;
	pTopeMaximo alias for $13;

	idTipoPersonal int4 := 0;
	valor float8 := 0;
	topeMaximo float8 := 0;
	topeMinimo float8 := 0;	
      monto float8 := 0;
	montoTotal float8 := 0;
	porcentaje float8 := 0;
	conversion varchar;
	codFrecuenciaPagoAsociado int4 := 0;
	montoAlicuota float8 := 0;
	diasAnio int4 := 0;
	recConceptoAsociado record;	

	recConceptoAlicuota record;	
	recConceptoCargo record;

	ctp_rec conceptotipopersonal;
	pv parametrovarios;
	cc conceptocargo; 
	curConceptoCargo cursor (key1 int4, key2 int4) for
                select distinct monto from conceptocargo		
                      where id_cargo = key1 and id_concepto_tipo_personal = key2;

	curConceptoAsociado cursor (key1 int4, key2 int4) for 
                  select distinct cf.id_concepto_fijo, cf.monto, 
			fp.cod_frecuencia_pago, ca.base, ca.factor, ctp.valor, 'F' as origen
			from conceptofijo cf, conceptoasociado ca, trabajador t,
			frecuenciapago fp, frecuenciatipopersonal ftp, conceptotipopersonal ctp	
			where ca.id_concepto_asociar = cf.id_concepto_tipo_personal	
			and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal	
			and fp.id_frecuencia_pago = ftp.id_frecuencia_pago	
			and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
			and cf.id_trabajador = t.id_trabajador		
             	and t.id_trabajador = key1		
			and ctp.id_concepto_tipo_personal = key2	
			union		
       		select distinct cv.id_concepto_variable, cv.monto,
 			fp.cod_frecuencia_pago, ca.base, ca.factor, ctp.valor, 'V' as origen	
			from conceptovariable cv, conceptoasociado ca, trabajador t,
			frecuenciapago fp, frecuenciatipopersonal ftp, 
			conceptotipopersonal ctp		
			where ca.id_concepto_asociar = cv.id_concepto_tipo_personal	
		        and cv.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal	
			and fp.id_frecuencia_pago = ftp.id_frecuencia_pago		
			and ca.id_concepto_tipo_personal =ctp.id_concepto_tipo_personal		
			and cv.id_trabajador = t.id_trabajador		
			and t.id_trabajador = key1	
			and ctp.id_concepto_tipo_personal = key2;
 	
	curConceptoAlicuota cursor (key1 int4) for
              select distinct ctp2.id_concepto_tipo_personal, ctp2.tipo, ca.base
			from conceptoasociado ca, conceptotipopersonal ctp, 
			conceptotipopersonal ctp2, concepto c 
			where ca.id_concepto_tipo_personal = key1 
			and ca.id_concepto_asociar=ctp2.id_concepto_tipo_personal 
			and c.cod_concepto = '1601' and ctp2.id_concepto = c.id_concepto; 

begin 

	select into ctp_rec * from conceptotipopersonal  
		where id_concepto_tipo_personal = pIdConceptoTipoPersonal; 	

	idTipoPersonal := ctp_rec.id_tipo_personal;	
	valor := pValor;
	topeMaximo := pTopeMaximo;	
	topeMinimo := pTopeMinimo; 	

	select into cc * from conceptocargo  
		where id_concepto_tipo_personal = pIdConceptoTipoPersonal 
		and id_cargo = pIdCargo; 	

	if cc.monto is not null then
		valor := cc.monto;
	end if; 	

	select into pv * from parametrovarios where id_tipo_personal = idTipoPersonal;

 	diasAnio := pv.dias_anio; 	

	if pTipo = 'F' then
		montoTotal := valor;
	elsif pTipo = 'P' or pTipo = 'I' or  pTipo = 'D' then 

		open curConceptoAsociado(pIdTrabajador,pIdConceptoTipoPersonal);
		 		
		loop 			

			fetch curConceptoAsociado into recConceptoAsociado;			
			exit when not found;

 			if pTipo = 'P' then
				porcentaje := valor;
			else
				porcentaje := pUnidades;
 			end if; 

			monto := recConceptoAsociado.monto*recConceptoAsociado.factor;
 			conversion := recConceptoAsociado.base;
 			codFrecuenciaPagoAsociado := recConceptoAsociado.cod_frecuencia_pago;

 			if codFrecuenciaPagoAsociado = 1 or 
                     codFrecuenciaPagoAsociado = 2 then
				if conversion = 'H' then
   				   montoTotal := montoTotal + (monto/30)/pJornadaDiaria;
				elsif conversion = 'D' then
				   montoTotal := montoTotal + (monto/30);		
				else
                           if recConceptoAsociado.origen ='F' then
			        	montoTotal := montoTotal + monto;
                                    else
                                        montoTotal := montoTotal + (monto* 2);
                                    end if;
				end if; 			elsif codFrecuenciaPagoAsociado = 3 then
				if conversion = 'H' then
				    montoTotal := montoTotal + (monto/15)/pJornadaDiaria;
				elsif conversion = 'D' then
				    montoTotal := montoTotal + (monto/15);	
				elsif conversion = 'M' then
				    montoTotal := montoTotal + (monto*2);	
				else
				    montoTotal := montoTotal + monto;
				end if; 			elsif codFrecuenciaPagoAsociado = 4 then
				if conversion = 'H' then
				   montoTotal := montoTotal + (monto/pJornadaSemanal)/
					pJornadaDiaria;		
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/pJornadaSemanal);
				elsif conversion = 'M' then	
					if pFormulaIntegral = '1' then
						montoTotal := montoTotal + (((monto/7)*365)/12);
					elsif pFormulaIntegral = '2' then
						montoTotal := montoTotal + ((monto/7)*30);
					elsif pFormulaIntegral = '3' then
						montoTotal := montoTotal + ((monto*52)/12);	
					end if;
				else
					montoTotal := montoTotal + monto;
				end if; 			elsif codFrecuenciaPagoAsociado = 5 or
				codFrecuenciaPagoAsociado = 6 or
				codFrecuenciaPagoAsociado = 7 or
				codFrecuenciaPagoAsociado = 8 or
				codFrecuenciaPagoAsociado = 9 then 				
				if conversion = 'H' then
				   montoTotal := montoTotal + (monto/30)/	pJornadaDiaria;			
			        elsif conversion = 'D' then
				   montoTotal := montoTotal + (monto/30);	
				  elsif conversion = 'S' then	
					if pFormulaSemanal = '1' then
						montoTotal := montoTotal + ((monto/30)*7);
					elsif pFormulaSemanal = '2' then
						montoTotal := montoTotal + monto;
					elsif pFormulaSemanal = '3' then
						montoTotal := montoTotal + ((monto*12)/52);
					end if;
				else
					montoTotal := montoTotal + monto;
				end if;

			elsif codFrecuenciaPagoAsociado = 10 then
				if conversion = 'H' then
				montoTotal := montoTotal + ((monto*4)/30)/
					pJornadaDiaria;				
				elsif conversion = 'D' then
					montoTotal := montoTotal + ((monto*4)/30);	
				elsif conversion = 'S' then	
					montoTotal := montoTotal + monto;		
				else
					montoTotal := montoTotal + monto*4;
				end if;
			end if;

			if codFrecuenciaPagoAsociado > 10 then
				montoTotal = montoTotal + monto;
			end if; 
		
	    end loop; 		
		close curConceptoAsociado;

	 		open curConceptoAlicuota(pIdConceptoTipoPersonal);
	
			fetch curConceptoAlicuota into recConceptoAlicuota;
	 		close curConceptoAlicuota;  		

			if recConceptoAlicuota.id_concepto_tipo_personal > 0  then			
				montoAlicuota := calcular_concepto(pIdConceptoTipoPersonal, pIdTrabajador,
					 		0, 'D', 0, 0, 0, '0', '0'); 			
				montoAlicuota := montoAlicuota / diasAnio; 

				if recConceptoAlicuota.base = 'M' then
					montoAlicuota = montoAlicuota * 30;
				end if; 
			end if;

 			if pTipo <> 'D' then
				montoTotal := montoTotal + montoAlicuota;
				montoTotal := (montoTotal * porcentaje)/100;
	 		end if;
	else

		raise notice 'tipo no encontrado';
 		return 0; 	
	end if; 

	if pUnidades > 0 and pTipo <> 'I' then
		montoTotal := montoTotal * pUnidades;
	end if; 

	if pTipo = 'D' then
		if montoTotal < valor then
			montoTotal := valor - montoTotal;
 		else
			montoTotal := 0; 		
		end if; 
	end if; 

	if topeMaximo > 0 then
		if montoTotal > topeMaximo then
			montoTotal := topeMaximo;
		end if;		
	end if;

 	if topeMinimo > 0 then
		if montoTotal < topeMinimo then
			montoTotal := topeMinimo;
		end if;		
	end if; 	

	if pCodFrecuenciaPago = 3 then 
		montoTotal := montoTotal/2;
	end if; 
    
        montoTotal = convert_2_decimal(montoTotal);

	return montoTotal; 

end; 
$_$;


ALTER FUNCTION public.calcular_concepto(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 696 (class 1255 OID 183666)
-- Name: calcular_concepto(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_concepto(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision, integer) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdConceptoTipoPersonal alias for $1;	
        pIdTrabajador alias for $2;
	pUnidades alias for $3;	
        pTipo alias for $4;
	pCodFrecuenciaPago alias for $5;
	pJornadaDiaria alias for $6;
	pJornadaSemanal alias for $7;
	pFormulaIntegral alias for $8;
	pFormulaSemanal alias for $9;
	pIdCargo alias for $10;
	pValor alias for $11;
	pTopeMinimo alias for $12;
	pTopeMaximo alias for $13;
        pSemanaMes alias for $14;

	idTipoPersonal int4 := 0;
	valor float8 := 0;
	topeMaximo float8 := 0;
	topeMinimo float8 := 0;	
        monto float8 := 0;
	montoTotal float8 := 0;
	porcentaje float8 := 0;
	conversion varchar;
	codFrecuenciaPagoAsociado int4 := 0;
	montoAlicuota float8 := 0;
	diasAnio int4 := 0;
	recConceptoAsociado record;	

	recConceptoAlicuota record;	
	recConceptoCargo record;

	rec_ctp conceptotipopersonal;
	pv parametrovarios;
	cc conceptocargo; 
	curConceptoCargo cursor (key1 int4, key2 int4) for
                select distinct monto from conceptocargo		
                      where id_cargo = key1 and id_concepto_tipo_personal = key2;

	curConceptoAsociado cursor (key1 int4, key2 int4) for 
                  select distinct cf.id_concepto_fijo, cf.monto, 
			fp.cod_frecuencia_pago, ca.base, ca.factor, ctp.valor, 'F' as origen
			from conceptofijo cf, conceptoasociado ca, trabajador t,
			frecuenciapago fp, frecuenciatipopersonal ftp, conceptotipopersonal ctp	
			where ca.id_concepto_asociar = cf.id_concepto_tipo_personal	
			and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal	
			and fp.id_frecuencia_pago = ftp.id_frecuencia_pago	
			and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
			and cf.id_trabajador = t.id_trabajador		
            		and t.id_trabajador = key1		
            		and ctp.id_concepto_tipo_personal = key2	
union		
       		select distinct cv.id_concepto_variable, cv.monto,
 			fp.cod_frecuencia_pago, ca.base, ca.factor, ctp.valor, 'V' as origen	
			from conceptovariable cv, conceptoasociado ca, trabajador t,
			frecuenciapago fp, frecuenciatipopersonal ftp, 
			conceptotipopersonal ctp		
			where ca.id_concepto_asociar = cv.id_concepto_tipo_personal	
           		and cv.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal	
			and fp.id_frecuencia_pago = ftp.id_frecuencia_pago		
 			and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
			and cv.id_trabajador = t.id_trabajador		
			and t.id_trabajador = key1	
			and ctp.id_concepto_tipo_personal = key2;

curConceptoAlicuota cursor (key1 int4) for
              select distinct ctp2.id_concepto_tipo_personal, ctp2.tipo, ca.base
              		from conceptoasociado ca, conceptotipopersonal ctp, 
			conceptotipopersonal ctp2, concepto c 
			where ca.id_concepto_tipo_personal = key1 and      				
			ca.id_concepto_asociar=ctp2.id_concepto_tipo_personal 
			and c.cod_concepto = '1601' and ctp2.id_concepto = c.id_concepto;
begin
	select into rec_ctp * from conceptotipopersonal  where 
		id_concepto_tipo_personal = pIdConceptoTipoPersonal;

	idTipoPersonal := rec_ctp.id_tipo_personal;	
	valor := pValor;	
	topeMaximo := pTopeMaximo;	
	topeMinimo := pTopeMinimo;

	select into cc * from conceptocargo  where 
		id_concepto_tipo_personal = pIdConceptoTipoPersonal and id_cargo = pIdCargo;

	if cc.monto is not null then
		valor := cc.monto;

	end if;

	select into pv * from parametrovarios where id_tipo_personal = idTipoPersonal;

	diasAnio := pv.dias_anio;

	if pTipo = 'F' then
		montoTotal := valor;
	elsif pTipo = 'P' or pTipo = 'I' or  pTipo = 'D' then

		--raise notice 'Abro curConceptoAsociado %,%',pIdTrabajador,pIdConceptoTipoPersonal;		
		
		open curConceptoAsociado(pIdTrabajador, pIdConceptoTipoPersonal);

		loop

			fetch curConceptoAsociado into recConceptoAsociado;			

			exit when not found;

			if pTipo = 'P' then
				porcentaje := valor;
			else
				porcentaje := pUnidades;

			end if;

			monto := recConceptoAsociado.monto*recConceptoAsociado.factor;

			conversion := recConceptoAsociado.base;

			codFrecuenciaPagoAsociado := recConceptoAsociado.cod_frecuencia_pago;

			if codFrecuenciaPagoAsociado = 1 or 
                           codFrecuenciaPagoAsociado = 2 then
				if conversion = 'H' then
   				   montoTotal := montoTotal + (monto/30)/pJornadaDiaria;
				elsif conversion = 'D' then
				   montoTotal := montoTotal + (monto/30);		
				else
                                   if recConceptoAsociado.origen ='F' then
				        montoTotal := montoTotal + monto;
                                   else
                                        montoTotal := montoTotal + (monto* 2);
                                   end if;

				end if;

			elsif codFrecuenciaPagoAsociado = 3 then
				if conversion = 'H' then
				    montoTotal := montoTotal + (monto/15)/pJornadaDiaria;
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/15);	
				elsif conversion = 'M' then
					montoTotal := montoTotal + (monto*2);	
				else
					montoTotal := montoTotal + monto;
				end if;

			elsif codFrecuenciaPagoAsociado = 4 then
				if conversion = 'H' then
					montoTotal := montoTotal + (monto/pJornadaSemanal)/
					pJornadaDiaria;		
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/pJornadaSemanal);
				elsif conversion = 'M' then	
					if pFormulaIntegral = '1' then
						montoTotal := montoTotal + (((monto/7)*365)/12);

					elsif pFormulaIntegral = '2' then
						montoTotal := montoTotal + ((monto/7)*30);

					elsif pFormulaIntegral = '3' then
						montoTotal := montoTotal + ((monto*52)/12);	

					end if;
				else
					montoTotal := montoTotal + monto;

				end if;

			elsif codFrecuenciaPagoAsociado = 5 or
				codFrecuenciaPagoAsociado = 6 or
				codFrecuenciaPagoAsociado = 7 or
				codFrecuenciaPagoAsociado = 8 or
				codFrecuenciaPagoAsociado = 9 then
				if conversion = 'H' then
				   montoTotal := montoTotal + (monto/30) /pJornadaDiaria;	
			        elsif conversion = 'D' then
				   montoTotal := montoTotal + (monto/30);		
				elsif conversion = 'S' then	
					if pFormulaSemanal = '1' then
						montoTotal := montoTotal + ((monto/30)*7);
					elsif pFormulaSemanal = '2' then
						montoTotal := montoTotal + monto;
					elsif pFormulaSemanal = '3' then
						montoTotal := montoTotal + ((monto*12)/52);
					end if;
				else
					montoTotal := montoTotal + monto;
				end if;

			elsif (codFrecuenciaPagoAsociado = 10 and pSemanaMes < 5) then
				if conversion = 'H' then
				        montoTotal := montoTotal + ((monto*4)/30)/pJornadaDiaria;				
				elsif conversion = 'D' then
					montoTotal := montoTotal + ((monto*4)/30);	
				elsif conversion = 'S' then	
					montoTotal := montoTotal + monto;		
				else
					montoTotal := montoTotal + monto*4;
				end if;
			end if;

			if codFrecuenciaPagoAsociado > 10 then
				montoTotal = montoTotal + monto;
			end if;

		end loop;

		close curConceptoAsociado;

		open curConceptoAlicuota(pIdConceptoTipoPersonal);	

		fetch curConceptoAlicuota into recConceptoAlicuota;	

		close curConceptoAlicuota; 

		if recConceptoAlicuota.id_concepto_tipo_personal > 0  then			

			montoAlicuota := calcular_concepto(pIdConceptoTipoPersonal, pIdTrabajador, 0, 'D', 0, 0, 0, '0', '0');


			montoAlicuota := montoAlicuota / diasAnio;

			if recConceptoAlicuota.base = 'M' then
				montoAlicuota = montoAlicuota * 30;
			end if;

		end if;

		if pTipo <> 'D' then				
			montoTotal := montoTotal + montoAlicuota;
			montoTotal := (montoTotal * porcentaje)/100;	

		end if;

	else
		raise notice 'tipo no encontrado';

		return 0;

	end if;


	if pUnidades > 0 and pTipo <> 'I' then

		montoTotal := montoTotal * pUnidades;

	end if;


	if pTipo = 'D' then

		if montoTotal < valor then
			montoTotal := valor - montoTotal;
		else
			montoTotal := 0;

		end if;

	end if;

	if topeMaximo > 0 then

		if montoTotal > topeMaximo then
			montoTotal := topeMaximo;
		end if;		

	end if;

	if topeMinimo > 0 then

		if montoTotal < topeMinimo then
			montoTotal := topeMinimo;
		end if;		

	end if;


	if pCodFrecuenciaPago = 3 then 
		montoTotal := montoTotal/2;

	end if;

    
        montoTotal = convert_2_decimal(montoTotal);


	return montoTotal;

end;



$_$;


ALTER FUNCTION public.calcular_concepto(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision, integer) OWNER TO postgres;

--
-- TOC entry 697 (class 1255 OID 183668)
-- Name: calcular_concepto_constancia(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_concepto_constancia(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$

declare  	
	pIdConceptoTipoPersonal alias for $1;	
	pIdTrabajador alias for $2;
	pUnidades alias for $3;	
	pTipo alias for $4;
	pCodFrecuenciaPago alias for $5;
	pJornadaDiaria alias for $6;
	pJornadaSemanal alias for $7;
	pFormulaIntegral alias for $8;
	pFormulaSemanal alias for $9;
	pIdCargo alias for $10;
	pValor alias for $11;
	pTopeMinimo alias for $12;
	pTopeMaximo alias for $13;
	idTipoPersonal int4 := 0;
	valor float8 := 0;
	topeMaximo float8 := 0;
	topeMinimo float8 := 0;	
        monto float8 := 0;
	montoTotal float8 := 0;
	porcentaje float8 := 0;
	conversion varchar;
	codFrecuenciaPagoAsociado int4 := 0;
	montoAlicuota float8 := 0;
	diasAnio int4 := 0;
        recConceptoAsociado record;	
        recConcepto record;
	recConceptoAlicuota record;	
	recConceptoCargo record;
              co concepto;
              gn gruponomina;
	ctp conceptotipopersonal;
	pv parametrovarios;
	cc conceptocargo; 
        fecha_inicio date;
        fecha_fin date;
        anio_inicio int4 :=0;
        anio_cumple int4 :=1;
        anio_vacaciones_tr int4 :=0;
        estatus_TR varchar :='A';
        codigo_concepto varchar :=0;

	curConceptoCargo cursor (key1 int4, key2 int4) for
                select distinct monto from conceptocargo		
                      where id_cargo = key1 
                         and id_concepto_tipo_personal = key2;

	curConceptoAsociado cursor (key1 int4, key2 int4) for 
                  select distinct cf.id_concepto_fijo, cf.monto, 
			fp.cod_frecuencia_pago, ca.base, ca.factor, ctp1.valor, 'F' as origen
			from conceptofijo cf, conceptoasociado ca, trabajador t,
			frecuenciapago fp, frecuenciatipopersonal ftp, conceptotipopersonal ctp1	
			where ca.id_concepto_asociar = cf.id_concepto_tipo_personal	
			  and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal	
			  and fp.id_frecuencia_pago = ftp.id_frecuencia_pago	
			  and ca.id_concepto_tipo_personal = ctp1.id_concepto_tipo_personal
			  and cf.id_trabajador = t.id_trabajador		
             	                              and t.id_trabajador = key1		
			  and ctp1.id_concepto_tipo_personal = key2
	
			union		
       		select distinct cv.id_concepto_variable, cv.monto,
 			fp.cod_frecuencia_pago, ca.base, ca.factor, ctp1.valor, 'V' as origen	
			from conceptovariable cv, conceptoasociado ca, trabajador t,
			frecuenciapago fp, frecuenciatipopersonal ftp, 
			conceptotipopersonal ctp1		
			where ca.id_concepto_asociar = cv.id_concepto_tipo_personal	
		        and cv.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal	
			and fp.id_frecuencia_pago = ftp.id_frecuencia_pago		
			and ca.id_concepto_tipo_personal =ctp1.id_concepto_tipo_personal		
			and cv.id_trabajador = t.id_trabajador		
			and t.id_trabajador = key1	
			and ctp1.id_concepto_tipo_personal = key2;
 	
	curConceptoAlicuota cursor (key1 int4) for
              select distinct ctp2.id_concepto_tipo_personal, ctp2.tipo, ca.base
			from conceptoasociado ca,      -- ERRROR  conceptotipopersonal ctp, 
			     conceptotipopersonal ctp2, concepto c 
			where ca.id_concepto_tipo_personal = key1 
			  and ca.id_concepto_asociar=ctp2.id_concepto_tipo_personal 
			  and c.cod_concepto = '1601'
                                            and ctp2.id_concepto = c.id_concepto; 

begin 

	select into ctp * from conceptotipopersonal  
		where id_concepto_tipo_personal = pIdConceptoTipoPersonal; 	

	idTipoPersonal := ctp.id_tipo_personal;	
	valor := pValor;
	topeMaximo := pTopeMaximo;	
	topeMinimo := pTopeMinimo; 	

	select into cc * from conceptocargo  
		where id_concepto_tipo_personal = pIdConceptoTipoPersonal 
		and id_cargo = pIdCargo; 	

	if cc.monto is not null then
		valor := cc.monto;
	end if; 	

	select into pv * from parametrovarios where id_tipo_personal = idTipoPersonal;

 	diasAnio := pv.dias_anio; 	

	if pTipo = 'F' then
		montoTotal := valor;
	elsif pTipo = 'P' or pTipo = 'I' or  pTipo = 'D' then 

		open curConceptoAsociado(pIdTrabajador,pIdConceptoTipoPersonal);
		 		
		loop 			

			fetch curConceptoAsociado into recConceptoAsociado;			
			exit when not found;

 			if pTipo = 'P' then
				porcentaje := valor;
			else
				porcentaje := pUnidades;
 			end if; 

			monto := recConceptoAsociado.monto*recConceptoAsociado.factor;
 			conversion := recConceptoAsociado.base;
 			codFrecuenciaPagoAsociado := recConceptoAsociado.cod_frecuencia_pago;

 			if codFrecuenciaPagoAsociado = 1 or 
                     codFrecuenciaPagoAsociado = 2 then
				if conversion = 'H' then
   				   montoTotal := montoTotal + (monto/30)/pJornadaDiaria;
				elsif conversion = 'D' then
				   montoTotal := montoTotal + (monto/30);		
				else
                           if recConceptoAsociado.origen ='F' then
			        	montoTotal := montoTotal + monto;
                                    else
                                        montoTotal := montoTotal + (monto* 2);
                                    end if;
				end if; 			elsif codFrecuenciaPagoAsociado = 3 then
				if conversion = 'H' then
				    montoTotal := montoTotal + (monto/15)/pJornadaDiaria;
				elsif conversion = 'D' then
				    montoTotal := montoTotal + (monto/15);	
				elsif conversion = 'M' then
				    montoTotal := montoTotal + (monto*2);	
				else
				    montoTotal := montoTotal + monto;
				end if; 			elsif codFrecuenciaPagoAsociado = 4 then
				if conversion = 'H' then
				   montoTotal := montoTotal + (monto/pJornadaSemanal)/
					pJornadaDiaria;		
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/pJornadaSemanal);
				elsif conversion = 'M' then	
					if pFormulaIntegral = '1' then
						montoTotal := montoTotal + (((monto/7)*365)/12);
					elsif pFormulaIntegral = '2' then
						montoTotal := montoTotal + ((monto/7)*30);
					elsif pFormulaIntegral = '3' then
						montoTotal := montoTotal + ((monto*52)/12);	
					end if;
				else
					montoTotal := montoTotal + monto;
				end if; 			elsif codFrecuenciaPagoAsociado = 5 or
				codFrecuenciaPagoAsociado = 6 or
				codFrecuenciaPagoAsociado = 7 or
				codFrecuenciaPagoAsociado = 8 or
				codFrecuenciaPagoAsociado = 9 then 				
				if conversion = 'H' then
				   montoTotal := montoTotal + (monto/30)/	pJornadaDiaria;			
			        elsif conversion = 'D' then
				   montoTotal := montoTotal + (monto/30);	
				  elsif conversion = 'S' then	
					if pFormulaSemanal = '1' then
						montoTotal := montoTotal + ((monto/30)*7);
					elsif pFormulaSemanal = '2' then
						montoTotal := montoTotal + monto;
					elsif pFormulaSemanal = '3' then
						montoTotal := montoTotal + ((monto*12)/52);
					end if;
				else
					montoTotal := montoTotal + monto;
				end if;

			elsif codFrecuenciaPagoAsociado = 10 then
				if conversion = 'H' then
				montoTotal := montoTotal + ((monto*4)/30)/
					pJornadaDiaria;				
				elsif conversion = 'D' then
					montoTotal := montoTotal + ((monto*4)/30);	
				elsif conversion = 'S' then	
					montoTotal := montoTotal + monto;		
				else
					montoTotal := montoTotal + monto*4;
				end if;
			end if;

			if codFrecuenciaPagoAsociado > 10 then
				montoTotal = montoTotal + monto;
			end if; 
		
	    end loop; 
                 
		close curConceptoAsociado;

	 		open curConceptoAlicuota(pIdConceptoTipoPersonal);
	
			fetch curConceptoAlicuota into recConceptoAlicuota;
	 		close curConceptoAlicuota;  		

			if recConceptoAlicuota.id_concepto_tipo_personal > 0  then			
				montoAlicuota := calcular_concepto(pIdConceptoTipoPersonal, pIdTrabajador,
					 		0, 'D', 0, 0, 0, '0', '0'); 			
				montoAlicuota := montoAlicuota / diasAnio; 

				if recConceptoAlicuota.base = 'M' then
					montoAlicuota = montoAlicuota * 30;
				end if; 
			end if;

 			if pTipo <> 'D' then
				montoTotal := montoTotal + montoAlicuota;
				montoTotal := (montoTotal * porcentaje)/100;
	 		end if;
	else

		raise notice 'tipo no encontrado';
 		return 0; 	
	end if; 

	if pUnidades > 0 and pTipo <> 'I' then
		montoTotal := montoTotal * pUnidades;
	end if; 

	if pTipo = 'D' then
		if montoTotal < valor then
			montoTotal := valor - montoTotal;
 		else
			montoTotal := 0; 		
		end if; 
	end if; 

	if topeMaximo > 0 then
		if montoTotal > topeMaximo then
			montoTotal := topeMaximo;
		end if;		
	end if;

 	if topeMinimo > 0 then
		if montoTotal < topeMinimo then
			montoTotal := topeMinimo;
		end if;		
	end if; 	

	if pCodFrecuenciaPago = 3 then 
		montoTotal := montoTotal/2;
	end if; 
  raise notice 'entre al proceso';

           -- select into gn * from  gruponomina gn1, tipopersonal tp
  	   --	where tp.id_tipo_personal  = ctp.id_tipo_personal
           --     and tp.id_grupo_nomina = gn1.id_grupo_nomina;

         select into gn * from  gruponomina gn1                    
  	   	where gn1.id_grupo_nomina IN (select tp.id_grupo_nomina from tipopersonal tp
                                                where tp.id_tipo_personal  = ctp.id_tipo_personal);


	  --select into co * from concepto c, conceptotipopersonal  ctp5
	  --	where ctp5.id_concepto_tipo_personal = pIdConceptoTipoPersonal
                --             and ctp5.id_concepto = c.id_concepto; 


              select c.cod_concepto into codigo_concepto from concepto c, conceptotipopersonal  ctp5
	  	where ctp5.id_concepto_tipo_personal = pIdConceptoTipoPersonal
                               and ctp5.id_concepto = c.id_concepto; 

              select anio_vacaciones, estatus into anio_vacaciones_tr, estatus_TR from trabajador 
		 where id_trabajador = pIdTrabajador;


                 raise notice 'sali1 al proceso';
             --  fecha_inicio  := select '01-01-'||date_part('year', now());
             --   fecha_fin     := select '31-12-'||date_part('year', now());
             --  anio_inicio   := select date_part('year', now());
               --select '01-01-'||date_part('year', now())into fecha_inicio;
              -- select '31-12-'||date_part('year', now())into fecha_fin;

               select date_part('year', now())||'-01-01'into fecha_inicio;
               select date_part('year', now())||'-12-31'into fecha_fin;
               select date_part('year', now())into anio_inicio;
           

              -- anio_cumple   := anio_inicio - recConceptoAsociado.anio_vacaciones;

              anio_cumple   := (anio_inicio - anio_vacaciones_tr);

              raise notice 'concepto_%',codigo_concepto;
              raise notice 'conceptotipop_%',pIdConceptoTipoPersonal;


	         if codigo_concepto = '1600' then   -- BONO DE FIN DE AÑO calculo para constancias 

                                 raise notice 'entre 1600';
                                 raise notice 'idtp_%',ctp.id_tipo_personal;
                                 raise notice 'idtrabajd_%',pIdTrabajador;
                                 raise notice 'fecjainic_%', fecha_inicio;
                                 raise notice 'fechafin_%', fecha_fin;
		     raise notice 'Estatus_%',  estatus_TR;
                                 raise notice 'periodo_%',  gn.periodicidad;


 
                       -- Calculo bono fin de año
                       -- perform calcular_bono_fin_anio_constancia(ctp.id_tipo_personal,pIdTrabajador, fecha_inicio, fecha_fin, recConceptoAsociado.estatus, gn.periodicidad);

                          montoTotal := calcular_bono_fin_anio_constancia(ctp.id_tipo_personal,pIdTrabajador, fecha_inicio, fecha_fin, estatus_TR, gn.periodicidad);
                    
                          raise notice 'montototal_%', montoTotal;
                          
                 end if;

                if codigo_concepto = '1500' then   -- BONO VACACIONAL calculo para constancias
                       -- Calculo bono vacacional
                          raise notice 'entre 1500';
				 raise notice 'idtrabajd_%',pIdTrabajador;
                                 raise notice 'anio_cumple_%', anio_cumple;
                                 raise notice 'idtp_%',ctp.id_tipo_personal;
                                 raise notice 'anio_inicio_%', anio_inicio;
				 raise notice 'Estatus_%',  estatus_TR;
                                 raise notice 'periodo_%',  gn.periodicidad;

			raise notice 'anio_vacaciones_%',anio_vacaciones_tr;



                          if anio_cumple > 0 THEN
                              montoTotal := calcular_bonovacacional_constancia(pIdTrabajador, anio_cumple,ctp.id_tipo_personal, anio_inicio, gn.periodicidad, 1,  12 );
                          end if;
                 end if;

                 montoTotal = convert_2_decimal(montoTotal);

	   return montoTotal; 

end; 
$_$;


ALTER FUNCTION public.calcular_concepto_constancia(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 698 (class 1255 OID 183670)
-- Name: calcular_concepto_proyectado(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_concepto_proyectado(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdConceptoTipoPersonal alias for $1;
	pIdTrabajador alias for $2;	
	pUnidades alias for $3;
	pTipo alias for $4;
	pCodFrecuenciaPago alias for $5;
	pJornadaDiaria alias for $6;
	pJornadaSemanal alias for $7;
	pFormulaIntegral alias for $8;
	pFormulaSemanal alias for $9;	
	pIdCargo alias for $10;	
	pValor alias for $11;
	pTopeMinimo alias for $12;
	pTopeMaximo alias for $13;
	idTipoPersonal int4 := 0;
	valor float8 := 0;
	topeMaximo float8 := 0;
	topeMinimo float8 := 0;
	monto float8 := 0;
	montoTotal float8 := 0;
	porcentaje float8 := 0;
	conversion varchar;
	codFrecuenciaPagoAsociado int4 := 0;
	montoAlicuota float8 := 0;
	diasAnio int4 := 0;

	recConceptoAsociado record;	
	recConceptoAlicuota record;	
	recConceptoCargo record;

	recCtp conceptotipopersonal;
	pv parametrovarios;
	cc conceptocargo; 

	curConceptoCargo cursor (key1 int4, key2 int4) for 
           select distinct monto from conceptocargo
		where id_cargo = key1 and id_concepto_tipo_personal = key2;

	curConceptoAsociado cursor (pIdTrabajador int4, pIdConceptoTipoPersonal int4) for 
            select distinct cf.id_concepto_fijo, cf.monto_proyectado, 
		fp.cod_frecuencia_pago, ca.base, ca.factor, ctp.valor		
		from conceptofijo cf, conceptoasociado ca, trabajador t,
		frecuenciapago fp, frecuenciatipopersonal ftp, conceptotipopersonal ctp
		where ca.id_concepto_asociar = cf.id_concepto_tipo_personal
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and fp.id_frecuencia_pago = ftp.id_frecuencia_pago
		and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and cf.id_trabajador = t.id_trabajador
		and t.id_trabajador = pIdTrabajador
		and ctp.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		union
		select distinct cv.id_concepto_variable, cv.monto_proyectado, 
		fp.cod_frecuencia_pago, ca.base, ca.factor, ctp.valor		
		from conceptovariable cv, conceptoasociado ca, trabajador t,
		frecuenciapago fp, frecuenciatipopersonal ftp, conceptotipopersonal ctp
		where ca.id_concepto_asociar = cv.id_concepto_tipo_personal
		and cv.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and fp.id_frecuencia_pago = ftp.id_frecuencia_pago
		and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and cv.id_trabajador = t.id_trabajador
		and t.id_trabajador = pIdTrabajador
		and ctp.id_concepto_tipo_personal = pIdConceptoTipoPersonal;


	curConceptoAlicuota cursor (key1 int4) for 
           select distinct ctp2.id_concepto_tipo_personal, ctp2.tipo, ca.base 
		from conceptoasociado ca, conceptotipopersonal ctp, 
                conceptotipopersonal ctp2, concepto c 
		where ca.id_concepto_tipo_personal = key1
		and ca.id_concepto_asociar=ctp2.id_concepto_tipo_personal
		and c.cod_concepto = '1601'
		and ctp2.id_concepto = c.id_concepto;
begin

	select into recCtp * from conceptotipopersonal  
               where id_concepto_tipo_personal = pIdConceptoTipoPersonal;

	idTipoPersonal := recCtp.id_tipo_personal;
	valor := pValor;
	topeMaximo := pTopeMaximo;
	topeMinimo := pTopeMinimo;

	select into cc * from conceptocargo  
               where id_concepto_tipo_personal = pIdConceptoTipoPersonal 
                 and id_cargo = pIdCargo;

	if cc.monto is not null then
		valor := cc.monto;
	end if;

	select into pv * from parametrovarios 
               where id_tipo_personal = idTipoPersonal;

	diasAnio := pv.dias_anio;

	if pTipo = 'F' then
		montoTotal := valor;
	elsif pTipo = 'P' or pTipo = 'I' or  pTipo = 'D' then
		--raise notice 'pIdTrabajador%',pIdTrabajador;
		--raise notice 'pIdCTP%',pIdConceptoTipoPersonal;
		open curConceptoAsociado(pIdTrabajador, pIdConceptoTipoPersonal);				
		loop
			fetch curConceptoAsociado into recConceptoAsociado;			
			--raise notice 'pasa 10.1';
			exit when not found;

			
			if pTipo = 'P' then
				porcentaje := valor;
			else
				porcentaje := pUnidades;
			end if;

			monto := recConceptoAsociado.monto_proyectado*recConceptoAsociado.factor;
			conversion := recConceptoAsociado.base;
			codFrecuenciaPagoAsociado := recConceptoAsociado.cod_frecuencia_pago;

			if codFrecuenciaPagoAsociado = 1 or codFrecuenciaPagoAsociado = 2 then
				if conversion = 'H' then
					montoTotal := montoTotal + (monto/30)/pJornadaDiaria;	
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/30);		
				else
					montoTotal := montoTotal + monto;
				end if;

			elsif codFrecuenciaPagoAsociado = 3 then
				if conversion = 'H' then
					montoTotal := montoTotal + (monto/15)/pJornadaDiaria;	
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/15);	
				elsif conversion = 'M' then
					montoTotal := montoTotal + (monto*2);		
				else
					montoTotal := montoTotal + monto;
				end if;

			elsif codFrecuenciaPagoAsociado = 4 then
				if conversion = 'H' then
					montoTotal := montoTotal +             
					(monto/pJornadaSemanal)/pJornadaDiaria;		
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/pJornadaSemanal);
				elsif conversion = 'M' then	
					if pFormulaIntegral = '1' then
						montoTotal := montoTotal + (((monto/7)*365)/12);
					elsif pFormulaIntegral = '2' then
						montoTotal := montoTotal + ((monto/7)*30);
					elsif pFormulaIntegral = '3' then
						montoTotal := montoTotal + ((monto*52)/12);	
					end if;
				else
					montoTotal := montoTotal + monto;
				end if;
			elsif codFrecuenciaPagoAsociado = 5 or
				codFrecuenciaPagoAsociado = 6 or
				codFrecuenciaPagoAsociado = 7 or
				codFrecuenciaPagoAsociado = 8 or
				codFrecuenciaPagoAsociado = 9 then

				if conversion = 'H' then
					montoTotal := montoTotal + 
                                                     (monto/30)/pJornadaDiaria;			
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/30);		
				elsif conversion = 'S' then	
					if pFormulaSemanal = '1' then
						montoTotal := montoTotal + ((monto/30)*7);
					elsif pFormulaSemanal = '2' then
						montoTotal := montoTotal + monto;
					elsif pFormulaSemanal = '3' then
						montoTotal := montoTotal + ((monto*12)/52);	
					end if;
				else
					montoTotal := montoTotal + monto;
				end if;
			elsif codFrecuenciaPagoAsociado = 10 then
				if conversion = 'H' then
					montoTotal := montoTotal + 
                                         ((monto*4)/30)/pJornadaDiaria;				
				elsif conversion = 'D' then
					montoTotal := montoTotal +
                                           ((monto*4)/30);			
				elsif conversion = 'S' then	
					montoTotal := montoTotal +
                                                 monto;						
				else
					montoTotal := montoTotal + monto*4;
				end if;
			end if;
		end loop;

		close curConceptoAsociado;

		open curConceptoAlicuota(pIdConceptoTipoPersonal);	
		fetch curConceptoAlicuota into recConceptoAlicuota;	
		close curConceptoAlicuota; 

		if recConceptoAlicuota.id_concepto_tipo_personal > 0  then			
			montoAlicuota := calcular_concepto(pIdConceptoTipoPersonal, 
                                    pIdTrabajador, 0, 'D', 0, 0, 0, '0', '0');

			montoAlicuota := montoAlicuota / diasAnio;
			if recConceptoAlicuota.base = 'M' then
				montoAlicuota = montoAlicuota * 30;
			end if;
		end if;

		if pTipo <> 'D' then				
			montoTotal := montoTotal + montoAlicuota; 			
			montoTotal := (montoTotal * porcentaje)/100;	
		end if;
	else
		raise notice 'tipo no encontrado';
		return 0;
	end if;

	if pUnidades > 0 and pTipo <> 'I' then
		montoTotal := montoTotal * pUnidades;
	end if;

	if pTipo = 'D' then
		if montoTotal < valor then
			montoTotal := valor - montoTotal;
		else
			montoTotal := 0;
		end if;
	end if;

	if topeMaximo > 0 then
		if montoTotal > topeMaximo then
			montoTotal := topeMaximo;
		end if;		
	end if;

	if topeMinimo > 0 then
		if montoTotal < topeMinimo then
			montoTotal := topeMinimo;
		end if;		
	end if;

	if pCodFrecuenciaPago = 3 then 
		montoTotal := montoTotal/2;

	end if;
	return montoTotal;

end;

$_$;


ALTER FUNCTION public.calcular_concepto_proyectado(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 699 (class 1255 OID 183672)
-- Name: calcular_concepto_proyectado_movimiento(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_concepto_proyectado_movimiento(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdConceptoTipoPersonal alias for $1;
	pIdTrabajador alias for $2;	
	pUnidades alias for $3;
	pTipo alias for $4;
	pCodFrecuenciaPago alias for $5;
	pJornadaDiaria alias for $6;
	pJornadaSemanal alias for $7;
	pFormulaIntegral alias for $8;
	pFormulaSemanal alias for $9;	
	pIdCargo alias for $10;	
	pValor alias for $11;
	pTopeMinimo alias for $12;
	pTopeMaximo alias for $13;
	idTipoPersonal int4 := 0;
	valor float8 := 0;
	topeMaximo float8 := 0;
	topeMinimo float8 := 0;
	monto float8 := 0;
	montoTotal float8 := 0;
	porcentaje float8 := 0;
	conversion varchar;
	codFrecuenciaPagoAsociado int4 := 0;
	montoAlicuota float8 := 0;
	diasAnio int4 := 0;

	recConceptoAsociado record;	
	recConceptoAlicuota record;	
	recConceptoCargo record;

	recCtp conceptotipopersonal;
	pv parametrovarios;
	cc conceptocargo; 

	curConceptoCargo cursor (key1 int4, key2 int4) for 
           select distinct monto from conceptocargo
		where id_cargo = key1 and id_concepto_tipo_personal = key2;

	curConceptoAsociado cursor (pIdTrabajador int4, pIdConceptoTipoPersonal int4) for 
            select distinct cp.id_concepto_tipo_personal, cp.monto, 
		fp.cod_frecuencia_pago, ca.base, ca.factor, ctp.valor		
		from conceptoproyectado cp, conceptoasociado ca, trabajador t,
		frecuenciapago fp, frecuenciatipopersonal ftp, conceptotipopersonal ctp
		where ca.id_concepto_asociar = cp.id_concepto_tipo_personal
		and cp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and fp.id_frecuencia_pago = ftp.id_frecuencia_pago
		and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and cp.id_trabajador = t.id_trabajador
		and t.id_trabajador = pIdTrabajador
		and ctp.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		union
		select distinct cv.id_concepto_variable, cv.monto_proyectado, 
		fp.cod_frecuencia_pago, ca.base, ca.factor, ctp.valor		
		from conceptovariable cv, conceptoasociado ca, trabajador t,
		frecuenciapago fp, frecuenciatipopersonal ftp, conceptotipopersonal ctp
		where ca.id_concepto_asociar = cv.id_concepto_tipo_personal
		and cv.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and fp.id_frecuencia_pago = ftp.id_frecuencia_pago
		and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and cv.id_trabajador = t.id_trabajador
		and t.id_trabajador = pIdTrabajador
		and ctp.id_concepto_tipo_personal = pIdConceptoTipoPersonal;


	curConceptoAlicuota cursor (key1 int4) for 
           select distinct ctp2.id_concepto_tipo_personal, ctp2.tipo, ca.base 
		from conceptoasociado ca, conceptotipopersonal ctp, 
                conceptotipopersonal ctp2, concepto c 
		where ca.id_concepto_tipo_personal = key1
		and ca.id_concepto_asociar=ctp2.id_concepto_tipo_personal
		and c.cod_concepto = '1601'
		and ctp2.id_concepto = c.id_concepto;
begin

	select into recCtp * from conceptotipopersonal  
               where id_concepto_tipo_personal = pIdConceptoTipoPersonal;

	idTipoPersonal := recCtp.id_tipo_personal;
	valor := pValor;
	topeMaximo := pTopeMaximo;
	topeMinimo := pTopeMinimo;

	select into cc * from conceptocargo  
               where id_concepto_tipo_personal = pIdConceptoTipoPersonal 
                 and id_cargo = pIdCargo;

	if cc.monto is not null then
		valor := cc.monto;
	end if;

	select into pv * from parametrovarios 
               where id_tipo_personal = idTipoPersonal;

	diasAnio := pv.dias_anio;

	if pTipo = 'F' then
		montoTotal := valor;
	elsif pTipo = 'P' or pTipo = 'I' or  pTipo = 'D' then
		--raise notice 'pIdTrabajador%',pIdTrabajador;
		--raise notice 'pIdCTP%',pIdConceptoTipoPersonal;

		open curConceptoAsociado(pIdTrabajador,	pIdConceptoTipoPersonal);				
		loop

			fetch curConceptoAsociado into recConceptoAsociado;			
			--raise notice 'pasa 10.1';

			exit when not found;
			

			if pTipo = 'P' then
				porcentaje := valor;
			else
				porcentaje := pUnidades;
			end if;

			monto := recConceptoAsociado.monto*recConceptoAsociado.factor;
			conversion := recConceptoAsociado.base;
			codFrecuenciaPagoAsociado := recConceptoAsociado.cod_frecuencia_pago;

			if codFrecuenciaPagoAsociado = 1 or codFrecuenciaPagoAsociado = 2 then
				if conversion = 'H' then
					montoTotal := montoTotal + (monto/30)/pJornadaDiaria;	
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/30);		
				else
					montoTotal := montoTotal + monto;
				end if;

			elsif codFrecuenciaPagoAsociado = 3 then
				if conversion = 'H' then
					montoTotal := montoTotal + (monto/15)/pJornadaDiaria;	
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/15);	
				elsif conversion = 'M' then
					montoTotal := montoTotal + (monto*2);		
				else
					montoTotal := montoTotal + monto;
				end if;

			elsif codFrecuenciaPagoAsociado = 4 then
				if conversion = 'H' then
					montoTotal := montoTotal +             
					(monto/pJornadaSemanal)/pJornadaDiaria;		
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/pJornadaSemanal);
				elsif conversion = 'M' then	
					if pFormulaIntegral = '1' then
						montoTotal := montoTotal + (((monto/7)*365)/12);
					elsif pFormulaIntegral = '2' then
						montoTotal := montoTotal + ((monto/7)*30);
					elsif pFormulaIntegral = '3' then
						montoTotal := montoTotal + ((monto*52)/12);	
					end if;
				else
					montoTotal := montoTotal + monto;
				end if;
			elsif codFrecuenciaPagoAsociado = 5 or
				codFrecuenciaPagoAsociado = 6 or
				codFrecuenciaPagoAsociado = 7 or
				codFrecuenciaPagoAsociado = 8 or
				codFrecuenciaPagoAsociado = 9 then

				if conversion = 'H' then
					montoTotal := montoTotal + 
                                                     (monto/30)/pJornadaDiaria;			
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/30);		
				elsif conversion = 'S' then	
					if pFormulaSemanal = '1' then
						montoTotal := montoTotal + ((monto/30)*7);
					elsif pFormulaSemanal = '2' then
						montoTotal := montoTotal + monto;
					elsif pFormulaSemanal = '3' then
						montoTotal := montoTotal + ((monto*12)/52);	
					end if;
				else
					montoTotal := montoTotal + monto;
				end if;
			elsif codFrecuenciaPagoAsociado = 10 then
				if conversion = 'H' then
					montoTotal := montoTotal + 
                                         ((monto*4)/30)/pJornadaDiaria;				
				elsif conversion = 'D' then
					montoTotal := montoTotal +
                                           ((monto*4)/30);			
				elsif conversion = 'S' then	
					montoTotal := montoTotal +
                                                 monto;						
				else
					montoTotal := montoTotal + monto*4;
				end if;
			end if;
		end loop;

		close curConceptoAsociado;

		open curConceptoAlicuota(pIdConceptoTipoPersonal);	
		fetch curConceptoAlicuota into recConceptoAlicuota;	
		close curConceptoAlicuota; 

		if recConceptoAlicuota.id_concepto_tipo_personal > 0  then			
			montoAlicuota := calcular_concepto(pIdConceptoTipoPersonal, 
                                    pIdTrabajador, 0, 'D', 0, 0, 0, '0', '0');

			montoAlicuota := montoAlicuota / diasAnio;
			if recConceptoAlicuota.base = 'M' then
				montoAlicuota = montoAlicuota * 30;
			end if;
		end if;

		if pTipo <> 'D' then				
			montoTotal := montoTotal + montoAlicuota; 			
			montoTotal := (montoTotal * porcentaje)/100;	
		end if;
	else
		raise notice 'tipo no encontrado';
		return 0;
	end if;

	if pUnidades > 0 and pTipo <> 'I' then
		montoTotal := montoTotal * pUnidades;
	end if;

	if pTipo = 'D' then
		if montoTotal < valor then
			montoTotal := valor - montoTotal;
		else
			montoTotal := 0;
		end if;
	end if;

	if topeMaximo > 0 then
		if montoTotal > topeMaximo then
			montoTotal := topeMaximo;
		end if;		
	end if;

	if topeMinimo > 0 then
		if montoTotal < topeMinimo then
			montoTotal := topeMinimo;
		end if;		
	end if;

	if pCodFrecuenciaPago = 3 then 
		montoTotal := montoTotal/2;

	end if;
	return montoTotal;

end;

$_$;


ALTER FUNCTION public.calcular_concepto_proyectado_movimiento(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 700 (class 1255 OID 183674)
-- Name: calcular_interes_adicional(integer, integer, integer, date, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_interes_adicional(integer, integer, integer, date, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
	pAnioHasta                    alias for $2;
	pMesHasta                     alias for $3;
        pfecha                        alias for $4;
        pusuario                      alias for $5;
        pproceso                      alias for $6;
       
	
        recTrabajadores               record;
        recTasaBcv                    record;
        recResumenViejoRegimen        record;
	recInteresAdicionalAcumulado  record;
        recAnticipoMes                record;
        recAnticipoAcumulado          record;
	  
      
        curTrabajadores cursor (pIdTipoPersonal int4)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,t.estatus
                                   
		from trabajador t, personal p, tipopersonal tp
		   where t.id_personal = p.id_personal
		     and t.id_tipo_personal = tp.id_tipo_personal
                     and t.id_tipo_personal = pIdTipoPersonal
                     and t.estatus <>  'E'
                   -- and t.id_trabajador =653
	             and t.id_trabajador in (select b.id_trabajador from resumenviejoregimen b)
                     order by t.id_personal;
        


        curResumenViejoRegimen cursor (pIdtrabajador int4)
		for select rvr.saldo_al_18061997 from resumenviejoregimen rvr
		where rvr.id_trabajador = pidtrabajador; 
       curTasaBcv cursor (panio int4, pmes int4)
		for select t.tasa_promedio,t.tasa_activa
		from tasabcv t
                where t.anio = panio
		and t.mes = pmes;
        
        curInteresAdicionalAcumulado cursor (pidtrabajador int4,panio int4, pmes int4)
		for select max(ia.monto_interes_acumulado) as monto_interes_acumulado from interesadicional ia
                where ia.id_trabajador = pidtrabajador
                  and ia.anio = panio
		  and ia.mes = pmes;
        
	curAnticipoMes cursor (pIdpersonal int4,panio int4, pmes int4)
		for select sum(avr.monto_anticipo) as monto_anticipo from anticipo avr
                where avr.id_personal = pidpersonal
                  and avr.anio = panio
		  and avr.mes = pmes
---
---Anticipos de intereses y antiicpos de capital del viejo regimen.
---
                  and (avr.tipo_anticipo='F' OR avr.tipo_anticipo ='V')
                  and avr.estatus ='A';
        
        curAnticipoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(ia.monto_anticipo_acumulado) as monto_anticipo_acumulado from interesadicional ia
                where ia.id_trabajador = pidtrabajador
                  and ia.anio = panio
		  and ia.mes = pmes;

	montoPrestaciones           float8 :=0;	
	montoCapital                float8 :=0;	
	montoInteresMensual         float8 :=0;
        montoInteresMensualFraccion float8 :=0;	
	monto_Interes_Acumulado     float8 :=0;	
	monto_Anticipo_Acumulado    float8 :=0;	
        monto_transferencia         float8 :=0;
        sueldo_transferencia        float8 :=0;
        tasa                        float8 :=0;
        tasa_aplicada               float8 :=0;
        tiempo                      float8 :=0;
        diasmes                     float8 :=0;
        diasanio                    float8 :=0;
        aniobisiesto                int4   :=0;
        aniosiguientebisiesto       int4   :=0;
        anioingreso                 int4   :=0;
        mesingreso                  int4   :=0;
        diaingreso                  float8 :=0;
        aniosservicios              int4   :=0;
        anioanterior                int4   :=0;
        mesanterior                 int4   :=0;
        anio_fin                    int4   :=0;
        mes_fin                     int4   :=0;
        anio_ini                    int4   :=1997;
        mes_ini                     int4   :=6;
        anio_interes                int4   :=1997;
        mes_interes                 int4   :=6;
        dias_interes                float8 :=0;
        id                          int4   :=0;

begin
        ----
        ----Return 11 no esta la tasa en tasabcv
        ----
        raise notice 'PASA 0 ';
	
	anio_fin :=paniohasta;
        mes_fin  :=pmeshasta;
     
	delete from interesadicional
             where id_trabajador in (select t.id_trabajador from trabajador t
                                      where t.id_tipo_personal = PidTipoPersonal);
        raise notice 'PASA 01 ';
	delete from seguridadinteresadicional
             where id_tipo_personal = PidTipopersonal;

        raise notice 'PASA 1 ';
	open curTrabajadores(pIdTipoPersonal);
	
	loop
		fetch curTrabajadores into recTrabajadores;	
		exit when not found;
                raise notice 'PASA 2 ';
	        anioingreso := extract(year from recTrabajadores.fecha_ingreso);
	        mesingreso := extract(month from recTrabajadores.fecha_ingreso);
	        diaingreso := extract(day from recTrabajadores.fecha_ingreso);
	

                --
                --no se estan procesando los egresados, solo los activos.
                --
                --if rectrabajadores.estatus ='E' then
	        --   anioegreso := extract(year from recTrabajadores.fecha_egreso);
	        --   mesegreso := extract(month from recTrabajadores.fecha_egreso);
	        --   diaegreso := extract(day from recTrabajadores.fecha_egreso);
                --   anio_fin  :=anioegreso;
                --   mes_fin   :=mesegreso;
                --   if anio_fin is null then
                --      anio_fin := 1997;
                --      mes_fin  := 6;
                --   end if;
                --   if ((anio_fin > 1997) or (anio_fin =1997 and mes_fin > 6)) THEN
                --        anio_fin := 1997;
                --      mes_fin  := 6;
                --   end if;
                --END IF;
                raise notice 'PASA 3 ';   
		
                open curResumenViejoRegimen(recTrabajadores.id_trabajador);
		fetch curresumenviejoregimen into recresumenviejoregimen;	
		close curresumenviejoregimen;
 
                if recresumenviejoregimen.saldo_al_18061997 is not null AND
                   recresumenviejoregimen.saldo_al_18061997 <> 0 THEN		        
                   anio_interes :=anio_ini;
                   mes_interes  :=mes_ini;
 	           loop
          	     	exit when ((anio_interes > anio_fin) or
                              (anio_interes =anio_fin and mes_interes > mes_fin));
                    
                  	montoCapital := 0;	
			montoInteresMensual := 0;	
   		        raise notice 'PASA 4 ';
                        aniobisiesto :=0;
                        aniosiguientebisiesto:=0;
                        aniobisiesto:=bisiesto(anio_interes);
                        aniosiguientebisiesto:=bisiesto(anio_interes+1);
                        diasanio := 365;
                        


                        if mes_interes in (1,3,5,7,8,10,12) then
                           diasmes  :=31;
                        end if;
                        if mes_interes in (4,6,9,11) then
                           diasmes  :=30;
                        end if;
                        if mes_interes in (2) then
                           diasmes  :=28;
                           if aniobisiesto = 1 and mes_interes < 5 THEN
                              diasanio:=366;
                              diasmes :=29;
                           end if;
                        end if;
	                raise notice 'PASA 6 ';

                        if anio_interes = 1997 and mes_interes = 6 THEN
                           diasmes:=12;
                        end if;

                        if aniosiguientebisiesto = 1 and 
                           mes_interes > 4 THEN
                           diasanio:=366;
                        end if;
                        if aniobisiesto = 1 and 
                           mes_interes <= 4 THEN
                           diasanio:=366;
                        end if;

                        open curTasabcv(anio_interes,mes_interes);
		        fetch curtasabcv into rectasabcv;	
			if not found or rectasabcv.tasa_promedio is null 
                                     or rectasabcv.tasa_activa is null then
		          return 11;
	                end if;
                        close curtasabcv;

                        anioanterior := anio_interes;
                        mesanterior  := mes_interes -1;
                        
                        if mesanterior =0 THEN
                           anioanterior := anio_interes -1;
                           mesanterior  := 12;
                        end if;
 	                raise notice 'PASA 7 ';

                        open curInteresAdicionalAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,
                                                 mesanterior);
		        fetch curInteresAdicionalACumulado into recInteresAdicionalAcumulado;	
			if not found or recinteresAdicionalacumulado.monto_interes_acumulado 
                          is null then
		          recinteresAdicionalacumulado.monto_interes_acumulado:=0;
	                end if;
		        close curInteresAdicionalAcumulado;
                        raise notice 'PASA 8 ';
                        open curAnticipoAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,
                                                 mesanterior);
		        fetch curAnticipoACumulado into recAnticipoAcumulado;	
			if not found or recAnticipoAcumulado.monto_anticipo_acumulado is null then
		          recAnticipoAcumulado.monto_anticipo_acumulado:=0;
	                end if;
                        close curAnticipoAcumulado;
		        raise notice 'PASA 9 ';
                        open curAnticipoMes(rectrabajadores.id_personal,
                                            anio_interes,
                                            mes_interes);
		        fetch curAnticipoMes into recAnticipoMes;	
			if not found or recAnticipoMes.monto_anticipo is null then
		          recAnticipoMes.monto_anticipo:=0;
	                end if;
		        close curAnticipoMes;
                        raise notice 'PASA 10 ';
                        dias_interes := diasmes;
                        montoCapital:=(recresumenviejoregimen.saldo_al_18061997 +
                                       recInteresAdicionalAcumulado.monto_interes_acumulado)
                                        -(recAnticipoAcumulado.monto_anticipo_acumulado
                                        +recAnticipoMes.monto_anticipo);
                        ---
                        ---Hasta el mes de julio del aÃ±o 2002 se
                        ---calculan los intereses a tasa promedio. A partir
                        ---de agosto del 2002 a tasa activa.
                        ---
                        raise notice 'PASA 11 ';
                        if anio_interes > 2002 OR 
                           (anio_interes =  2002 and mes_interes > 7) THEN
                            tasa := 1 + (rectasabcv.tasa_activa/100);
                            tasa_aplicada := rectasabcv.tasa_activa;
                        else
                            tasa := 1 + (rectasabcv.tasa_promedio/100);
                            tasa_aplicada := rectasabcv.tasa_promedio;
                        end if;
                        
                        tiempo := dias_interes/diasanio;
                        montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			
                        monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                 recAnticipoAcumulado.monto_anticipo_acumulado;
                        monto_interes_acumulado:=
                              recInteresAdicionalAcumulado.monto_interes_acumulado
                                                 +montoInteresMensual;
 
		        id := last_id_interesadicional()+1;
		        if id is null then 
		           id := 1;
		        end if;
                        raise notice 'PASA 12 ';
                        perform add_interesadicional(id,
                           recTrabajadores.id_trabajador, 
                           anio_interes,
                           mes_interes,
                           dias_interes,
                           tasa_aplicada,
                           montoCapital,
                           montoInteresMensual,
                           monto_interes_acumulado,
                           recAnticipoMes.monto_anticipo,
                           monto_anticipo_acumulado,
                           recresumenviejoregimen.saldo_al_18061997);
                
                       mes_interes := mes_interes + 1;
                       if mes_interes = 13 then
                          anio_interes := anio_interes +1;
                          mes_interes  := 1;
                       end if;
                end loop;
             end if;
        end loop;
        close curTrabajadores;
		
        raise notice 'PASA 13 ';
        if pproceso ='D' then
       
           update parametrovarios set intereses_adicionales ='S' 
             where id_tipo_personal =pIdtipopersonal;
           id := last_id_seguridadinteresadicional()+1;
   	   if id is null then 
	      id := 1;
	   end if;
           perform add_seguridadinteresadicional(id,pidtipopersonal,paniohasta,pmeshasta,
                                      tasa_aplicada,pfecha,pusuario);
           raise notice 'PASA 14 ';
        end if;

        raise notice 'PASA 15 ';

	delete from identity;

	return 1;
end;
$_$;


ALTER FUNCTION public.calcular_interes_adicional(integer, integer, integer, date, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 701 (class 1255 OID 183676)
-- Name: calcular_interes_adicional_mensual(integer, integer, integer, date, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_interes_adicional_mensual(integer, integer, integer, date, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
	pAnio                         alias for $2;
	pMes                          alias for $3;
	pfecha                        alias for $4;
        pusuario                      alias for $5;
        pproceso                      alias for $6;
        recTrabajadores               record;
        recTasaBcv                    record;
        recResumenViejoRegimen        record;
	recInteresAdicionalAcumulado  record;
        recAnticipoMes                record;
        recAnticipoAcumulado          record;
        
        
        curTrabajadores cursor (pIdTipoPersonal int4, pEstatus varchar)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,t.estatus
                                   
		from trabajador t, personal p, tipopersonal tp
		where t.id_personal = p.id_personal
		and t.id_tipo_personal = tp.id_tipo_personal
                and t.id_tipo_personal = pIdTipoPersonal
                and t.estatus = 'A'
		and t.id_trabajador in (select b.id_trabajador from resumenviejoregimen b)
                order by t.id_personal;
        
        curResumenViejoRegimen cursor (pIdtrabajador int4)
		for select rvr.saldo_al_18061997 from resumenviejoregimen rvr
		where rvr.id_trabajador = pidtrabajador; 
        curTasaBcv cursor (panio int4, pmes int4)
		for select t.tasa_promedio,t.tasa_activa
		from tasabcv t
                where t.anio = panio
		and t.mes = pmes;
        
        curInteresAdicionalAcumulado cursor (pidtrabajador int4,panio int4, pmes int4)
		for select max(ia.monto_interes_acumulado) as monto_interes_acumulado from interesadicional ia
                where ia.id_trabajador = pidtrabajador
                  and ia.anio = panio
		  and ia.mes = pmes;
        
	curAnticipoMes cursor (pIdpersonal int4,panio int4, pmes int4)
		for select sum(avr.monto_anticipo) as monto_anticipo from anticipo avr
                where avr.id_personal = pidpersonal
                  and avr.anio = panio
		  and avr.mes = pmes
---
---Anticipo Interes Adicionales  que esten aprobados.
---
                  and (avr.tipo_anticipo='V' or avr.tipo_anticipo ='F')
                  and avr.estatus='A';
        
        curAnticipoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(ia.monto_anticipo_acumulado) as monto_anticipo_acumulado from interesadicional ia
                where ia.id_trabajador = pidtrabajador
                  and ia.anio = panio
		  and ia.mes = pmes;

	
        
        montoPrestaciones           float8 :=0;	
	montoCapital                float8 :=0;	
	montoInteresMensual         float8 :=0;
        montoInteresMensualFraccion float8 :=0;	
	monto_Interes_Acumulado     float8 :=0;	
	monto_Anticipo_Acumulado    float8 :=0;	
        monto_transferencia         float8 :=0;
        sueldo_transferencia        float8 :=0;
        tasa_aplicada               float8 :=0;
        tasa                        float8 :=0;
        tiempo                      float8 :=0;
        dias_interes                float8 :=0;
        anio_interes                int4   :=1997;
        mes_interes                 int4   :=6;
        diasmes                     float8 :=0;
        diasanio                    float8 :=0;
        aniobisiesto                int4   :=0;
        aniosiguientebisiesto       int4   :=0;
        anioingreso                 int4   :=0;
        mesingreso                  int4   :=0;
        diaingreso                  float8 :=0;
        aniosservicios              int4   :=0;
        anioanterior                int4   :=0;
        mesanterior                 int4   :=0;
        id                          int4   :=0;

       
begin




 ----
 ----Return 11 no esta la tasa en tasabcv
 ----
        raise notice 'PASA 0 ';
	
	anio_interes :=panio;
        mes_interes  :=pmes;

        ---
        ---Se elimina el mes que se esta procesando para reprocesarlo 
        ---mientras se esta en prueba.
        --- 	 
	delete from interesadicional
          where id_trabajador in (select distinct t.id_trabajador from trabajador t
    	                            where t.id_tipo_personal= pIdTipoPersonal)
            and anio = panio
            and mes  = pmes;
        raise notice 'PASA 1 ';
	
        open curTrabajadores(pIdTipoPersonal);
	loop
	      fetch curTrabajadores into recTrabajadores;	
	      exit when not found;

              anioingreso := extract(year from recTrabajadores.fecha_ingreso);
              mesingreso := extract(month from recTrabajadores.fecha_ingreso);
              diaingreso := extract(day from recTrabajadores.fecha_ingreso);
	          
              anioanterior := anio_interes;
              mesanterior  := mes_interes -1;
              if mesanterior =0 THEN
                 anioanterior := anio_interes -1;
                 mesanterior  := 12;
              end if;
 	
              open curResumenViejoRegimen(recTrabajadores.id_trabajador);
	      fetch curresumenviejoregimen into recresumenviejoregimen;	
	      close curresumenviejoregimen;
 
              if found and recresumenviejoregimen.saldo_al_18061997 is not null THEN
                 open curInteresAdicionalAcumulado(rectrabajadores.id_trabajador,
                                                   anioanterior,
                                                   mesanterior);
		 fetch curInteresAdicionalACumulado into recInteresAdicionalAcumulado;	
		 if not found or recinteresAdicionalacumulado.monto_interes_acumulado 
                    is null then
		    recinteresAdicionalacumulado.monto_interes_acumulado:=0;
	         end if;
		 close curInteresAdicionalAcumulado;

                 open curAnticipoAcumulado(rectrabajadores.id_trabajador,
                                           anioanterior,
                                           mesanterior);
		 fetch curAnticipoACumulado into recAnticipoAcumulado;	
		 if not found or recAnticipoAcumulado.monto_anticipo_acumulado is null then
		    recAnticipoAcumulado.monto_anticipo_acumulado:=0;
	         end if;
                 close curAnticipoAcumulado;
		 open curAnticipoMes(rectrabajadores.id_personal,
                                     anio_interes,
                                     mes_interes);
		 fetch curAnticipoMes into recAnticipoMes;	
		 if not found or recAnticipoMes.monto_anticipo is null then
		   recAnticipoMes.monto_anticipo:=0;
	         end if;
		 close curAnticipoMes;
 
                 open curTasabcv(anio_interes,mes_interes);
		 fetch curtasabcv into rectasabcv;	
		 if not found or rectasabcv.tasa_activa is null or
                                 rectasabcv.tasa_promedio is null then
		   return 11;
	         end if;
                 close curtasabcv;
  raise notice 'PASA 2 ';
	
                    
                 montoCapital := 0;	
		 montoInteresMensual := 0;	
	  	 aniobisiesto :=0;
                 aniosiguientebisiesto:=0;
                 aniobisiesto:=bisiesto(anio_interes);
                 aniosiguientebisiesto:=bisiesto(anio_interes+1);
                 diasanio := 365;
                        


                 if mes_interes in (1,3,5,7,8,10,12) then
                    diasmes  :=31;
                 end if;
                 if mes_interes in (4,6,9,11) then
                    diasmes  :=30;
                 end if;
                 if mes_interes in (2) then
                    diasmes  :=28;
                    if aniobisiesto = 1 and mes_interes < 5 THEN
                       diasanio:=366;
                       diasmes :=29;
                    end if;
                 end if;
	
                 if anio_interes = 1997 and mes_interes = 6 THEN
                    diasmes:=12;
                 end if;

                 if aniosiguientebisiesto = 1 and 
                    mes_interes > 4 THEN
                    diasanio:=366;
                 end if;
                 if aniobisiesto = 1 and 
                    mes_interes <= 4 THEN
                    diasanio:=366;
                 end if;
  raise notice 'PASA 3 ';
	
                 dias_interes := diasmes;
                 montoCapital:=(recresumenviejoregimen.saldo_al_18061997 +
                                recInteresAdicionalAcumulado.monto_interes_acumulado)
                                -(recAnticipoAcumulado.monto_anticipo_acumulado
                                 +recAnticipoMes.monto_anticipo);
                           

                 ---
                 ---Hasta el mes de julio del aÃ±o 2002 se
                 ---calculan los intereses a tasa promedio. A partir
                 ---de agosto del 2002 a tasa activa.
                 ---
                 if anio_interes > 2002 OR 
                   (anio_interes =  2002 and mes_interes > 7) THEN
                   tasa := 1 + (rectasabcv.tasa_activa/100);
                   tasa_aplicada := rectasabcv.tasa_activa;
                 else
                    tasa := 1 + (rectasabcv.tasa_promedio/100);
                    tasa_aplicada := rectasabcv.tasa_promedio;
                 end if;      
                 tiempo := dias_interes/diasanio;
                 montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			
                 monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                       recAnticipoAcumulado.monto_anticipo_acumulado;
                       monto_interes_acumulado:=
                       recInteresAdicionalAcumulado.monto_interes_acumulado
                       +montoInteresMensual;
 
	         id := last_id_interesadicional()+1;
	         if id is null then 
	            id := 1;
	         end if;

  raise notice 'PASA 4 ';
	         perform add_interesadicional(id,
                         recTrabajadores.id_trabajador, 
                         anio_interes,
                         mes_interes,
                         dias_interes,
                         tasa_aplicada,
                         montoCapital,
                         montoInteresMensual,
                         monto_interes_acumulado,
                         recAnticipoMes.monto_anticipo,
                         monto_anticipo_acumulado,
                         recresumenviejoregimen.saldo_al_18061997);
                
              end if;
        end loop;
        close curTrabajadores;
                 
        if pproceso ='D' then
           id := last_id_seguridadinteresadicional()+1;
   	   if id is null then 
	      id := 1;
	   end if;
           perform add_seguridadinteresadicional(id,pidtipopersonal,panio,pmes,
                                      tasa_aplicada,pfecha,pusuario);
		
        end if;
	delete from identity;

	return 1;
end;
$_$;


ALTER FUNCTION public.calcular_interes_adicional_mensual(integer, integer, integer, date, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 702 (class 1255 OID 183678)
-- Name: calcular_interes_viejo_regimen(integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_interes_viejo_regimen(integer, integer, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
	paniomesdesde                 alias for $2;
        pproceso                      alias for $3;

	recTrabajadores               record;
        recTasaBcv                    record;
        recHistoricoDevengadoIntegral record;
	recInteresAcumulado           record;
        recAnticipoMes                record;
        recAnticipoAcumulado          record;
	recParametroVarios            record;
        
        curTrabajadores cursor (pIdTipoPersonal int4, pEstatus varchar)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,
                                    t.estatus,p.anios_servicio_apn
		from trabajador t, personal p, tipopersonal tp
		where t.id_personal = p.id_personal
		and t.id_tipo_personal = tp.id_tipo_personal
                and t.id_tipo_personal = pIdTipoPersonal 
                and t.estatus = pEstatus
                and p.deuda_regimen_derogado ='N'
                order by t.id_personal;

       ---
       ---Empleados es a partir del aÃ±o 1991 mes mayo
       ---Obreros a partir del aÃ±o 1975 mes mayo
       ---
       
        curHistoricoDevengadoIntegral cursor (pIdPersonal int4)
		for select hd.anio,hd.mes,hd.sueldo_integral
		from historicodevengadoIntegral hd
		where hd.id_personal = pidpersonal
                  and (hd.anio * 100 + hd.mes) >=paniomesdesde 
                 order by  hd.anio,hd.mes;
       curTasaBcv cursor (panio int4, pmes int4)
		for select t.tasa_promedio,t.tasa_activa
		from tasabcv t
                where t.anio = panio
		and t.mes = pmes;
        
        curInteresAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(ivr.monto_interes_acumulado) as monto_interes_acumulado from interesviejoregimen ivr
                where ivr.id_trabajador = pidtrabajador
                  and ivr.anio = panio
		  and ivr.mes = pmes;
        
	curAnticipoMes cursor (pIdpersonal int4,panio int4, pmes int4,pdia1 int4,pdia2 int4)
		for select sum(avr.monto_anticipo) as monto_anticipo from anticipo avr
                where avr.id_personal = pidpersonal
                  and avr.anio = panio
		  and avr.mes = pmes
                  and extract(day from avr.fecha_anticipo) between pdia1 and pdia2
--
--Anticipos de Capital e intereses del viejo regimen que esten aprobados.
--
                  and (avr.tipo_anticipo='V' or avr.tipo_anticipo='F')
                  and avr.estatus ='A' ;  
        
        curAnticipoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(ivr.monto_anticipo_acumulado) as monto_anticipo_acumulado from interesviejoregimen ivr
                where ivr.id_trabajador = pidtrabajador
                  and ivr.anio = panio
		  and ivr.mes = pmes;

	
        
        montoPrestaciones           float8 := 0;	
	montoCapital                float8 := 0;	
	montoInteresMensual         float8 := 0;
        monto_Interes_Acumulado     float8 :=0;	
	monto_Anticipo_Acumulado    float8 :=0;	
        monto_transferencia         float8  :=0;
        tasa                        float8 := 0;
        tiempo                      float8 := 0;
        dias_interes                float8 :=0;
        diasmes                     float8  :=0;
        diasanio                    float8 :=0;
        aniobisiesto                int4 :=0;
        aniosiguientebisiesto       int4 :=0;
        anioingreso                 int4 :=0;
        mesingreso                  int4 :=0;
        diaingreso                  float8 :=0;
        aniosservicios              int4 :=0;
        anioanterior                int4 :=0;
        mesanterior                 int4 :=0;
        anio_fin                    int4 :=0;
        mes_fin                     int4 :=0;
        id                          int4 :=0;
        sueldo_transferencia        float8 :=0;
        saldo_al_18061997           float8 :=0;
        pEstatus                    char:='A' ;
begin
	


 ----
 ----Return 11 no esta la tasa en tasabcv
 ----
    raise notice 'PASA 0 ';
	delete from interesviejoregimen where id_trabajador
              in (select t.id_trabajador from trabajador t
                     where t.id_tipo_personal = pIdTipoPersonal);
    raise notice 'PASA 1 ';
	delete from resumenviejoregimen where id_trabajador
              in (select t.id_trabajador from trabajador t
                     where t.id_tipo_personal = pIdTipoPersonal);
	    raise notice 'PASA 2 ';
        
	open curTrabajadores(pIdTipoPersonal, pEstatus);
	loop
		fetch curTrabajadores into recTrabajadores;	
		exit when not found;


                montoPrestaciones           :=0;	
	        montoCapital                :=0;	
	        montoInteresMensual         :=0;
                monto_Interes_Acumulado     :=0;	
	        monto_Anticipo_Acumulado    :=0;	
                monto_transferencia         :=0;
                sueldo_transferencia        :=0;
                saldo_al_18061997           :=0;
  

	        anioingreso := extract(year from recTrabajadores.fecha_ingreso);
	        mesingreso := extract(month from recTrabajadores.fecha_ingreso);
	        diaingreso := extract(day from recTrabajadores.fecha_ingreso);
	        anio_fin :=1997;
                mes_fin:=6;
     
              --- 
              ---Se comento porque no se esta procesando egresados.
              --- 
                --if rectrabajadores.estatus ='E' then
	        --   anioegreso := extract(year from recTrabajadores.fecha_egreso);
	        --   mesegreso := extract(month from recTrabajadores.fecha_egreso);
	        --   diaegreso := extract(day from recTrabajadores.fecha_egreso);
                --   anio_fin  :=anioegreso;
                --   mes_fin   :=mesegreso;
                --   if anio_fin is null then
                --      anio_fin := 1997;
                --      mes_fin  := 6;
                --   end if;
                --  if ((anio_fin > 1997) or (anio_fin =1997 and mes_fin > 6)) THEN
                --      anio_fin := 1997;
                --      mes_fin  := 6;
                --   end if;
                --end if;
		
                if recTrabajadores.anios_servicio_apn < 0 then
                   recTrabajadores.anios_servicio_apn:=0;
                end if;
                                    

	        open curHistoricoDevengadoIntegral(recTrabajadores.id_personal);
		loop			
			fetch curHistoricoDevengadoIntegral into recHistoricoDevengadoIntegral;	
			exit when not found;
		
                	if (recHistoricoDevengadoIntegral.anio > anio_fin OR
		              (recHistoricoDevengadoIntegral.anio = anio_fin AND
                               recHistoricoDevengadoIntegral.mes > mes_fin)) THEN
	                    exit;
	                end if;

	                raise notice 'PASA 5 ';

                        aniosservicios := recHistoricoDevengadoIntegral.anio - anioingreso;
                        if (recHistoricoDevengadoIntegral.mes < mesingreso) or
                           (recHistoricoDevengadoIntegral.mes = mesingreso and
                            diaingreso > 1) then
                           aniosservicios := aniosservicios -1;
                        end if;
                        if aniosservicios < 0 then
                           aniosservicios:=0;
                        end if;
                        aniosservicios := aniosservicios+ recTrabajadores.anios_servicio_apn;
		        	

                	montoPrestaciones:= 0;	
			montoCapital := 0;	
			montoInteresMensual := 0;	
		
                        aniobisiesto :=0;
                        aniosiguientebisiesto:=0;
                        aniobisiesto:=bisiesto(recHistoricoDevengadoIntegral.anio);
                        aniosiguientebisiesto:=bisiesto(recHistoricoDevengadoIntegral.anio+1);
                        diasanio := 365;
                        if recHistoricoDevengadoIntegral.mes in (1,3,5,7,8,10,12) then
                           diasmes  :=31;
                        end if;
                        if recHistoricoDevengadoIntegral.mes in (4,6,9,11) then
                           diasmes  :=30;
                        end if;
                        if recHistoricoDevengadoIntegral.mes in (2) then
                           diasmes  :=28;
                           if aniobisiesto = 1 and recHistoricoDevengadoIntegral.mes < 5 THEN
                              diasanio:=366;
                              diasmes :=29;
                           end if;
                        end if;
	                raise notice  'PASA 6 ';

                        if recHistoricoDevengadoIntegral.anio = 1997 and
                           recHistoricoDevengadoIntegral.mes = 6 THEN
                           diasmes:=18;
                        end if;
                        if recHistoricoDevengadoIntegral.anio = 1996 and
                           recHistoricoDevengadoIntegral.mes = 12 THEN
                            sueldo_transferencia :=
                                 recHistoricoDevengadoIntegral.sueldo_integral;  
                        end if;
                        if aniosiguientebisiesto = 1 and 
                           recHistoricoDevengadoIntegral.mes > 4 THEN
                           diasanio:=366;
                        end if;
                                          
                        if aniobisiesto = 1 and 
                           recHistoricoDevengadoIntegral.mes <=4 THEN
                           diasanio:=366;
                        end if;
   
                        open curTasabcv(recHistoricoDevengadoIntegral.anio,
                                        recHistoricoDevengadoIntegral.mes);
		        fetch curtasabcv into rectasabcv;	
			if not found or rectasabcv.tasa_promedio is null then
		          return 11;
	                end if;
                        close curtasabcv;

                        anioanterior := recHistoricoDevengadoIntegral.Anio;
                        mesanterior  := recHistoricoDevengadoIntegral.mes -1;
                        
                        if mesanterior =0 THEN
                           anioanterior := recHistoricoDevengadoIntegral.Anio -1;
                           mesanterior  := 12;
                        end if;
 	                raise notice 'PASA 7 ';

                        open curInteresAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,
                                                 mesanterior);
		        fetch curInteresACumulado into recInteresAcumulado;	
			if not found or recinteresacumulado.monto_interes_acumulado is null then
		          recinteresacumulado.monto_interes_acumulado:=0;
	                end if;
		        close curInteresAcumulado;

                        open curAnticipoAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,
                                                 mesanterior);
		        fetch curAnticipoACumulado into recAnticipoAcumulado;	
			if not found or recAnticipoAcumulado.monto_anticipo_acumulado is null then
		          recAnticipoAcumulado.monto_anticipo_acumulado:=0;
	                end if;
                        close curAnticipoAcumulado;
		        
                        if (mesingreso = rechistoricoDevengadoIntegral.mes 
                                   and diaingreso > 1) THEN
                           dias_interes := diaingreso -1;
                           if dias_interes > diasmes then
                              dias_interes := diasmes;
                           end if;
                           open curAnticipoMes(rectrabajadores.id_personal,
                                            recHistoricoDevengadoIntegral.anio,
                                            recHistoricoDevengadoIntegral.mes,1,dias_interes);
		           fetch curAnticipoMes into recAnticipoMes;	
			   if not found or recAnticipoMes.monto_anticipo is null then
		              recAnticipoMes.monto_anticipo:=0;
	                   end if;
		           close curAnticipoMes;

                           montoPrestaciones:= (recHistoricoDevengadoIntegral.sueldo_integral 
                                            * aniosservicios);
                           monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                                     recAnticipoAcumulado.monto_anticipo_acumulado;
                           
                           montoCapital:=(montoprestaciones +
                                      recInteresAcumulado.monto_interes_acumulado)-
                                      monto_anticipo_acumulado;
                           tasa := 1 + (rectasabcv.tasa_promedio/100);
                           
                           tiempo := dias_interes/diasanio;
                           montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			   monto_interes_acumulado:=recInteresAcumulado.monto_interes_acumulado
                                                    +montoInteresMensual;
 
                           id := last_id_interesviejoregimen()+1;
		           if id is null then 
		              id := 1;
		           end if;
                           perform add_interesviejoregimen(id,
                           recTrabajadores.id_trabajador, 
                           recHistoricoDevengadoIntegral.anio,
                           recHistoricoDevengadoIntegral.mes,
                           dias_interes,
                           recHistoricoDevengadoIntegral.sueldo_integral,
                           rectasabcv.tasa_promedio,
                           aniosservicios,
                           montoPrestaciones,
                           montoCapital,
                           montoInteresMensual,
                           monto_interes_acumulado,
                           recAnticipoMes.monto_anticipo,
                           monto_anticipo_acumulado);		
            	
                           aniosservicios := aniosservicios +1;
                           dias_interes := diasmes -dias_interes;
                           if dias_interes > 0 then
                             open curAnticipoMes(rectrabajadores.id_personal,
                                              recHistoricoDevengadoIntegral.anio,
                                              recHistoricoDevengadoIntegral.mes,
                                              dias_interes+1,31);
		             fetch curAnticipoMes into recAnticipoMes;	
			     if not found or recAnticipoMes.monto_anticipo is null then
		                recAnticipoMes.monto_anticipo:=0;
	                     end if;
		             close curAnticipoMes;
                             monto_anticipo_acumulado := monto_anticipo_acumulado +
                                                         recAnticipomes.monto_anticipo;
                             montoPrestaciones:= (recHistoricoDevengadoIntegral.sueldo_integral 
                                            * aniosservicios);
                             montoCapital:=(montoprestaciones +
                                            monto_interes_acumulado)-
                             (monto_anticipo_acumulado);

                           
                             tiempo := (diasmes -(diaingreso-1))/diasanio;
                             montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			
                             monto_interes_acumulado:=monto_interes_acumulado+
                                                      MontoInteresMensual;
                             
		             id := last_id_interesviejoregimen()+1;
		             if id is null then 
		                id := 1;
		             end if;
                             perform add_interesviejoregimen(id,
                             recTrabajadores.id_trabajador, 
                             recHistoricoDevengadoIntegral.anio,
                             recHistoricoDevengadoIntegral.mes,
                             dias_interes,
                             recHistoricoDevengadoIntegral.sueldo_integral,
                             rectasabcv.tasa_promedio,
                             aniosservicios,
                             montoPrestaciones,
                             montoCapital,
                             montoInteresMensual,
                             monto_interes_acumulado,
                             recAnticipoMes.monto_anticipo,
                             monto_anticipo_acumulado);		
                          end if;
             else
	                  raise notice 'PASA 8 ';
                          open curAnticipoMes(rectrabajadores.id_personal,
                                       recHistoricoDevengadoIntegral.anio,
                                       recHistoricoDevengadoIntegral.mes,1,31);                
                          fetch curAnticipoMes into recAnticipoMes;	
		   	  if not found or recAnticipoMes.monto_anticipo is null then
		             recAnticipoMes.monto_anticipo:=0;
	                  end if;
		          close curAnticipoMes;

                          dias_interes := diasmes;
                          montoPrestaciones:= (recHistoricoDevengadoIntegral.sueldo_integral 
                                            * aniosservicios);
                          montoCapital:=(montoprestaciones +
                                         recInteresAcumulado.monto_interes_acumulado)
                                         -(recAnticipoAcumulado.monto_anticipo_acumulado
                                         +recAnticipoMes.monto_anticipo);
                           
                          tasa := 1 + (rectasabcv.tasa_promedio/100);
                        
                          tiempo := dias_interes/diasanio;

                          montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			  monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                recAnticipoAcumulado.monto_anticipo_acumulado;
                          monto_interes_acumulado:=recInteresAcumulado.monto_interes_acumulado
                                                    +montoInteresMensual;
 
		          id := last_id_interesviejoregimen()+1;
		          if id is null then 
		             id := 1;
		          end if;

                          perform add_interesviejoregimen(id,
                           recTrabajadores.id_trabajador, 
                           recHistoricoDevengadoIntegral.anio,
                           recHistoricoDevengadoIntegral.mes,
                           dias_interes,
                           recHistoricoDevengadoIntegral.sueldo_integral,
                           rectasabcv.tasa_promedio,
                           aniosservicios,
                           montoPrestaciones,
                           montoCapital,
                           montoInteresMensual,
                           monto_interes_acumulado,
                           recAnticipoMes.monto_anticipo,
                           monto_anticipo_acumulado);		
                    end if;
                end loop;
                close curHistoricoDevengadoIntegral;
                if sueldo_transferencia = 0 AND
                   recHistoricoDevengadoIntegral.sueldo_integral is not null THEN
                   sueldo_transferencia := recHistoricoDevengadoIntegral.sueldo_integral;
                end if;
                id := last_id_resumenviejoregimen()+1;
		if id is null then 
                   id := 1;
		end if;
                if sueldo_transferencia <> 0 THEN
                   if sueldo_transferencia > 300000 then
                      sueldo_transferencia := 300000;
                   end if;
                   if sueldo_transferencia < 15000 then
                      sueldo_transferencia := 15000;
                   end if;
                end if;
                if aniosservicios > 13 then
                   aniosservicios :=13;
                end if;
                monto_transferencia := sueldo_transferencia * aniosservicios;
                saldo_al_18061997 := montoprestaciones + monto_interes_acumulado +
                                     monto_transferencia - monto_anticipo_acumulado;

		raise notice 'PASA 9 ';

                IF saldo_al_18061997 <> 0 AND saldo_al_18061997 is not null then
                   perform add_resumenviejoregimen(id,
                              rectrabajadores.id_trabajador,
                              sueldo_transferencia,
                              aniosservicios,
                              montoprestaciones,
                              monto_interes_acumulado,
                              monto_anticipo_acumulado,
                              monto_transferencia,
                              saldo_al_18061997);
                END IF;		
	        
        
        end loop;

        close curTrabajadores;

        if pproceso ='D' then
           update parametrovarios set regimen_derogado_procesado ='S' 
             where id_tipo_personal =pIdtipopersonal;
           ---
           ---En caso de que se haya ejecutado ya antes todo el proceso y
           ---se haya colocado en 'N' por parametros varios para repetirlo otra vez.
           ---
           update parametrovarios set intereses_adicionales ='N' 
             where id_tipo_personal =pIdtipopersonal;
           delete from interesadicional
             where id_trabajador in (select t.id_trabajador from trabajador t
                                       where t.id_tipo_personal = PidTipoPersonal);
	
        end if;		
        raise notice 'PASA 10 ';

	delete from identity;

	return 1;
end;
$_$;


ALTER FUNCTION public.calcular_interes_viejo_regimen(integer, integer, character varying) OWNER TO postgres;

--
-- TOC entry 661 (class 1255 OID 183680)
-- Name: calcular_intereses_nuevo_regimen(integer, integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_intereses_nuevo_regimen(integer, integer, integer, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
        paniohasta                    alias for $2;
        pmeshasta                     alias for $3;
        pproceso                      alias for $4;
        
	recTrabajadores               record;
	recFideicomisomes             record;
        recTasaBcv                    record;
        recprestacionesmensuales      record;
	recInteresAcumulado           record;
        recAnticipoMes                record;
        recAnticipoAcumulado          record;
	recFideicomisoAcumulado       record;
        recParametroVarios            record;
        
        curTrabajadores cursor (pIdTipoPersonal int4, pEstatus varchar)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,
                                    t.estatus,p.anios_servicio_apn
		from trabajador t, personal p, tipopersonal tp
		where t.id_personal = p.id_personal
		and t.id_tipo_personal = tp.id_tipo_personal
                and t.id_tipo_personal = pIdTipoPersonal 
                and t.estatus = pEstatus
                order by t.id_personal;

       

       ---
       ---A partir del aÃ±o 1997 mes junio
       ---
       
       



         curprestacionesmensuales cursor (pIdtrabajador int4,paniomesdesde int4,paniomeshasta int4)
		for select hd.anio,hd.mes,hd.monto_prestaciones,hd.monto_adicional,
                    dias_mensuales,dias_adicionales
		from prestacionesmensuales hd
		where hd.id_trabajador = pidtrabajador
                  and (hd.anio * 100 + hd.mes) >=paniomesdesde 
                  and (hd.anio * 100 + hd.mes) <=paniomeshasta 
                 order by  hd.anio,hd.mes;
       
       


        curTasaBcv cursor (panio int4, pmes int4)
		for select t.tasa_promedio,t.tasa_activa
		from tasabcv t
                where t.anio = panio
		and t.mes = pmes;
        
        curInteresAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(inr.monto_prestaciones_acumuladas) 
                           as monto_prestaciones_acumuladas,max(inr.monto_interes_acumulado)
                           as monto_interes_acumulado from interesnuevoregimen inr
                where inr.id_trabajador = pidtrabajador
                  and inr.anio = panio
		  and inr.mes = pmes;
        
	curAnticipoMes cursor (pIdpersonal int4,panio int4, pmes int4,pdia1 int4,pdia2 int4)
		for select sum(avr.monto_anticipo) as monto_anticipo from anticipo avr
                where avr.id_personal = pidpersonal
                  and avr.anio = panio
		  and avr.mes = pmes
                  and extract(day from avr.fecha_anticipo) between pdia1 and pdia2
--
--Anticipos de Capital e intereses del nuevo regimen que esten aprobados.
--
                  and (avr.tipo_anticipo='N' or avr.tipo_anticipo='F')
                  and avr.estatus ='A' ;  
        

         curFideicomisoMes cursor (pIdTrabajador int4,panio int4,
                                   pmes int4,pdia1 int4,pdia2 int4)
		for select sum(f.monto_fideicomiso) as monto_fideicomiso from fideicomiso f
                where f.id_trabajador = pidtrabajador
                  and f.anio = panio
		  and f.mes = pmes
                  and extract(day from f.fecha) between pdia1 and pdia2;
        

        curAnticipoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(inr.monto_anticipo_acumulado) as monto_anticipo_acumulado from interesnuevoregimen inr
                where inr.id_trabajador = pidtrabajador
                  and inr.anio = panio
		  and inr.mes = pmes;

	curFideicomisoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(inr.monto_fideicomiso_acumulado) as monto_fideicomiso_acumulado from interesnuevoregimen inr
                where inr.id_trabajador = pidtrabajador
                  and inr.anio = panio
		  and inr.mes = pmes;


        
        montoPrestaciones             float8 :=0;	
	montoCapital                  float8 :=0;	
	montoInteresMensual           float8 :=0;
        monto_Interes_Acumulado       float8 :=0;	
	monto_Anticipo_Acumulado      float8 :=0;	
        monto_Fideicomiso_Acumulado   float8 :=0;	
        monto_Prestaciones_Acumuladas float8 :=0;	
        tasa                          float8 :=0;
        tiempo                        float8 :=0;
        dias_interes                  float8 :=0;
        diasmes                       float8 :=0;
        diasanio                      float8 :=0;
        diasmensuales                 int4   :=0;
        diasadicionales               int4   :=0;
        aniobisiesto                  int4   :=0;
        aniosiguientebisiesto         int4   :=0;
        anioingreso                   int4   :=0;
        mesingreso                    int4   :=0;
        diaingreso                    float8 :=0;
        aniosservicios                int4   :=0;
        anioanterior                  int4   :=0;
        mesanterior                   int4   :=0;
        aniomeshasta                  int4   :=0;
        aniomesdesde                  int4   :=0;
        anio_fin                      int4   :=0;
        mes_fin                       int4   :=0;
        id                            int4   :=0;
        pEstatus                      char   :='A' ;
begin
	

 ----
 ----Return 11 no esta la tasa en tasabcv
 ----
 ----
 ----Return 2 periodo inferior al mes de junio de 1997.Debe ser mayor a esta fecha
 ----
 ----

        if paniohasta < 1997 or (paniohasta =1997 and pmeshasta < 6 ) then
           return 2;
        end if;
    --    if paniohasta < 1997 or (paniohasta =1997 and pmeshasta < 7 ) then
    --       return 2;
    --    end if;


	delete from interesnuevoregimen where id_trabajador
              in (select t.id_trabajador from trabajador t
                     where t.id_tipo_personal = pIdTipoPersonal);
        
        
	delete from resumennuevoregimen where id_trabajador
              in (select t.id_trabajador from trabajador t
                     where t.id_tipo_personal = pIdTipoPersonal);
	
        
        anio_fin    :=paniohasta;
        mes_fin     :=pmeshasta;
        aniomeshasta:=paniohasta * 100 + pmeshasta;
     
        raise notice 'PASA 1 ';

	open curTrabajadores(pIdTipoPersonal, pEstatus);
	loop
		fetch curTrabajadores into recTrabajadores;	
		exit when not found;

                raise notice 'PASA 2 ';
        
                montoPrestaciones             :=0;	
	        montoCapital                  :=0;	
	        montoInteresMensual           :=0;
                monto_Interes_Acumulado       :=0;	
	        monto_Anticipo_Acumulado      :=0;	
                monto_Fideicomiso_Acumulado   :=0;	
                monto_Prestaciones_Acumuladas :=0;	
                diasmensuales                 :=0;
                diasadicionales               :=0;

                if rectrabajadores.fecha_ingreso > '1997-06-18 ' then 
	           anioingreso := extract(year  from recTrabajadores.fecha_ingreso);
	           mesingreso  := extract(month from recTrabajadores.fecha_ingreso);
	           diaingreso  := extract(day   from recTrabajadores.fecha_ingreso);
	        else
                   anioingreso := 1997;
	           mesingreso  := 6;
	           diaingreso  := 19;
	         --  anioingreso := 1997;
	         --  mesingreso  := 7;
	         --  diaingreso  := 19;
	      
                end if;

                aniomesdesde := anioingreso * 100 + mesingreso;

	        open curprestacionesmensuales(recTrabajadores.id_trabajador,
                                              aniomesdesde,aniomeshasta);
		loop			
			fetch curprestacionesmensuales into recprestacionesmensuales;	
			exit when not found;
		
                	if (recprestacionesmensuales.anio > anio_fin OR
		              (recprestacionesmensuales.anio = anio_fin AND
                               recprestacionesmensuales.mes > mes_fin)) THEN
	                    exit;
	                end if;
                        


	                raise notice 'PASA 3 ';

                        montoPrestaciones    :=0;	
			montoCapital         :=0;	
			montoInteresMensual  :=0;	
		
                        aniobisiesto         :=0;
                        aniosiguientebisiesto:=0;

                        aniobisiesto         :=bisiesto(recprestacionesmensuales.anio);
                        aniosiguientebisiesto:=bisiesto(recprestacionesmensuales.anio+1);
                        diasanio := 365;
                        if recprestacionesmensuales.mes in (1,3,5,7,8,10,12) then
                           diasmes  :=31;
                        end if;
                        if recprestacionesmensuales.mes in (4,6,9,11) then
                           diasmes  :=30;
                        end if;
                        if recprestacionesmensuales.mes in (2) then
                           diasmes  :=28;
                           if aniobisiesto = 1 and recprestacionesmensuales.mes < 5 THEN
                              diasanio:=366;
                              diasmes :=29;
                           end if;
                        end if;
	                raise notice  'PASA 4 ';

                        if recprestacionesmensuales.anio = 1997 and
                           recprestacionesmensuales.mes = 6 THEN
                           diasmes:=12;
                        end if;
                     --   if recprestacionesmensuales.anio = 1997 and
                     --      recprestacionesmensuales.mes = 7 THEN
                     --      diasmes:=13;
                     --   end if;
                        
                        if aniosiguientebisiesto = 1 and 
                           recprestacionesmensuales.mes > 5 THEN
                           diasanio:=366;
                        end if;
                                          
                        if aniobisiesto = 1 and 
                           recprestacionesmensuales.mes <=5 THEN
                           diasanio:=366;
                        end if;
   
                        open curTasabcv(recprestacionesmensuales.anio,
                                        recprestacionesmensuales.mes);
		        fetch curtasabcv into rectasabcv;	
			if not found or rectasabcv.tasa_promedio is null then
		          return 11;
	                end if;
                        close curtasabcv;

                        anioanterior := recprestacionesmensuales.Anio;
                        mesanterior  := recprestacionesmensuales.mes -1;
                        
                        if mesanterior =0 THEN
                           anioanterior := recprestacionesmensuales.Anio -1;
                           mesanterior  := 12;
                        end if;
 	                raise notice 'PASA 5 ';

                        open curInteresAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,mesanterior);
		        fetch curInteresACumulado into recInteresAcumulado;	
			if not found or 
                           recinteresacumulado.monto_interes_acumulado is null then
		           recinteresacumulado.monto_interes_acumulado:=0;
	                end if;
		        if not found or recinteresacumulado.monto_prestaciones_acumuladas 
                             is null then
		             recinteresacumulado.monto_prestaciones_acumuladas:=0;
	                end if;
		        close curInteresAcumulado;

                        open curAnticipoAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,mesanterior);
		        fetch curAnticipoACumulado into recAnticipoAcumulado;	
			if not found or 
                           recAnticipoAcumulado.monto_anticipo_acumulado is null then
		           recAnticipoAcumulado.monto_anticipo_acumulado:=0;
	                end if;
                        close curAnticipoAcumulado;
		        
                        open curFideicomisoAcumulado(rectrabajadores.id_trabajador,
                                                     anioanterior,mesanterior);
		        fetch curFideicomisoACumulado into recFideicomisoAcumulado;	
			if not found or 
                           recFideicomisoAcumulado.monto_fideicomiso_acumulado is null then
		           recFideicomisoAcumulado.monto_fideicomiso_acumulado:=0;
	                end if;
                        close curFideicomisoAcumulado;
		        

                        if (diaingreso > 1 and (anioingreso <>recprestacionesmensuales.anio
                                            or mesingreso <> recprestacionesmensuales.mes))
                           then
                           raise notice 'PASA 61 ';
                           dias_interes := diaingreso -1;
                           if dias_interes > diasmes then
                              dias_interes := diasmes;
                           end if;
                           open curAnticipoMes(rectrabajadores.id_personal,
                                            recprestacionesmensuales.anio,
                                            recprestacionesmensuales.mes,1,dias_interes);
		           fetch curAnticipoMes into recAnticipoMes;	
			   if not found or recAnticipoMes.monto_anticipo is null then
		              recAnticipoMes.monto_anticipo:=0;
	                   end if;
		           close curAnticipoMes;
                           raise notice 'PASA 62 ';
                          
                           open curFideicomisoMes(rectrabajadores.id_trabajador,
                                  recprestacionesmensuales.anio,
                                  recprestacionesmensuales.mes,1,dias_interes);                
                           fetch curFideicomisoMes into recFideicomisoMes;	
		   	   if not found or recFideicomisoMes.monto_Fideicomiso is null then
		              recFideicomisoMes.monto_Fideicomiso:=0;
	                   end if;
		           close curFideicomisoMes;

                           
                           montoPrestaciones:= (recprestacionesmensuales.monto_prestaciones 
                                              + recprestacionesmensuales.monto_adicional);
                           
                           montoCapital:=(recInteresAcumulado.monto_prestaciones_acumuladas
                                  + recInteresAcumulado.monto_interes_acumulado)
                                  -(recAnticipoAcumulado.monto_anticipo_acumulado
                                    +recAnticipoMes.monto_anticipo
                                    +recFideicomisoAcumulado.monto_fideicomiso_acumulado
                                    +recFideicomisoMes.Monto_fideicomiso);
                           
                           raise notice 'PASA 63 ';
                          
                           tasa := 1 + (rectasabcv.tasa_promedio/100);
                           
                           tiempo := dias_interes/diasanio;
                           montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			   monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                 recAnticipoAcumulado.monto_anticipo_acumulado;
                           monto_fideicomiso_acumulado:=recFideicomisoMes.monto_fideicomiso +
                                 recfideicomisoAcumulado.monto_fideicomiso_acumulado;
                           monto_interes_acumulado:=recInteresAcumulado.monto_interes_acumulado
                                                    +montoInteresMensual;
                           monto_prestaciones_acumuladas:=               
                              recInteresAcumulado.monto_prestaciones_acumuladas;
          	           id := last_id_interesnuevoregimen()+1;
		           if id is null then 
		              id := 1;
		           end if;
                           perform add_interesnuevoregimen(id,
                                 recTrabajadores.id_trabajador, 
                                 recprestacionesmensuales.anio,
                                 recprestacionesmensuales.mes,
                                 dias_interes,
                                 rectasabcv.tasa_promedio,
                                 0,
                                 0,
                                 0,
                                 0,
                                 monto_prestaciones_acumuladas,
                                 MontoCapital,
                                 montoInteresMensual,
                                 monto_interes_acumulado,
                                 recAnticipoMes.monto_anticipo,
                                 monto_anticipo_acumulado,
                                 recFideicomisoMes.monto_fideicomiso,
                                 monto_fideicomiso_acumulado);		
            	           
                           dias_interes := diasmes -dias_interes;
                           
                           if dias_interes > 0 then
                              open curAnticipoMes(rectrabajadores.id_personal,
                                               recprestacionesmensuales.anio,
                                               recprestacionesmensuales.mes,
                                               dias_interes+1,31);
		              fetch curAnticipoMes into recAnticipoMes;	
			      if not found or recAnticipoMes.monto_anticipo is null then
		                 recAnticipoMes.monto_anticipo:=0;
	                      end if;
		              close curAnticipoMes;
                              open curFideicomisoMes(rectrabajadores.id_trabajador,
                                   recprestacionesmensuales.anio,
                              recprestacionesmensuales.mes,dias_interes+1,31);                
                              fetch curFideicomisoMes into recFideicomisoMes;	
		   	      if not found or recFideicomisoMes.monto_Fideicomiso is null then
		                 recFideicomisoMes.monto_Fideicomiso:=0;
	                      end if;
		              close curFideicomisoMes;


                              montoPrestaciones:= (
                                      recprestacionesmensuales.monto_prestaciones 
                                    + recprestacionesmensuales.monto_adicional);
                           
                              montoCapital:=(montoprestaciones +
                                         monto_interes_acumulado+
                                         recInteresAcumulado.monto_prestaciones_acumuladas)
                                         -(monto_anticipo_acumulado
                                         + recAnticipoMes.monto_anticipo
                                         + monto_fideicomiso_acumulado
                                         + recFideicomisoMes.Monto_fideicomiso);
                           
                              tasa := 1 + (rectasabcv.tasa_promedio/100);
                        
                                                    
                              tiempo := (diasmes -(diaingreso-1))/diasanio;
                              montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			
                              monto_interes_acumulado := monto_interes_acumulado +
                                                          montointeresmensual;
                              monto_prestaciones_acumuladas :=
                                      recInteresAcumulado.monto_prestaciones_acumuladas +
                                      montoprestaciones;
                              id := last_id_interesnuevoregimen()+1;
		              if id is null then 
		                 id := 1;
		              end if;
                              perform add_interesnuevoregimen(id,
                                    recTrabajadores.id_trabajador, 
                                    recprestacionesmensuales.anio,
                                    recprestacionesmensuales.mes,
                                    dias_interes,
                                    rectasabcv.tasa_promedio,
                                    recprestacionesmensuales.monto_prestaciones,
                                    recprestacionesmensuales.monto_adicional,
                                    recprestacionesmensuales.dias_mensuales,
                                    recprestacionesmensuales.dias_adicionales,
                                    monto_prestaciones_acumuladas,
                                    montoCapital,
                                    montoInteresMensual,
                                    monto_interes_acumulado,
                                    recAnticipoMes.monto_anticipo,
                                    monto_anticipo_acumulado,
                                    recFideicomisoMes.monto_fideicomiso,
                                    monto_fideicomiso_acumulado);		
                           end if;
             else
	                  raise notice 'PASA 7 ';
                          open curAnticipoMes(rectrabajadores.id_personal,
                                       recprestacionesmensuales.anio,
                                       recprestacionesmensuales.mes,1,31);                
                          fetch curAnticipoMes into recAnticipoMes;	
		   	  if not found or recAnticipoMes.monto_anticipo is null then
		             recAnticipoMes.monto_anticipo:=0;
	                  end if;
		          close curAnticipoMes;
  raise notice 'PASA 8 ';
                        
                          open curFideicomisoMes(rectrabajadores.id_trabajador,
                                       recprestacionesmensuales.anio,
                                       recprestacionesmensuales.mes,1,31);                
                          fetch curFideicomisoMes into recFideicomisoMes;	
		   	  if not found or recFideicomisoMes.monto_Fideicomiso is null then
		             recFideicomisoMes.monto_Fideicomiso:=0;
	                  end if;
		          close curFideicomisoMes;

  raise notice 'PASA 9 ';




                          if (anioingreso =recprestacionesmensuales.anio and
                              mesingreso = recprestacionesmensuales.mes) then
                              if diasmes <> 12 then
                              --if diasmes <> 13 then

  raise notice 'PASA 99999999999999999999999999 ';
                                 dias_interes :=diasmes - diaingreso;
                              else
                                 dias_interes := diasmes;
                              end if;
                          else
                             dias_interes := diasmes;
                          end if;
                          montoPrestaciones:= (recprestacionesmensuales.monto_prestaciones 
                                             + recprestacionesmensuales.monto_adicional);
                          montoCapital:=(montoprestaciones +
                                         recInteresAcumulado.monto_interes_acumulado+
                                         recInteresAcumulado.monto_prestaciones_acumuladas)
                                         -(
                                          recAnticipoAcumulado.monto_anticipo_acumulado
                                         +recAnticipoMes.monto_anticipo
                                         +recFideicomisoAcumulado.monto_fideicomiso_acumulado
                                         +recFideicomisoMes.Monto_fideicomiso);
                           
                          tasa := 1 + (rectasabcv.tasa_promedio/100);
                        
                          tiempo := dias_interes/diasanio;

raise notice 'PASA 91 ';
                          montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			  monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                recAnticipoAcumulado.monto_anticipo_acumulado;
                          monto_fideicomiso_acumulado:=recFideicomisoMes.monto_fideicomiso +
                                recfideicomisoAcumulado.monto_fideicomiso_acumulado;
                          monto_interes_acumulado:=recInteresAcumulado.monto_interes_acumulado

                                                    +montoInteresMensual;
raise notice 'PASA 92 ';

                          monto_prestaciones_acumuladas :=
                                          recInteresAcumulado.monto_prestaciones_acumuladas +
                                          montoprestaciones;
   raise notice 'PASA 10 ';
                        
		          id := last_id_interesnuevoregimen()+1;
		          if id is null then 
		             id := 1;
		          end if;


 

 





                          perform add_interesnuevoregimen(id,
                              recTrabajadores.id_trabajador, 
                              recprestacionesmensuales.anio,
                              recprestacionesmensuales.mes,
                              dias_interes,
                              rectasabcv.tasa_promedio,
                              recprestacionesmensuales.monto_prestaciones,
                              recprestacionesmensuales.monto_adicional,
                              recprestacionesmensuales.dias_mensuales,
                              recprestacionesmensuales.dias_adicionales,
                              monto_prestaciones_acumuladas,
                              montoCapital,
                              montoInteresMensual,
                              monto_interes_acumulado,
                              recAnticipoMes.monto_anticipo,
                              monto_anticipo_acumulado,
                              recFideicomisoMes.monto_fideicomiso,
                              monto_fideicomiso_acumulado);		
                       		
                      end if;
                      diasmensuales:= 
                            diasmensuales +recprestacionesmensuales.dias_mensuales;
                      diasadicionales:= 
                            diasadicionales +recprestacionesmensuales.dias_adicionales;
                             
                end loop;
                close curprestacionesmensuales;
                id := last_id_resumennuevoregimen()+1;
		if id is null then 
                   id := 1;
		end if;
          	raise notice 'PASA 9 ';
                perform add_resumennuevoregimen(id,
                              rectrabajadores.id_trabajador,
                              monto_prestaciones_acumuladas,
                              monto_interes_acumulado,
                              monto_anticipo_acumulado,
                              monto_fideicomiso_acumulado,
                              diasmensuales,
                              diasadicionales);		
        end loop;
        close curTrabajadores;


       
      raise notice 'PASA 10 ';

	delete from identity;

	return 1;
end;
$_$;


ALTER FUNCTION public.calcular_intereses_nuevo_regimen(integer, integer, integer, character varying) OWNER TO postgres;

--
-- TOC entry 677 (class 1255 OID 183682)
-- Name: calcular_limite_mensual(double precision, character varying, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_limite_mensual(double precision, character varying, double precision) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$
declare 
	pMontoBaseTotal alias for $1;	
	pPeriodicidad alias for $2;
	pLimiteMensual alias for $3;
begin
	if pMontoBaseTotal > pLimiteMensual then
		return pLimiteMensual;
	else
		return pMontoBaseTotal;
	end if;
end;
$_$;


ALTER FUNCTION public.calcular_limite_mensual(double precision, character varying, double precision) OWNER TO postgres;

--
-- TOC entry 703 (class 1255 OID 183683)
-- Name: calcular_limite_semanal(double precision, double precision, character varying, character varying, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_limite_semanal(double precision, double precision, character varying, character varying, double precision, double precision) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$
declare 
	pMontoBaseTotal alias for $1;	
	pMontoBase2 alias for $2;	
	pPeriodicidad alias for $3;
	pParametro alias for $4;
	pLimiteMensual alias for $5;
	pLimiteSemanal alias for $6;
	limite float8 = 0;
begin
	if pParametro = 'SSO' or pParametro = 'SPF' then
		if pMontoBase2 = 0 then
			limite := plimiteSemanal;
		else
			limite := plimiteMensual;
		end if;
	else
		limite := pLimiteMensual;
	end if;
	if pMontoBaseTotal > limite then
		return limite;
	else
		return pMontoBaseTotal;
	end if;
end;
$_$;


ALTER FUNCTION public.calcular_limite_semanal(double precision, double precision, character varying, character varying, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 704 (class 1255 OID 183684)
-- Name: calcular_prestaciones_historico(integer, integer, integer, integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_prestaciones_historico(integer, integer, integer, integer, integer, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
        paniodesde                    alias for $2;
        pmesdesde                     alias for $3;
        paniohasta                    alias for $4;
        pmeshasta                     alias for $5;
        pproceso                      alias for $6;
        
	recTrabajadores               record;
        rechistoricodevengado         record;
	recPrestacionesmensuales      record;
	
        curTrabajadores cursor (pIdTipoPersonal int4, pEstatus varchar)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,
                                    t.estatus,t.id_tipo_personal
		from trabajador t, personal p, tipopersonal tp
		where t.id_personal = p.id_personal
		and t.id_tipo_personal = tp.id_tipo_personal
                and t.id_tipo_personal = pIdTipoPersonal 
                and t.estatus = pEstatus
                order by t.id_personal;

        ---
        ---A partir del año 1997 mes junio
        ---
       
        curhistoricodevengado cursor (pIdpersonal int4,
                                      paniomesdesde int4, paniomeshasta int4)
		for select hd.anio,hd.mes,hd.sueldo_integral
		from historicodevengadointegral hd
		where hd.id_personal = pidpersonal
                  and (hd.anio * 100 + hd.mes) >=paniomesdesde 
                  and (hd.anio * 100 + hd.mes) <=paniomeshasta
                  order by anio,mes;
	
        curprestacionesmensuales cursor(pIdtrabajador int4,paniomesdesde int4,
                                       paniomeshasta int4)
		for select sum(hd.monto_prestaciones) as monto_prestaciones
		from prestacionesmensuales hd
		where hd.id_trabajador = pidtrabajador
                  and (hd.anio * 100 + hd.mes) >=paniomesdesde 
                  and (hd.anio * 100 + hd.mes) <=paniomeshasta;
	
        
        montoPrestaciones           float8 := 0;	
        montoAdicional              float8 := 0;	
        baseAdicional               float8 := 0;	
        diasprestaciones            int4   :=0;
        diasadicionales             int4   :=0;
        anioingreso                 int4   :=0;
        mesingreso                  int4   :=0;
        diaingreso                  float8 :=0;
        aniosservicios              int4   :=0;
        anioanterior                int4   :=0;
        mesanterior                 int4   :=0;
        anio_fin                    int4   :=0;
        mes_fin                     int4   :=0;
        aniomesdesde2               int4   :=0;
        aniomeshasta2               int4   :=0;
        aniomesdesde                int4   :=0;
        aniomeshasta                int4   :=0;
        id                          int4   :=0;
        pEstatus                    char   :='A' ;
begin
	

 ----
 ----Return 11 no esta la tasa en tasabcv
 ----
 ----
 ----Return 2 periodo inferior al mes de junio de 1997.Debe ser mayor a esta fecha
 ----
 ----

        if paniohasta < 1997 or (paniohasta =1997 and pmeshasta < 6 ) then
           return 2;
        end if;
        aniomesdesde2 := paniodesde * 100 + pmesdesde;
        aniomeshasta2 := paniohasta * 100 + pmeshasta;

	--delete from prestacionesmensuales
        --   where id_trabajador
        --      in (select t.id_trabajador from trabajador t
        --             where t.id_tipo_personal = pIdTipoPersonal
        --               and t.estatus <> 'E');
	
       
        anio_fin :=paniohasta;
        mes_fin:=pmeshasta;
        raise notice 'PASA 1 ';
     
	open curTrabajadores(pIdTipoPersonal, pEstatus);
	loop
		fetch curTrabajadores into recTrabajadores;	
		exit when not found;


                montoPrestaciones           :=0;	
	        montoAdicional              :=0;

	        anioingreso := extract(year from recTrabajadores.fecha_ingreso);
	        mesingreso := extract(month from recTrabajadores.fecha_ingreso);
	        diaingreso := extract(day from recTrabajadores.fecha_ingreso);
	        raise notice 'PASA 2 ';

              --- 
              ---Se comento porque no se esta procesando egresados.
              --- 
                --if rectrabajadores.estatus ='E' then
	        --   anioegreso := extract(year from recTrabajadores.fecha_egreso);
	        --   mesegreso := extract(month from recTrabajadores.fecha_egreso);
	        --   diaegreso := extract(day from recTrabajadores.fecha_egreso);
                --   anio_fin  :=anioegreso;
                --   mes_fin   :=mesegreso;
                --   if anio_fin is null then
                --      anio_fin := 1997;
                --      mes_fin  := 6;
                --   end if;
                --  if ((anio_fin > 1997) or (anio_fin =1997 and mes_fin > 6)) THEN
                --      anio_fin := 1997;
                --      mes_fin  := 6;
                --   end if;
                --end if;
		
                                    

	        open curhistoricodevengado(recTrabajadores.id_personal,
                                                   aniomesdesde2,aniomeshasta2);
		loop			
			fetch curhistoricodevengado into rechistoricodevengado;	
			exit when not found;
		
                	if (rechistoricodevengado.anio > anio_fin OR
		              (rechistoricodevengado.anio = anio_fin AND
                               rechistoricodevengado.mes > mes_fin)) THEN
	                    exit;
	                end if;

	                raise notice 'PASA 3 ';

                        diasadicionales    := 0;
                        diasprestaciones   := 0;
                        montoprestaciones  := 0;	
	                montoadicional     := 0;
                        aniosservicios     := 0;
                        baseadicional      := 0;
                        aniomesdesde       := 0;
                        aniomeshasta       := 0;

                        if anioingreso < 1997 then
                           diasprestaciones := 5;
                           if rechistoricodevengado.mes = 6 then
                              aniosservicios:= rechistoricodevengado.anio - 1997;
                              aniomesdesde  := ((rechistoricodevengado.anio - 1) * 100) + 7;
                              aniomeshasta  := (rechistoricodevengado.anio * 100) + 5;
                              if aniosservicios <2 then 
                                 diasadicionales := 0;
                              elsif aniosservicios = 2 then
                                 diasadicionales := 2;
                              elsif aniosservicios =3 then 
                                 diasadicionales := 4;
                              elsif aniosservicios =4 then 
                                 diasadicionales := 6;
                              elsif aniosservicios =5 then 
                                 diasadicionales := 8;
                              elsif aniosservicios =6 then 
                                 diasadicionales := 10;
                              elsif aniosservicios =7 then 
                                 diasadicionales := 12;
                              elsif aniosservicios =8 then 
                                 diasadicionales := 14;
                              elsif aniosservicios =9 then 
                                 diasadicionales := 16;
                              elsif aniosservicios =10 then 
                                 diasadicionales := 18;
                              elsif aniosservicios =11 then 
                                 diasadicionales := 20;
                              elsif aniosservicios =12 then 
                                 diasadicionales := 22;
                              elsif aniosservicios =13 then 
                                 diasadicionales := 24;
                              elsif aniosservicios =14 then 
                                 diasadicionales := 26;
                              elsif aniosservicios =15 then 
                                diasadicionales := 28;
                              elsif aniosservicios =16 then 
                                 diasadicionales := 30;
                              else
                                 diasadicionales := 30;
                              end if;                            
                           end if;
                        else
                           aniomesdesde := (anioingreso * 100) + mesingreso; 
                           aniomeshasta := (rechistoricodevengado.anio * 100) +
                                           rechistoricodevengado.mes;
                           if aniomeshasta - aniomesdesde > 3 then
                              diasprestaciones := 5;
                           end if; 
                                                     
                           if rechistoricodevengado.mes = mesingreso then
                              aniosservicios := rechistoricodevengado.anio - anioingreso;
                              aniomesdesde := (rechistoricodevengado.anio - 1) * 100 
                                               + (mesingreso + 1);
                              
                              anioanterior := rechistoricodevengado.Anio;
                              mesanterior  := mesingreso -1;
                        
                              if mesanterior =0 THEN
                                 anioanterior := rechistoricodevengado.Anio -1;
                                 mesanterior  := 12;
                              end if;
 	                      aniomeshasta := anioanterior * 100 +mesanterior;
                             
                              if aniosservicios <2 then 
                                 diasadicionales := 0;
                              elsif aniosservicios = 2 then
                                 diasadicionales := 2;
                              elsif aniosservicios =3 then 
                                 diasadicionales := 4;
                              elsif aniosservicios =4 then 
                                 diasadicionales := 6;
                              elsif aniosservicios =5 then 
                                 diasadicionales := 8;
                              elsif aniosservicios =6 then 
                                 diasadicionales := 10;
                              elsif aniosservicios =7 then 
                                 diasadicionales := 12;
                              elsif aniosservicios =8 then 
                                 diasadicionales := 14;
                              elsif aniosservicios =9 then 
                                 diasadicionales := 16;
                              elsif aniosservicios =10 then 
                                 diasadicionales := 18;
                              elsif aniosservicios =11 then 
                                 diasadicionales := 20;
                              elsif aniosservicios =12 then 
                                 diasadicionales := 22;
                              elsif aniosservicios =13 then 
                                 diasadicionales := 24;
                              elsif aniosservicios =14 then 
                                 diasadicionales := 26;
                              elsif aniosservicios =15 then 
                                diasadicionales := 28;
                              elsif aniosservicios =16 then 
                                 diasadicionales := 30;
                              else
                                 diasadicionales := 30;
                              end if;                            
                          end if;
                        end if;
                        raise notice 'PASA 4 ';

                        montoAdicional:=0;
                        montoPrestaciones:= 
                            (rechistoricodevengado.sueldo_integral/30) 
                             * diasprestaciones;  
                        if diasadicionales > 0  then
                           open curprestacionesmensuales
                              (rectrabajadores.id_trabajador,aniomesdesde,aniomeshasta);
  			   fetch curprestacionesmensuales 
                                  into recprestacionesmensuales;	
	                   close curprestacionesmensuales;
                           if recprestacionesmensuales.monto_prestaciones is null then
                              recprestacionesmensuales.monto_prestaciones :=0;
                           end if;
                           baseadicional :=recprestacionesmensuales.monto_prestaciones+
                                           montoprestaciones;
                           montoadicional:= (baseadicional/60) * diasadicionales;
 
                        end if;
                        raise notice 'PASA 5 ';


                





                      if diasprestaciones = 5 then
                           raise notice 'PASA 6 ';
  
		           id := last_id_prestacionesmensuales()+1;
		           if id is null then 
		              id := 1;
		           end if;
                           raise notice 'PASA 7 ';
                           perform delete_prestacionesmensuales(
                             rectrabajadores.id_tipo_personal,
                             rectrabajadores.id_trabajador,
                             rechistoricodevengado.anio,
                             rechistoricodevengado.mes);
                           perform add_prestacionesmensuales(id,
                             rectrabajadores.id_tipo_personal,
                             rectrabajadores.id_trabajador,
                             rechistoricodevengado.anio,
                             rechistoricodevengado.mes,
                             diasprestaciones,
                             diasadicionales,
                             rechistoricodevengado.sueldo_integral,
                             baseadicional,
                             montoprestaciones,
                             montoadicional,'N','N');
                       end if;                
                end loop;
                close curhistoricodevengado;
          	raise notice 'PASA 8 ';
               
        
        end loop;

        close curTrabajadores;
        raise notice 'PASA 9 ';

       		
        raise notice 'PASA 10 ';

	delete from identity;

	return 1;
end;
$_$;


ALTER FUNCTION public.calcular_prestaciones_historico(integer, integer, integer, integer, integer, character varying) OWNER TO postgres;

--
-- TOC entry 705 (class 1255 OID 183686)
-- Name: calcular_promedios_mensual(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_promedios_mensual(integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$

declare 	
	pIdTipoPersonal alias for $1;
	
	montoBase1Si float8 := 0.0;
	montoBase2Si float8 := 0.0;
	montoBaseTotalSi float8 := 0.0;

	montoBase1Sb float8 := 0.0;
	montoBase2Sb float8 := 0.0;
	montoBaseTotalSb float8 := 0.0;

	montoBase1Co float8 := 0.0;
	montoBase2Co float8 := 0.0;
	montoBaseTotalCo float8 := 0.0;

	montoBase1Pt float8 := 0.0;
	montoBase2Pt float8 := 0.0;
	montoBaseTotalPt float8 := 0.0;

	montoBase1Pc float8 := 0.0;
	montoBase2Pc float8 := 0.0;
	montoBaseTotalPc float8 := 0.0;

	montoBase1As float8 := 0.0;
	montoBase2As float8 := 0.0;
	montoBaseTotalAs float8 := 0.0;

	montoSumar float8 := 0;

	recTrabajadores1 record;
	curTrabajadores1 cursor (key1 int4) for select distinct t.id_trabajador, min(t.regimen) as regimen, min(tp.formula_semanal) as formula_semanal,
		min(tp.formula_integral) as formula_integral, min(t.riesgo) as riesgo,  
		min(jornada_semanal) as jornada_semanal, min(tu.jornada_diaria) as jornada_diaria, min(t.id_cargo) as id_cargo
		from trabajador t, tipopersonal tp, turno tu 
		where 
		tp.id_tipo_personal = key1
		and t.id_tipo_personal = tp.id_tipo_personal 
		and t.estatus = 'A'
		and t.id_turno = tu.id_turno
		group by  t.id_trabajador ;

	recPromedios record;
	curPromedios cursor (key1 int4) for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, fp.cod_frecuencia_pago, cf.unidades, cf.monto,  cf.monto_restituir, cf.restituir, 
		c.sueldo_basico, c.sueldo_integral, c.compensacion, c.primas_trabajador, c.primas_cargo, c.ajuste_sueldo
		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		concepto c, frecuenciapago fp
		where
		cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ctp.cod_concepto < '5000'
		and cf.id_trabajador = key1
		and (c.sueldo_basico = 'S' 
		or c.sueldo_integral = 'S' 
		or c.compensacion = 'S' 
		or c.primas_trabajador = 'S' 
		or c.primas_cargo = 'S' 
		or c.ajuste_sueldo= 'S');
begin

        ---
        ---Busca a los trabajadores
        ---
	open curTrabajadores1 (pIdTipoPersonal);                                       
	loop
		fetch curTrabajadores1 into recTrabajadores1;			                                                   
		exit when not found;
		
		montoBase1Si := 0.0;
		montoBase2Si := 0.0;
		montoBaseTotalSi := 0.0;

		montoBase1Sb := 0.0;
		montoBase2Sb := 0.0;
		montoBaseTotalSb := 0.0;

		montoBase1Co := 0.0;
		montoBase2Co := 0.0;
		montoBaseTotalCo := 0.0;

		montoBase1Pt := 0.0;
		montoBase2Pt := 0.0;
		montoBaseTotalPt := 0.0;

		montoBase1Pc := 0.0;
		montoBase2Pc := 0.0;
		montoBaseTotalPc := 0.0;

		montoBase1As := 0.0;
		montoBase2As := 0.0;
		montoBaseTotalAs := 0.0;

		montoSumar := 0.0;

                ---
                ---Busca los conceptos del trabajador
                ---
		open curPromedios(recTrabajadores1.id_trabajador);
		loop
			fetch curPromedios into recPromedios;			
			exit when not found;
			montoSumar := 0;
			if recPromedios.monto_restituir = 0 then
				montoSumar := recPromedios.monto;
			else
				montoSumar := recPromedios.monto_restituir;
			end if;
                        ---
                        ---Suma en sueldo integral si el indicador esta encendido
                        ---
			if recPromedios.sueldo_integral = 'S' then
				if recPromedios.cod_frecuencia_pago = 3 then
					montoBase1Si := montoBase1Si + (montoSumar*2);
				else
					montoBase2Si := montoBase2Si + (montoSumar);
				end if;
			end if;
                        ---
                        ---Suma en sueldo basico,compensacion,primas trabajador,
                        ---primas cargos, ajuste de sueldo de acuerdo al indicador
                        ---
			
			if recPromedios.sueldo_basico = 'S' then
				if recPromedios.cod_frecuencia_pago = 3 then
					montoBase1Sb := montoBase1Sb + (montoSumar*2);
				else
					montoBase2Sb := montoBase2Sb + (montoSumar);
				end if;

			elsif recPromedios.compensacion = 'S' then
				if recPromedios.cod_frecuencia_pago = 3 then
					montoBase1Co := montoBase1Co + (montoSumar*2);
				else
					montoBase2Co := montoBase2Co+ (montoSumar);
				end if;

			elsif recPromedios.primas_trabajador = 'S' then
				if recPromedios.cod_frecuencia_pago = 3 then
					montoBase1Pt := montoBase1Pt + (montoSumar*2);
				else
					montoBase2Pt := montoBase2Pt+ (montoSumar);
				end if;

			elsif recPromedios.primas_cargo = 'S' then
				if recPromedios.cod_frecuencia_pago = 3 then
					montoBase1Pc := montoBase1Pc + (montoSumar*2);
				else
					montoBase2Pc := montoBase2Pc+ (montoSumar);
				end if;

			elsif recPromedios.ajuste_sueldo = 'S' then
				if recPromedios.cod_frecuencia_pago = 3 then
					montoBase1As := montoBase1As + (montoSumar*2);
				else
					montoBase1As := montoBase1As + (montoSumar*2);
				end if;
			end if;

		end loop;
		close curPromedios;
		montoBaseTotalSi := montoBase1Si + montoBase2Si;
		montoBaseTotalSb := montoBase1Sb + montoBase2Sb;
		montoBaseTotalCo := montoBase1Co + montoBase2Co;
		montoBaseTotalPt := montoBase1Pt + montoBase2Pt;
		montoBaseTotalPc := montoBase1Pc + montoBase2Pc;
		montoBaseTotalAs := montoBase1As + montoBase2As;
                
                ---actualiza la tabla sueldo promedios
		perform update_sueldo_promedio(
			recTrabajadores1.id_trabajador, 
			montoBaseTotalSi,
			montoBaseTotalSb,
			montoBaseTotalCo,
			montoBaseTotalPt,
			montoBaseTotalPc,
			montoBaseTotalAs);
               ---
               ---Actualiza el campo sueldo_basico de la ficha del trabajador
               ---
               if montoBaseTotalSb > 0 then
                  perform update_trabajador_sueldo_basico(
			recTrabajadores1.id_trabajador, 
			montoBaseTotalSb);
               end if;


	end loop;
	close curTrabajadores1;
	return true;
end;

$_$;


ALTER FUNCTION public.calcular_promedios_mensual(integer) OWNER TO postgres;

--
-- TOC entry 706 (class 1255 OID 183687)
-- Name: calcular_promedios_semanal(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_promedios_semanal(integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;	
	
	montoBase1Si float8 := 0.0;
	montoBase2Si float8 := 0.0;
	montoBaseTotalSi float8 := 0.0;
	
	montoBase1Sb float8 := 0.0;
	montoBase2Sb float8 := 0.0;
	montoBaseTotalSb float8 := 0.0;
	
	montoBase1Co float8 := 0.0;
	montoBase2Co float8 := 0.0;
	montoBaseTotalCo float8 := 0.0;
	
	montoBase1Pt float8 := 0.0;
	montoBase2Pt float8 := 0.0;
	montoBaseTotalPt float8 := 0.0;
	
	montoBase1Pc float8 := 0.0;
	montoBase2Pc float8 := 0.0;
	montoBaseTotalPc float8 := 0.0;
	
	montoBase1As float8 := 0.0;
	montoBase2As float8 := 0.0;
	montoBaseTotalAs float8 := 0.0;
	
	montoSumar float8 := 0;

	recTrabajadores1 record;
	curTrabajadores1 cursor (key1 int4) for select distinct t.id_trabajador, min(t.regimen) as regimen, min(tp.formula_semanal) as formula_semanal,
		min(tp.formula_integral) as formula_integral, min(t.riesgo) as riesgo,  
		min(jornada_semanal) as jornada_semanal, min(tu.jornada_diaria) as jornada_diaria, min(t.id_cargo) as id_cargo
		from trabajador t, tipopersonal tp, turno tu 
		where 
		tp.id_tipo_personal = key1
		and t.id_tipo_personal = tp.id_tipo_personal 
		and t.estatus = 'A'
		and t.id_turno = tu.id_turno
		group by  t.id_trabajador ;
	
	recPromedios record;
	curPromedios cursor (key1 int4) for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, fp.cod_frecuencia_pago, cf.unidades, cf.monto,  cf.monto_restituir, cf.restituir, 
		c.sueldo_basico, c.sueldo_integral, c.compensacion, c.primas_trabajador, c.primas_cargo, c.ajuste_sueldo
		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		concepto c, frecuenciapago fp
		where
		cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ctp.cod_concepto < '5000'
		and cf.id_trabajador = key1
		and (c.sueldo_basico = 'S' 
		or c.sueldo_integral = 'S' 
		or c.compensacion = 'S' 
		or c.primas_trabajador = 'S' 
		or c.primas_cargo = 'S' 
		or c.ajuste_sueldo= 'S');
begin
	open curTrabajadores1 (pIdTipoPersonal);
	loop
		fetch curTrabajadores1 into recTrabajadores1;			
		exit when not found;

		montoBase1Si := 0.0;
		montoBase2Si := 0.0;
		montoBaseTotalSi := 0.0;

		montoBase1Sb := 0.0;
		montoBase2Sb := 0.0;
		montoBaseTotalSb := 0.0;

		montoBase1Co := 0.0;
		montoBase2Co := 0.0;
		montoBaseTotalCo := 0.0;

		montoBase1Pt := 0.0;
		montoBase2Pt := 0.0;
		montoBaseTotalPt := 0.0;

		montoBase1Pc := 0.0;
		montoBase2Pc := 0.0;
		montoBaseTotalPc := 0.0;

		montoBase1As := 0.0;
		montoBase2As := 0.0;
		montoBaseTotalAs := 0.0;

		montoSumar := 0.0;

		open curPromedios(recTrabajadores1.id_trabajador);				
		loop
			fetch curPromedios into recPromedios;			
			exit when not found;

			montoSumar := 0;
			if recPromedios.monto_restituir = 0 then
				montoSumar := recPromedios.monto;
			else
				montoSumar := recPromedios.monto_restituir;
			end if;
			if recPromedios.cod_frecuencia_pago = 4 then
			   if recPromedios.sueldo_integral = 'S' then
				montoBase1Si := montoBase1Si + recPromedios.monto;
			   end if;

			   if recPromedios.sueldo_basico = 'S' then
				montoBase1Sb := montoBase1Sb + recPromedios.monto;
			     elsif recPromedios.compensacion = 'S' then
				montoBase1Co := montoBase1Co + recPromedios.monto;
			     elsif recPromedios.primas_trabajador = 'S' then
				montoBase1Pt := montoBase1Pt + recPromedios.monto;
			     elsif recPromedios.primas_cargo = 'S' then
				montoBase1Pc := montoBase1Pc + recPromedios.monto;
			     elsif recPromedios.ajuste_sueldo = 'S' then
				montoBase1As := montoBase1As + recPromedios.monto;
			   end if;

			elsif (recPromedios.cod_frecuencia_pago > 4 and
                                              recPromedios.cod_frecuencia_pago <> 10) then
			     if recPromedios.sueldo_integral = 'S' then
				montoBase2Si := montoBase2Si + recPromedios.monto;
                                         end if;
			      if recPromedios.sueldo_basico = 'S' then
				montoBase2Sb := montoBase2Sb + recPromedios.monto;
			      elsif recPromedios.compensacion = 'S' then
				montoBase2Co := montoBase2Co + recPromedios.monto;
			      elsif recPromedios.primas_trabajador = 'S' then
				montoBase2Pt := montoBase2Pt + recPromedios.monto;
			      elsif recPromedios.primas_cargo = 'S' then
				montoBase2Pc := montoBase2Pc + recPromedios.monto;
			      elsif recPromedios.ajuste_sueldo = 'S' then
				montoBase2As := montoBase2As + recPromedios.monto;
			      end if;
					    
                                         elsif (recPromedios.cod_frecuencia_pago = 10) then
			        if recPromedios.sueldo_integral = 'S' then
				montoBase2Si := montoBase2Si + recPromedios.monto*4;
                                             end if;
			         if recPromedios.sueldo_basico = 'S' then
				montoBase2Sb := montoBase2Sb + recPromedios.monto*4;
			         elsif recPromedios.compensacion = 'S' then
				montoBase2Co := montoBase2Co + recPromedios.monto*4;
			         elsif recPromedios.primas_trabajador = 'S' then
				montoBase2Pt := montoBase2Pt + recPromedios.monto*4;
			         elsif recPromedios.primas_cargo = 'S' then
				montoBase2Pc := montoBase2Pc + recPromedios.monto*4;
			         elsif recPromedios.ajuste_sueldo = 'S' then
				montoBase2As := montoBase2As + recPromedios.monto*4;
			        end if;
                                     end if;


		end loop;

		close curPromedios;
		
		if recTrabajadores1.formula_integral = '1' then
			montoBaseTotalSi := (((montoBase1Si/7)+(montoBase2Si/30))*365)/12;
			montoBaseTotalSb := (((montoBase1Sb/7)+(montoBase2Sb/30))*365)/12;
			montoBaseTotalCo := (((montoBase1Co/7)+(montoBase2Co/30))*365)/12;
			montoBaseTotalPt := (((montoBase1Pt/7)+(montoBase2Pt/30))*365)/12;
			montoBaseTotalPc := (((montoBase1Pc/7)+(montoBase2Pc/30))*365)/12;
			montoBaseTotalAs := (((montoBase1As/7)+(montoBase2As/30))*365)/12;
		elsif recTrabajadores1.formula_integral = '2' then
			montoBaseTotalSi := (montoBase1Si/7)*30 + montoBase2Si;
			montoBaseTotalSb := (montoBase1Sb/7)*30 + montoBase2Sb;
			montoBaseTotalCo := (montoBase1Co/7)*30 + montoBase2Co;
			montoBaseTotalPt := (montoBase1Pt/7)*30 + montoBase2Pt;
			montoBaseTotalPc := (montoBase1Pc/7)*30 + montoBase2Pc;
			montoBaseTotalAs := (montoBase1As/7)*30 + montoBase2As;
		elsif recTrabajadores1.formula_integral = '3' then
			montoBaseTotalSi := (montoBase1Si*52)/12 + montoBase2Si;
			montoBaseTotalSb := (montoBase1Sb*52)/12 + montoBase2Sb;
			montoBaseTotalCo := (montoBase1Co*52)/12 + montoBase2Co;
			montoBaseTotalPt := (montoBase1Pt*52)/12 + montoBase2Pt;
			montoBaseTotalPc := (montoBase1Pc*52)/12 + montoBase2Pc;
			montoBaseTotalAs := (montoBase1As*52)/12 + montoBase2As;
		end if;
		
		perform update_sueldo_promedio(
			recTrabajadores1.id_trabajador, 
			montoBaseTotalSi,
			montoBaseTotalSb,
			montoBaseTotalCo,
			montoBaseTotalPt,
			montoBaseTotalPc,
			montoBaseTotalAs);			
	end loop;
	close curTrabajadores1;
	
	return true;
end;

$_$;


ALTER FUNCTION public.calcular_promedios_semanal(integer) OWNER TO postgres;

--
-- TOC entry 707 (class 1255 OID 183688)
-- Name: calcular_retroactivo(integer, integer, date, date, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_retroactivo(integer, integer, date, date, integer, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdTipoPersonal alias for $1;
	pIdConceptoTipoPersonal alias for $2;
	pFechaVigencia alias for $3;
	pFechaProceso alias for $4;
	pDias alias for $5;	
	pPeriodicidad alias for $6;
	
	recConcepto record;
	curConcepto cursor (pIdConceptoTipoPersonal int4, pFechaVigencia date) 
		for select (cf.monto - cf.monto_anterior) as monto, 
		fp.cod_frecuencia_pago, cf.id_trabajador, null as fecha_ingreso,
		0 as anio_ingreso, 0 as mes_ingreso, 0 as dia_ingreso
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp, trabajador t
		where cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = t.id_trabajador		
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and t.fecha_ingreso <= pFechaVigencia
		and t.estatus = 'A'
		union
		select (cf.monto - cf.monto_anterior) as monto, 
		fp.cod_frecuencia_pago, cf.id_trabajador, t.fecha_ingreso as fecha_ingreso,
		t.dia_ingreso as dia_ingreso, t.mes_ingreso as mes_ingreso, t.anio_ingreso as anio_ingreso
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp, trabajador t
		where cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = t.id_trabajador		
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and t.fecha_ingreso > pFechaVigencia
		and t.estatus = 'A';

	recConceptoRetroactivo record;
	curConceptoRetroactivo cursor(pIdConceptoTipoPersonal int4, pIdTipoPersonal int4)
		for select ctpr.id_concepto_tipo_personal, fpr.cod_frecuencia_pago, 
		ftpr.id_frecuencia_tipo_personal
		from conceptotipopersonal ctp, frecuenciatipopersonal ftpr, frecuenciapago fpr,
		concepto c, concepto cr, conceptotipopersonal ctpr
		where ctp.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and ctp.id_concepto = c.id_concepto
		and c.id_concepto_retroactivo = cr.id_concepto
		and ctpr.id_concepto = cr.id_concepto
		and ctpr.id_tipo_personal = pIdTipoPersonal
		and ctpr.id_frecuencia_tipo_personal = ftpr.id_frecuencia_tipo_personal
		and ftpr.id_frecuencia_pago = fpr.id_frecuencia_pago;

	idConceptoVariable int4 := 0;
	montoDiario float8 := 0;
	montoPagar float8 := 0;
	anioVigencia float8 := 0;	
	mesVigencia float8 := 0;
	diaVigencia float8 := 0;
	dias float8 := 0;
	unidades float8 := 0;
begin
	-- VERSION 1.2

	anioVigencia := date_part('year', pFechaVigencia);
	mesVigencia := date_part('month', pFechaVigencia);
	diaVigencia := date_part('day', pFechaVigencia);

	open curConceptoRetroactivo(pIdConceptoTipoPersonal, pIdTipoPersonal);
	fetch curConceptoRetroactivo into recConceptoRetroactivo;	
	if recConceptoRetroactivo.id_concepto_tipo_personal is null then
		return 10;
	end if;

	open curConcepto(pIdConceptoTipoPersonal, pFechaVigencia);

	loop
		fetch curConcepto into recConcepto;			
		exit when not found;
		montoPagar := 0;
		dias := 0;
		if recConcepto.id_trabajador = 584 then
			raise notice 'monto %', recConcepto.monto;
		end if;
		if recConcepto.cod_frecuencia_pago = 3 then
			montoDiario := recConcepto.monto/15;
		elsif (recConcepto.cod_frecuencia_pago = 1 or recConcepto.cod_frecuencia_pago = 2)
			or (recConcepto.cod_frecuencia_pago > 4 and recConcepto.cod_frecuencia_pago <> 10 ) then
			montoDiario := recConcepto.monto/30;
		elsif recConcepto.cod_frecuencia_pago = 4 or recConcepto.cod_frecuencia_pago = 10 then
			montoDiario := recConcepto.monto/7;
		end if;
		if recConcepto.id_trabajador = 584 then
			raise notice 'montoDiario %', montoDiario;
		end if;
		if recConcepto.fecha_ingreso is null then
			montoPagar := montoDiario * pDias;
			if recConcepto.id_trabajador = 584 then
				raise notice 'fecha_is_null';
				raise notice 'montoPagar%',montoPagar;
			end if;
		else
			if pPeriodicidad = 'S' then
				dias := pFechaVigencia - recConcepto.fecha_ingreso;				
			else
				
				if anioVigencia <> recConcepto.anio_ingreso then
					dias := (30-(recConcepto.dia_ingreso-1)) + (30*((mesVigencia+12)-(recConcepto.mes_ingreso+1))) + (diaVigencia-1);	
				else
					dias := (30-(recConcepto.dia_ingreso-1)) + (30*(mesVigencia-(recConcepto.mes_ingreso+1))) + (diaVigencia-1);
				end if;
			end if;
			montoPagar := montoDiario * dias;
		end if;		
		if montoPagar > 0 then
			idConceptoVariable := last_id_conceptovariable()+1;				
			if idConceptoVariable is null then				
				idConceptoVariable := 1;				
			end if;

			if dias = 0 then
				unidades := pDias;
			else
				unidades := dias;
			end if;

			--if recConceptoRetroactivo.cod_frecuencia_pago = 3 then
			--	montoPagar := montoPagar/2;
			--end if;

			perform add_conceptovariable(
				idConceptoVariable,
				recConcepto.id_trabajador,
				recConceptoRetroactivo.id_concepto_tipo_personal,
				recConceptoRetroactivo.id_frecuencia_tipo_personal,
				unidades,
				montoPagar,
				pFechaProceso,
				null,
				'A',
				0,
				0);
		end if;
	end loop;
	close curConcepto;
	close curConceptoRetroactivo;		
	return 0;

end;

$_$;


ALTER FUNCTION public.calcular_retroactivo(integer, integer, date, date, integer, character varying) OWNER TO postgres;

--
-- TOC entry 708 (class 1255 OID 183689)
-- Name: calcular_retroactivo(integer, integer, date, date, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_retroactivo(integer, integer, date, date, integer, character varying, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdTipoPersonal alias for $1;
	pIdConceptoTipoPersonal alias for $2;
	pFechaVigencia alias for $3;
	pFechaProceso alias for $4;
	pDias alias for $5;	
	pPeriodicidad alias for $6;
	pIdFrecuenciaTipoPersonal alias for $7;
	
	recConcepto record;
	curConcepto cursor (pIdConceptoTipoPersonal int4, pFechaVigencia date) 
		for select (cf.monto - cf.monto_anterior) as monto, 
		fp.cod_frecuencia_pago, cf.id_trabajador, null as fecha_ingreso,
		0 as anio_ingreso, 0 as mes_ingreso, 0 as dia_ingreso
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp, trabajador t
		where cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = t.id_trabajador		
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and t.fecha_ingreso <= pFechaVigencia
		and t.estatus = 'A'
		union
		select (cf.monto - cf.monto_anterior) as monto, 
		fp.cod_frecuencia_pago, cf.id_trabajador, t.fecha_ingreso as fecha_ingreso,
		t.dia_ingreso as dia_ingreso, t.mes_ingreso as mes_ingreso, t.anio_ingreso as anio_ingreso
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp, trabajador t
		where cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = t.id_trabajador		
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and t.fecha_ingreso > pFechaVigencia
		and t.estatus = 'A';

	recConceptoRetroactivo record;
	curConceptoRetroactivo cursor(pIdConceptoTipoPersonal int4, pIdTipoPersonal int4)
		for select ctpr.id_concepto_tipo_personal, fpr.cod_frecuencia_pago, 
		ftpr.id_frecuencia_tipo_personal
		from conceptotipopersonal ctp, frecuenciatipopersonal ftpr, frecuenciapago fpr,
		concepto c, concepto cr, conceptotipopersonal ctpr
		where ctp.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and ctp.id_concepto = c.id_concepto
		and c.id_concepto_retroactivo = cr.id_concepto
		and ctpr.id_concepto = cr.id_concepto
		and ctpr.id_tipo_personal = pIdTipoPersonal
		and ctpr.id_frecuencia_tipo_personal = ftpr.id_frecuencia_tipo_personal
		and ftpr.id_frecuencia_pago = fpr.id_frecuencia_pago;

	idConceptoVariable int4 := 0;
	montoDiario float8 := 0;
	montoPagar float8 := 0;
	anioVigencia float8 := 0;	
	mesVigencia float8 := 0;
	diaVigencia float8 := 0;
	dias float8 := 0;
	unidades float8 := 0;
begin
	-- VERSION 1.2

	anioVigencia := date_part('year', pFechaVigencia);
	mesVigencia := date_part('month', pFechaVigencia);
	diaVigencia := date_part('day', pFechaVigencia);

	open curConceptoRetroactivo(pIdConceptoTipoPersonal, pIdTipoPersonal);
	fetch curConceptoRetroactivo into recConceptoRetroactivo;	
	if recConceptoRetroactivo.id_concepto_tipo_personal is null then
		return 10;
	end if;

	open curConcepto(pIdConceptoTipoPersonal, pFechaVigencia);

	loop
		fetch curConcepto into recConcepto;			
		exit when not found;
		montoPagar := 0;
		dias := 0;
		if recConcepto.id_trabajador = 584 then
			raise notice 'monto %', recConcepto.monto;
		end if;
		if recConcepto.cod_frecuencia_pago = 3 then
			montoDiario := recConcepto.monto/15;
		elsif (recConcepto.cod_frecuencia_pago = 1 or recConcepto.cod_frecuencia_pago = 2)
			or (recConcepto.cod_frecuencia_pago > 4 and recConcepto.cod_frecuencia_pago <> 10 ) then
			montoDiario := recConcepto.monto/30;
		elsif recConcepto.cod_frecuencia_pago = 4 or recConcepto.cod_frecuencia_pago = 10 then
			montoDiario := recConcepto.monto/7;
		end if;
		if recConcepto.id_trabajador = 584 then
			raise notice 'montoDiario %', montoDiario;
		end if;
		if recConcepto.fecha_ingreso is null then
			montoPagar := montoDiario * pDias;
			if recConcepto.id_trabajador = 584 then
				raise notice 'fecha_is_null';
				raise notice 'montoPagar%',montoPagar;
			end if;
		else
			if pPeriodicidad = 'S' then
				dias := pFechaVigencia - recConcepto.fecha_ingreso;				
			else
				
				if anioVigencia <> recConcepto.anio_ingreso then
					dias := (30-(recConcepto.dia_ingreso-1)) + (30*((mesVigencia+12)-(recConcepto.mes_ingreso+1))) + (diaVigencia-1);	
				else
					dias := (30-(recConcepto.dia_ingreso-1)) + (30*(mesVigencia-(recConcepto.mes_ingreso+1))) + (diaVigencia-1);
				end if;
			end if;
			montoPagar := montoDiario * dias;
		end if;		
		if montoPagar > 0 then
			idConceptoVariable := last_id_conceptovariable()+1;				
			if idConceptoVariable is null then				
				idConceptoVariable := 1;				
			end if;

			if dias = 0 then
				unidades := pDias;
			else
				unidades := dias;
			end if;

			--if recConceptoRetroactivo.cod_frecuencia_pago = 3 then
			--	montoPagar := montoPagar/2;
			--end if;

			perform add_conceptovariable(
				idConceptoVariable,
				recConcepto.id_trabajador,
				recConceptoRetroactivo.id_concepto_tipo_personal,
				pIdFrecuenciaTipoPersonal,
				unidades,
				montoPagar,
				pFechaProceso,
				null,
				'A',
				0,
				0);
		end if;
	end loop;
	close curConcepto;
	close curConceptoRetroactivo;		
	return 0;

end;

$_$;


ALTER FUNCTION public.calcular_retroactivo(integer, integer, date, date, integer, character varying, integer) OWNER TO postgres;

--
-- TOC entry 614 (class 1255 OID 183690)
-- Name: calcular_sueldo_promedio_mensual(integer, integer, character varying, character varying, boolean, integer, boolean, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_sueldo_promedio_mensual(integer, integer, character varying, character varying, boolean, integer, boolean, integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdOrganismo alias for $1;	
	pIdGrupoNomina alias for $2;
	pPeriodicidad alias for $3;
	pRecalculo alias for $4;
	pPrimeraQuincena alias for $5;
	pSemanaMes alias for $6;
	pTieneSemana5 alias for $7;
	pNumeroSemanaMes alias for $8;

	idGrupoOrganismo int4 := 0;

	montoCalculado float8 := 0;

	montoVariableSso float8 := 0.0;
	montoVariableLph float8 := 0.0;
	montoVariableFju float8 := 0.0;
        
	montoVariableSumarSso float8 := 0.0;
	montoVariableSumarLph float8 := 0.0;
	montoVariableSumarFju float8 := 0.0;


	montoBase1Sso float8 := 0.0;
	montoBase2Sso float8 := 0.0;
	montoBase5Sso float8 := 0.0;
	montoBase6Sso float8 := 0.0;
	montoBase7Sso float8 := 0.0;
	montoBase8Sso float8 := 0.0;
	montoBase9Sso float8 := 0.0;
	montoBaseTotalSso float8 := 0.0;
        montoBaseTotalSpf float8 := 0.0;
	retencionSso float8 := 0.0;

	retencionSpf float8 := 0.0;

	montoBase1Lph float8 := 0.0;
	montoBase2Lph float8 := 0.0;
	montoBase5Lph float8 := 0.0;
	montoBase6Lph float8 := 0.0;
	montoBase7Lph float8 := 0.0;
	montoBase8Lph float8 := 0.0;
	montoBase9Lph float8 := 0.0;
	montoBaseTotalLph float8 := 0.0;
	retencionLph float8 := 0.0;

	montoBase1Fju float8 := 0.0;
	montoBase2Fju float8 := 0.0;
	montoBase5Fju float8 := 0.0;
	montoBase6Fju float8 := 0.0;
	montoBase7Fju float8 := 0.0;
	montoBase8Fju float8 := 0.0;
	montoBase9Fju float8 := 0.0;
	montoBaseTotalFju float8 := 0.0;
	retencionFju float8 := 0.0;

	montoBase1Si float8 := 0.0;
	montoBase2Si float8 := 0.0;
	montoBaseTotalSi float8 := 0.0;

	montoBase1Sb float8 := 0.0;
	montoBase2Sb float8 := 0.0;
	montoBaseTotalSb float8 := 0.0;

	montoBase1Co float8 := 0.0;
	montoBase2Co float8 := 0.0;
	montoBaseTotalCo float8 := 0.0;

	montoBase1Pt float8 := 0.0;
	montoBase2Pt float8 := 0.0;
	montoBaseTotalPt float8 := 0.0;

	montoBase1Pc float8 := 0.0;
	montoBase2Pc float8 := 0.0;
	montoBaseTotalPc float8 := 0.0;

	montoBase1As float8 := 0.0;
	montoBase2As float8 := 0.0;
	montoBaseTotalAs float8 := 0.0;

	frecuenciaSsoSemanal boolean := false;
	frecuenciaFjuSemanal boolean := false;
	frecuenciaLphSemanal boolean := false;

	codFrecuenciaSso int4 := 0;
	codFrecuenciaLph int4 := 0;
	codFrecuenciaFju int4 := 0;

	aporteSso float8 := 0;
	aporteLph float8 := 0;
	aporteFju float8 := 0;
	aporteSpf float8 := 0;
	montoSumar float8 := 0;

	recTrabajadores1 record;
	curTrabajadores1 cursor (key1 int4) for select distinct t.id_trabajador, min(t.regimen) as regimen, min(tp.formula_semanal) as formula_semanal,
		min(tp.formula_integral) as formula_integral, min(t.riesgo) as riesgo,  
		min(jornada_semanal) as jornada_semanal, min(tu.jornada_diaria) as jornada_diaria, min(t.id_cargo) as id_cargo
		from trabajador t, tipopersonal tp, turno tu 
		where 
		tp.id_tipo_personal = key1
		and t.id_tipo_personal = tp.id_tipo_personal 
		and t.estatus = 'A'
		and t.id_turno = tu.id_turno
		group by  t.id_trabajador ;

	recConceptosCalculados record;
	curConceptosCalculados cursor (key1 int4) for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, fp.cod_frecuencia_pago, cf.unidades, ctp.tipo, ctp.valor, ctp.tope_minimo, ctp.tope_maximo, ctp.unidades as ctp_unidades
		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		concepto c, frecuenciapago fp
		where
		cf.id_trabajador = key1
		and  cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and ctp.recalculo = 'S'
		and c.cod_concepto not in('5001', '5003', '5004')
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;

	recTrabajadores2 record;
	curTrabajadores2 cursor (key1 int4) for select distinct cf.id_concepto_fijo as id, cf.monto, fp2.cod_frecuencia_pago, c.cod_concepto, fp.cod_frecuencia_pago as frecuencia_retencion,  cf.monto_restituir, cf.restituir, 'F' as tipo_concepto, sp.monto_variable_sso, sp.monto_variable_lph, sp.monto_variable_fju 
		from trabajador t, conceptotipopersonal ctp,conceptoasociado ca, frecuenciatipopersonal ftp2, frecuenciatipopersonal ftp, 
		conceptofijo cf, concepto c, conceptotipopersonal ctp2, frecuenciapago fp2, frecuenciapago fp, sueldopromedio sp
		where
		t.id_trabajador = key1
		and cf.id_trabajador   =  t.id_trabajador 
		and t.id_trabajador = sp.id_trabajador
		and c.cod_concepto in('5001', '5003', '5004')
		and ctp.id_concepto = c.id_concepto
		and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and cf.id_concepto_tipo_personal = ca.id_concepto_asociar
		and ca.id_concepto_asociar = ctp2.id_concepto_tipo_personal
		and cf.id_frecuencia_tipo_personal = ftp2.id_frecuencia_tipo_personal
		and ftp2.id_frecuencia_pago = fp2.id_frecuencia_pago
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		union 
		select distinct cv.id_concepto_variable as id, cv.monto, fp2.cod_frecuencia_pago, c.cod_concepto, fp.cod_frecuencia_pago as frecuencia_retencion,  0 as monto_restituir, 'N' as restituir, 'V' as tipo_concepto, sp.monto_variable_sso, sp.monto_variable_lph, sp.monto_variable_fju 
		from trabajador t, conceptotipopersonal ctp,conceptoasociado ca, frecuenciatipopersonal ftp2, frecuenciatipopersonal ftp, 
		conceptovariable cv, concepto c, conceptotipopersonal ctp2, frecuenciapago fp2, frecuenciapago fp, sueldopromedio sp
		where
		t.id_trabajador = key1
		and cv.id_trabajador   =  t.id_trabajador 
		and c.cod_concepto in('5001', '5003', '5004')
		and t.id_trabajador = sp.id_trabajador
		and ctp.id_concepto = c.id_concepto
		and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and cv.id_concepto_tipo_personal = ca.id_concepto_asociar
		and ca.id_concepto_asociar = ctp2.id_concepto_tipo_personal
		and cv.id_frecuencia_tipo_personal = ftp2.id_frecuencia_tipo_personal
		and ftp2.id_frecuencia_pago = fp2.id_frecuencia_pago
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;

	recPromedios record;
	curPromedios cursor (key1 int4) for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, fp.cod_frecuencia_pago, cf.unidades, cf.monto,  cf.monto_restituir, cf.restituir, 
		c.sueldo_basico, c.sueldo_integral, c.compensacion, c.primas_trabajador, c.primas_cargo, c.ajuste_sueldo
		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		concepto c, frecuenciapago fp
		where
		cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ctp.cod_concepto < '5000'
		and cf.id_trabajador = key1
		and (c.sueldo_basico = 'S' 
		or c.sueldo_integral = 'S' 
		or c.compensacion = 'S' 
		or c.primas_trabajador = 'S' 
		or c.primas_cargo = 'S' 
		or c.ajuste_sueldo= 'S');

	recTipoPersonal record;
	curTipoPersonal cursor (key1 int4) for select id_tipo_personal, id_grupo_organismo 
		from tipopersonal
		where
		id_grupo_nomina = key1;
	
	selParametroGobierno parametrogobierno;

begin
	 raise notice  'inicio';	
	perform update_sueldo_promedio(pIdGrupoNomina);
	open curTipoPersonal (pIdGrupoNomina);
                  raise notice  'TIPO PERSONAL';
	loop
		fetch curTipoPersonal into recTipoPersonal;			
		exit when not found;
		select into selParametroGobierno * from parametrogobierno where id_grupo_organismo = recTipoPersonal.id_grupo_organismo;
		open curTrabajadores1 (recTipoPersonal.id_tipo_personal);
                                       raise notice  'TRABAJADORES1';

		loop
			fetch curTrabajadores1 into recTrabajadores1;			
                                                   --raise notice  'ID_TRABAJADOR ';

			exit when not found;
						if pRecalculo = 'S' then
				open curConceptosCalculados(recTrabajadores1.id_trabajador);
				loop
					montoCalculado := 0;
					fetch curConceptosCalculados into recConceptosCalculados;			
					exit when not found;
					montoCalculado := calcular_concepto(
							recConceptosCalculados.id_concepto_tipo_personal,
							recTrabajadores1.id_trabajador,
							recConceptosCalculados.unidades,
							recConceptosCalculados.tipo,
							recConceptosCalculados.cod_frecuencia_pago,
							recTrabajadores1.jornada_diaria,
							recTrabajadores1.jornada_semanal,
							recTrabajadores1.formula_integral,
							recTrabajadores1.formula_semanal,
							recTrabajadores1.id_cargo,
							recConceptosCalculados.valor,
							recConceptosCalculados.tope_minimo,
							recConceptosCalculados.tope_maximo);
						
					perform update_monto_concepto_fijo(recConceptosCalculados.id_concepto_fijo, montoCalculado);
				end loop;				

				close curConceptosCalculados;

			end if;

			montoBase1Sso := 0.0;
			montoBase2Sso := 0.0;
			montoBaseTotalSso := 0.0;
			retencionSso := 0.0;

			montoBase1Lph := 0.0;
			montoBase2Lph := 0.0;
			montoBaseTotalLph := 0.0;
			retencionLph := 0.0;

			montoBase1Fju := 0.0;
			montoBase2Fju := 0.0;
			montoBaseTotalFju := 0.0;
			retencionFju := 0.0;	

			codFrecuenciaSso := 0;
			aporteSso := 0;
			aporteLph := 0;
			aporteFju := 0;
			aporteSpf := 0;

			montoBase1Si := 0.0;
			montoBase2Si := 0.0;
			montoBaseTotalSi := 0.0;

			montoBase1Sb := 0.0;
			montoBase2Sb := 0.0;
			montoBaseTotalSb := 0.0;

			montoBase1Co := 0.0;
			montoBase2Co := 0.0;
			montoBaseTotalCo := 0.0;

			montoBase1Pt := 0.0;
			montoBase2Pt := 0.0;
			montoBaseTotalPt := 0.0;

			montoBase1Pc := 0.0;
			montoBase2Pc := 0.0;
			montoBaseTotalPc := 0.0;

			montoBase1As := 0.0;
			montoBase2As := 0.0;
			montoBaseTotalAs := 0.0;
			montoVariableSso := 0.0;
			montoVariableLph := 0.0;
			montoVariableFju := 0.0;

			montoVariableSumarSso := 0.0;
			montoVariableSumarLph := 0.0;
			montoVariableSumarFju := 0.0;
			montoSumar := 0.0;

			open curTrabajadores2 (recTrabajadores1.id_trabajador, recTrabajadores1.id_trabajador);
			loop
				fetch curTrabajadores2 into recTrabajadores2;			
				exit when not found;

				if recTrabajadores2.monto_restituir = 0 then
					montoSumar := recTrabajadores2.monto;
				else
					montoSumar := recTrabajadores2.monto_restituir;
				end if;

				if recTrabajadores2.tipo_concepto = 'V' then
					if pPrimeraQuincena = true then
						if recTrabajadores2.frecuencia_retencion = 3 then
							if recTrabajadores2.cod_frecuencia_pago = 1 then
								montoSumar := montoSumar * 2;
							end if;
						elsif recTrabajadores2.frecuencia_retencion = 2 then
							if recTrabajadores2.cod_frecuencia_pago = 1 then
								if recTrabajadores2.cod_concepto = '5001' then
									montoVariableSso := montoVariableSso + montoSumar;	
								elsif recTrabajadores2.cod_concepto = '5003' then
									montoVariableLph := montoVariableLph + montoSumar;
								elsif recTrabajadores2.cod_concepto = '5004' then
									montoVariableFju := montoVariableFju + montoSumar;
								end if;
							end if;
						end if;
					else  ---- 2d quincena
						if recTrabajadores2.frecuencia_retencion = 3 then
							if recTrabajadores2.cod_frecuencia_pago = 2 then
								montoSumar := montoSumar*2;	
							end if;
						end if;
					end if;
				end if;
				
				if recTrabajadores2.cod_concepto = '5001' then
					if recTrabajadores2.cod_frecuencia_pago = 3 then
						montoBase1Sso := montoBase1Sso + (montoSumar*2);
					else
						montoBase2Sso := montoBase2Sso + montoSumar;
					end if;
				elsif recTrabajadores2.cod_concepto = '5003' then
					if recTrabajadores2.cod_frecuencia_pago = 3 then
						montoBase1Lph := montoBase1Lph + (recTrabajadores2.monto*2);
					else
						montoBase2Lph := montoBase2Lph + (recTrabajadores2.monto);
					end if;
				elsif recTrabajadores2.cod_concepto = '5004' then
					if recTrabajadores2.cod_frecuencia_pago = 3 then
						montoBase1Fju := montoBase1Fju + (recTrabajadores2.monto*2);
					else
						montoBase2Fju := montoBase2Fju + (recTrabajadores2.monto);
					end if;
				end if;

				if pPrimeraQuincena = false then				
					montoVariableSumarSso := recTrabajadores2.monto_variable_sso;
					montoVariableSumarLph := recTrabajadores2.monto_variable_lph;
					montoVariableSumarFju := recTrabajadores2.monto_variable_fju;								
				end if;
			end loop;

			close curTrabajadores2;

			montoBaseTotalSso := montoBase1Sso + montoBase2Sso + montoVariableSumarSso;
			montoBaseTotalLph := montoBase1Lph + montoBase2Lph + montoVariableSumarLph;			
			montoBaseTotalFju := montoBase1Fju + montoBase2Fju + montoVariableSumarFju;
			montoBaseTotalSpf := montoBaseTotalSso;

			montoBaseTotalSso := calcular_limite_mensual(montoBaseTotalSso,pPeriodicidad, selParametroGobierno.limmen_sso);
			montoBaseTotalSpf := calcular_limite_mensual(montoBaseTotalSpf,pPeriodicidad, selParametroGobierno.limmen_spf);
			montoBaseTotalLph := calcular_limite_mensual(montoBaseTotalLph, pPeriodicidad, selParametroGobierno.limmen_lph);
			montoBaseTotalFju := calcular_limite_mensual(montoBaseTotalFju, pPeriodicidad, selParametroGobierno.limmen_fju);
		
			montoBaseTotalSso := montoBaseTotalSso *12/52;			
			montoBaseTotalSpf := montoBaseTotalSpf *12/52;

			---
                        ---Calcula el aporte patronal seguro social
                        ---
			if recTrabajadores1.regimen = 'I' then   ---regimen integral sso
				retencionSso := (montoBaseTotalSso * selParametroGobierno.porcentaje_integral) / 100;
			else   ---regimen parcial sso
				retencionSso := (montoBaseTotalSso * selParametroGobierno.porcentaje_parcial) / 100;
			end if;
                        ---
                        ---verifica el riesgo patronal
                        ---
			if recTrabajadores1.riesgo = '1' then
				aporteSso := montoBaseTotalSso * selParametroGobierno.porcbpat_sso/100;
			elsif recTrabajadores1.riesgo = '1' then
				aporteSso := montoBaseTotalSso * selParametroGobierno.porcmpat_sso/100;
			else
				aporteSso := montoBaseTotalSso * selParametroGobierno.porcapat_sso/100;
			end if;

			---
                        ---Calcula el aporte patronal seguro paro forzoso
                        ---

			retencionSpf := (montoBaseTotalSpf * selParametroGobierno.porctrab_spf) / 100;
                   	aporteSpf := montoBaseTotalSpf * selParametroGobierno.porcpat_spf/100;
                        ---
                        ---Calcula el aporte patronal politica habitacional
                        ---
			retencionLph := (montoBaseTotalLph * selParametroGobierno.porctrab_lph) / 100;
			aporteLph := montoBaseTotalLph * selParametroGobierno.porcpat_lph/100;
			retencionFju := (montoBaseTotalFju * selParametroGobierno.porctrab_fju) / 100;
			aporteFju := montoBaseTotalFju * selParametroGobierno.porcpat_fju/100;

			if pRecalculo = 'S' then
				open curPromedios(recTrabajadores1.id_trabajador);
				loop
					fetch curPromedios into recPromedios;			
					exit when not found;
					montoSumar := 0;
					if recPromedios.monto_restituir = 0 then
						montoSumar := recPromedios.monto;
					else
						montoSumar := recPromedios.monto_restituir;
					end if;

					if recPromedios.sueldo_integral = 'S' then
						if recPromedios.cod_frecuencia_pago = 3 then
							montoBase1Si := montoBase1Si + (montoSumar*2);
						else
							montoBase2Si := montoBase2Si + (montoSumar);
						end if;
					end if;

					if recPromedios.sueldo_basico = 'S' then
						if recPromedios.cod_frecuencia_pago = 3 then
							montoBase1Sb := montoBase1Sb + (montoSumar*2);
						else
							montoBase2Sb := montoBase2Sb + (montoSumar);
						end if;
					elsif recPromedios.compensacion = 'S' then
						if recPromedios.cod_frecuencia_pago = 3 then
							montoBase1Co := montoBase1Co + (montoSumar*2);
						else
							montoBase2Co := montoBase2Co+ (montoSumar);
						end if;
					elsif recPromedios.primas_trabajador = 'S' then
						if recPromedios.cod_frecuencia_pago = 3 then
							montoBase1Pt := montoBase1Pt + (montoSumar*2);
						else
							montoBase2Pt := montoBase2Pt+ (montoSumar);
						end if;
					elsif recPromedios.primas_cargo = 'S' then
						if recPromedios.cod_frecuencia_pago = 3 then
							montoBase1Pc := montoBase1Pc + (montoSumar*2);
						else
							montoBase2Pc := montoBase2Pc+ (montoSumar);
						end if;
					elsif recPromedios.ajuste_sueldo = 'S' then
						if recPromedios.cod_frecuencia_pago = 3 then
							montoBase1As := montoBase1As + (montoSumar*2);
						else
							montoBase1As := montoBase1As + (montoSumar*2);
						end if;
					end if;
				end loop;
				close curPromedios;
				montoBaseTotalSi := montoBase1Si + montoBase2Si;
				montoBaseTotalSb := montoBase1Sb + montoBase2Sb;
				montoBaseTotalCo := montoBase1Co + montoBase2Co;
				montoBaseTotalPt := montoBase1Pt + montoBase2Pt;
				montoBaseTotalPc := montoBase1Pc + montoBase2Pc;
				montoBaseTotalAs := montoBase1As + montoBase2As;

			end if;
					perform update_sueldo_promedio(
					recTrabajadores1.id_trabajador, 
					montoBaseTotalSso,
					retencionSso,
					retencionSpf,
					montoBaseTotalLph,
					retencionLph,
					montoBaseTotalFju,
					retencionFju,
					aporteSso,
					aporteLph,
					aporteSpf,
					aporteFju);

			if pRecalculo = 'S'  then
				perform update_sueldo_promedio(
					recTrabajadores1.id_trabajador, 
					montoBaseTotalSi,
					montoBaseTotalSb,
					montoBaseTotalCo,
					montoBaseTotalPt,
					montoBaseTotalPc,
					montoBaseTotalAs);
			end if;

			if pPrimeraQuincena = true then
				perform update_sueldo_promedio(
				recTrabajadores1.id_trabajador, 
				montoVariableSso,
				montoVariableLph,
				montoVariableFju);
			end if;

		end loop;
		close curTrabajadores1;

	end loop;

	close curTipoPersonal;

	return true;

end;

$_$;


ALTER FUNCTION public.calcular_sueldo_promedio_mensual(integer, integer, character varying, character varying, boolean, integer, boolean, integer) OWNER TO postgres;

--
-- TOC entry 615 (class 1255 OID 183692)
-- Name: calcular_sueldo_promedio_semanal(integer, integer, character varying, character varying, boolean, integer, boolean, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION calcular_sueldo_promedio_semanal(integer, integer, character varying, character varying, boolean, integer, boolean, integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdOrganismo alias for $1;	
	pIdGrupoNomina alias for $2;
	pPeriodicidad alias for $3;
	pRecalculo alias for $4;
	pPrimeraQuincena alias for $5;
	pSemanaDelMes alias for $6;
	pTieneSemana5 alias for $7;
	pNumeroSemanaMes alias for $8;

	idGrupoOrganismo int4 := 0;

	montoCalculado float8 := 0;

	montoVariableSso float8 := 0.0;
	montoVariableLph float8 := 0.0;
	montoVariableFju float8 := 0.0;
	montoVariableSumarSso float8 := 0.0;
	montoVariableSumarLph float8 := 0.0;
	montoVariableSumarFju float8 := 0.0;
	
	montoBase1Sso float8 := 0.0;
	montoBase2Sso float8 := 0.0;
	montoBase5Sso float8 := 0.0;
	montoBase6Sso float8 := 0.0;
	montoBase7Sso float8 := 0.0;
	montoBase8Sso float8 := 0.0;
	montoBase9Sso float8 := 0.0;
	montoBaseTotalSso float8 := 0.0;
        montoBaseTotalSpf float8 := 0.0;
	retencionSso float8 := 0.0;

	retencionSpf float8 := 0.0;

	montoBase1Lph float8 := 0.0;
	montoBase2Lph float8 := 0.0;
	montoBase5Lph float8 := 0.0;
	montoBase6Lph float8 := 0.0;
	montoBase7Lph float8 := 0.0;
	montoBase8Lph float8 := 0.0;
	montoBase9Lph float8 := 0.0;
	montoBaseTotalLph float8 := 0.0;
	retencionLph float8 := 0.0;
	
	montoBase1Fju float8 := 0.0;
	montoBase2Fju float8 := 0.0;
	montoBase5Fju float8 := 0.0;
	montoBase6Fju float8 := 0.0;
	montoBase7Fju float8 := 0.0;
	montoBase8Fju float8 := 0.0;
	montoBase9Fju float8 := 0.0;
	montoBaseTotalFju float8 := 0.0;
	retencionFju float8 := 0.0;


	montoBase1Si float8 := 0.0;
	montoBase2Si float8 := 0.0;
	montoBaseTotalSi float8 := 0.0;

	montoBase1Sb float8 := 0.0;
	montoBase2Sb float8 := 0.0;
	montoBaseTotalSb float8 := 0.0;

	montoBase1Co float8 := 0.0;
	montoBase2Co float8 := 0.0;
	montoBaseTotalCo float8 := 0.0;

	montoBase1Pt float8 := 0.0;
	montoBase2Pt float8 := 0.0;
	montoBaseTotalPt float8 := 0.0;

	montoBase1Pc float8 := 0.0;
	montoBase2Pc float8 := 0.0;
	montoBaseTotalPc float8 := 0.0;

	montoBase1As float8 := 0.0;
	montoBase2As float8 := 0.0;
	montoBaseTotalAs float8 := 0.0;
	

	frecuenciaSsoSemanal boolean := false;
	frecuenciaFjuSemanal boolean := false;
	frecuenciaLphSemanal boolean := false;

	codFrecuenciaSso int4 := 0;
	codFrecuenciaLph int4 := 0;
	codFrecuenciaFju int4 := 0;

	aporteSso float8 := 0;
	aporteLph float8 := 0;
	aporteFju float8 := 0;
	aporteSpf float8 := 0;

	montoSumar float8 := 0;

	recTrabajadores1 record;
	curTrabajadores1 cursor (key1 int4) for select distinct t.id_trabajador, min(t.regimen) as regimen, 

min(tp.formula_semanal) as formula_semanal,
		min(tp.formula_integral) as formula_integral, min(t.riesgo) as riesgo,  
		min(jornada_semanal) as jornada_semanal, min(tu.jornada_diaria) as jornada_diaria, min(t.id_cargo) as 

id_cargo
		from trabajador t, tipopersonal tp, turno tu 
		where 
		tp.id_tipo_personal = key1
		and t.id_tipo_personal = tp.id_tipo_personal 
		and t.estatus = 'A'
		and t.id_turno = tu.id_turno
		group by  t.id_trabajador ;

	recConceptosCalculados record;
	curConceptosCalculados cursor (key1 int4) for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, 

fp.cod_frecuencia_pago, cf.unidades, ctp.tipo, ctp.valor, ctp.tope_minimo, ctp.tope_maximo, ctp.unidades as ctp_unidades
		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		concepto c, frecuenciapago fp
		where
		cf.id_trabajador = key1
		and  cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and ctp.recalculo = 'S'
		and c.cod_concepto not in('5001', '5003', '5004')
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;
	
	recTrabajadores2 record;
	curTrabajadores2 cursor (key1 int4) for select distinct cf.id_concepto_fijo as id, cf.monto, fp2.cod_frecuencia_pago, 

c.cod_concepto, fp.cod_frecuencia_pago as frecuencia_retencion,  cf.monto_restituir, cf.restituir, 'F' as tipo_concepto, 

sp.monto_variable_sso, sp.monto_variable_lph, sp.monto_variable_fju 
		from trabajador t, conceptotipopersonal ctp,conceptoasociado ca, frecuenciatipopersonal ftp2, 

frecuenciatipopersonal ftp, 
		conceptofijo cf, concepto c, conceptotipopersonal ctp2, frecuenciapago fp2, frecuenciapago fp, sueldopromedio 

sp
		where
		t.id_trabajador = key1
		and cf.id_trabajador   =  t.id_trabajador 
		and t.id_trabajador = sp.id_trabajador
		and c.cod_concepto in('5001', '5003', '5004')
		and ctp.id_concepto = c.id_concepto
		and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and cf.id_concepto_tipo_personal = ca.id_concepto_asociar
		and ca.id_concepto_asociar = ctp2.id_concepto_tipo_personal
		and cf.id_frecuencia_tipo_personal = ftp2.id_frecuencia_tipo_personal
		and ftp2.id_frecuencia_pago = fp2.id_frecuencia_pago
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		union 
		select distinct cv.id_concepto_variable as id, cv.monto, fp2.cod_frecuencia_pago, c.cod_concepto, 

fp.cod_frecuencia_pago as frecuencia_retencion,  0 as monto_restituir, 'N' as restituir, 'V' as tipo_concepto, 

sp.monto_variable_sso, sp.monto_variable_lph, sp.monto_variable_fju 
		from trabajador t, conceptotipopersonal ctp,conceptoasociado ca, frecuenciatipopersonal ftp2, 

frecuenciatipopersonal ftp, 
		conceptovariable cv, concepto c, conceptotipopersonal ctp2, frecuenciapago fp2, frecuenciapago fp, 

sueldopromedio sp
		where
		t.id_trabajador = key1
		and cv.id_trabajador   =  t.id_trabajador 
		and c.cod_concepto in('5001', '5003', '5004')
		and t.id_trabajador = sp.id_trabajador
		and ctp.id_concepto = c.id_concepto
		and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and cv.id_concepto_tipo_personal = ca.id_concepto_asociar
		and ca.id_concepto_asociar = ctp2.id_concepto_tipo_personal
		and cv.id_frecuencia_tipo_personal = ftp2.id_frecuencia_tipo_personal
		and ftp2.id_frecuencia_pago = fp2.id_frecuencia_pago
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;

	recPromedios record;
	curPromedios cursor (key1 int4) for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, 

fp.cod_frecuencia_pago, cf.unidades, cf.monto,  cf.monto_restituir, cf.restituir, 
		c.sueldo_basico, c.sueldo_integral, c.compensacion, c.primas_trabajador, c.primas_cargo, c.ajuste_sueldo
		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		concepto c, frecuenciapago fp
		where
		cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ctp.cod_concepto < '5000'
		and cf.id_trabajador = key1
		and (c.sueldo_basico = 'S' 
		or c.sueldo_integral = 'S' 
		or c.compensacion = 'S' 
		or c.primas_trabajador = 'S' 
		or c.primas_cargo = 'S' 
		or c.ajuste_sueldo= 'S');

	recTipoPersonal record;
	curTipoPersonal cursor (key1 int4) for select id_tipo_personal, id_grupo_organismo 
		from tipopersonal
		where
		id_grupo_nomina = key1;

	selParametroGobierno parametrogobierno;

begin

	raise notice 'inicio';


-- Se coloco en comentario PC

	perform update_sueldo_promedio(pIdGrupoNomina);

	open curTipoPersonal (pIdGrupoNomina);

	raise notice 'TP';

	loop

		fetch curTipoPersonal into recTipoPersonal;			
		exit when not found;

		select into selParametroGobierno * from parametrogobierno where id_grupo_organismo = 

recTipoPersonal.id_grupo_organismo;

		open curTrabajadores1 (recTipoPersonal.id_tipo_personal);

		raise notice 'trabajadores_uno';

		loop

			fetch curTrabajadores1 into recTrabajadores1;			
			exit when not found;

                raise notice 'trabajadores_dos';

			if pRecalculo = 'S' then
				open curConceptosCalculados(recTrabajadores1.id_trabajador);

				loop
					montoCalculado := 0;

					fetch curConceptosCalculados into recConceptosCalculados;			
					exit when not found;

					montoCalculado := calcular_concepto(
						recConceptosCalculados.id_concepto_tipo_personal,
						recTrabajadores1.id_trabajador,
						recConceptosCalculados.unidades,
						recConceptosCalculados.tipo,
						recConceptosCalculados.cod_frecuencia_pago,
						recTrabajadores1.jornada_diaria,
						recTrabajadores1.jornada_semanal,
						recTrabajadores1.formula_integral,
						recTrabajadores1.formula_semanal,
						recTrabajadores1.id_cargo,
						recConceptosCalculados.valor,
						recConceptosCalculados.tope_minimo,
						recConceptosCalculados.tope_maximo,psemanadelmes);
						perform update_monto_concepto_fijo(recConceptosCalculados.id_concepto_fijo, 

montoCalculado);

				end loop;

				close curConceptosCalculados;

			end if;


			montoBase1Sso := 0.0;
			montoBase2Sso := 0.0;
			montoBase5Sso := 0.0;
			montoBase6Sso := 0.0;
			montoBase7Sso := 0.0;
			montoBase8Sso := 0.0;
			montoBase9Sso := 0.0;
			montoBaseTotalSso := 0.0;
                        montoBaseTotalSpf := 0.0;

			retencionSso := 0.0;

			montoBase1Lph := 0.0;
			montoBase2Lph := 0.0;
			montoBase5Lph := 0.0;
			montoBase6Lph := 0.0;
			montoBase7Lph := 0.0;
			montoBase8Lph := 0.0;
			montoBase9Lph := 0.0;
			montoBaseTotalLph := 0.0;
			retencionLph = 0.0;

			montoBase1Fju := 0.0;
			montoBase2Fju := 0.0;
			montoBase5Fju := 0.0;
			montoBase6Fju := 0.0;
			montoBase7Fju := 0.0;
			montoBase8Fju := 0.0;
			montoBase9Fju := 0.0;
			montoBaseTotalFju := 0.0;
			retencionFju := 0.0;	
			
			frecuenciaSsoSemanal := false;
			frecuenciaFjuSemanal := false;
			frecuenciaLphSemanal := false;

			codFrecuenciaSso := 0;

			aporteSso := 0;
			aporteLph := 0;
			aporteFju := 0;
			aporteSpf := 0;

			montoBase1Si := 0.0;
			montoBase2Si := 0.0;
			montoBaseTotalSi := 0.0;

			montoBase1Sb := 0.0;
			montoBase2Sb := 0.0;
			montoBaseTotalSb := 0.0;

			montoBase1Co := 0.0;
			montoBase2Co := 0.0;
			montoBaseTotalCo := 0.0;

			montoBase1Pt := 0.0;
			montoBase2Pt := 0.0;
			montoBaseTotalPt := 0.0;

			montoBase1Pc := 0.0;
			montoBase2Pc := 0.0;
			montoBaseTotalPc := 0.0;

			montoBase1As := 0.0;
			montoBase2As := 0.0;
			montoBaseTotalAs := 0.0;

			montoVariableSso := 0.0;
			montoVariableLph := 0.0;
			montoVariableFju := 0.0;

			montoVariableSumarSso := 0.0;
			montoVariableSumarLph := 0.0;
			montoVariableSumarFju := 0.0;

			montoSumar := 0.0;
 raise notice 'trabajadores_tres';
			open curTrabajadores2 (recTrabajadores1.id_trabajador, recTrabajadores1.id_trabajador);

			loop

				fetch curTrabajadores2 into recTrabajadores2;						
				exit when not found;

				if recTrabajadores2.monto_restituir = 0 then
					montoSumar := recTrabajadores2.monto;
				else
					montoSumar := recTrabajadores2.monto_restituir;
				end if;

				if recTrabajadores2.cod_concepto = '5001' then
					codFrecuenciaSso := recTrabajadores2.frecuencia_retencion;

					if codFrecuenciaSso = 4 then
						frecuenciaSsoSemanal := true;
					end if;

					if recTrabajadores2.cod_frecuencia_pago = 4 or 
                                           (recTrabajadores2.cod_frecuencia_pago = 10 and pSemanaDelMes < 5) then
						montoBase1Sso := montoBase1Sso + recTrabajadores2.monto;
					else
						if recTrabajadores2.cod_frecuencia_pago = 5 then
                                                        montoBase2Sso := montoBase2Sso + recTrabajadores2.monto;
							montoBase5Sso := montoBase5Sso + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 6 then
                                                        montoBase2Sso := montoBase2Sso + recTrabajadores2.monto;
							montoBase6Sso := montoBase6Sso + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 7 then
                                                        montoBase2Sso := montoBase2Sso + recTrabajadores2.monto;
							montoBase7Sso := montoBase7Sso + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 8 then
                                                        montoBase2Sso := montoBase2Sso + recTrabajadores2.monto;
							montoBase8Sso := montoBase8Sso + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 9 then
                                                        montoBase2Sso := montoBase2Sso + recTrabajadores2.monto;
							montoBase9Sso := montoBase9Sso + recTrabajadores2.monto;
						end if;
					end if;
				elsif recTrabajadores2.cod_concepto = '5003' then
					codFrecuenciaLph := recTrabajadores2.frecuencia_retencion;
					if codFrecuenciaLph = 4 then
						frecuenciaLphSemanal := true;
					end if;
					if recTrabajadores2.cod_frecuencia_pago = 4 or 
                                           (recTrabajadores2.cod_frecuencia_pago = 10 and pSemanaDelMes < 5) then
						montoBase1Lph := montoBase1Lph + recTrabajadores2.monto;
					else
						
						if recTrabajadores2.cod_frecuencia_pago = 5 then
                                                        montoBase2Lph := montoBase2Lph + recTrabajadores2.monto;
							montoBase5Lph := montoBase5Lph + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 6 then
                                                        montoBase2Lph := montoBase2Lph + recTrabajadores2.monto;
							montoBase6Lph := montoBase6Lph + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 7 then
                                                        montoBase2Lph := montoBase2Lph + recTrabajadores2.monto;
							montoBase7Lph := montoBase7Lph + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 8 then
                                                        montoBase2Lph := montoBase2Lph + recTrabajadores2.monto;
							montoBase8Lph := montoBase8Lph + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 9 then
                                                        montoBase2Lph := montoBase2Lph + recTrabajadores2.monto;
							montoBase9Lph := montoBase9Lph + recTrabajadores2.monto;
						end if;
					end if;

				elsif recTrabajadores2.cod_concepto = '5004' then
					codFrecuenciaFju := recTrabajadores2.frecuencia_retencion;
					if codFrecuenciaFju = 4 then
						frecuenciaFjuSemanal := true;
					end if;
					if recTrabajadores2.cod_frecuencia_pago = 4 or 
                                           (recTrabajadores2.cod_frecuencia_pago = 10 and pSemanaDelMes < 5) then
						montoBase1Fju := montoBase1Fju + recTrabajadores2.monto;
					else
						
						if recTrabajadores2.cod_frecuencia_pago = 5 then
                                                        montoBase2Fju := montoBase2Fju + recTrabajadores2.monto;
							montoBase5Fju := montoBase5Fju + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 6 then
                                                        montoBase2Fju := montoBase2Fju + recTrabajadores2.monto;
							montoBase6Fju := montoBase6Fju + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 7 then
                                                        montoBase2Fju := montoBase2Fju + recTrabajadores2.monto;
							montoBase7Fju := montoBase7Fju + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 8 then
                                                        montoBase2Fju := montoBase2Fju + recTrabajadores2.monto;
							montoBase8Fju := montoBase8Fju + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 9 then
                                                        montoBase2Fju := montoBase2Fju + recTrabajadores2.monto;
							montoBase9Fju := montoBase9Fju + recTrabajadores2.monto;
						end if;
					end if;
				end if;
			end loop;
			close curTrabajadores2;

			 raise notice 'trabajadores_cuatro';
	
			if montoBase2Sso <> 0 then
				if recTrabajadores1.formula_semanal = 1 then
					montoBase2Sso := (montoBase2Sso / 30) * 7; 
				elsif recTrabajadores1.formula_semanal = 3 then
					montoBase2Sso := (montoBase2Sso * 12) / 52;
				elsif recTrabajadores1.formula_semanal = 4 then
					montoBase1Sso := (((montoBase1Sso /7)*30)*12)/52;
					montoBase2Sso := (montoBase2Sso*12)/52; 
				elsif recTrabajadores1.formula_semanal = 2 then
					if pSemanaDelMes = 1 then
						montoBase2Sso := montoBase5Sso;
					elsif pSemanaDelMes = 2 then
						montoBase2Sso := montoBase6Sso;
					elsif pSemanaDelMes = 3 then
						montoBase2Sso := montoBase7Sso;
					elsif pSemanaDelMes = 4 then
						montoBase2Sso := montoBase8Sso;
						if pTieneSemana5 = false then
							montoBase2Sso := montoBase2Sso+montoBase9Sso;
						end if;
					elsif pSemanaDelMes = 5 then
						montoBase2Sso := montoBase9Sso;
					end if;

				end if;
			end if;

			if frecuenciaFjuSemanal = true and  montoBase2Fju <> 0 then
				if recTrabajadores1.formula_semanal = 1 then
					montoBase2Fju := (montoBase2Fju / 30) * 7; 
				elsif recTrabajadores1.formula_semanal = 3 then
					montoBase2Fju := (montoBase2Fju * 12) / 52;
				elsif recTrabajadores1.formula_semanal = 2 then
					if pSemanaDelMes = 1 then
						montoBase2Fju := montoBase5Fju;
					elsif pSemanaDelMes = 2 then
						montoBase2Fju := montoBase6Fju;
					elsif pSemanaDelMes = 3 then
						montoBase2Fju := montoBase7Fju;
					elsif pSemanaDelMes = 4 then
						montoBase2Fju := montoBase8Fju;
						if pTieneSemana5 = false then
							montoBase2Fju := montoBase2Fju+montoBase9Fju;
						end if;
					elsif pSemanaDelMes = 5 then
						montoBase2Fju := montoBase9Fju;
					end if;
				end if;
			end if;
			if frecuenciaLphSemanal = true and  montoBase2Lph <> 0 then
				if recTrabajadores1.formula_semanal = 1 then
					montoBase2Lph := (montoBase2Lph / 30) * 7; 
				elsif recTrabajadores1.formula_semanal = 3 then
					montoBase2Lph := (montoBase2Lph * 12) / 52;
				elsif recTrabajadores1.formula_semanal = 2 then
					if pSemanaDelMes = 1 then
						montoBase2Lph := montoBase5Lph;
					elsif pSemanaDelMes = 2 then
						montoBase2Lph := montoBase6Lph;
					elsif pSemanaDelMes = 3 then
						montoBase2Lph := montoBase7Lph;
					elsif pSemanaDelMes = 4 then
						montoBase2Lph := montoBase8Lph;
						if pTieneSemana5 = false then
							montoBase2Lph := montoBase2Lph+montoBase9Lph;
						end if;
					elsif pSemanaDelMes = 5 then
						montoBase2Lph := montoBase9Lph;
					end if;
				end if;
			end if;
				
			montoBaseTotalSso := montoBase1Sso + montoBase2Sso + montoVariableSumarSso;
			montoBaseTotalLph := montoBase1Lph + montoBase2Lph + montoVariableSumarLph;			
			montoBaseTotalFju := montoBase1Fju + montoBase2Fju + montoVariableSumarFju;
	

			if frecuenciaLphSemanal = false then
				if (codFrecuenciaLph=pSemanaDelMes+4) 
					or (codFrecuenciaLph = 9 and pSemanaDelMes = 4 
						and pTieneSemana5 = false) then
					if recTrabajadores1.formula_integral = 1 then
						montoBaseTotalLph := (((montoBase1Lph/7)+(montoBase2Lph/30))*365)/12;
					elsif recTrabajadores1.formula_integral = 2 then
						montoBaseTotalLph := (montoBase1Lph/7)*30 + montoBase2Lph;
					elsif recTrabajadores1.formula_integral = 3 then
						montoBaseTotalLph := (montoBase1Lph*52)/12 + montoBase2Lph;
					end if;
				end if;
			end if;
			if frecuenciaFjuSemanal = false then
				if (codFrecuenciaFju=pSemanaDelMes+4) 
					or (codFrecuenciaFju = 9 and pSemanaDelMes = 4 
						and pTieneSemana5 = false) then
					if recTrabajadores1.formula_integral = 1 then
						montoBaseTotalFju := (((montoBase1Fju/7)+(montoBase2Fju/30))*365)/12;
					elsif recTrabajadores1.formula_integral = 2 then
						montoBaseTotalFju := (montoBase1Fju/7)*30 + montoBase2Fju;
					elsif recTrabajadores1.formula_integral = 3 then
						montoBaseTotalFju := (montoBase1Fju*52)/12 + montoBase2Fju;
					end if;
				end if;
			end if;
		
			montoBaseTotalSpf := montoBaseTotalSso;
			montoBaseTotalSso := calcular_limite_semanal(montoBaseTotalSso, 0,  pPeriodicidad, 'SSO', 

selParametroGobierno.limmen_sso, selParametroGobierno.limsem_sso);
			montoBaseTotalSpf := calcular_limite_semanal(montoBaseTotalSpf, 0,  pPeriodicidad, 'SPF', 

selParametroGobierno.limmen_spf, selParametroGobierno.limsem_spf);
			montoBaseTotalLph := calcular_limite_semanal(montoBaseTotalLph, 0, pPeriodicidad, 'LPH', 

selParametroGobierno.limmen_lph, selParametroGobierno.limsem_lph);
			montoBaseTotalFju := calcular_limite_semanal(montoBaseTotalFju, 0, pPeriodicidad, 'FJU', 

selParametroGobierno.limmen_fju, selParametroGobierno.limsem_fju);
			
			if frecuenciaSsoSemanal = false then
				if (codFrecuenciaSso=pSemanaDelMes+4) 
					or (codFrecuenciaSso = 9 and pSemanaDelMes = 4 
						and pTieneSemana5 = false) then
					montoBaseTotalSso := montoBaseTotalSso * pNumeroSemanasMes;
                                        montoBaseTotalSpf := montoBaseTotalSpf * pNumeroSemanasMes;
				end if;
			end if;	

			if recTrabajadores1.regimen = 'I' then
				retencionSso := (montoBaseTotalSso * selParametroGobierno.porcentaje_integral) / 100;		

		
			else
				retencionSso := (montoBaseTotalSso * selParametroGobierno.porcentaje_parcial) / 100;
			end if;	

			if recTrabajadores1.riesgo = '1' then
				aporteSso := montoBaseTotalSso * selParametroGobierno.porcbpat_sso/100;
			elsif recTrabajadores1.riesgo = '2' then
				aporteSso := montoBaseTotalSso * selParametroGobierno.porcmpat_sso/100;
			else
				aporteSso := montoBaseTotalSso * selParametroGobierno.porcapat_sso/100;
			end if;

			retencionSpf := (montoBaseTotalSpf * selParametroGobierno.porctrab_spf) / 100;
			aporteSpf := montoBaseTotalSpf * selParametroGobierno.porcpat_spf/100;
			retencionLph := (montoBaseTotalLph * selParametroGobierno.porctrab_lph) / 100;
			aporteLph := montoBaseTotalLph * selParametroGobierno.porcpat_lph/100;
			retencionFju := (montoBaseTotalFju * selParametroGobierno.porctrab_Fju) / 100;
			aporteFju := montoBaseTotalFju * selParametroGobierno.porcpat_fju/100;
			
			if pRecalculo = 'S' then
				open curPromedios(recTrabajadores1.id_trabajador);				
				loop
					fetch curPromedios into recPromedios;			
					exit when not found;

					montoSumar := 0;

					if recPromedios.monto_restituir = 0 then
						montoSumar := recPromedios.monto;
					else
						montoSumar := recPromedios.monto_restituir;
					end if;

					if recPromedios.cod_frecuencia_pago = 4 then
						if recPromedios.sueldo_integral = 'S' then
							montoBase1Si := montoBase1Si + recPromedios.monto;
						end if;
						if recPromedios.sueldo_basico = 'S' then
							montoBase1Sb := montoBase1Sb + recPromedios.monto;
						elsif recPromedios.compensacion = 'S' then
							montoBase1Co := montoBase1Co + recPromedios.monto;
						elsif recPromedios.primas_trabajador = 'S' then
							montoBase1Pt := montoBase1Pt + recPromedios.monto;
						elsif recPromedios.primas_cargo = 'S' then
							montoBase1Pc := montoBase1Pc + recPromedios.monto;
						elsif recPromedios.ajuste_sueldo = 'S' then
							montoBase1As := montoBase1As + recPromedios.monto;
						end if;

					elsif (recPromedios.cod_frecuencia_pago > 4 and
                                               recPromedios.cod_frecuencia_pago <> 10) then
						if recPromedios.sueldo_integral = 'S' then
							montoBase2Si := montoBase2Si + recPromedios.monto;
                                                end if;
						if recPromedios.sueldo_basico = 'S' then
							montoBase2Sb := montoBase2Sb + recPromedios.monto;
						elsif recPromedios.compensacion = 'S' then
							montoBase2Co := montoBase2Co + recPromedios.monto;
						elsif recPromedios.primas_trabajador = 'S' then
							montoBase2Pt := montoBase2Pt + recPromedios.monto;
						elsif recPromedios.primas_cargo = 'S' then
							montoBase2Pc := montoBase2Pc + recPromedios.monto;
						elsif recPromedios.ajuste_sueldo = 'S' then
							montoBase2As := montoBase2As + recPromedios.monto;
						end if;
					    
                                         elsif (recPromedios.cod_frecuencia_pago = 10) then
						if recPromedios.sueldo_integral = 'S' then
							montoBase2Si := montoBase2Si + recPromedios.monto*4;
                                                end if;
						if recPromedios.sueldo_basico = 'S' then
							montoBase2Sb := montoBase2Sb + recPromedios.monto*4;
						elsif recPromedios.compensacion = 'S' then
							montoBase2Co := montoBase2Co + recPromedios.monto*4;
						elsif recPromedios.primas_trabajador = 'S' then
							montoBase2Pt := montoBase2Pt + recPromedios.monto*4;
						elsif recPromedios.primas_cargo = 'S' then
							montoBase2Pc := montoBase2Pc + recPromedios.monto*4;
						elsif recPromedios.ajuste_sueldo = 'S' then
							montoBase2As := montoBase2As + recPromedios.monto*4;
						end if;
					   end if;


                                      end loop;

				close curPromedios;

				 raise notice 'trabajadores_cinco';

				if recTrabajadores1.formula_integral = '1' then
					montoBaseTotalSi := (((montoBase1Si/7)+(montoBase2Si/30))*365)/12;
					montoBaseTotalSb := (((montoBase1Sb/7)+(montoBase2Sb/30))*365)/12;
					montoBaseTotalCo := (((montoBase1Co/7)+(montoBase2Co/30))*365)/12;
					montoBaseTotalPt := (((montoBase1Pt/7)+(montoBase2Pt/30))*365)/12;
					montoBaseTotalPc := (((montoBase1Pc/7)+(montoBase2Pc/30))*365)/12;
					montoBaseTotalAs := (((montoBase1As/7)+(montoBase2As/30))*365)/12;
				elsif recTrabajadores1.formula_integral = '2' then
					montoBaseTotalSi := (montoBase1Si/7)*30 + montoBase2Si;
					montoBaseTotalSb := (montoBase1Sb/7)*30 + montoBase2Sb;
					montoBaseTotalCo := (montoBase1Co/7)*30 + montoBase2Co;
					montoBaseTotalPt := (montoBase1Pt/7)*30 + montoBase2Pt;
					montoBaseTotalPc := (montoBase1Pc/7)*30 + montoBase2Pc;
					montoBaseTotalAs := (montoBase1As/7)*30 + montoBase2As;
				elsif recTrabajadores1.formula_integral = '3' then
					montoBaseTotalSi := (montoBase1Si*52)/12 + montoBase2Si;
					montoBaseTotalSb := (montoBase1Sb*52)/12 + montoBase2Sb;
					montoBaseTotalCo := (montoBase1Co*52)/12 + montoBase2Co;
					montoBaseTotalPt := (montoBase1Pt*52)/12 + montoBase2Pt;
					montoBaseTotalPc := (montoBase1Pc*52)/12 + montoBase2Pc;
					montoBaseTotalAs := (montoBase1As*52)/12 + montoBase2As;
				end if;
			end if;
 raise notice 'trabajadores_seis';
			perform update_sueldo_promedio(
					recTrabajadores1.id_trabajador, 
					montoBaseTotalSso,
					retencionSso,
					retencionSpf,
					montoBaseTotalLph,
					retencionLph,
					montoBaseTotalFju,
					retencionFju,
					aporteSso,
					aporteLph,
					aporteSpf,
					aporteFju);

raise notice 'trabajadores_siete';

			if pRecalculo = 'S'  then
				perform update_sueldo_promedio(
					recTrabajadores1.id_trabajador, 
					montoBaseTotalSi,
					montoBaseTotalSb,
					montoBaseTotalCo,
					montoBaseTotalPt,
					montoBaseTotalPc,
					montoBaseTotalAs);
			end if;

raise notice 'trabajadores_ocho';
			if pPrimeraQuincena = true then
				perform update_sueldo_promedio(
				recTrabajadores1.id_trabajador, 
				montoVariableSso,
				montoVariableLph,
				montoVariableFju);
			end if;
raise notice 'trabajadores_nueve';
		end loop;

		close curTrabajadores1;
	end loop;

raise notice 'trabajadores_final';
	close curTipoPersonal;

	return true;

end;



$_$;


ALTER FUNCTION public.calcular_sueldo_promedio_semanal(integer, integer, character varying, character varying, boolean, integer, boolean, integer) OWNER TO postgres;

--
-- TOC entry 709 (class 1255 OID 183694)
-- Name: carga_masiva_trabajador(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION carga_masiva_trabajador() RETURNS void
    LANGUAGE plpgsql
    AS $$  declare  	

/*
	Programa de Modernizacion de la Administracion Financiera del Estado
	Sistema de Gestion Financiera de Recursos Humanos
	Procedimiento de Carga Masiva del ingreso del trabajador - Ejecución del proceso 
	Revision : 1.0
	Fecha : Abril 2010
	Versión Base de Aplicación : 3.10

	Entidades Afectadas:

	carga_masiva_trabajador()

	NOTAS: - Solo emplear durante el proceso de implantación del SIGEFIRRHH bajo las condiciones controladas 
	      contenidas en el documento anexo.
	       - Va sin acentos.
	       - Se entiende que existe la tabla cargamasivatrabajador y que la misma contiene la informacion a 
	       ser migrada.
*/


-- Creacion de los alias de los parametros

-- Definicion de las constantes

-- Definicion de las variables de trabajo
	
-- Definición de los registros y cursores

	recCargaMasiva record;
	
	curCargaMasiva cursor
		for select *
		from cargamasivatrabajador;

 begin 	
	raise notice 'Se inicia la ejecucion de la funcion carga_masiva_trabajador()';

	open curCargaMasiva;
	loop
		fetch curCargaMasiva into recCargaMasiva;
		exit when not found;

		perform carga_masiva_trabajador_proceso(
						recCargaMasiva.id_tipo_personal, 
						recCargaMasiva.cedula, 
						recCargaMasiva.id_cargo, 
						recCargaMasiva.codigo_nomina, 
						recCargaMasiva.id_dependencia, 
						recCargaMasiva.fecha_ingreso, 
						recCargaMasiva.fecha_ingreso_apn, 
						recCargaMasiva.fecha_vacaciones, 
						recCargaMasiva.fecha_prestaciones, 
						recCargaMasiva.fecha_antiguedad,
						recCargaMasiva.id_banco_nomina,
						recCargaMasiva.tipo_cta_nomina,
						recCargaMasiva.cuenta_nomina,
						recCargaMasiva.id_banco_lph,
						recCargaMasiva.cuenta_lph,
						recCargaMasiva.id_banco_fid,
						recCargaMasiva.cuenta_fid,
						recCargaMasiva.porcentaje_islr,
						recCargaMasiva.cotiza_sso,
						recCargaMasiva.cotiza_spf,
						recCargaMasiva.cotiza_lph,
						recCargaMasiva.cotiza_fju,
						recCargaMasiva.id_causa_movimiento,
						recCargaMasiva.id_registro);
	end loop;
	close curCargaMasiva;

	raise notice 'Se actualiza Identity';

	Delete from identity where name in ('Trabajador','RegistroCargos','MovimientoSitp','RegistroSitp','HistoricoCargos','Trayectoria');	

	Insert into identity select 'Trabajador',coalesce(max(id_trabajador),0)+2 from Trabajador;
	Insert into identity select 'RegistroCargos',coalesce(max(id_registro_cargos),0)+2 from RegistroCargos;
	Insert into identity select 'MovimientoSitp',coalesce(max(id_movimiento_sitp),0)+2 from MovimientoSitp;
	Insert into identity select 'RegistroSitp',coalesce(max(id_registro_sitp),0)+2 from RegistroSitp;
	Insert into identity select 'HistoricoCargos',coalesce(max(id_historico_cargos),0)+2 from HistoricoCargos;
	Insert into identity select 'Trayectoria',coalesce(max(id_Trayectoria),0)+2 from Trayectoria;

	raise notice 'Se culmina la ejecucion de la funcion carga_masiva_trabajador()';

	
end;  $$;


ALTER FUNCTION public.carga_masiva_trabajador() OWNER TO postgres;

--
-- TOC entry 710 (class 1255 OID 183695)
-- Name: carga_masiva_trabajador_proceso(integer, integer, integer, integer, integer, date, date, date, date, date, integer, character varying, character varying, integer, character varying, integer, character varying, double precision, character varying, character varying, character varying, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION carga_masiva_trabajador_proceso(integer, integer, integer, integer, integer, date, date, date, date, date, integer, character varying, character varying, integer, character varying, integer, character varying, double precision, character varying, character varying, character varying, character varying, integer, integer) RETURNS void
    LANGUAGE plpgsql
    AS $_$  declare  	

/*
	Programa de Modernizacion de la Administracion Financiera del Estado
	Sistema de Gestion Financiera de Recursos Humanos
	Procedimiento de Carga Masiva del ingreso del trabajador 
	Revision : 1.0
	Fecha : Abril 2010
	Versión Base de Aplicación : 3.10

	Entidades Afectadas:
		TRABAJADOR
		REGISTROCARGOS (Opcional)
		TRAYECTORIA
		MOVIMIENTOSITP

	carga_masiva_trabajador_proceso( 
				 1.- id_tipo_personal integer, 
				 2.- cedula integer, 
				 3.- id_cargo integer, 
				 4.- codigo_nomina integer, 
				 5.- id_dependencia integer, 
				 6.- fecha_ingreso date, 
				 7.- fecha_ingreso_apn date, 
				 8.- fecha_vacaciones date, 
				 9.- fecha_prestaciones date, 
				10.- fecha_antiguedad date,
				11.- id_banco_nomina integer,
				12.- tipo_cta_nomina varchar,
				13.- cuenta_nomina varchar,
				14.- id_banco_lph integer,
				15.- cuenta_lph varchar,
				16.- id_banco_fid integer,
				17.- cuenta_fid varchar,
				18.- porcentaje_islr double precision,
				19.- cotiza_sso varchar,
				20.- cotiza_spf varchar,
				21.- cotiza_lph varchar,
				22.- cotiza_fju varchar,
				23.- id_causa_movimiento integer,
				24.- id_registro integer
				)

	NOTAS: - Solo emplear durante el proceso de implantación del SIGEFIRRHH bajo las condiciones controladas 
	      contenidas en el documento anexo, no emplear cuando ya existen datos en las entidades afectadas.
	       - Va sin acentos. 
*/


-- Creacion de los alias de los parametros

	pIdTipoPersonal alias for $1; 
	pCedula alias for $2; 
	pIdCargo alias for $3; 
	pCodigoNomina alias for $4;  
	pIdDependencia alias for $5;  
	pFechaIngreso alias for $6;  
	pFechaIngresoApn alias for $7; 
	pFechaVacaciones alias for $8;  
	pFechaPrestaciones alias for $9; 
	pFechaAntiguedad alias for $10; 
	pIdBancoNomina alias for $11; 
	pTipoCuentaNomina alias for $12; 
	pCuentaNomina alias for $13; 
	pIdBancoLph alias for $14;
	pCuentaLph alias for $15; 
	pIdBancoFid alias for $16; 
	pCuentaFid alias for $17; 
	pPorcentajeIslr alias for $18; 
	pCotizaSso alias for $19; 
	pCotizaSpf alias for $20; 
	pCotizaLph alias for $21; 
	pCotizaFju alias for $22;
	pIdCausaMovimiento alias for $23;
	pIdRegistro alias for $24;

-- Definicion de las constantes

	-- para Trabajador 
	vEstatus character varying:='A'; -- activo 
	vSituacion character varying:='1'; -- normal 
	idDetalleTabuladorMed int4 := null;
	sueldoBasico float8:=0.0;
	vPaso int4 := 1;  -- leido en la clase en la aplicacion
	fechaEgreso date:=null;
	fechaJubilacion date := null;
	formaPago character varying := '1';  -- deposito en cuenta 
	dedProxNomina character varying := 'S'; -- leido en la clase en la aplicacion
	parProxNomina character varying := 'N'; -- leido en la clase en la aplicacion
	porcentajeJubilacion float8 := 0;
	baseJubilacion float8 := 0;
	feVida character varying := 'S'; -- leido en la clase en la aplicacion
	mesJubilacion int4 :=0;
	diaJubilacion int4 :=0;
	anioJubilacion int4 :=0;
	mesEgreso int4 :=0;
	diaEgreso int4 :=0;
	anioEgreso int4 :=0;
	fechaEntradaSig date := current_date;
	fechaSalidaSig date :=null;
	codOrganismoAdscrito character varying :=null;
	lunesPrimera int4 :=0;
	lunesSegunda int4 :=0;
	lunesRetroactivo int4 :=0;
	hayRetroactivo character varying :='N';
	diasTrabajados int4 :=0;
	mesSalida int4 :=0;
	diaSalida int4 :=0;
	anioSalida int4 :=0;
	horasSemanales float8 :=0; -- leido en la clase en la aplicacion
	fechaIngresoCargo date :=null;
	mesIngresoCargo int4 :=0;
	diaIngresoCargo int4 :=0;
	anioIngresoCargo int4 :=0;
	fechaFeVida date :=null;
	fechaEncargaduria date :=null;
	fechaComisionServicio date :=null;
	organismoComisionServicio character varying :=0;
	fechaTipoPersonal date :=null;
	codigoPatronal character varying :=null;
	jubilacionPlanificada character varying :='N';
	fechaUltimoMovimiento date:=pFechaIngreso;

	-- para Registrocargos
	vSituacionRc character varying :='O'; -- Ocupado
	vEstatusRc character varying :='3'; -- En tramite MPD, leido en la clase en la aplicacion
	vCondicion character varying :='1'; -- Activo
	fechaCreacion date := current_date;
	vHoras float8 := 8;
	reportaRac int4 := 1;
	convenioGremial character varying :='N';
	idGremio int4 := null;
	idSitp int4 := 0; -- cotejado con los ambientes de produccion
	tiempoSitp date := null;
	vCompensacion float8 :=0.0; 
	primasCargo  float8 :=0.0;
	primasTrabajador float8 :=0.0;
	aprobadoMpd character varying :='N'; -- leido en la clase en la aplicacion

	-- para registrositp

	fechaRegistro date := current_date;
	fechaMovimiento date := current_date;
	vLocalidad character varying :='C'; -- leido en la clase en la aplicacion
	afectaSueldo character varying :='N';
	documentoSoporte character varying := null;-- leido en la clase en la aplicacion
	idRemesa int4 := null;
	vEstatusRsitp int4 := 0;
	vObservaciones text:= 'Registro Generado en el proceso de Carga Masiva de implantación';
	idUsuario int4 := 1; -- valor por defecto del usuario sigefirrhh
	estatusMpd character varying :=null;
	codigoDevolucion  character varying :=null;
	analistaMpd  character varying :=null;
	idAnalistaMpd int4 := null;
	fechaInicioMpd date := null;
	fechaFinMpd date := null;
	observacionesMpd text:= null;
	fechaPuntoCuenta date := null;
	puntoCuenta character varying :=null;
	vAnio int4 := extract(year from current_date);
	anteriorCodManualCargo int4 := null;
	anteriorCodCargo character varying := null;
	anteriorDescripcionCargo character varying := null;
	anteriorCodigoNomina int4 := 0;
	anteriorCodSede character varying := null;
	anteriorNombreSede character varying := null;
	anteriorCodDependencia character varying := null;
	anteriorNombreDependencia character varying := null;
	anteriorSueldo float8 :=0.0;
	anteriorCompensacion float8 :=0.0;
	anteriorPrimasCargo float8 :=0.0;
	anteriorPrimasTrabajador float8 :=0.0; 	
	anteriorGrado int4 := 0;
	anteriorPaso int4 := 1;
	anteriorCodRegion character varying := null;
	anteriorNombreRegion character varying := null;
	codConcurso character varying := null;
	fechaCulminacion date := null;
	

	-- para movimientoSitp

	montoJubilacion float8 :=0.0; 	
	vSueldoPromedio float8 :=0.0; 
	porcJubilacion int4 := 0;

	-- para historicocargos

	vMovimientoHc character varying := '2';

	-- para trayectoria
	anioPreparacion int4 := extract(year from current_date);
	fechaPreparacion date := current_date;
	numeroRemesa character varying := null;
	correlativoMpd int4 := 0;
	vEstatusTray character varying := 0;
	fechaEstatus date := current_date;
	fechaVigencia date := current_date;
	vNombramiento character varying := null;
	montoJubilacionSobrev float8 :=0.0;
	porcPensionSobrev float8 :=0.0;
	montoPensionSobrev float8 :=0.0;
	montoPensionInvalid float8 :=0.0;
	porcPensionInvalid float8 :=0.0;
	invalidezSact float8 :=0.0;
	primaJerarquia float8 :=0.0;
	primaServicio float8 :=0.0;
	ajusteSueldo float8 :=0.0;
	otrosPagos float8 :=0.0;
	otrosNoVicepladin float8 :=0.0;
	vOrigen character varying := 'S';
	vUsuario character varying := 'sigefirrhh';
	nombreMunicipio  character varying := null;
	
	
-- Definicion de las variables de trabajo

	-- Para trabajador
	idTrabajador int4;
	idRegistroCargos int4:=null;
	vMovimiento character varying;

	-- Para registrocargos
	-- idRegistro int4;
	
	-- Para RegistroSitp
	idRegistroSitp int4;
	numeroMovimiento int4;
	
	-- Para MovimientoSitp
	idMovimientoSitp int4;

	-- Para historicocargos
	idHistoricoCargos int4; 

	-- Para trayectoria
	idTrayectoria int4; 

	-- Para sueldopromedio
	idSueldoPromedio int4;
	
-- Definición de los registros y cursores

	recPersonal record;
	recTipoPersonal record;
	recDependencia record;
	recCargo record;
	recSede record;
	recOrganismo record;
	recCausaMovimiento record;
	recManualCargo record;
	recTabulador record;
	recLugarPago record;
	recCiudad record;
	recEstado record;
	recClasificacionPersonal record;
	recCategoriaPersonal record;
	recRelacionPersonal record;
	recRegion record;
	recGrupoOrganismo record;

 begin 	
	raise notice 'Se inicia la ejecucion de la funcion carga_masiva_trabajador() para la cedula = %',pCedula;
	-- Busqueda de la informacion conexa 

	raise notice 'Busco los datos del tipopersonal = %',pIdTipoPersonal;
	select * into recTipoPersonal from tipopersonal where id_tipo_personal = pIdTipoPersonal;

	raise notice 'Busco los datos de la dependencia = %',pIdDependencia;
	select * into recDependencia from dependencia where id_dependencia = pIdDependencia;

	raise notice 'Busco los datos del cargo = %',pIdCargo;
	select * into recCargo from cargo where id_cargo = pIdCargo;

	raise notice 'Busco los datos de la sede = %',recDependencia.id_sede;
	select * into recSede from sede where id_sede = recDependencia.id_sede;

	raise notice 'Busco el id de trabajador';
	select coalesce(max(id_trabajador),0)+1 into idTrabajador from trabajador;

	raise notice 'Busco el id de organismo';
	select * into recOrganismo from organismo;

	raise notice 'Busco el id de personal';
	select * into recPersonal from personal where cedula = pCedula;

	raise notice 'Busco los datos de la causamovimiento = %',pIdCausaMovimiento;
	select * into recCausaMovimiento from causamovimiento where id_causa_movimiento = pIdCausaMovimiento;

	-- Registros de Registristp
	raise notice 'Busco los datos del manual de cargo = %',recCargo.id_manual_cargo;
	select * into recManualCargo from manualcargo where id_manual_cargo = recCargo.id_manual_cargo;

	raise notice 'Busco los datos del tabulador = %',recManualCargo.id_tabulador;
	select * into recTabulador from tabulador where id_tabulador = recManualCargo.id_tabulador;

	raise notice 'Busco los datos de la Region = %',recDependencia.id_region;
	select * into recRegion from region where id_region = recDependencia.id_region;


	-- Registros de Trayectoria
	raise notice 'Busco las caracteristicas geograficas de lugar de pago';
	select * into recLugarPago from lugarpago where id_lugar_pago = recSede.id_lugar_pago;
	select * into recCiudad from ciudad where id_ciudad = recLugarPago.id_ciudad;
	select * into recEstado from estado where id_estado = recCiudad.id_estado;

	raise notice 'Busco las caracteristicas de la Clasificacion de personal';
	select * into recClasificacionPersonal from clasificacionpersonal where id_clasificacion_personal = recTipoPersonal.id_clasificacion_personal;
	select * into recRelacionPersonal from relacionpersonal where id_relacion_personal = recClasificacionPersonal.id_relacion_personal;
	select * into recCategoriaPersonal from categoriapersonal where id_categoria_personal = recClasificacionPersonal.id_categoria_personal;

	select * into recGrupoOrganismo from grupoorganismo where id_grupo_organismo = recDependencia.id_grupo_organismo;
	 
	
	-- obtengo el movimiento de acuerdo a las caracteristicas del organismo 
	if recOrganismo.aprobacion_mpd = 'S'then
		vMovimiento:='T';
	else
		vMovimiento:='A';
	end if;


	-- se procede a insertar el registro en trabajador

	raise notice ' Se procede a insertar el registro en trabajador';
	insert into trabajador 
		(id_trabajador,id_personal,id_tipo_personal,cedula,cod_tipo_personal,
		estatus,movimiento,situacion,id_registro_cargos,id_cargo,
		id_detalle_tabulador_med,id_dependencia,id_lugar_pago,codigo_nomina,cod_cargo,
		sueldo_basico,paso,id_turno,riesgo,regimen,
		fecha_ingreso,fecha_ingreso_apn,fecha_vacaciones,fecha_prestaciones,fecha_antiguedad,
		fecha_egreso,fecha_jubilacion,forma_pago,id_banco_nomina,tipo_cta_nomina,
		cuenta_nomina,id_banco_lph,cuenta_lph,id_banco_fid,cuenta_fid,
		porcentaje_islr,cotiza_sso,cotiza_spf,cotiza_lph,cotiza_fju,
		ded_prox_nomina,par_prox_nomina,porcentaje_jubilacion,base_jubilacion,fe_vida,
		id_causa_movimiento,id_dependencia_real,id_cargo_real,id_organismo,mes_ingreso,
		dia_ingreso,anio_ingreso,mes_ingreso_apn,dia_ingreso_apn,anio_ingreso_apn,
		mes_vacaciones,dia_vacaciones,anio_vacaciones,mes_prestaciones,dia_prestaciones,
		anio_prestaciones,mes_antiguedad,dia_antiguedad,anio_antiguedad,mes_jubilacion,
		dia_jubilacion,anio_jubilacion,mes_egreso,dia_egreso,anio_egreso,
		fecha_entrada_sig,fecha_salida_sig,codigo_nomina_real,cod_organismo_adscrito,lunes_primera,
		lunes_segunda,lunes_retroactivo,hay_retroactivo,dias_trabajados,mes_entrada,
		dia_entrada,anio_entrada,mes_salida,dia_salida,anio_salida,horas_semanales,
		fecha_ingreso_cargo,mes_ingreso_cargo,dia_ingreso_cargo,anio_ingreso_cargo,fecha_fe_vida,
		fecha_encargaduria,fecha_comision_servicio,organismo_comision_servicio,fecha_tipo_personal,fecha_ultimo_movimiento,
		codigo_patronal,jubilacion_planificada)
	values
		(idTrabajador,recPersonal.id_personal,pIdTipoPersonal,pCedula,recTipoPersonal.cod_tipo_personal,
		vEstatus,vMovimiento,vSituacion,idRegistroCargos,pIdCargo,
		idDetalleTabuladorMed,pIdDependencia,recSede.id_lugar_pago,pCodigoNomina,recCargo.cod_cargo,
		sueldoBasico,vPaso,recSede.id_turno,recSede.riesgo,recSede.regimen,   
		pFechaIngreso,pFechaIngresoApn,pFechaVacaciones,pFechaPrestaciones,pFechaAntiguedad,
		fechaEgreso,fechaJubilacion,formaPago,pIdBancoNomina,pTipoCuentaNomina,
		pCuentaNomina,pIdBancoLph,pCuentaLph,pIdBancoFid,pCuentaFid,
		pPorcentajeIslr,pCotizaSso,pCotizaSpf,pCotizaLph,pCotizaFju,
		dedProxNomina,parProxNomina,porcentajeJubilacion,baseJubilacion,feVida,
		pIdCausaMovimiento,pIdDependencia,pIdCargo,recOrganismo.id_organismo,extract(month from pFechaIngreso),
		extract(day from pFechaIngreso),extract(year from pFechaIngreso),extract(month from pFechaIngresoApn),extract(day from pFechaIngresoApn),extract(year from pFechaIngresoApn),
		extract(month from pFechaVacaciones),extract(day from pFechaVacaciones),extract(year from pFechaVacaciones),extract(month from pFechaPrestaciones),extract(day from pFechaPrestaciones),
		extract(year from pFechaPrestaciones),extract(month from pFechaAntiguedad),extract(day from pFechaAntiguedad),extract(year from pFechaAntiguedad),mesJubilacion,
		diaJubilacion,anioJubilacion,mesEgreso,diaEgreso,anioEgreso,
		fechaEntradaSig,fechaSalidaSig,pCodigoNomina,codOrganismoAdscrito,lunesPrimera,
		lunesSegunda,lunesRetroactivo,hayRetroactivo,diasTrabajados,extract(month from fechaEntradaSig),
		extract(day from fechaEntradaSig),extract(year from fechaEntradaSig), mesSalida,diaSalida,anioSalida,horasSemanales,
		fechaIngresoCargo,mesIngresoCargo,diaIngresoCargo,anioIngresoCargo,fechaFeVida,
		fechaEncargaduria,fechaComisionServicio,organismoComisionServicio,fechaTipoPersonal,fechaUltimoMovimiento,
		codigoPatronal,jubilacionPlanificada);

	-- evaluo si el tipo de personal maneja RC y opero
	if recTipoPersonal.maneja_rac = 'S' then -- maneja estructura y tengo que operar con ella
		raise notice ' El tipo de personal maneja RAC';

		-- ubico el proximo id de registrocargos 
		raise notice 'Busco el id de registrocargos';
		select coalesce(max(id_registro_cargos),0)+1 into idRegistroCargos from registrocargos;

		-- ubico el id de registro 
		-- raise notice 'Busco el id de registro en registropersonal';
		-- select id_registro into idRegistro from registropersonal where id_tipo_personal = pIdTipoPersonal;

		-- inserto los registros en registrocargos
		raise notice 'Inserto el registro en registrocargos';
		insert into registrocargos 
			(
			id_registro_cargos,id_registro,codigo_nomina,situacion,estatus,
			condicion,fecha_creacion,horas,reporta_rac,id_trabajador,
			convenio_gremial,id_gremio,id_cargo,id_dependencia,id_sede,
			id_sitp,tiempo_sitp,sueldo_basico,compensacion,primas_cargo,
			primas_trabajador,aprobado_mpd
			)
			values
			(
			idRegistroCargos,pIdRegistro,pCodigoNomina,vSituacionRc,vEstatusRc,
			vCondicion,fechaCreacion,vHoras,reportaRac,idTrabajador,
			convenioGremial,idGremio,pIdCargo,pIdDependencia,recSede.id_sede,
			idSitp,tiempoSitp,sueldoBasico,vCompensacion,primasCargo,
			primasTrabajador,aprobadoMpd
			);

		-- actualizo el id_registro_cargos en la tabla trabajador
		raise notice 'Actualizo el registrocargos creado en trabajador';
		update trabajador set id_registro_cargos = idRegistroCargos 
			where id_trabajador = idTrabajador;

	end if; -- Fin de trabajo de Registrocargos


	if recTipoPersonal.aprobacion_mpd = 'N' then -- No sujeto a LEFP por ende maneja registrositp 

		-- inserto registrositp

		-- ubico el proximo id de registrositp 
		raise notice 'Busco el id de registrositp';
		select coalesce(max(id_registro_sitp),0)+1 into idRegistroSitp from registrositp;

		-- ubico el proximo id de registrositp 
		raise notice 'Busco el numero movimiento';
		select coalesce(max(numero_movimiento),0)+1 into numeroMovimiento from registrositp;
	
		-- inserto los registros 
		raise notice 'Inserto el registro en registrositp';
		insert into registrositp
			(
			id_registro_sitp,fecha_registro,fecha_movimiento,codigo_nomina,sueldo,
			compensacion,primas_cargo,primas_trabajador,grado,paso,cod_dependencia,
			cod_sede,tipo_personal,nombre_tipo_personal,id_clasificacion_personal,id_causa_movimiento,
			cod_causa_movimiento,cod_manual_cargo,cod_cargo,descripcion_cargo,cod_tabulador,
			afecta_sueldo,documento_soporte,localidad,numero_movimiento,cedula,
			apellidos_nombres,id_personal,id_remesa,estatus,nombre_dependencia,
			nombre_sede,id_organismo,cod_organismo,cod_organismo_mpd,nombre_organismo,
			observaciones,id_usuario,estatus_mpd,codigo_devolucion,analista_mpd,
			id_analista_mpd,fecha_inicio_mpd,fecha_fin_mpd,observaciones_mpd,cod_region,
			nombre_region,id_sitp,tiempo_sitp,fecha_punto_cuenta,punto_cuenta,
			anio,anterior_cod_manual_cargo,anterior_cod_cargo,anterior_descripcion_cargo,
			anterior_codigo_nomina,anterior_cod_sede,anterior_nombre_sede,anterior_cod_dependencia,
			anterior_nombre_dependencia,anterior_sueldo,anterior_compensacion,anterior_primas_cargo,
			anterior_primas_trabajador,anterior_grado,anterior_paso,anterior_cod_region,
			anterior_nombre_region,cod_concurso,fecha_ingreso,id_turno,fecha_culminacion)
			values
			(
			idRegistroSitp,fechaRegistro,fechaMovimiento,pCodigoNomina,SueldoBasico,
			vCompensacion,primasCargo,primasTrabajador,recCargo.grado,vPaso,recDependencia.cod_dependencia,
			recSede.cod_sede,recCargo.tipo_cargo,recTipoPersonal.nombre,recClasificacionPersonal.id_clasificacion_personal,recCausaMovimiento.id_causa_movimiento,
			recCausaMovimiento.cod_causa_movimiento,recManualCargo.cod_manual_cargo, recCargo.cod_cargo,recCargo.descripcion_cargo,recTabulador.cod_tabulador,
			afectaSueldo,documentoSoporte,vLocalidad,numeroMovimiento,pCedula,  
			recPersonal.primer_apellido || ' ' || recPersonal.primer_nombre, recPersonal.id_personal,idRemesa,vEstatusRsitp,recDependencia.nombre,
			recSede.nombre,recOrganismo.id_organismo,recOrganismo.cod_organismo,recOrganismo.cod_organismo,recOrganismo.nombre_organismo,
			vObservaciones,idUsuario,estatusMpd,codigoDevolucion,analistaMpd,
			idAnalistaMpd,fechaInicioMpd,fechaFinMpd,observacionesMpd,recRegion.cod_region,
			recRegion.nombre,idSitp,tiempoSitp,fechaPuntoCuenta,puntoCuenta,
			vAnio,anteriorCodManualCargo,anteriorCodCargo,anteriorDescripcionCargo,
			anteriorCodigoNomina,anteriorCodSede,anteriorNombreSede,anteriorCodDependencia,
			anteriorNombreDependencia,anteriorSueldo,anteriorCompensacion,anteriorPrimasCargo,
			anteriorPrimasTrabajador,anteriorGrado,anteriorPaso,anteriorCodRegion,
			anteriorNombreRegion,codConcurso,pfechaIngreso,recSede.id_turno,fechaCulminacion);		

	else -- Son  sujeto a lefp y manejan historicocargos y movimientositp

		-- historicocargos 

		-- ubico el proximo id de registrositp 
		raise notice 'Busco el id de historicocargos';
		select coalesce(max(id_historico_cargos),0)+1 into IdHistoricoCargos from historicocargos;

		insert into historicocargos 
			(
			id_historico_cargos,id_registro,id_causa_movimiento,id_cargo,
			id_dependencia,	codigo_nomina,situacion,movimiento,fecha_movimiento,horas,cedula,
			primer_apellido,segundo_apellido,primer_nombre,segundo_nombre
			) 
			values 
			(
			IdHistoricoCargos,pIdRegistro,recCausaMovimiento.id_causa_movimiento,recCargo.id_cargo,
			pIdDependencia, pCodigoNomina,vSituacionRc,vMovimientoHc,fechaMovimiento,vHoras,pCedula,
			recPersonal.primer_apellido,recPersonal.segundo_apellido,recPersonal.primer_nombre,recPersonal.segundo_nombre
			);


		-- movimientositp

		-- ubico el proximo id de registrositp 
		raise notice 'Busco el id de movimientositp';
		select coalesce(max(id_movimiento_sitp),0)+1 into idMovimientoSitp from movimientositp;

		-- ubico el proximo numero de movimiento en registrositp 
		raise notice 'Busco el numero movimiento';
		select coalesce(max(numero_movimiento),0)+1 into numeroMovimiento from movimientositp;
	
		-- inserto los registros 
		raise notice 'Inserto el registro en registrositp';
		insert into movimientositp
			(
			id_movimiento_sitp,fecha_registro,fecha_movimiento,codigo_nomina,sueldo,
			compensacion,primas_cargo,primas_trabajador,grado,paso,cod_dependencia,
			cod_sede,tipo_personal,nombre_tipo_personal,id_clasificacion_personal,id_causa_movimiento,
			cod_causa_movimiento,cod_manual_cargo,cod_cargo,descripcion_cargo,cod_tabulador,
			afecta_sueldo,documento_soporte,localidad,numero_movimiento,cedula,
			apellidos_nombres,id_personal,id_remesa,estatus,nombre_dependencia,
			nombre_sede,id_organismo,cod_organismo,cod_organismo_mpd,nombre_organismo,
			observaciones,id_usuario,estatus_mpd,codigo_devolucion,analista_mpd,
			id_analista_mpd,fecha_inicio_mpd,fecha_fin_mpd,observaciones_mpd,cod_region,
			nombre_region,id_sitp,tiempo_sitp,fecha_punto_cuenta,punto_cuenta,
			anio,anterior_cod_manual_cargo,anterior_cod_cargo,anterior_descripcion_cargo,
			anterior_codigo_nomina,anterior_cod_sede,anterior_nombre_sede,anterior_cod_dependencia,
			anterior_nombre_dependencia,anterior_sueldo,anterior_compensacion,anterior_primas_cargo,
			anterior_primas_trabajador,anterior_grado,anterior_paso,anterior_cod_region,
			anterior_nombre_region,cod_concurso,fecha_ingreso,id_turno,fecha_culminacion,monto_jubilacion,
			sueldo_promedio,porc_jubilacion)
			values
			(
			idMovimientoSitp,fechaRegistro,fechaMovimiento,pCodigoNomina,SueldoBasico,
			vCompensacion,primasCargo,primasTrabajador,recCargo.grado,vPaso,recDependencia.cod_dependencia,
			recSede.cod_sede,recCargo.tipo_cargo,recTipoPersonal.nombre,recClasificacionPersonal.id_clasificacion_personal,recCausaMovimiento.id_causa_movimiento,
			recCausaMovimiento.cod_causa_movimiento,recManualCargo.cod_manual_cargo, recCargo.cod_cargo,recCargo.descripcion_cargo,recTabulador.cod_tabulador,
			afectaSueldo,documentoSoporte,vLocalidad,numeroMovimiento,pCedula,  
			recPersonal.primer_apellido || ' ' || recPersonal.primer_nombre, recPersonal.id_personal,idRemesa,vEstatusRsitp,recDependencia.nombre,
			recSede.nombre,recOrganismo.id_organismo,recOrganismo.cod_organismo,recOrganismo.cod_organismo,recOrganismo.nombre_organismo,
			vObservaciones,idUsuario,estatusMpd,codigoDevolucion,analistaMpd,
			idAnalistaMpd,fechaInicioMpd,fechaFinMpd,observacionesMpd,recRegion.cod_region,
			recRegion.nombre,idSitp,tiempoSitp,fechaPuntoCuenta,puntoCuenta,
			vAnio,anteriorCodManualCargo,anteriorCodCargo,anteriorDescripcionCargo,
			anteriorCodigoNomina,anteriorCodSede,anteriorNombreSede,anteriorCodDependencia,
			anteriorNombreDependencia,anteriorSueldo,anteriorCompensacion,anteriorPrimasCargo,
			anteriorPrimasTrabajador,anteriorGrado,anteriorPaso,anteriorCodRegion,
			anteriorNombreRegion,codConcurso,pfechaIngreso,recSede.id_turno,fechaCulminacion,
			montoJubilacion, vSueldoPromedio, porcJubilacion);		
	end if;


	-- inserto trayectoria, comun a todos los tipos de personal

	-- ubico el proximo id de trayectoria 
	raise notice 'Busco el id de trayectoria';
	select coalesce(max(id_trayectoria),0)+1 into idTrayectoria from trayectoria;


	insert into trayectoria (
		id_trayectoria,cedula,primer_apellido,segundo_apellido,primer_nombre,
		segundo_nombre,anio_preparacion,fecha_preparacion,codigo_anterior_mpd,
		numero_remesa,numero_movimiento,correlativo_mpd,nombre_corto,nombre_organismo,
		estatus,fecha_estatus,fecha_vigencia,cod_ubi_geografico,estado,ciudad,
		municipio,cod_region,nombre_region,cod_dependencia,nombre_dependencia,
		cod_causa_movimiento,descripcion_movimiento,nombre_corto_grupo,nombre_largo_grupo,
		caucion,cod_manual_cargo,cod_cargo,descripcion_cargo,cod_relacion,
		desc_relacion,cod_categoria,desc_categoria,nombramiento,grado,
		paso,codigo_nomina,monto_jubilacion,porc_jubilacion,sueldo_promedio,
		monto_jubilacion_sobrev,porc_pension_sobrev,monto_pension_sobrev,monto_pension_invalid,
		porc_pension_invalid,invalidez_sact,sueldo_basico,compensacion,prima_jerarquia,
		prima_servicio,ajuste_sueldo,otros_pagos,otros_no_vicepladin,primas_cargo,primas_trabajador,
		id_personal,horas,cod_concurso,fecha_punto_cuenta,observaciones,origen,punto_cuenta,
		usuario,cod_grupo_organismo,cod_organismo,fecha_culminacion
		)
		values
		(
		idTrayectoria,pCedula,recPersonal.primer_apellido,recPersonal.segundo_apellido,recPersonal.primer_nombre,
		recPersonal.segundo_nombre,anioPreparacion,fechaPreparacion,recOrganismo.codigo_anterior_mpd,
		numeroRemesa,numeroMovimiento, correlativoMpd, recOrganismo.nombre_corto, recOrganismo.nombre_organismo,
		vEstatusTray,fechaEstatus,fechaVigencia, recCiudad.cod_ciudad || recEstado.cod_estado,recEstado.nombre,recCiudad.nombre,
		nombreMunicipio, recRegion.cod_region, recRegion.nombre, recDependencia.cod_dependencia,recDependencia.nombre,
		recCausaMovimiento.cod_causa_movimiento,recCausaMovimiento.descripcion, recGrupoOrganismo.nombre_corto, recGrupoOrganismo.nombre,
		recCargo.caucion,recManualCargo.cod_manual_cargo, recCargo.cod_cargo, recCargo.descripcion_cargo, recRelacionPersonal.cod_relacion,
		recRelacionPersonal.desc_relacion, recCategoriaPersonal.cod_categoria,recCategoriaPersonal.desc_categoria,vNombramiento,recCargo.grado,
		VPaso,pCodigoNomina,montoJubilacion,porcJubilacion,vSueldoPromedio,
		montoJubilacionSobrev,porcPensionSobrev,montoPensionSobrev,montoPensionInvalid,
		porcPensionInvalid,invalidezSact,sueldoBasico,vCompensacion,primaJerarquia,
		primaServicio,ajusteSueldo,otrosPagos,otrosNoVicepladin,primasCargo,primasTrabajador,
		recPersonal.id_personal,vHoras,codConcurso,fechaPuntoCuenta,vObservaciones,vOrigen, puntoCuenta,
		vUsuario, recGrupoOrganismo.cod_grupo_organismo, recOrganismo.cod_organismo, fechaCulminacion
		);

	-- inserto el registro en sueldoPromedio 

	-- ubico el proximo id de sueldopromedio 
	raise notice 'Busco el id de sueldopromedio';
	select coalesce(max(id_sueldo_promedio),0)+1 into idSueldoPromedio from sueldopromedio;

	insert into sueldopromedio
		(
		id_sueldo_promedio,id_trabajador,id_tipo_personal,id_grupo_nomina,promedio_integral,
		promedio_sueldo,sueldo_anual,promedio_sso,retencion_sso,retencion_spf,
		promedio_lph,retencion_lph,retencion_fju,promedio_fju,promedio_vacaciones,
		promedio_utilidad,aporte_sso,aporte_spf,aporte_lph,aporte_fju,promedio_ajustes,
		promedio_compensacion,promedio_primasc,promedio_primast,promedio_spf,monto_variable_sso,
		monto_variable_lph,monto_variable_fju,id_sitp,tiempo_sitp
		)
		values
		(
		idSueldoPromedio,idTrabajador,pIdTipoPersonal,recTipoPersonal.id_grupo_nomina,0.0,
		0.0,0.0,0.0,0.0,0.0,
		0.0,0.0,0.0,0.0,0.0,
		0.0,0.0,0.0,0.0,0.0,0.0,
		0.0,0.0,0.0,0.0,0.0,
		0.0,0.0,idSitp,tiempoSitp
		);
	
end;  $_$;


ALTER FUNCTION public.carga_masiva_trabajador_proceso(integer, integer, integer, integer, integer, date, date, date, date, date, integer, character varying, character varying, integer, character varying, integer, character varying, double precision, character varying, character varying, character varying, character varying, integer, integer) OWNER TO postgres;

--
-- TOC entry 711 (class 1255 OID 183697)
-- Name: convert_2_decimal(double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION convert_2_decimal(double precision) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$
declare 
	pValorInicial alias for $1;		
	valorFinal float8 := 0;
begin
	valorFinal := round(pValorInicial*100);
	valorFinal := valorFinal/100;
	return valorFinal;
end;
$_$;


ALTER FUNCTION public.convert_2_decimal(double precision) OWNER TO postgres;

--
-- TOC entry 712 (class 1255 OID 183698)
-- Name: count_descuentoticket(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION count_descuentoticket(integer, integer, integer) RETURNS bigint
    LANGUAGE sql
    AS $_$
	select count(*) from descuentoticket 
	where id_trabajador = $1 
	and mes = $2 and anio = $3;
	
$_$;


ALTER FUNCTION public.count_descuentoticket(integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 713 (class 1255 OID 183699)
-- Name: crear_encabezadorendicionmensual(integer, character varying, integer, integer, integer, character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION crear_encabezadorendicionmensual(integer, character varying, integer, integer, integer, character varying, character varying, boolean) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadAdministradora alias for $1;
	pCodUnidadAdministradora alias for $2;
	pAnio alias for $3;
	pMes alias for $4;
	pNumeroNomina alias for $5;
	pUsuario alias for $6;
	pTitulo alias for $7;
	pAportes alias for $8;

	recEncabezadoRendicionMensual record;
	curEncabezadoRendicionMensual cursor(pIdUnidadAdministradora int4, pAnio int4, 
		pMes int4, pNumeroNomina int4, pAportes boolean)
		for select id_encabezado_rendicion_mensual as id
		from encabezadorendicionmensual
		where id_unidad_administradora = pIdUnidadAdministradora
		and anio = pAnio 
		and mes = pMes 
		and numero_nomina = pNumeroNomina
		and aportes = pAportes;

	id int4:=0;	

begin
	-- Version 1.0
	open curEncabezadoRendicionMensual(pIdUnidadAdministradora, pAnio, pMes, pNumeroNomina, pAportes);
	fetch curEncabezadoRendicionMensual into recEncabezadoRendicionMensual;
	if recEncabezadoRendicionMensual.id is null then
		id := last_id_encabezadorendicionmensual()+1;
		if id is null then
			id := 1;
		end if;

		insert into encabezadorendicionmensual
			(id_encabezado_rendicion_mensual,anio,mes,id_unidad_administradora,
			numero_nomina,cod_unidad_administ,cerrado,usuario,titulo, aportes) values(
			id, pAnio, pMes,pIdUnidadAdministradora,
			pNumeroNomina,pCodUnidadAdministradora,'N',pUsuario, pTitulo, pAportes);
		return id;
	else
		return recEncabezadoRendicionMensual.id;
	end if;

end;

$_$;


ALTER FUNCTION public.crear_encabezadorendicionmensual(integer, character varying, integer, integer, integer, character varying, character varying, boolean) OWNER TO postgres;

--
-- TOC entry 714 (class 1255 OID 183700)
-- Name: crear_encabezadorendicionmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION crear_encabezadorendicionmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadAdministradora alias for $1;
	pCodUnidadAdministradora alias for $2;
	pAnio alias for $3;
	pMes alias for $4;
	pNumeroNomina alias for $5;
	pUsuario alias for $6;
	pTitulo alias for $7;
	pAportes alias for $8;

	recEncabezadoRendicionMensual record;
	curEncabezadoRendicionMensual cursor(pIdUnidadAdministradora int4, pAnio int4, 
		pMes int4, pNumeroNomina int4, pAportes varchar)
		for select id_encabezado_rendicion_mensual as id
		from encabezadorendicionmensual
		where id_unidad_administradora = pIdUnidadAdministradora
		and anio = pAnio 
		and mes = pMes 
		and numero_nomina = pNumeroNomina
		and aportes = pAportes;

	id int4:=0;	

begin
	-- Version 1.0
	open curEncabezadoRendicionMensual(pIdUnidadAdministradora, pAnio, pMes, pNumeroNomina, pAportes);
	fetch curEncabezadoRendicionMensual into recEncabezadoRendicionMensual;
	if recEncabezadoRendicionMensual.id is null then
		id := last_id_encabezadorendicionmensual()+1;
		if id is null then
			id := 1;
		end if;

		insert into encabezadorendicionmensual
			(id_encabezado_rendicion_mensual,anio,mes,id_unidad_administradora,
			numero_nomina,cod_unidad_administ,cerrado,usuario,titulo, aportes) values(
			id, pAnio, pMes,pIdUnidadAdministradora,
			pNumeroNomina,pCodUnidadAdministradora,'N',pUsuario, pTitulo, pAportes);
		return id;
	else
		return recEncabezadoRendicionMensual.id;
	end if;

end;

$_$;


ALTER FUNCTION public.crear_encabezadorendicionmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 715 (class 1255 OID 183701)
-- Name: crear_encabezadorendicionmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION crear_encabezadorendicionmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadAdministradora alias for $1;
	pCodUnidadAdministradora alias for $2;
	pAnio alias for $3;
	pMes alias for $4;
	pNumeroNomina alias for $5;
	pUsuario alias for $6;
	pTitulo alias for $7;
	pAportes alias for $8;
	pIdAporte alias for $9;

	recEncabezadoRendicionMensual record;
	curEncabezadoRendicionMensual cursor(pIdUnidadAdministradora int4, pAnio int4, 
		pMes int4, pNumeroNomina int4, pAportes varchar, pIdAporte int4)
		for select id_encabezado_rendicion_mensual as id
		from encabezadorendicionmensual
		where id_unidad_administradora = pIdUnidadAdministradora
		and anio = pAnio 
		and mes = pMes 
		and numero_nomina = pNumeroNomina
		and aportes = pAportes
		and id_aporte = pIdAporte;

	id int4:=0;	

begin
	-- Version 2.0
	open curEncabezadoRendicionMensual(pIdUnidadAdministradora, pAnio, pMes, pNumeroNomina, pAportes, pIdAporte);
	fetch curEncabezadoRendicionMensual into recEncabezadoRendicionMensual;
	if recEncabezadoRendicionMensual.id is null then
		id := last_id_encabezadorendicionmensual()+1;
		if id is null then
			id := 1;
		end if;

		insert into encabezadorendicionmensual
			(id_encabezado_rendicion_mensual,anio,mes,id_unidad_administradora,
			numero_nomina,cod_unidad_administ,cerrado,usuario,titulo, aportes, id_aporte) values(
			id, pAnio, pMes,pIdUnidadAdministradora,
			pNumeroNomina,pCodUnidadAdministradora,'N',pUsuario, pTitulo, pAportes, pIdAporte);
		return id;
	else
		return recEncabezadoRendicionMensual.id;
	end if;

end;

$_$;


ALTER FUNCTION public.crear_encabezadorendicionmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying, integer) OWNER TO postgres;

--
-- TOC entry 717 (class 1255 OID 183702)
-- Name: crear_encabezadoresumenmensual(integer, character varying, integer, integer, integer, character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION crear_encabezadoresumenmensual(integer, character varying, integer, integer, integer, character varying, character varying, boolean) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadAdministradora alias for $1;
	pCodUnidadAdministradora alias for $2;
	pAnio alias for $3;
	pMes alias for $4;
	pNumeroNomina alias for $5;
	pUsuario alias for $6;
	pTitulo alias for $7;
	pAportes alias for $8;

	recEncabezadoResumenMensual record;
	curEncabezadoResumenMensual cursor(pIdUnidadAdministradora int4, pAnio int4, 
		pMes int4, pNumeroNomina int4, pAportes boolean)
		for select id_encabezado_resumen_mensual as id
		from encabezadoresumenmensual
		where id_unidad_administradora = pIdUnidadAdministradora
		and anio = pAnio 
		and mes = pMes 
		and numero_nomina = pNumeroNomina
		and aportes = pAportes;

	id int4:=0;	

begin
	-- Version 1.0
	open curEncabezadoResumenMensual(pIdUnidadAdministradora, pAnio, pMes, pNumeroNomina, pAportes);
	fetch curEncabezadoResumenMensual into recEncabezadoResumenMensual;
	if recEncabezadoResumenMensual.id is null then
		id := last_id_encabezadoresumenmensual()+1;
		if id is null then
			id := 1;
		end if;

		insert into encabezadoresumenmensual
			(id_encabezado_resumen_mensual,anio,mes,id_unidad_administradora,
			numero_nomina,cod_unidad_administ,cerrado,usuario,titulo, aportes) values(
			id, pAnio, pMes,pIdUnidadAdministradora,
			pNumeroNomina,pCodUnidadAdministradora,'N',pUsuario, pTitulo, pAportes);
		return id;
	else
		return recEncabezadoResumenMensual.id;
	end if;

end;

$_$;


ALTER FUNCTION public.crear_encabezadoresumenmensual(integer, character varying, integer, integer, integer, character varying, character varying, boolean) OWNER TO postgres;

--
-- TOC entry 718 (class 1255 OID 183703)
-- Name: crear_encabezadoresumenmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION crear_encabezadoresumenmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadAdministradora alias for $1;
	pCodUnidadAdministradora alias for $2;
	pAnio alias for $3;
	pMes alias for $4;
	pNumeroNomina alias for $5;
	pUsuario alias for $6;
	pTitulo alias for $7;
	pAportes alias for $8;

	recEncabezadoResumenMensual record;
	curEncabezadoResumenMensual cursor(pIdUnidadAdministradora int4, pAnio int4, 
		pMes int4, pNumeroNomina int4, pAportes varchar)
		for select id_encabezado_resumen_mensual as id
		from encabezadoresumenmensual
		where id_unidad_administradora = pIdUnidadAdministradora
		and anio = pAnio 
		and mes = pMes 
		and numero_nomina = pNumeroNomina
		and aportes = pAportes;

	id int4:=0;	

begin
	-- Version 1.0
	open curEncabezadoResumenMensual(pIdUnidadAdministradora, pAnio, pMes, pNumeroNomina, pAportes);
	fetch curEncabezadoResumenMensual into recEncabezadoResumenMensual;
	if recEncabezadoResumenMensual.id is null then
		id := last_id_encabezadoresumenmensual()+1;
		if id is null then
			id := 1;
		end if;

		insert into encabezadoresumenmensual
			(id_encabezado_resumen_mensual,anio,mes,id_unidad_administradora,
			numero_nomina,cod_unidad_administ,cerrado,usuario,titulo, aportes) values(
			id, pAnio, pMes,pIdUnidadAdministradora,
			pNumeroNomina,pCodUnidadAdministradora,'N',pUsuario, pTitulo, pAportes);
		return id;
	else
		return recEncabezadoResumenMensual.id;
	end if;

end;

$_$;


ALTER FUNCTION public.crear_encabezadoresumenmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 719 (class 1255 OID 183704)
-- Name: crear_encabezadoresumenmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION crear_encabezadoresumenmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadAdministradora alias for $1;
	pCodUnidadAdministradora alias for $2;
	pAnio alias for $3;
	pMes alias for $4;
	pNumeroNomina alias for $5;
	pUsuario alias for $6;
	pTitulo alias for $7;
	pAportes alias for $8;
	pIdAporte alias for $9;

	recEncabezadoResumenMensual record;
	curEncabezadoResumenMensual cursor(pIdUnidadAdministradora int4, pAnio int4, 
		pMes int4, pNumeroNomina int4, pAportes varchar, pIdAporte int4)
		for select id_encabezado_resumen_mensual as id
		from encabezadoresumenmensual
		where id_unidad_administradora = pIdUnidadAdministradora
		and anio = pAnio 
		and mes = pMes 
		and numero_nomina = pNumeroNomina
		and aportes = pAportes
		and id_aporte = pIdAporte;

	id int4:=0;	

begin
	-- Version 1.0
	open curEncabezadoResumenMensual(pIdUnidadAdministradora, pAnio, pMes, pNumeroNomina, pAportes, pIdAporte);
	fetch curEncabezadoResumenMensual into recEncabezadoResumenMensual;
	if recEncabezadoResumenMensual.id is null then
		id := last_id_encabezadoresumenmensual()+1;
		if id is null then
			id := 1;
		end if;

		insert into encabezadoresumenmensual
			(id_encabezado_resumen_mensual,anio,mes,id_unidad_administradora,
			numero_nomina,cod_unidad_administ,cerrado,usuario,titulo, aportes) values(
			id, pAnio, pMes,pIdUnidadAdministradora,
			pNumeroNomina,pCodUnidadAdministradora,'N',pUsuario, pTitulo, pAportes);
		return id;
	else
		return recEncabezadoResumenMensual.id;
	end if;

end;

$_$;


ALTER FUNCTION public.crear_encabezadoresumenmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying, integer) OWNER TO postgres;

--
-- TOC entry 720 (class 1255 OID 183705)
-- Name: delete_all_planillaarc(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION delete_all_planillaarc(integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
delete from planillaarc where id_trabajador in 
	(select id_trabajador from trabajador where id_tipo_personal = $1) and anio = $2

$_$;


ALTER FUNCTION public.delete_all_planillaarc(integer, integer) OWNER TO postgres;

--
-- TOC entry 721 (class 1255 OID 183706)
-- Name: delete_all_ultimanomina(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION delete_all_ultimanomina(integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
delete from ultimanomina where id_grupo_nomina = $1 and numero_nomina = $2

$_$;


ALTER FUNCTION public.delete_all_ultimanomina(integer, integer) OWNER TO postgres;

--
-- TOC entry 722 (class 1255 OID 183707)
-- Name: delete_all_ultimaprenomina(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION delete_all_ultimaprenomina(integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
delete from ultimaprenomina where id_grupo_nomina = $1 and numero_nomina = $2

$_$;


ALTER FUNCTION public.delete_all_ultimaprenomina(integer, integer) OWNER TO postgres;

--
-- TOC entry 723 (class 1255 OID 183708)
-- Name: delete_conceptovariable1(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION delete_conceptovariable1(integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
delete from conceptovariable where id_concepto_variable in 
	(select id_concepto from ultimanomina where origen = 'V' 
	and numero_nomina = $2 and 
	id_grupo_nomina = $1)


$_$;


ALTER FUNCTION public.delete_conceptovariable1(integer, integer) OWNER TO postgres;

--
-- TOC entry 724 (class 1255 OID 183709)
-- Name: delete_conceptovariable2(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION delete_conceptovariable2(integer) RETURNS void
    LANGUAGE sql
    AS $_$
	delete from conceptovariable where id_concepto_variable in 
		(select id_concepto from ultimanomina un, frecuenciatipopersonal ftp, frecuenciapago fp
		where un.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal 
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago and fp.cod_frecuencia_pago = 1 and origen = 'V'
		and numero_nomina = 0 and 
		id_grupo_nomina = $1)


$_$;


ALTER FUNCTION public.delete_conceptovariable2(integer) OWNER TO postgres;

--
-- TOC entry 725 (class 1255 OID 183710)
-- Name: delete_conceptovariable3(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION delete_conceptovariable3(integer) RETURNS void
    LANGUAGE sql
    AS $_$
	delete from conceptovariable where id_concepto_variable in 
		(select un.id_concepto from ultimanomina un, conceptotipopersonal ctp, concepto co where origen = 'V' 
		and numero_nomina = 0  
		and un.id_concepto_tipo_personal=ctp.id_concepto_tipo_personal  
		and ctp.id_concepto=co.id_concepto 
		and co.cod_concepto in ('1500', '1601', '1701', '1502') 
		and id_grupo_nomina = $1)


$_$;


ALTER FUNCTION public.delete_conceptovariable3(integer) OWNER TO postgres;

--
-- TOC entry 726 (class 1255 OID 183711)
-- Name: delete_historico_nomina(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION delete_historico_nomina(integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---borrar el historico nomina de la nomina reversada
    ---
	DELETE FROM historiconomina
	  where id_grupo_nomina = $1
            and numero_nomina = $2
            and anio = $3
            and mes = $4
            and semana_quincena = $5;
	
$_$;


ALTER FUNCTION public.delete_historico_nomina(integer, integer, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 716 (class 1255 OID 183712)
-- Name: delete_historico_quincena(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION delete_historico_quincena(integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---borrar el historico quincena de la nomina reversada
    ---
	DELETE FROM historicoquincena
	  where id_grupo_nomina = $1
            and numero_nomina = $2
            and anio = $3
            and mes = $4
            and semana_quincena = $5;
	
$_$;


ALTER FUNCTION public.delete_historico_quincena(integer, integer, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 728 (class 1255 OID 183713)
-- Name: delete_historico_semana(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION delete_historico_semana(integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---borrar el historico semana de la nomina reversada
    ---
	DELETE FROM historicosemana
	  where id_grupo_nomina = $1
            and numero_nomina = $2
            and anio = $3
            and mes = $4
            and semana_quincena = $5;
	
$_$;


ALTER FUNCTION public.delete_historico_semana(integer, integer, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 729 (class 1255 OID 183714)
-- Name: delete_historicobaseislr(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION delete_historicobaseislr(integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$

	DELETE FROM historicobaseislr
	  where id_grupo_nomina = $1
            and numero_nomina = $2
            and anio = $3
            and mes = $4
            and semana_quincena = $5;
$_$;


ALTER FUNCTION public.delete_historicobaseislr(integer, integer, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 730 (class 1255 OID 183715)
-- Name: delete_prestacionesmensuales(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION delete_prestacionesmensuales(integer, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
   DELETE FROM  prestacionesmensuales
     WHERE id_tipo_personal = $1
       AND id_trabajador =$2
       AND anio = $3
       AND mes = $4;
	
$_$;


ALTER FUNCTION public.delete_prestacionesmensuales(integer, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 731 (class 1255 OID 183716)
-- Name: delete_seguridadordinaria(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION delete_seguridadordinaria(integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---borrar seguridad ordinaria  de la nomina reversada
    ---
DELETE FROM seguridadordinaria
   WHERE id_seguridad_ordinaria = $1;
$_$;


ALTER FUNCTION public.delete_seguridadordinaria(integer) OWNER TO postgres;

--
-- TOC entry 732 (class 1255 OID 183717)
-- Name: delete_ultimanomina_reverso(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION delete_ultimanomina_reverso(integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---borrar la ultima nomina reversada
    ---
	DELETE FROM ultimanomina
	  where id_grupo_nomina = $1
            and numero_nomina = $2;
	
$_$;


ALTER FUNCTION public.delete_ultimanomina_reverso(integer, integer) OWNER TO postgres;

--
-- TOC entry 733 (class 1255 OID 183718)
-- Name: desactivar_fe_vida(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION desactivar_fe_vida(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;
	
	recTrabajadores record;
	curTrabajadores cursor(pIdTipoPersonal int4) 
	for select count(*) as cantidad from trabajador 
	where id_tipo_personal = pIdTipoPersonal
	and fe_vida = 'S';

	cantidad int4 := 0;
begin

	open curTrabajadores(pIdTipoPersonal);
	fetch curTrabajadores into recTrabajadores;

	if recTrabajadores.cantidad is not null then
		cantidad := recTrabajadores.cantidad;
	end if;

	update trabajador set  fe_vida = 'N' 
		where id_tipo_personal = pIdTipoPersonal and fe_vida = 'S' and estatus = 'A';

	return cantidad;
end;

$_$;


ALTER FUNCTION public.desactivar_fe_vida(integer) OWNER TO postgres;

--
-- TOC entry 734 (class 1255 OID 183719)
-- Name: egresos_fraccionados(integer, date, date, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION egresos_fraccionados(integer, date, date, boolean) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
	pIdGrupoNomina alias for $1;
	pFechaInicio alias for $2;
	pFechaFin alias for $3;
	pPrimeraQuincena alias for $4;



	recTrabajadores record;
	curTrabajadores cursor(pIdGrupoNomina int4, pFechaInicio date, pFechaFin date)
		for select distinct id_trabajador, dia_egreso 
		from trabajador where estatus = 'E'
		and fecha_egreso between pFechaInicio and pFechaFin
		and id_tipo_personal in 
		(select id_tipo_personal from tipopersonal where id_grupo_nomina = pIdGrupoNomina);

	recConceptoFijo record;
	curConceptoFijo cursor(pIdTrabajador int4)
		for select distinct cf.id_concepto_fijo, cf.unidades, cf.monto, cf.documento_soporte, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, t.id_tipo_personal, fp.cod_frecuencia_pago
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;


	dias int4 := 0;
	monto float8:=0;
	unidades float8:=0;
	montoRestituir float8:=0;
	unidadesRestituir float8:=0;
begin

-- Lee los trabajadores egresados y calcula los montos de los conceptos
-- que seran aplicados en forma fraccionada

	open curTrabajadores(pIdGrupoNomina, pFechaInicio,pFechaFin);
	loop
		fetch curTrabajadores into recTrabajadores;
		exit when not found;
		raise notice 'paso 0';
		dias := (recTrabajadores.dia_egreso - extract(day from pFechaInicio))+1;
		open curConceptoFijo(recTrabajadores.id_trabajador);
		loop
			raise notice 'paso 1';
			fetch curConceptoFijo into recConceptoFijo;
			exit when not found;

			montoRestituir := 0;
			unidadesRestituir := 0;
			monto := 0;
			unidades :=0;

			montoRestituir := recConceptoFijo.monto;
			unidadesRestituir := recConceptoFijo.unidades;
			unidades := dias;
			if recConceptoFijo.cod_frecuencia_pago = 3 then
				monto:= (recConceptoFijo.monto/15)*dias;
			elsif recConceptoFijo.cod_frecuencia_pago = 2 then
				monto := (recConceptoFijo.monto/30)*dias;
			elsif recConceptoFijo.cod_frecuencia_pago = 1 and pPrimeraQuincena = true then
				monto := (recConceptoFijo.monto/30)*dias;
			
                        elsif recConceptoFijo.cod_frecuencia_pago = 4 then
				monto := (recConceptoFijo.monto/7)*dias;
                        end if;
		      
			if monto <> 0 then
				perform actualizar_montos_conceptofijo(recConceptoFijo.id_concepto_fijo,
					monto,unidades,montoRestituir,unidadesRestituir, 'S');
                        end if;
			
		end loop;
		close curConceptoFijo;
		raise notice 'id_trabajador %',recTrabajadores.id_trabajador;
		raise notice 'monto %',monto;
		raise notice 'unidades %',unidades;
	end loop;

	return 0;

end;

$_$;


ALTER FUNCTION public.egresos_fraccionados(integer, date, date, boolean) OWNER TO postgres;

--
-- TOC entry 735 (class 1255 OID 183720)
-- Name: generar_conceptoresumen(integer, integer, character varying, character varying, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_conceptoresumen(integer, integer, character varying, character varying, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;
	pNumeroNomina alias for $2;
	pPeriodicidad alias for $3;
	pEstatus alias for $4;
	pAnio alias for $5;
	pMes alias for $6;
	pIdUnidadAdministradora alias for $7;

	recConceptos record;
	curConceptos cursor (pIdTrabajador int4, f1 int4,f2 int4,f3 int4,f4 int4,f5 int4,f6 int4,f7 int4) 
		for select distinct cf.id_concepto_fijo, cf.monto as monto, 
		cf.id_concepto_tipo_personal as id_concepto_tipo_personal,		
		cf.id_frecuencia_tipo_personal as id_frecuencia_tipo_personal,
		cf.unidades as unidades, t.id_trabajador,
		'F' as tipo
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 
		conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and t.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3,f4,f5,f6,f7)
	union
		select distinct cv.id_concepto_variable, cv.monto as monto, 
		cv.id_concepto_tipo_personal as id_concepto,
		cv.id_frecuencia_tipo_personal as id_frecuencia_tipo_personal,
		cv.unidades as unidades, t.id_trabajador,
		'V' as tipo
		from trabajador t, conceptovariable cv, frecuenciatipopersonal ftp, conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cv.id_trabajador
		and cv.monto > 0
		and cv.estatus = 'A'
		and t.estatus = 'A'
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cv.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3,f4,f5,f6,f7);

	recConceptoFijoAsignacionEgresados record;
	curConceptoFijoAsignacionEgresados cursor (key1 int4) 
		for select distinct cf.monto, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, fp.cod_frecuencia_pago
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = key1
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;
			
	recTrabajadores record;
	curTrabajadores cursor (pIdTipoPersonal int4, pEstatus varchar, pIdUnidadAdministradora int4)
		for select distinct t.id_trabajador, t.id_tipo_personal, tp.formula_integral, tp.formula_semanal, t.id_cargo
		from trabajador t, tipopersonal tp, dependencia d, administradorauel auel
		where 
		t.id_tipo_personal = tp.id_tipo_personal
		and t.id_tipo_personal = pIdTipoPersonal
		and t.id_dependencia = d.id_dependencia
		and d.id_administradora_uel = auel.id_administradora_uel
		and auel.id_unidad_administradora = pIdUnidadAdministradora
		and t.estatus = pEstatus;

	recTrabajadoresEgresados record;
	curTrabajadoresEgresados cursor (pIdTrabajador int4, pFechaInicio date, pFechaFin date)
		for select distinct t.id_trabajador, t.id_tipo_personal, tp.formula_integral, tp.formula_semanal, t.id_cargo
		from trabajador t, tipopersonal tp
		where 
		t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'E'
		and t.fecha_egreso between pFechaInicio and pFechaFin;
	
	f1 int4 := 0;
	f2 int4 := 0;	
	f3 int4 := 0;
	f4 int4 := 0;
	f5 int4 := 0;
	f6 int4 := 0;
	f7 int4 := 0;
	id int4 := 0;
	idTrabajador int4 := 0;
	monto float8 := 0;
	
begin

	if pNumeroNomina = 0 then

		---if pPeriodicidad <> 'S' and pPagosFraccionados = 'S' then
		---	perform egresos_fraccionados(pIdGrupoNomina, pFechaInicio, pFechaFin,pPrimeraQuincena);
		---end if;



		if pPeriodicidad = 'S' then
			f1:= 4;
			f2:= 5;
			f3:= 6;
			f4:= 7;
			f5:= 8;
			f6:= 9;
			f7:= 10;
		else
			f1:= 1;
			f2:= 2;
			f3:= 3;
		end if;

	else
		f1 := pFrecuencia;

		---open curNominaEspecial(pIdNominaEspecial);
		---fetch curNominaEspecial into recNominaEspecial;
		---if recNominaEspecial.id_nomina_especial = null then
		---	return 0;
		---end if;
	end if;
	
	
	
	delete from conceptoresumen 
		where anio = pAnio and  mes = pMes and numero_nomina = pNumeroNomina
		and id_trabajador in(select id_trabajador 
		from trabajador
		where id_tipo_personal = pIdTipoPersonal)
		and id_unidad_administradora = pIdUnidadAdministradora;

	
	id := last_id_conceptoresumen()+1;
	if id is null then
		id := 1;
	end if;

	open curTrabajadores (pIdTipoPersonal, pEstatus, pIdUnidadAdministradora);

	loop
		fetch curTrabajadores into recTrabajadores;			
		exit when not found;

		open curConceptos(recTrabajadores.id_trabajador, f1,f2,f3,f4,f5,f6,f7);

		loop
			fetch curConceptos into recConceptos;			
			exit when not found;
					
			id := id+1;

			perform add_conceptoresumen(id,
				recTrabajadores.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_frecuencia_tipo_personal,
				pIdUnidadAdministradora,
				pAnio, pMes,pNumeroNomina,
				recConceptos.unidades,
				convert_2_decimal(recConceptos.monto),
				recConceptos.tipo);			
		end loop;
		close curConceptos;
	end loop;
	close curTrabajadores;
			
	

	return id;

end;

$_$;


ALTER FUNCTION public.generar_conceptoresumen(integer, integer, character varying, character varying, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 736 (class 1255 OID 183721)
-- Name: generar_conceptoresumen(integer, integer, character varying, character varying, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_conceptoresumen(integer, integer, character varying, character varying, integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;
	pNumeroNomina alias for $2;
	pPeriodicidad alias for $3;
	pEstatus alias for $4;
	pAnio alias for $5;
	pMes alias for $6;
	pIdUnidadAdministradora alias for $7;
	pFrecuenciaEspecial alias for $8;

	recConceptos record;
	curConceptos cursor (pIdTrabajador int4, f1 int4,f2 int4,f3 int4,f4 int4,f5 int4,f6 int4,f7 int4) 
		for select distinct cf.id_concepto_fijo, cf.monto as monto, 
		cf.id_concepto_tipo_personal as id_concepto_tipo_personal,		
		cf.id_frecuencia_tipo_personal as id_frecuencia_tipo_personal,
		cf.unidades as unidades, t.id_trabajador,
		'F' as tipo
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 
		conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and t.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3,f4,f5,f6,f7)
	union
		select distinct cv.id_concepto_variable, cv.monto as monto, 
		cv.id_concepto_tipo_personal as id_concepto,
		cv.id_frecuencia_tipo_personal as id_frecuencia_tipo_personal,
		cv.unidades as unidades, t.id_trabajador,
		'V' as tipo
		from trabajador t, conceptovariable cv, frecuenciatipopersonal ftp, conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cv.id_trabajador
		and cv.monto > 0
		and cv.estatus = 'A'
		and t.estatus = 'A'
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cv.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3,f4,f5,f6,f7);

	recConceptoFijoAsignacionEgresados record;
	curConceptoFijoAsignacionEgresados cursor (key1 int4) 
		for select distinct cf.monto, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, fp.cod_frecuencia_pago
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = key1
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;
			
	recTrabajadores record;
	curTrabajadores cursor (pIdTipoPersonal int4, pEstatus varchar, pIdUnidadAdministradora int4)
		for select distinct t.id_trabajador, t.id_tipo_personal, tp.formula_integral, tp.formula_semanal, t.id_cargo
		from trabajador t, tipopersonal tp, dependencia d, administradorauel auel
		where 
		t.id_tipo_personal = tp.id_tipo_personal
		and t.id_tipo_personal = pIdTipoPersonal
		and t.id_dependencia = d.id_dependencia
		and d.id_administradora_uel = auel.id_administradora_uel
		and auel.id_unidad_administradora = pIdUnidadAdministradora
		and t.estatus = pEstatus;

	recTrabajadoresEgresados record;
	curTrabajadoresEgresados cursor (pIdTrabajador int4, pFechaInicio date, pFechaFin date)
		for select distinct t.id_trabajador, t.id_tipo_personal, tp.formula_integral, tp.formula_semanal, t.id_cargo
		from trabajador t, tipopersonal tp
		where 
		t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'E'
		and t.fecha_egreso between pFechaInicio and pFechaFin;
	
	f1 int4 := 0;
	f2 int4 := 0;	
	f3 int4 := 0;
	f4 int4 := 0;
	f5 int4 := 0;
	f6 int4 := 0;
	f7 int4 := 0;
	id int4 := 0;
	idTrabajador int4 := 0;
	monto float8 := 0;
	
begin

	if pNumeroNomina = 0 then

		if pPeriodicidad = 'S' then
			f1:= 4;
			f2:= 5;
			f3:= 6;
			f4:= 7;
			f5:= 8;
			f6:= 9;
			f7:= 10;
		else
			f1:= 1;
			f2:= 2;
			f3:= 3;
		end if;

	else
		f1 := pFrecuenciaEspecial;

		---open curNominaEspecial(pIdNominaEspecial);
		---fetch curNominaEspecial into recNominaEspecial;
		---if recNominaEspecial.id_nomina_especial = null then
		---	return 0;
		---end if;
	end if;
	
	
	
	delete from conceptoresumen 
		where anio = pAnio and  mes = pMes and numero_nomina = pNumeroNomina
		and id_trabajador in(select id_trabajador 
		from trabajador
		where id_tipo_personal = pIdTipoPersonal)
		and id_unidad_administradora = pIdUnidadAdministradora;

	
	id := last_id_conceptoresumen()+1;
	if id is null then
		id := 1;
	end if;

	open curTrabajadores (pIdTipoPersonal, pEstatus, pIdUnidadAdministradora);

	loop
		fetch curTrabajadores into recTrabajadores;			
		exit when not found;

		open curConceptos(recTrabajadores.id_trabajador, f1,f2,f3,f4,f5,f6,f7);

		loop
			fetch curConceptos into recConceptos;			
			exit when not found;
					
			id := id+1;

			perform add_conceptoresumen(id,
				recTrabajadores.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_frecuencia_tipo_personal,
				pIdUnidadAdministradora,
				pAnio, pMes,pNumeroNomina,
				recConceptos.unidades,
				convert_2_decimal(recConceptos.monto),
				recConceptos.tipo);			
		end loop;
		close curConceptos;
	end loop;
	close curTrabajadores;
			
	

	return id;

end;

$_$;


ALTER FUNCTION public.generar_conceptoresumen(integer, integer, character varying, character varying, integer, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 727 (class 1255 OID 183722)
-- Name: generar_cuadro_onapre(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_cuadro_onapre(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pAnio                         alias for $1;
	pidrelacionpersonal      alias for $2;
	
	

        curTrabajadores_proyecto cursor (panio int4,pidrelacionpersonal int4)
      	   for select t.id_organismo,t.id_trabajador,pro.id_proyecto,
                      c.tipo_cargo,p.sexo,tu.jornada,
                      tp.id_clasificacion_personal
		from trabajador t, trabajadorespecifica te, tipopersonal tp,
                     uelespecifica ue, accionespecifica ae, proyecto pro,
                     cargo c,personal p, turno tu
                   where t.id_trabajador        = te.id_trabajador
		     and t.id_tipo_personal     = tp.id_tipo_personal
                     and tp.id_clasificacion_personal in (
                            select id_clasificacion_personal from clasificacionpersonal 
                                where id_relacion_personal = pidrelacionpersonal)
                     and ue.id_uel_especifica   = te.id_uel_especifica
                     and ue.id_accion_especifica = ae.id_accion_especifica
                     and ae.id_proyecto         = pro.id_proyecto
                     and pro.anio = panio
                     and ae.tipo       ='P'   ---Proyecto
                     and c.id_cargo = t.id_cargo
                     and t.id_personal = p.id_personal
                     and t.estatus <>  'E'
                     and t.id_turno= tu.id_turno;
                   
        curTrabajadores_accion cursor (panio int4,pidrelacionpersonal int4)
      	   for select t.id_organismo,
                 t.id_trabajador,ac.id_accion_centralizada,
                      c.tipo_cargo,p.sexo,
                      tu.jornada,tp.id_clasificacion_personal
             from trabajador t, trabajadorespecifica te, tipopersonal tp,
                     uelespecifica ue, accionespecifica ae, accioncentralizada ac,
                     cargo c,personal p, turno  tu
		   where t.id_trabajador        = te.id_trabajador
		     and t.id_tipo_personal     = tp.id_tipo_personal
                     and tp.id_clasificacion_personal in (
                            select id_clasificacion_personal from clasificacionpersonal 
                                where id_relacion_personal = pidrelacionpersonal)
                     and ue.id_uel_especifica   = te.id_uel_especifica
                     and ue.id_accion_especifica = ae.id_accion_especifica
                     and ae.id_accion_centralizada   = ac.id_accion_centralizada
                     and ae.tipo       ='A'     ---Accio Centralizada
                     and ac.anio = panio
                     and c.id_cargo = t.id_cargo
                     and t.id_personal = p.id_personal
                     and t.estatus <>  'E'
                     and t.id_turno= tu.id_turno;


       curTrabajadores_proyecto_cargo cursor (panio int4,pidrelacionpersonal int4)
      	   for select t.id_organismo,
                  t.id_trabajador,pro.id_proyecto,c.tipo_cargo,
                  p.sexo,tu.jornada,tp.id_clasificacion_personal
		from trabajador t, cargoespecifica ce, tipopersonal tp,
                     uelespecifica ue, accionespecifica ae, proyecto pro,
                     cargo c,personal p, turno  tu
		   where t.id_registro_cargos   = ce.id_registro_cargos
		     and t.id_tipo_personal     = tp.id_tipo_personal
                     and tp.id_clasificacion_personal in (
                            select id_clasificacion_personal from clasificacionpersonal 
                                where id_relacion_personal = pidrelacionpersonal)
                     and ue.id_uel_especifica   = ce.id_uel_especifica
                     and ue.id_accion_especifica = ae.id_accion_especifica
                     and ae.id_proyecto         = pro.id_proyecto
                     and pro.anio = panio
                     and ae.tipo       ='P'   ---Proyecto
                     and c.id_cargo = t.id_cargo
                     and t.id_personal = p.id_personal
                     and t.estatus <>  'E'
                     and t.id_turno= tu.id_turno;
                   
        curTrabajadores_accion_cargo cursor (panio int4,pidrelacionpersonal int4)
      	   for select t.id_organismo,
               t.id_trabajador,ac.id_accion_centralizada,c.tipo_cargo,
                  p.sexo,tu.jornada,tp.id_clasificacion_personal
		from trabajador t, cargoespecifica ce, tipopersonal tp,
                     uelespecifica ue, accionespecifica ae, accioncentralizada ac,
                     cargo c,personal p, turno  tu
		   where t.id_registro_cargos   = ce.id_registro_cargos
		     and t.id_tipo_personal     = tp.id_tipo_personal
                     and tp.id_clasificacion_personal in (
                            select id_clasificacion_personal from clasificacionpersonal 
                                where id_relacion_personal = pidrelacionpersonal)
                     and ue.id_uel_especifica   = ce.id_uel_especifica
                     and ue.id_accion_especifica = ae.id_accion_especifica
                     and ae.id_accion_centralizada   = ac.id_accion_centralizada
                     and ae.tipo       ='A'     ---Accion Centralizada
                     and ac.anio = panio
                     and c.id_cargo = t.id_cargo
                     and t.id_personal = p.id_personal
                     and t.estatus <>  'E'
                     and t.id_turno= tu.id_turno;




        cursueldobasico cursor (pidtrabajador int4)
           for select cf.monto,fp.cod_frecuencia_pago from 
                         conceptofijo cf,conceptotipopersonal ctp, 
                         concepto c,frecuenciatipopersonal ftp ,
                         frecuenciapago fp
                     where cf.id_trabajador = pidtrabajador
                       and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                       and ctp.id_concepto = c.id_concepto
                       and (c.sueldo_basico ='S' or c.ajuste_sueldo = 'S')
                       and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
                       and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
                       and fp.cod_frecuencia_pago in (1,2,3,4,5,6,7,8,9,10);

        curcompensacion cursor (pidtrabajador int4)
           for select cf.monto,fp.cod_frecuencia_pago from 
                         conceptofijo cf,conceptotipopersonal ctp, 
                         concepto c,frecuenciatipopersonal ftp ,
                         frecuenciapago fp
                     where cf.id_trabajador = pidtrabajador
                       and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                       and ctp.id_concepto = c.id_concepto
                       and (c.compensacion ='S')
                       and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
                       and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
                       and fp.cod_frecuencia_pago in (1,2,3,4,5,6,7,8,9,10);
         
         curprimas  cursor (pidtrabajador int4)
           for select cf.monto,fp.cod_frecuencia_pago from 
                         conceptofijo cf,conceptotipopersonal ctp, 
                         concepto c,frecuenciatipopersonal ftp ,
                         frecuenciapago fp
                     where cf.id_trabajador = pidtrabajador
                       and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                       and ctp.id_concepto = c.id_concepto
                       and (c.primas_cargo  ='S' OR c.primas_trabajador ='S')
                       and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
                       and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
                       and fp.cod_frecuencia_pago in (1,2,3,4,5,6,7,8,9,10);
         


        curcargo_proyecto cursor (panio int4,pidrelacionpersonal int4)
      	   for select  pro.id_organismo,pro.id_proyecto,c.tipo_cargo,tu.jornada,
                     c.id_manual_cargo,dt.monto,c.id_cargo,
                     tp.id_clasificacion_personal
		from registrocargos rc, cargoespecifica ce, tipopersonal tp,
                     uelespecifica ue, accionespecifica ae, proyecto pro,
                     cargo c, turno  tu,registropersonal rtp ,
                     manualcargo ma, tabulador t,detalletabulador dt
		   where rc.id_registro_cargos   = ce.id_registro_cargos
                     and rc.estatus ='V'   -----Vacantes
                     and rtp.id_registro         = rc.id_registro
                     and tp.id_tipo_personal     = rtp.id_tipo_personal
                     and tp.id_clasificacion_personal in (
                            select id_clasificacion_personal from clasificacionpersonal 
                                where id_relacion_personal = pidrelacionpersonal)
                     and ue.id_uel_especifica    = ce.id_uel_especifica
                     and ae.id_accion_especifica = ue.id_accion_especifica
                     and ae.tipo = 'P'    ---Proyecto
                     and pro.id_proyecto = ae.id_proyecto
                     and pro.anio = panio
                     and c.id_cargo = rc.id_cargo
                     and tp.id_turno= tu.id_turno
                     and ma.id_manual_cargo = c.id_manual_cargo
                     and t.id_tabulador = ma.id_tabulador
                     and dt.id_tabulador = dt.id_tabulador
                     and dt.paso =1;



        curcargo_accion cursor (panio int4,pidrelacionpersonal int4)
      	   for select  ac.id_organismo,ac.id_accion_centralizada,
                      c.tipo_cargo,tu.jornada,
                     c.id_manual_cargo,dt.monto,c.id_cargo,
                     tp.id_clasificacion_personal
		from registrocargos rc, cargoespecifica ce, tipopersonal tp,
                     uelespecifica ue, accionespecifica ae, accioncentralizada ac,
                     cargo c, turno  tu,registropersonal rtp ,
                     manualcargo ma, tabulador t,detalletabulador dt
		   where rc.id_registro_cargos   = ce.id_registro_cargos
                     and rc.estatus ='V'   -----Vacantes
                     and rtp.id_registro         = rc.id_registro
                     and tp.id_tipo_personal     = rtp.id_tipo_personal
                     and tp.id_clasificacion_personal in (
                            select id_clasificacion_personal from clasificacionpersonal 
                                where id_relacion_personal = pidrelacionpersonal)
                     and ue.id_uel_especifica    = ce.id_uel_especifica
                     and ae.id_accion_especifica = ue.id_accion_especifica
                     and ae.tipo = 'A'    ---Accion Centralizada
                     and ac.id_accion_centralizada = ae.id_accion_centralizada
                     and ac.anio = panio
                     and c.id_cargo = rc.id_cargo
                     and tp.id_turno= tu.id_turno
                     and ma.id_manual_cargo = c.id_manual_cargo
                     and t.id_tabulador = ma.id_tabulador
                     and dt.id_tabulador = dt.id_tabulador
                     and dt.paso =1;


        curconcepto_cargo cursor (pCargo int4)
      	   for select cc.monto,cc.porcentaje
		from conceptocargo cc
		   where cc.id_cargo  = pcargo;
             
        recTrabajadores               record;

        recCargos                     record;
        recConceptosfijos             record;
        recConceptoscargos            record;
        recconceptocargo              record;


        montoconcepto               float8 :=0;
	montocompensacion           float8 :=0;	
        montosueldobasico           float8 :=0;
        montoprimas                 float8 :=0;
        id                          int4   :=0;	
begin
       
        raise notice 'PASA 0 ';

	delete from cuadroonapre
             where anio = panio
               and id_clasificacion_personal =pidrelacionpersonal;
       
        raise notice 'PASA 1 ';

        
	open curTrabajadores_proyecto(panio,pidrelacionpersonal);
	loop
		fetch curTrabajadores_proyecto into recTrabajadores;	
		exit when not found;
          
                montosueldobasico :=0;
                montocompensacion :=0;
                montoprimas       :=0;
                montoconcepto     :=0;
                open cursueldobasico(rectrabajadores.id_trabajador);
	        loop
	   	    fetch cursueldobasico into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montosueldobasico := montosueldobasico + montoconcepto;
                end loop;
                close cursueldobasico;
                montoconcepto:=0;
                open curcompensacion(rectrabajadores.id_trabajador);
	        loop
	   	    fetch curcompensacion  into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montocompensacion := montocompensacion + montoconcepto;
                end loop;
                close curcompensacion;
                montoconcepto:=0;
                open curprimas(rectrabajadores.id_trabajador);
	        loop
	   	    fetch curprimas  into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montoprimas := montoprimas + montoconcepto;
                end loop;
                close curprimas;
                id:= last_id_cuadroonapre();
                id:=id+1;

                raise notice 'PASA 10 ';

                perform add_cuadroonapre
                	(id,
                         rectrabajadores.id_organismo,
                         rectrabajadores.id_proyecto,
                         null,
                         rectrabajadores.id_clasificacion_personal,
                         panio,
                         rectrabajadores.tipo_cargo,
                         rectrabajadores.jornada,
                         rectrabajadores.sexo,
                         1,
                         montosueldobasico,
                         montocompensacion,
                         montoprimas,
                         'PROYECTO');

        end loop;
        close curTrabajadores_proyecto;
		
        raise notice 'PASA 2 ';

        open curTrabajadores_accion(panio,pidrelacionpersonal);
	loop
		fetch curTrabajadores_accion into recTrabajadores;	
		exit when not found;
             
                montosueldobasico :=0;
                montocompensacion :=0;
                montoprimas       :=0;
                montoconcepto     :=0;
                open cursueldobasico(rectrabajadores.id_trabajador);
	        loop
	   	    fetch cursueldobasico into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montosueldobasico := montosueldobasico + montoconcepto;
                end loop;
                close cursueldobasico;
                montoconcepto:=0;
                open curcompensacion(rectrabajadores.id_trabajador);
	        loop
	   	    fetch curcompensacion  into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montocompensacion := montocompensacion + montoconcepto;
                end loop;
                close curcompensacion;
                montoconcepto:=0;
                open curprimas(rectrabajadores.id_trabajador);
	        loop
	   	    fetch curprimas  into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montoprimas := montoprimas + montoconcepto;
                end loop;
                close curprimas;

                raise notice 'PASA 20 ';

                id:= last_id_cuadroonapre();
                id:=id+1;
                perform add_cuadroonapre
                	(id,
                         rectrabajadores.id_organismo,
                         null,
                         rectrabajadores.id_accion_centralizada,
                         rectrabajadores.id_clasificacion_personal,
                         panio,
                         rectrabajadores.tipo_cargo,
                         rectrabajadores.jornada,
                         rectrabajadores.sexo,
                         1,
                         montosueldobasico,
                         montocompensacion,
                         montoprimas,
                         'ACCION CENTALIZADA');




        end loop;
        close curTrabajadores_accion;
		
        raise notice 'PASA 3 ';


        open curTrabajadores_proyecto_cargo(panio,pidrelacionpersonal);
	loop
		fetch curTrabajadores_proyecto_cargo into recTrabajadores;	
		exit when not found;
          
                montosueldobasico :=0;
                montocompensacion :=0;
                montoprimas       :=0;
                montoconcepto     :=0;
                open cursueldobasico(rectrabajadores.id_trabajador);
	        loop
	   	    fetch cursueldobasico into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montosueldobasico := montosueldobasico + montoconcepto;
                end loop;
                close cursueldobasico;
                montoconcepto:=0;
                open curcompensacion(rectrabajadores.id_trabajador);
	        loop
	   	    fetch curcompensacion  into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montocompensacion := montocompensacion + montoconcepto;
                end loop;
                close curcompensacion;
                montoconcepto:=0;
                open curprimas(rectrabajadores.id_trabajador);
	        loop
	   	    fetch curprimas  into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montoprimas := montoprimas + montoconcepto;
                end loop;
                close curprimas;
                id:= last_id_cuadroonapre();
                id:=id+1;

                raise notice 'PASA 10 ';

                perform add_cuadroonapre
                	(id,
                         rectrabajadores.id_organismo,
                         rectrabajadores.id_proyecto,
                         null,
                         rectrabajadores.id_clasificacion_personal,
                         panio,
                         rectrabajadores.tipo_cargo,
                         rectrabajadores.jornada,
                         rectrabajadores.sexo,
                         1,
                         montosueldobasico,
                         montocompensacion,
                         montoprimas,
                         'PROYECTO');

        end loop;
        close curTrabajadores_proyecto_cargo;
		
        raise notice 'PASA 6 ';

        open curTrabajadores_accion_cargo(panio,pidrelacionpersonal);
	loop
		fetch curTrabajadores_accion_cargo into recTrabajadores;	
		exit when not found;
             
                montosueldobasico :=0;
                montocompensacion :=0;
                montoprimas       :=0;
                montoconcepto     :=0;
                open cursueldobasico(rectrabajadores.id_trabajador);
	        loop
	   	    fetch cursueldobasico into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montosueldobasico := montosueldobasico + montoconcepto;
                end loop;
                close cursueldobasico;
                montoconcepto:=0;
                open curcompensacion(rectrabajadores.id_trabajador);
	        loop
	   	    fetch curcompensacion  into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montocompensacion := montocompensacion + montoconcepto;
                end loop;
                close curcompensacion;
                montoconcepto:=0;
                open curprimas(rectrabajadores.id_trabajador);
	        loop
	   	    fetch curprimas  into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montoprimas := montoprimas + montoconcepto;
                end loop;
                close curprimas;

                raise notice 'PASA 20 ';

                id:= last_id_cuadroonapre();
                id:=id+1;
                perform add_cuadroonapre
                	(id,
                         rectrabajadores.id_organismo,
                         null,
                         rectrabajadores.id_accion_centralizada,
                         rectrabajadores.id_clasificacion_personal,
                         panio,
                         rectrabajadores.tipo_cargo,
                         rectrabajadores.jornada,
                         rectrabajadores.sexo,
                         1,
                         montosueldobasico,
                         montocompensacion,
                         montoprimas,
                         'ACCION CENTRALIZADA');



        end loop;
        close curTrabajadores_accion_cargo;
	

        raise notice 'PASA 7 ';

        ----
        ----Cargos vacantes por proyetos.
        ----

	open curcargo_proyecto(panio,pidrelacionpersonal);
	loop
		fetch curcargo_proyecto into reccargos;
		exit when not found;
          
                montosueldobasico :=reccargos.monto;
                montocompensacion :=0;
                montoprimas       :=0;
                montoconcepto     :=0;
              
                open curconcepto_cargo(reccargos.id_cargo);
	        loop
	   	    fetch curconcepto_cargo  into recconceptocargo;	
		    exit when not found;
                    if recconceptocargo.monto > 0 then
                       montoconcepto:=recconceptocargo.monto;
                    elsif recconceptocargo.porcentaje > 0 then
                          montoconcepto:=montosueldobasico * recconceptocargo.porcentaje/100;
                    end if;
                    montoprimas:= montoprimas + montoconcepto;
                end loop;
                close curconcepto_cargo;

                raise notice 'PASA 30 ';

                id:= last_id_cuadroonapre();
                id:=id+1;
                perform add_cuadroonapre
                	(id,
                         reccargos.id_organismo,
                         reccargos.id_proyecto,
                         null,
                         reccargos.id_clasificacion_personal,
                         panio,
                         reccargos.tipo_cargo,
                         reccargos.jornada,
                         'V',
                         1,
                         montosueldobasico,
                         montocompensacion,
                         montoprimas, 
                        'PROYECTO');



        end loop;
        close curcargo_proyecto;
		
        raise notice 'PASA 8 ';

      	----
        ----Cargos vacantes por Accion Centralizada
        ----

	open curcargo_accion(panio,pidrelacionpersonal);
	loop
		fetch curcargo_accion into reccargos;
		exit when not found;
          
                montosueldobasico :=reccargos.monto;
                montocompensacion :=0;
                montoprimas       :=0;
                montoconcepto     :=0;

                open curconcepto_cargo(reccargos.id_cargo);
	        loop
	   	    fetch curconcepto_cargo  into recconceptocargo;	
		    exit when not found;
                    if recconceptocargo.monto > 0 then
                       montoconcepto:=recconceptocargo.monto;
                    elsif recconceptocargo.porcentaje > 0 then
                          montoconcepto:=montosueldobasico * recconceptocargo.porcentaje/100;
                    end if;
                    montoprimas:= montoprimas + montoconcepto;
                end loop;
                close curconcepto_cargo;
                id:= last_id_cuadroonapre();
                id:=id+1;

                raise notice 'PASA 40 ';

                perform add_cuadroonapre
                	(id,
                         reccargos.id_organismo,
                         null,
                         reccargos.id_accion_centralizada,
                         reccargos.id_clasificacion_personal,
                         panio,
                         reccargos.tipo_cargo,
                         reccargos.jornada,
                         'V',
                         1,
                         montosueldobasico,
                         montocompensacion,
                         montoprimas, 
                        'ACCION CENTRALIZADA');


        end loop;
        close curcargo_accion;
		
        raise notice 'PASA 9 ';

        
	delete from identity;

	return 1;
end;
$_$;


ALTER FUNCTION public.generar_cuadro_onapre(integer, integer) OWNER TO postgres;

--
-- TOC entry 737 (class 1255 OID 183724)
-- Name: generar_dotacionentregada(integer, integer, integer, integer, integer, date, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_dotacionentregada(integer, integer, integer, integer, integer, date, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
	


	pIdTipoPersonal ALIAS FOR $1;
	pIdTipoDotacion ALIAS FOR $2;
	pIdSubTipoDotacion ALIAS FOR $3;
	pAnio ALIAS FOR $4;
	pMes ALIAS FOR $5;
	pFecha ALIAS FOR $6;
	pAccion ALIAS FOR $7;

	---
        ---Selecciona la dotaciones correspondientes al  trabajador 
        ---desde la tabla temporal dotaciontrabajador para ldlenar
        ---la tabla dotacionentrega
        ---
        curDotacionTipo cursor ( pIdTipoPersonal int4,  pIdTipoDotacion int4 )
                              FOR  SELECT dt.id_trabajador, 
                                       dt.id_subtipo_dotacion, 
                                       dt.talla, dt.cantidad
				FROM  dotaciontrabajador dt, trabajador t
				  WHERE t.id_tipo_personal = pIdTipoPersonal 
                                    AND t.id_trabajador = dt.id_trabajador
                                    AND dt.id_subtipo_dotacion IN(
                                         SELECT td.id_subtipo_dotacion from subtipodotacion td
                                            WHERE td.id_tipo_dotacion = pIdTipoDotacion);

        curDotacionSubTipo cursor  ( pIdTipoPersonal int4, pIdTipoDotacion int4,
                                     pIdSubtipoDotacion int4 )
                              FOR SELECT dt.id_trabajador,
                                        dt.id_subtipo_dotacion, 
                                        dt.talla, dt.cantidad
				FROM  dotaciontrabajador dt, trabajador t
				  WHERE t.id_tipo_personal = pIdTipoPersonal 
                                    AND t.id_trabajador = dt.id_trabajador
                                    AND dt.id_subtipo_dotacion IN(
                                         SELECT td.id_subtipo_dotacion from subtipodotacion td
                                            WHERE td.id_tipo_dotacion = pIdTipoDotacion
                                              AND td.id_subtipo_dotacion = pIdSubtipoDotacion);



	recDotacionTrabajador record;

	idDotacionEntregada int4 = 0;


        recDotacionExiste record;
	curDotacionExiste cursor (pIdTrabajador int4, pIdSubTipoDotacion int4, 
                                  pAnio int4,pMes int4)
		for SELECT de.id_dotacion_entregada as id FROM dotacionentregada de 
			 WHERE de.id_trabajador = pIdTrabajador
                           AND de.id_subtipo_dotacion = pIdSubTipoDotacion
                           AND de.anio = pAnio
                           AND de.mes  = pMes;

  


begin

        

	IF pAccion = 'A' THEN
                
                idDotacionEntregada := last_id_dotacionentregada();
		IF pIdSubTipoDotacion = 0 THEN
                  
                   OPEN curDotacionTipo(PidTipoPersonal,pIdTipoDotacion);
                   LOOP
			FETCH curDotacionTipo INTO recDotacionTrabajador;
			EXIT WHEN NOT FOUND;
                        

                        OPEN curDotacionExiste (recDotacionTrabajador.id_trabajador,
                                                recDotacionTrabajador.id_subtipo_dotacion,
                                                panio,pmes);

			FETCH curDotacionExiste INTO recDotacionExiste;	
		 
        	        IF recDotacionExiste.id is null THEN
                           idDotacionEntregada := idDotacionEntregada + 1;
			   INSERT INTO dotacionentregada
				(
				id_dotacion_entregada,
				id_trabajador,
				id_subtipo_dotacion,
				talla,
				cantidad,
				anio,
				mes,
				fecha)
				VALUES (
					idDotacionEntregada,
					recDotacionTrabajador.id_trabajador,
					recDotacionTrabajador.id_subtipo_dotacion,
					recDotacionTrabajador.talla,
					recDotacionTrabajador.cantidad,
					pAnio, pMes, pFecha);
                         ELSE
                            perform update_dotacion_entregada(recDotacionExiste.id,
                                        recDotacionTrabajador.talla,
					recDotacionTrabajador.cantidad);
                         END IF;
                         CLOSE curDotacionExiste;
		  END LOOP;
		  CLOSE curDotacionTipo;
                ELSE
                  
		   OPEN curDotacionSubtipo(PidTipoPersonal,pIdTipoDotacion,pIdSubTipoDotacion);
		   LOOP
			FETCH curDotacionSubTipo INTO recDotacionTrabajador;
			EXIT WHEN NOT FOUND;
                       

                        OPEN curDotacionExiste (recDotacionTrabajador.id_trabajador,
                                                recDotacionTrabajador.id_subtipo_dotacion,
                                                panio,pmes);

			FETCH curDotacionExiste INTO recDotacionExiste;			 
        	        IF recDotacionExiste.id is null THEN
                           idDotacionEntregada := idDotacionEntregada + 1;
			   INSERT INTO dotacionentregada
				(
				id_dotacion_entregada,
				id_trabajador,
				id_subtipo_dotacion,
				talla,
				cantidad,
				anio,
				mes,
				fecha)
				VALUES (
					idDotacionEntregada,
					recDotacionTrabajador.id_trabajador,
					recDotacionTrabajador.id_subtipo_dotacion,
					recDotacionTrabajador.talla,
					recDotacionTrabajador.cantidad,
					pAnio, pMes, pFecha);
                         ELSE
                            perform update_dotacion_entregada(recDotacionExiste.id,
                                        recDotacionTrabajador.talla,
					recDotacionTrabajador.cantidad);
                         END IF;
                         CLOSE curDotacionExiste;
		  END LOOP;
		  CLOSE curDotacionSubTipo;
	        END IF;
                

            ELSE
	        
		IF pIdSubTipoDotacion = 0 THEN
                       
			DELETE FROM dotacionentregada 
                              WHERE id_dotacion_entregada IN (
				SELECT id_dotacion_entregada 
                         FROM ( dotacionentregada dt
                            INNER JOIN trabajador      AS t USING (id_trabajador) )
			    INNER JOIN subtipodotacion AS sd USING (id_subtipo_dotacion)
			       WHERE t.id_tipo_personal = pIdTipoPersonal
				AND sd.id_tipo_dotacion = pIdTipoDotacion
				AND dt.anio = pAnio 
                                AND dt.mes = pMes );
                       
		ELSE
                        
			DELETE FROM dotacionentregada WHERE id_dotacion_entregada IN (
				SELECT id_dotacion_entregada
				FROM dotacionentregada dt 
				INNER JOIN trabajador AS t USING (id_trabajador)
			WHERE t.id_tipo_personal = pIdTipoPersonal
				AND dt.id_subtipo_dotacion = pIdSubtipoDotacion
				AND dt.anio = pAnio 
                                AND dt.mes  = pMes );
                        
		END IF;
	END IF;
        

	return 0;
end;
$_$;


ALTER FUNCTION public.generar_dotacionentregada(integer, integer, integer, integer, integer, date, character varying) OWNER TO postgres;

--
-- TOC entry 738 (class 1255 OID 183725)
-- Name: generar_dotaciontrabajador(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_dotaciontrabajador(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
	
	pIdTipoPersonal alias for $1;
	pIdSubTipoDotacion alias for $2;
	recTrabajador record;
	curTrabajador refcursor;
	idDotacion int4 = 0;

begin
	IF pIdSubTipoDotacion = 0 THEN
		OPEN curTrabajador FOR 
			SELECT trabajador.id_trabajador,
				dotaciontrabajador.id_dotacion_trabajador,
				subtipodotacion.id_subtipo_dotacion,
				dotacioncargo.cantidad
			FROM ( ( ( ( (dotaciontrabajador
				RIGHT OUTER JOIN trabajador USING (id_trabajador) )
				INNER JOIN personal USING (id_personal) )
				INNER JOIN cargo USING (id_cargo) )
				INNER JOIN dotacioncargo USING (id_cargo) )
				INNER JOIN subtipodotacion
					ON (dotacioncargo.id_subtipo_dotacion = subtipodotacion.id_subtipo_dotacion) )
			WHERE
				(personal.sexo = subtipodotacion.sexo OR
                                 subtipodotacion.sexo = 'A') AND
				trabajador.estatus = 'A';
	ELSE
		OPEN curTrabajador FOR 
			SELECT trabajador.id_trabajador,
				dotaciontrabajador.id_dotacion_trabajador,
				subtipodotacion.id_subtipo_dotacion,
				dotacioncargo.cantidad
			FROM ( ( ( ( (dotaciontrabajador
				RIGHT OUTER JOIN trabajador USING (id_trabajador) )
				INNER JOIN personal USING (id_personal) )
				INNER JOIN cargo USING (id_cargo) )
				INNER JOIN dotacioncargo USING (id_cargo) )
				INNER JOIN subtipodotacion
					ON (dotacioncargo.id_subtipo_dotacion = subtipodotacion.id_subtipo_dotacion) )
			WHERE
				(personal.sexo = subtipodotacion.sexo OR
                                 subtipodotacion.sexo = 'A') AND
				trabajador.estatus = 'A' AND
				trabajador.id_tipo_personal = pIdTipoPersonal;
	END IF;
	idDotacion := last_id_dotaciontrabajador();
	LOOP
		FETCH curTrabajador INTO recTrabajador;
		EXIT WHEN NOT FOUND;
		IF recTrabajador.id_dotacion_trabajador IS NULL THEN
			idDotacion := idDotacion + 1;
			INSERT INTO dotaciontrabajador
				(
				id_dotacion_trabajador,
				id_trabajador,
				id_subtipo_dotacion,
				cantidad)
				VALUES (
					idDotacion,
					recTrabajador.id_trabajador,
					recTrabajador.id_subtipo_dotacion,
					recTrabajador.cantidad);
		ELSE
			UPDATE dotaciontrabajador 
				SET  cantidad = recTrabajador.cantidad
				WHERE id_dotacion_trabajador = recTrabajador.id_dotacion_trabajador;
		END IF;
	END LOOP;
	CLOSE curTrabajador;
	return 0;
end;
$_$;


ALTER FUNCTION public.generar_dotaciontrabajador(integer, integer) OWNER TO postgres;

--
-- TOC entry 739 (class 1255 OID 183726)
-- Name: generar_dotaciontrabajador(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_dotaciontrabajador(integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
	pIdTipoPersonal alias for $1;
	pIdTipoDotacion alias for $2;
	pIdSubTipoDotacion alias for $3;
        vcantidad  int4;
	id_dotacion int4;
	recTrabajadorTipo record;
        ---
        ---Selecciona la dotaciones correspondientes al cargo del trabajador para
        ---llenar la tabla temporal dotaciontrabajador
        ---
	curTrabajadorTipo cursor (pIdTipoPersonal int4, pIdTipoDotacion int4)
		for select tr.id_trabajador, st.id_subtipo_dotacion, dc.cantidad
		    from trabajador tr, subtipodotacion st, dotacioncargo dc, personal p
		    where tr.id_cargo = dc.id_cargo
		      and tr.id_tipo_personal = pIdTipoPersonal
		      and tr.estatus = 'A'
		      and st.id_tipo_dotacion = pIdTipoDotacion
		      and dc.id_subtipo_dotacion = st.id_subtipo_dotacion
  		      and tr.id_personal = p.id_personal
		      and (p.sexo = st.sexo or st.sexo = 'A');
        recTrabajadorSubtipo record;
	curTrabajadorSubtipo cursor (pIdTipoPersonal int4, pIdSubTipoDotacion int4)
		for select tr.id_trabajador, st.id_subtipo_dotacion, dc.cantidad
		    from trabajador tr, subtipodotacion st, dotacioncargo dc, personal p
		    where tr.id_cargo = dc.id_cargo
		      and tr.id_tipo_personal = pIdTipoPersonal
		      and tr.estatus = 'A'
                      and st.id_subtipo_dotacion = pIdSubTipoDotacion
		      and dc.id_subtipo_dotacion = st.id_subtipo_dotacion
  		      and tr.id_personal = p.id_personal
		      and (p.sexo = st.sexo or st.sexo = 'A');
	recDotacionExiste record;
	curDotacionExiste cursor (pIdTrabajador int4, pIdSubTipoDotacion int4)
		for SELECT id_dotacion_trabajador as id FROM dotaciontrabajador dt 
			 WHERE dt.id_trabajador = pIdTrabajador
			 AND   dt.id_subtipo_dotacion = pIdSubTipoDotacion;
begin
	id_dotacion := last_id_dotaciontrabajador();
	if id_dotacion is null then
	   id_dotacion := 0;
   	end if;
        ---
        ---Todos los tipos de dotación
        ---
        IF pIdSubTipoDotacion = 0 THEN
           OPEN curTrabajadorTipo (pIdTipoPersonal, pIdTipoDotacion); 
		loop 		
       			fetch curTrabajadorTipo into recTrabajadorTipo;			 
        		exit when not found; 
                        vcantidad := recTrabajadorTipo.cantidad;
			OPEN curDotacionExiste (recTrabajadorTipo.id_trabajador,
					recTrabajadorTipo.id_subtipo_dotacion);

			FETCH curDotacionExiste INTO recDotacionExiste;			 
                        IF recDotacionExiste.id is null THEN
                           
				id_dotacion := id_dotacion + 1;
				INSERT INTO dotaciontrabajador
					(id_dotacion_trabajador,
					id_trabajador,
					id_subtipo_dotacion,
					cantidad)
					VALUES (id_dotacion,
						recTrabajadorTipo.id_trabajador,
						recTrabajadorTipo.id_subtipo_dotacion,
						vcantidad);
                        
			ELSE
                          PERFORM  update_dotacion_trabajador(recDotacionExiste.id,
                		                                vcantidad);
			END IF;
		        CLOSE curdotacionexiste;		
		end loop;
		close curTrabajadorTipo;
	ELSE  ---Un subtipo de dotacion
		OPEN curTrabajadorSubtipo (pIdTipoPersonal,  pIdSubtipoDotacion); 
		loop 		
       			fetch curTrabajadorSubtipo into recTrabajadorSubtipo;			 
        		exit when not found; 
                        vcantidad := recTrabajadorSubtipo.cantidad;
			OPEN curDotacionExiste (recTrabajadorSubtipo.id_trabajador,
					recTrabajadorSubtipo.id_subtipo_dotacion);
			FETCH curDotacionExiste INTO recDotacionExiste;			 
			IF recDotacionExiste.id is null THEN
                      	   id_dotacion := id_dotacion + 1;
			   INSERT INTO dotaciontrabajador
					(id_dotacion_trabajador,
					id_trabajador,
					id_subtipo_dotacion,
					cantidad)
					VALUES (id_dotacion,
						recTrabajadorSubtipo.id_trabajador,
						recTrabajadorSubtipo.id_subtipo_dotacion,
						vcantidad);
			ELSE
                           PERFORM update_dotacion_trabajador(recDotacionExiste.id,
                			vcantidad);
			END IF;
			close curDotacionExiste;
		end loop;
		close curTrabajadorSubtipo;
	END IF;
	return 0;
end;
$_$;


ALTER FUNCTION public.generar_dotaciontrabajador(integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 740 (class 1255 OID 183727)
-- Name: generar_nomina(boolean, boolean, integer, character varying, character varying, date, date, integer, integer, integer, boolean, integer, character varying, integer, integer, boolean, integer, integer, date, integer, integer, date, date, date, date, integer, integer, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_nomina(boolean, boolean, integer, character varying, character varying, date, date, integer, integer, integer, boolean, integer, character varying, integer, integer, boolean, integer, integer, date, integer, integer, date, date, date, date, integer, integer, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pPrenomina alias for $1;
	pOrdinaria alias for $2;
	pIdGrupoNomina alias for $3;	
	pPeriodicidad alias for $4;	
	pRecalculo alias for $5;
	pFechaInicio alias for $6;
	pFechaFin alias for $7;
	pIdOrganismo alias for $8;
	pLunesPrQuincena alias for $9;
	pLunesSeQuincena alias for $10;
	pTieneSemana5 alias for $11;
	pSemanaMes alias for $12;
	pUsuario alias for $13;
	pSemanaAnio alias for $14;
	pMesSemanal alias for $15;
	pPrimeraQuincena alias for $16;
	pSemanaQuincena alias for $17;
	pNumeroNomina alias for $18;
	pFecha alias for $19;
	pMes alias for $20;
	pAnio alias for $21;
	pFechaTopeLphFemeninoInicio alias for $22;
	pFechaTopeLphFemeninoFin alias for $23;
	pFechaTopeLphMasculinoInicio alias for $24;
	pFechaTopeLphMasculinoFin alias for $25;
	pIdNominaEspecial alias for $26;
	pCodFrecuenciaPago alias for $27;
	pEstatus alias for $28;
	pPagosFraccionados alias for $29;
	

	recAporte record;
	curAporte cursor (pIdConcepto int4, pIdTipoPersonal int4) 
		for select distinct id_concepto_tipo_personal, tipo, valor, 
		tope_minimo, tope_maximo
		from conceptotipopersonal where id_concepto = pIdConcepto and id_tipo_personal = 			pIdTipoPersonal;


	recConceptoFijoDeduccion record;
	curConceptoFijoDeduccion cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cf.id_concepto_fijo, cf.unidades, cf.monto, 			cf.documento_soporte, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, t.id_tipo_personal, fp.cod_frecuencia_pago, 			c.aporte_patronal, c.id_concepto_aporte
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto > '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3);	

	recConceptoFijoDeduccionEgresados record;
	curConceptoFijoDeduccionEgresados cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cf.id_concepto_fijo, cf.unidades, cf.monto, 			cf.documento_soporte, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, t.id_tipo_personal, fp.cod_frecuencia_pago, 			c.aporte_patronal, c.id_concepto_aporte,
		cf.monto_restituir, cf.unidades_restituir
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto > '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;

	recConceptoFijoAsignacion record;
	curConceptoFijoAsignacion cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cf.id_concepto_fijo, cf.unidades, cf.monto, 			cf.documento_soporte, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3);

	recConceptoFijoAsignacionEgresados record;
	curConceptoFijoAsignacionEgresados cursor (pIdTrabajador int4) 
		for select distinct cf.id_concepto_fijo, cf.unidades, cf.monto, 			cf.documento_soporte, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, t.id_tipo_personal, fp.cod_frecuencia_pago, 			cf.monto_restituir, cf.unidades_restituir
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;

-- Cursor para los conceptos variable Egresados ASIGNACIONES Y DEDUCCIONES. 

	recConceptoVariableDeduccionEgresados record;
	curConceptoVariableDeduccionEgresados cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cv.id_concepto_variable, cv.unidades, cv.monto, 			cv.documento_soporte, cv.id_concepto_tipo_personal,
		cv.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, conceptovariable cv, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cv.id_trabajador
		and cv.monto > 0
		and cv.estatus = 'A'
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto > '5000'	 
		and ftp.id_frecuencia_tipo_personal = cv.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;



	recConceptoVariableAsignacionEgresados record;
	curConceptoVariableAsignacionEgresados cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cv.id_concepto_variable, cv.unidades, cv.monto, 			cv.documento_soporte, cv.id_concepto_tipo_personal,
		cv.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, conceptovariable cv, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cv.id_trabajador
		and cv.monto > 0
		and cv.estatus = 'A'
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cv.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;

 -- Fin conceptos variables Egresados 
		

	recConceptoVariableDeduccion record;
	curConceptoVariableDeduccion cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cv.id_concepto_variable, cv.unidades, cv.monto, 			cv.documento_soporte, cv.id_concepto_tipo_personal,
		cv.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, conceptovariable cv, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cv.id_trabajador
		and cv.monto > 0
		and cv.estatus = 'A'
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto > '5000'	 
		and ftp.id_frecuencia_tipo_personal = cv.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3);



	recConceptoVariableAsignacion record;
	curConceptoVariableAsignacion cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cv.id_concepto_variable, cv.unidades, cv.monto, 			cv.documento_soporte, cv.id_concepto_tipo_personal,
		cv.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, conceptovariable cv, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cv.id_trabajador
		and cv.monto > 0
		and cv.estatus = 'A'
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cv.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3);



	recConceptoPrestamo record;

	curConceptoPrestamo cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4)
		for select distinct p.id_prestamo, p.monto_cuota, p.documento_soporte, 			p.id_concepto_tipo_personal,
		p.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, prestamo p, frecuenciatipopersonal ftp, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = p.id_trabajador
		and p.monto_cuota > 0
		and p.estatus = 'A'
		and ftp.id_frecuencia_tipo_personal = p.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3);


	recDeduccionSso record;

	curDeduccionSso cursor (pIdGrupoNomina int4, f1 int4, f2 int4, f3 int4)
		for select distinct tp.id_tipo_personal, ctp.id_concepto_tipo_personal, 		ctp.id_frecuencia_tipo_personal, fp.cod_frecuencia_pago, 
		c2.id_concepto as id_concepto_aporte, ctp2.id_concepto_tipo_personal as 
		id_concepto_retroactivo 
		from tipopersonal tp, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 			concepto c, frecuenciapago fp,  concepto c2, conceptotipopersonal ctp2
		where tp.id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = tp.id_tipo_personal
		and ftp.id_frecuencia_tipo_personal = ctp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.id_tipo_personal = tp.id_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5001'
		and c2.cod_concepto = '4990'
		and ctp2.id_concepto = c.id_concepto_retroactivo
		and ctp2.id_tipo_personal = ctp.id_tipo_personal
		and ftp.cod_frecuencia_pago in (f1,f2,f3);


	recTrabajadoresSso record;
	curTrabajadoresSso cursor (pIdTipoPersonal int4)
		for select distinct t.id_trabajador, t.id_tipo_personal,  sp.retencion_sso, 			sp.aporte_sso, t.lunes_primera, t.lunes_segunda, t.lunes_retroactivo 
		from trabajador t, sueldopromedio sp 
		where 				
		sp.id_trabajador = t.id_trabajador
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A'		
		and t.cotiza_sso = 'S'
		and sp.retencion_sso > 0;


	recDeduccionSpf record;
	curDeduccionSpf cursor (pIdGrupoNomina int4, f1 int4, f2 int4, f3 int4)
		for select distinct tp.id_tipo_personal, ctp.id_concepto_tipo_personal, 		ctp.id_frecuencia_tipo_personal, fp.cod_frecuencia_pago, 
		c2.id_concepto as id_concepto_aporte,  ctp2.id_concepto_tipo_personal as 
		id_concepto_retroactivo 
		from tipopersonal tp, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 			concepto c, frecuenciapago fp,  concepto c2, conceptotipopersonal ctp2 
		where tp.id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = tp.id_tipo_personal
		and ftp.id_frecuencia_tipo_personal = ctp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago	
		and ftp.id_tipo_personal = tp.id_tipo_personal	
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5002'		
		and c2.cod_concepto = '4991'
		and ctp2.id_concepto = c.id_concepto_retroactivo
		and ctp2.id_tipo_personal = ctp.id_tipo_personal
		and ftp.cod_frecuencia_pago in (f1,f2,f3);



	recTrabajadoresSpf record;
	curTrabajadoresSpf cursor (pIdTipoPersonal int4)
		for select distinct t.id_trabajador, t.id_tipo_personal,  sp.retencion_spf, 			sp.aporte_spf, t.lunes_primera, t.lunes_segunda, t.lunes_retroactivo 
		from trabajador t, sueldopromedio sp 
		where 		
		t.id_tipo_personal = pIdTipoPersonal
		and sp.id_trabajador = t.id_trabajador
		and t.estatus = 'A'		
		and t.cotiza_spf = 'S'
		and sp.retencion_spf > 0;


	recDeduccionLph record;
	curDeduccionLph cursor (pIdGrupoNomina int4, f1 int4, f2 int4, f3 int4)
		for select distinct tp.id_tipo_personal, ctp.id_concepto_tipo_personal, 		ctp.id_frecuencia_tipo_personal, fp.cod_frecuencia_pago, 
		c2.id_concepto as id_concepto_aporte, ctp2.id_concepto_tipo_personal as 
		id_concepto_retroactivo, ctp2.valor, ctp2.tope_minimo, ctp2.tope_maximo
		from tipopersonal tp, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 			concepto c, frecuenciapago fp,  concepto c2, conceptotipopersonal ctp2  
		where tp.id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = tp.id_tipo_personal
		and ftp.id_frecuencia_tipo_personal = ctp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.id_tipo_personal = tp.id_tipo_personal		
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5003'		
		and c2.cod_concepto = '4992'
		and ctp2.id_concepto = c.id_concepto_retroactivo
		and ctp2.id_tipo_personal = ctp.id_tipo_personal
		and ftp.cod_frecuencia_pago in (f1,f2,f3);


	recTrabajadoresLph record;
	curTrabajadoresLph cursor (pIdTipoPersonal int4)
		for select distinct t.id_trabajador, t.id_tipo_personal,  sp.retencion_lph, 			sp.aporte_lph, tu.jornada_diaria, tu.jornada_semanal, tp.formula_integral, 
		tp.formula_semanal, t.lunes_retroactivo, t.id_cargo, t.hay_retroactivo  
		from trabajador t, sueldopromedio sp, turno tu, tipopersonal tp 
		where 
		t.id_turno = tu.id_turno		
		and t.id_tipo_personal= tp.id_tipo_personal
		and sp.id_trabajador = t.id_trabajador
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A'		
		and t.cotiza_lph = 'S'
		and sp.retencion_lph > 0;


	recDeduccionFju record;
	curDeduccionFju cursor (pIdGrupoNomina int4, f1 int4, f2 int4, f3 int4)
		for select distinct tp.id_tipo_personal, ctp.id_concepto_tipo_personal, 		ctp.id_frecuencia_tipo_personal, fp.cod_frecuencia_pago, c2.id_concepto as 
		id_concepto_aporte, ctp2.id_concepto_tipo_personal as id_concepto_retroactivo, 
		ctp2.valor, ctp2.tope_minimo, ctp2.tope_maximo
		from tipopersonal tp, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 			concepto c, frecuenciapago fp,  concepto c2, conceptotipopersonal ctp2
		where tp.id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = tp.id_tipo_personal
		and ftp.id_frecuencia_tipo_personal = ctp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.id_tipo_personal = tp.id_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5004'
		and c2.cod_concepto = '4993'
		and ctp2.id_concepto = c.id_concepto_retroactivo
		and ctp2.id_tipo_personal = ctp.id_tipo_personal
		and ftp.cod_frecuencia_pago in (f1,f2,f3);


	recTrabajadoresFju record;
	curTrabajadoresFju cursor (pIdTipoPersonal int4)
		for select distinct t.id_trabajador, t.id_tipo_personal,  sp.retencion_fju, 			sp.aporte_fju, tu.jornada_diaria, tu.jornada_semanal, tp.formula_integral,
		tp.formula_semanal, t.lunes_retroactivo, t.id_cargo, t.hay_retroactivo 
		from trabajador t, sueldopromedio sp, turno tu, tipopersonal tp
		where 
		t.id_tipo_personal = pIdTipoPersonal
		and t.id_turno = tu.id_turno
		and t.id_tipo_personal= tp.id_tipo_personal
		and sp.id_trabajador = t.id_trabajador
		and t.estatus = 'A'
		and t.cotiza_fju = 'S'		
		and sp.retencion_fju > 0;


	recTiposPersonalIslr record;
	curTiposPersonalIslr cursor (pIdGrupoNomina int4)
		for select distinct ctp.id_concepto_tipo_personal,
		ctp.id_frecuencia_tipo_personal, ctp.id_tipo_personal, c.id_concepto, 
		fp.cod_frecuencia_pago 
		from conceptotipopersonal ctp, concepto c, tipopersonal tp, frecuenciapago fp, 			frecuenciatipopersonal ftp
		where ctp.id_concepto = c.id_concepto 
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ctp.id_tipo_personal = tp.id_tipo_personal
		and c.cod_concepto = '9999'
		and tp.id_grupo_nomina  = pIdGrupoNomina;

	
	recTrabajadoresNominaIslr record;
	curTrabajadoresNominaIslr cursor (pIdTipoPersonal int4, pNumeroNomina int4)
		for select distinct t.id_trabajador, sum(un.monto_asigna) - sum(un.monto_deduce) 			as monto, min(t.porcentaje_islr) as porcentaje_islr
		from ultimanomina un, trabajador t, conceptotipopersonal
		ctp, concepto c
		where un.id_trabajador = t.id_trabajador
		and ctp.id_concepto_tipo_personal = un.id_concepto_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.gravable = 'S'
		and t.porcentaje_islr <> 0
		and t.id_tipo_personal = pIdTipoPersonal
		and un.numero_nomina = pNumeroNomina
		group by t.id_trabajador;


	recTrabajadoresPrenominaIslr record;
	curTrabajadoresPrenominaIslr cursor (pIdTipoPersonal int4, pNumeroNomina int4)
		for select distinct t.id_trabajador, sum(un.monto_asigna) - sum(un.monto_deduce) 			as monto, min(t.porcentaje_islr) as porcentaje_islr
		from ultimaprenomina un, trabajador t, conceptotipopersonal
		ctp, concepto c
		where un.id_trabajador = t.id_trabajador
		and ctp.id_concepto_tipo_personal = un.id_concepto_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.gravable = 'S'
		and t.porcentaje_islr <> 0
		and t.id_tipo_personal = pIdTipoPersonal
		and un.numero_nomina = pNumeroNomina
		group by t.id_trabajador;


	recTrabajadoresIslrQuincenaAnterior record;
	curTrabajadoresIslrQuincenaAnterior cursor (pIdTipoPersonal int4, pAnio int4, pMes int4)
		for select distinct t.id_trabajador, sum(hq.monto_asigna) - sum(hq.monto_deduce) 			as monto, min(t.porcentaje_islr) as porcentaje_islr
		from historicoquincena hq, trabajador t, conceptotipopersonal
		ctp, concepto c
		where hq.id_trabajador = t.id_trabajador
		and t.porcentaje_islr <> 0
		and ctp.id_concepto_tipo_personal = hq.id_concepto_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.gravable = 'S'
		and t.estatus = 'A'
		and hq.id_tipo_personal = pIdTipoPersonal
		and hq.anio = pAnio
		and hq.mes = pMes
		and hq.numero_nomina = 0
		group by t.id_trabajador;


	recTrabajadoresIslrActualNomina record;
	curTrabajadoresIslrActualNomina cursor (pIdTrabajador int4)
		for select distinct un.id_trabajador, un.monto_deduce as monto, 			un.id_ultima_nomina 
		from ultimanomina un,  conceptotipopersonal
		ctp, concepto c
		where 
		ctp.id_concepto_tipo_personal = un.id_concepto_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '9999'
		and un.id_trabajador = pIdTrabajador
		and un.numero_nomina = 0;

	recTrabajadoresIslrActualPrenomina record;
	curTrabajadoresIslrActualPrenomina cursor (pIdTrabajador int4)
		for select distinct up.id_trabajador, up.monto_deduce as monto, 			up.id_ultima_prenomina 
		from ultimaprenomina up,  conceptotipopersonal
		ctp, concepto c
		where 
		ctp.id_concepto_tipo_personal = up.id_concepto_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '9999'
		and up.id_trabajador = pIdTrabajador
		and up.numero_nomina = 0;

	recSobregiradosPrenomina record;
	curSobregiradosPrenomina cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select distinct id_trabajador 
		from ultimaprenomina 
		where numero_nomina = pNumeroNomina
		and  id_grupo_nomina = pIdGrupoNomina
		group by id_trabajador having sum(monto_deduce) > sum(monto_asigna);


	recSobregiradosNomina record;
	curSobregiradosNomina cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select distinct id_trabajador 
		from ultimanomina 
		where numero_nomina = pNumeroNomina
		and  id_grupo_nomina = pIdGrupoNomina
		group by id_trabajador having sum(monto_deduce) > sum(monto_asigna);

	recHistoricoNominaRegistroCargos record;
	curHistoricoNominaRegistroCargos cursor(pIdGrupoNomina int4, pNumeroNomina int4)
		for select distinct t.id_trabajador, min(t.id_dependencia) as id_dependencia, 
		min(t.id_cargo) as id_cargo, 
		min(t.codigo_nomina) as codigo_nomina, 
                min(t.codigo_patronal) as codigo_patronal,
                min(t.forma_pago) as forma_pago,  
		min(t.id_banco_nomina) as id_banco, min(t.tipo_cta_nomina) as tipo_cta_nomina,  
		min(t.cuenta_nomina) as cuenta_nomina, min(t.estatus) as estatus, 
		min(t.situacion) as situacion, 
		min(t.id_tipo_personal) as id_tipo_personal, min(t.id_lugar_pago) as 			id_lugar_pago,  
		min(au.id_unidad_ejecutora) as id_unidad_ejecutora, 
		min(au.id_unidad_administradora) as id_unidad_administradora, 
		min(r.numero_registro) as numero_registro, min(c.cod_cargo) as cod_cargo, 
		min(d.cod_dependencia) as cod_dependencia, min(ue.cod_unidad_ejecutora) as 			cod_unidad_ejecutora,  
		min(ua.cod_unidad_administ) as cod_unidad_administ, 
		min(d.id_sede) as id_sede, min(s.cod_sede) as cod_sede, 
		min(s.id_region) as id_region, min(rg.cod_region) as cod_region,
                min(t.lunes_primera) as lunes_primera,
                min(t.lunes_segunda) as lunes_segunda,
                min(t.lunes_retroactivo) as lunes_retroactivo,
                min(t.hay_retroactivo) as hay_retroactivo
		from trabajador t, dependencia d, unidadejecutora ue, 
		registrocargos rc, registro r, ultimanomina un, cargo c,
		unidadadministradora ua, administradorauel au, tipopersonal tp, 
		sede s, region rg
		where t.id_dependencia = d.id_dependencia 
		and d.id_sede = s.id_sede and s.id_region = rg.id_region 
		and t.id_registro_cargos = rc.id_registro_cargos 
		and c.id_cargo = rc.id_cargo 
		and t.id_trabajador = un.id_trabajador 
		and rc.id_registro = r.id_registro 
		and d.id_administradora_uel = au.id_administradora_uel
		and au.id_unidad_administradora = ua.id_unidad_administradora
		and au.id_unidad_ejecutora = ue.id_unidad_ejecutora
		and un.id_grupo_nomina = tp.id_grupo_nomina
		and un.id_tipo_personal= tp.id_tipo_personal
		and tp.maneja_rac = 'S'
		and un.id_grupo_nomina = pIdGrupoNomina
		and un.numero_nomina = pNumeroNomina
		group by t.id_trabajador;

	recValidarHistoricoNominaRegistroCargos record;
	curValidarHistoricoNominaRegistroCargos cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select count(un.id_trabajador) as cantidad from ultimanomina un, trabajador t, 
                    tipopersonal tp 
		where un.id_grupo_nomina = pIdGrupoNomina 
		and un.numero_nomina = pNumeroNomina
		and un.id_trabajador = t.id_trabajador 
		and t.id_tipo_personal = tp.id_tipo_personal
		and tp.maneja_rac = 'S'
		and un.id_trabajador not in(
			select distinct t.id_trabajador
			from trabajador t, dependencia d, unidadejecutora ue, 
			registrocargos rc, registro r, ultimanomina un, cargo c,
			unidadadministradora ua, administradorauel au, tipopersonal tp, 
			sede s, region rg
			where t.id_dependencia = d.id_dependencia 
			and d.id_sede = s.id_sede and s.id_region = rg.id_region 
			and t.id_registro_cargos = rc.id_registro_cargos 
			and c.id_cargo = rc.id_cargo 
			and t.id_trabajador = un.id_trabajador 
			and rc.id_registro = r.id_registro 
			and d.id_administradora_uel = au.id_administradora_uel
			and au.id_unidad_administradora = ua.id_unidad_administradora
			and au.id_unidad_ejecutora = ue.id_unidad_ejecutora
			and un.id_grupo_nomina = tp.id_grupo_nomina
			and un.id_tipo_personal= tp.id_tipo_personal
			and tp.maneja_rac = 'S'
			and un.id_grupo_nomina = pIdGrupoNomina
			and un.numero_nomina = pNumeroNomina
			group by t.id_trabajador);


	recHistoricoNominaSinRegistroCargos record;
	curHistoricoNominaSinRegistroCargos cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select distinct t.id_trabajador, min(t.id_dependencia) as id_dependencia, 
		min(t.id_cargo) as id_cargo, 
		min(t.codigo_nomina) as codigo_nomina, 
                min(t.codigo_patronal) as codigo_patronal,
                min(t.forma_pago) as forma_pago,  
		min(t.id_banco_nomina) as id_banco, min(t.tipo_cta_nomina) as tipo_cta_nomina,  
		min(t.cuenta_nomina) as cuenta_nomina, min(t.estatus) as estatus, min(t.situacion) 			as situacion, 
		min(t.id_tipo_personal) as id_tipo_personal, min(t.id_lugar_pago) as 			id_lugar_pago,  
		min(au.id_unidad_ejecutora) as id_unidad_ejecutora, 
		min(au.id_unidad_administradora) as id_unidad_administradora, 
		0 as numero_registro, min(c.cod_cargo) as cod_cargo, 
		min(d.cod_dependencia) as cod_dependencia, min(ue.cod_unidad_ejecutora) as 			cod_unidad_ejecutora,  
		min(ua.cod_unidad_administ) as cod_unidad_administ, 
		min(d.id_sede) as id_sede, min(s.cod_sede) as cod_sede, 
		min(s.id_region) as id_region, min(r.cod_region) as cod_region,
                min(t.lunes_primera) as lunes_primera,
                min(t.lunes_segunda) as lunes_segunda,
                min(t.lunes_retroactivo) as lunes_retroactivo,
                min(t.hay_retroactivo) as hay_retroactivo 
		from trabajador t, dependencia d, unidadejecutora ue, 
		ultimanomina un, cargo c,
		unidadadministradora ua, administradorauel au, tipopersonal tp, 
		sede s, region r 
		where t.id_dependencia = d.id_dependencia 
		and d.id_sede = s.id_sede and s.id_region = r.id_region 
		and c.id_cargo = t.id_cargo 
		and t.id_trabajador = un.id_trabajador 
		and d.id_administradora_uel = au.id_administradora_uel
		and au.id_unidad_administradora = ua.id_unidad_administradora
		and au.id_unidad_ejecutora = ue.id_unidad_ejecutora
		and un.id_grupo_nomina = tp.id_grupo_nomina
		and un.id_tipo_personal= tp.id_tipo_personal
		and tp.maneja_rac = 'N'
		and un.id_grupo_nomina = pIdGrupoNomina
		and un.numero_nomina = pNumeroNomina
		group by t.id_trabajador;

	recValidarHistoricoNominaSinRegistroCargos record;
	curValidarHistoricoNominaSinRegistroCargos cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select count(un.id_trabajador) as cantidad from ultimanomina un, trabajador t, 			tipopersonal tp 
		where un.id_grupo_nomina = pIdGrupoNomina 
		and un.numero_nomina = pNumeroNomina
		and un.id_trabajador = t.id_trabajador 
		and t.id_tipo_personal = tp.id_tipo_personal
		and tp.maneja_rac = 'N'
		and un.id_trabajador not in(
			select distinct t.id_trabajador
			from trabajador t, dependencia d, unidadejecutora ue, 
			ultimanomina un, cargo c,
			unidadadministradora ua, administradorauel au, tipopersonal tp, 
			sede s, region r 
			where t.id_dependencia = d.id_dependencia 
			and d.id_sede = s.id_sede and s.id_region = r.id_region 
			and c.id_cargo = t.id_cargo 
			and t.id_trabajador = un.id_trabajador 
			and d.id_administradora_uel = au.id_administradora_uel
			and au.id_unidad_administradora = ua.id_unidad_administradora
			and au.id_unidad_ejecutora = ue.id_unidad_ejecutora
			and un.id_grupo_nomina = tp.id_grupo_nomina
			and un.id_tipo_personal= tp.id_tipo_personal
			and tp.maneja_rac = 'N'
			and un.id_grupo_nomina = pIdGrupoNomina
			and un.numero_nomina = pNumeroNomina
			group by t.id_trabajador);

	recHistoricoDetalle record;
	curHistoricoDetalle cursor (pIdGrupoNomina int4, pAnio int4, pMes int4, 
		pSemanaQuincena int4, pNumeroNomina int4 )
		for select distinct un.id_trabajador, un.id_concepto_tipo_personal, 			un.id_frecuencia_tipo_personal, un.numero_nomina, 
		un.unidades, un.monto_asigna, un.monto_deduce, un.origen, un.documento_soporte,  
		un.id_tipo_personal, un.id_grupo_nomina, un.id_nomina_especial, un.id_concepto, 			un.monto_aporte, un.id_concepto_aporte, 
		hn.id_historico_nomina 
		from ultimanomina un, historiconomina hn  
		where un.id_trabajador = hn.id_trabajador 
		and un.id_grupo_nomina = pIdGrupoNomina
		and hn.id_grupo_nomina = pIdGrupoNomina
		and hn.anio = pAnio
		and hn.mes = pMes
		and hn.semana_quincena = pSemanaQuincena
		and hn.numero_nomina = pNumeroNomina
		and un.numero_nomina = pNumeroNomina;


	recPrestamo record;
	curPrestamo cursor (pIdGrupoNomina int4)

		for select distinct p.id_prestamo, p.monto_cuota, p.monto_pagado, 			p.monto_prestamo, p.cuotas_pagadas 
		from ultimanomina un, prestamo p 
		where p.id_prestamo = un.id_concepto 
		and origen = 'P' 		
		and un.numero_nomina = 0 
		and un.id_grupo_nomina = pIdGrupoNomina;


	recTrabajadores1 record;
	curTrabajadores1 cursor (pIdGrupoNomina int4, pEstatus varchar)
		for select distinct t.id_trabajador, t.id_tipo_personal, tp.formula_integral, 			tp.formula_semanal, t.id_cargo
		from trabajador t, gruponomina gp, tipopersonal tp
		where gp.id_grupo_nomina = pIdGrupoNomina
		and gp.id_grupo_nomina = tp.id_grupo_nomina
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.estatus = pEstatus;

	recTrabajadoresEgresados record;
	curTrabajadoresEgresados cursor (pIdTrabajador int4, pFechaInicio date, pFechaFin date)
		for select distinct t.id_trabajador, t.id_tipo_personal, tp.formula_integral, 			tp.formula_semanal, t.id_cargo
		from trabajador t, gruponomina gp, tipopersonal tp
		where gp.id_grupo_nomina = pIdTrabajador
		and gp.id_grupo_nomina = tp.id_grupo_nomina
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.estatus = 'E'
		and t.fecha_egreso between pFechaInicio and pFechaFin;

	recNominaEspecial record;
	curNominaEspecial cursor (pIdNominaEspecial int4)
		for select distinct ne.id_frecuencia_pago, ne.id_nomina_especial
		from nominaespecial ne
		where ne.id_nomina_especial = pIdNominaEspecial;
		
	recFrecuenciaTipoPersonalEspecial record;
	curFrecuenciaTipoPersonalEspecial cursor (pIdTipoPersonal int4, pIdFrecuenciaPago int4)
		for select distinct ftp.id_frecuencia_tipo_personal
		from frecuenciatipopersonal ftp
		where ftp.id_tipo_personal = pIdTipoPersonal
		and ftp.id_frecuencia_pago = pIdFrecuenciaPago;

		
	recMontoNetoQuincenal record;
	curMontoNetoQuincenal cursor (pIdGrupoNomina int4, pNumeroNomina int4, pAnio int4, 
		pMes int4, pSemanaQuincena int4)
		for select distinct (sum(monto_asigna) - sum(monto_deduce)) as neto, 
		min(id_historico_nomina) as id_historico_nomina, 
		min(hq.id_trabajador) as id_trabajador, 
		min(ctp.id_concepto_tipo_personal) as id_concepto_tipo_personal, 		
		min(ctp.id_frecuencia_tipo_personal) as id_frecuencia_tipo_personal,
		min(hq.id_tipo_personal) as id_tipo_personal
		from historicoquincena hq,  conceptotipopersonal ctp, concepto c 
		where id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = hq.id_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5000'
		and numero_nomina = pNumeroNomina
		and anio = pAnio
		and mes = pMes
		and semana_quincena = pSemanaQuincena
		group by id_trabajador;

	recMontoNetoSemanal record;
	curMontoNetoSemanal cursor (pIdGrupoNomina int4, pNumeroNomina int4, pAnio int4, 
		pMes int4, pSemanaQuincena int4)
		for select distinct (sum(monto_asigna) - sum(monto_deduce)) as neto, 
		min(id_historico_nomina) as id_historico_nomina,
		min(hs.id_trabajador) as id_trabajador, 
		min(ctp.id_concepto_tipo_personal) as id_concepto_tipo_personal, 
		min(ctp.id_frecuencia_tipo_personal) as id_frecuencia_tipo_personal,
		min(hs.id_tipo_personal) as id_tipo_personal
		from historicosemana hs,  conceptotipopersonal ctp, concepto c 
		where id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = hs.id_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5000'
		and numero_nomina = pNumeroNomina
		and anio = pAnio
		and mes = pMes
		and semana_quincena = pSemanaQuincena
		group by id_trabajador;

	f1 int4 := 0;
	f2 int4 := 0;	
	f3 int4 := 0;
	id int4 := 0;
	idTrabajador int4 := 0;
	monto float8 := 0;
	montoAporte float8 := 0;
	idAporte int4 := 0;		
	retencion float8 := 0;
	montoCalculado float8 := 0;
	montoAnterior float8 := 0;
	tieneIslrAnterior boolean;
	idBanco int4 := 0;
	idHistoricoNomina int4 := 0;
	idHistoricoDetalle int4 := 0;	
	montoPagado float8 := 0;
	cuotas int4 := 0;
	montoCuota float8 := 0;
	estatus varchar := 'A';
	borrarLunesPrimera boolean := false;
	borrarLunesSegunda boolean := false;
	
begin
	-- ERRORES 
	-- 100 La integridad de los datos, impide grabar en los historicos
	-- 101 La nomina especial no existe

		if pOrdinaria = true then

			if pPeriodicidad <> 'S' and pPagosFraccionados = 'S' then
				perform egresos_fraccionados(pIdGrupoNomina, pFechaInicio, pFechaFin,pPrimeraQuincena);
			end if;

			if pPeriodicidad = 'M' then
				f1 := 2;		
				f2 := 3;
			elsif pPeriodicidad = 'Q' then
				f1 := 3;
				if pPrimeraQuincena = true then
					f2 := 1;
				else
					f2 := 2;
				end if;
			elsif pPeriodicidad = 'S' then
				f1:= 4;
				f2:= pSemanaMes+4;
				if pSemanaMes = 4 AND pTieneSemana5 = false then
					f3:=9;
				end if;
			end if;

		else
			f1 := pCodFrecuenciaPago;

			open curNominaEspecial(pIdNominaEspecial);
			fetch curNominaEspecial into recNominaEspecial;
			if recNominaEspecial.id_nomina_especial is null then
				return 101;
			end if;
		end if;

	

	if pPrenomina = true then
			id := last_id_ultimaprenomina()+1;
			if id is null then
				id := 1;
			end if;

		perform delete_all_ultimaprenomina(pIdGrupoNomina, pNumeroNomina);

	elsif pPrenomina = false then
		id := last_id_ultimanomina()+1;
		if id is null then
			id := 1;

		end if;

		raise notice '0_va delete_all_ultimanomina(%, %)', pIdGrupoNomina, pNumeroNomina;	

		raise notice 'pPeriodicidad = % ', pPeriodicidad;	

		perform delete_all_ultimanomina(pIdGrupoNomina, pNumeroNomina);
		idHistoricoNomina := last_id_historiconomina()+1;

		raise notice 'idHistoricoNomina = % ', idHistoricoNomina;	
		
		if idHistoricoNomina is null then
			idHistoricoNomina = 1;
		end if;

		if pPeriodicidad = 'S' then
			idHistoricoDetalle := last_id_historicosemana()+1;
			if idHistoricoDetalle is null then
				idHistoricoDetalle = 1;
			end if;
		else
			idHistoricoDetalle := last_id_historicoquincena()+1;
			if idHistoricoDetalle is null then
				idHistoricoDetalle = 1;
			end if;
		end if;

	end if;

	if pPagosFraccionados = 'S' then
		--------TRABAJADORES EGRESADOS---------------------------
		raise notice '0_va abrir cursor de TrabajadoresEgresados';
	
		open curTrabajadoresEgresados (pIdGrupoNomina,pFechaInicio,pFechaFin);

		raise notice '1_abrio curTrabajadoresEgresados(%,%,%)', pIdGrupoNomina,pFechaInicio,pFechaFin;
	
		raise notice '1_abrio cursor de TrabajadoresEgresados';
	
		loop		
	
			fetch curTrabajadoresEgresados into recTrabajadoresEgresados;
	
			exit when not found;
			open curConceptoFijoDeduccionEgresados
			(recTrabajadoresEgresados.id_trabajador);
	
			loop
	
				fetch curConceptoFijoDeduccionEgresados into
					recConceptoFijoDeduccionEgresados;			
				exit when not found;
				montoAporte := 0;
	
				if recConceptoFijoDeduccionEgresados.cod_frecuencia_pago = 1 
					and pPrimeraQuincena = false then
				else
	
					-- ************** NOMINAS ORDINARIAS **************
		
					if pPrenomina = false and pOrdinaria = true then
		
						if  recConceptoFijoDeduccionEgresados.aporte_patronal = 'S' then
							open curAporte(recConceptoFijoDeduccionEgresados.id_concepto_aporte, recTrabajadoresEgresados.id_trabajador);
							loop
		
								fetch curAporte into recAporte;
								exit when not found;
								montoAporte := calcular_concepto(
									recAporte.id_concepto_tipo_personal,
									recTrabajadoresEgresados.id_trabajador,
									1, recAporte.tipo,
									recConceptoFijoDeduccionEgresados.cod_frecuencia_pago,
									1,1, recTrabajadoresEgresados.formula_integral, 
									recTrabajadoresEgresados.formula_semanal, 
									recTrabajadoresEgresados.id_cargo,
									recAporte.valor, recAporte.tope_minimo, recAporte.tope_maximo);
								idAporte := recAporte.id_concepto_tipo_personal;
		
							end loop;				
		
							close curAporte;
		
						end if;
		
					end if;
		
		
		
					if pPrenomina = false and pOrdinaria = true then
		
						id := id+1;
		
						if montoAporte = 0 then
		
							perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
								recConceptoFijoDeduccionEgresados.id_concepto_tipo_personal,
								recConceptoFijoDeduccionEgresados.id_frecuencia_tipo_personal,
								pNumeroNomina, recConceptoFijoDeduccionEgresados.unidades, 0,
								convert_2_decimal(recConceptoFijoDeduccionEgresados.monto), 'F', 
								recConceptoFijoDeduccionEgresados.documento_soporte, 
								recConceptoFijoDeduccionEgresados.id_tipo_personal, pIdGrupoNomina,
								null, recConceptoFijoDeduccionEgresados.id_concepto_fijo,
								0, null);
		
						else
				
							perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
								recConceptoFijoDeduccionEgresados.id_concepto_tipo_personal,
								recConceptoFijoDeduccionEgresados.id_frecuencia_tipo_personal,
								pNumeroNomina, recConceptoFijoDeduccionEgresados.unidades, 0,
								convert_2_decimal(recConceptoFijoDeduccionEgresados.monto), 'F', 
								recConceptoFijoDeduccionEgresados.documento_soporte, 
								recConceptoFijoDeduccionEgresados.id_tipo_personal, pIdGrupoNomina,
								null, recConceptoFijoDeduccionEgresados.id_concepto_fijo,
								convert_2_decimal(montoAporte), idAporte);
		
						end if;
		
					elsif pPrenomina = true and pOrdinaria = true then
		
						id := id+1;
		
						perform add_ultimaprenomina(
							id,
							recTrabajadoresEgresados.id_trabajador,
							recConceptoFijoDeduccionEgresados.id_concepto_tipo_personal,
							recConceptoFijoDeduccionEgresados.id_frecuencia_tipo_personal,
							pNumeroNomina, 
							recConceptoFijoDeduccionEgresados.unidades, 
							0,
							convert_2_decimal(recConceptoFijoDeduccionEgresados.monto), 
							'F', 
							recConceptoFijoDeduccionEgresados.documento_soporte, 
							recConceptoFijoDeduccionEgresados.id_tipo_personal, 
							pIdGrupoNomina,
							null);
		
					end if;
				end if;
				perform actualizar_montos_conceptofijo(recConceptoFijoDeduccionEgresados.id_concepto_fijo,
					recConceptoFijoDeduccionEgresados.monto_restituir,recConceptoFijoDeduccionEgresados.unidades_restituir,0,0, 'N');
	
			end loop;			
			close curConceptoFijoDeduccionEgresados;
	
	
			open curConceptoFijoAsignacionEgresados(recTrabajadoresEgresados.id_trabajador);
			loop
				fetch curConceptoFijoAsignacionEgresados into recConceptoFijoAsignacionEgresados;			
				exit when not found;
	
				-- ************ NOMINAS ORDINARIAS ****************
				if recConceptoFijoAsignacionEgresados.cod_frecuencia_pago = 1 
					and pPrimeraQuincena = false then
				else
					if pPrenomina = false and pOrdinaria = true then
		
						id := id+1;
		
						perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
							recConceptoFijoAsignacionEgresados.id_concepto_tipo_personal,
							recConceptoFijoAsignacionEgresados.id_frecuencia_tipo_personal,
							pNumeroNomina, recConceptoFijoAsignacionEgresados.unidades,
							convert_2_decimal(recConceptoFijoAsignacionEgresados.monto), 0, 'F', 
							recConceptoFijoAsignacionEgresados.documento_soporte, 
							recConceptoFijoAsignacionEgresados.id_tipo_personal, pIdGrupoNomina,
							null, recConceptoFijoAsignacionEgresados.id_concepto_fijo,
							0, null);

						raise notice ' add_ultimanomina (%,%,%,%,%,%,%,%,%,%,%,%,%,%,%,%)',id,recTrabajadoresEgresados.id_trabajador,
							recConceptoFijoAsignacionEgresados.id_concepto_tipo_personal,
							recConceptoFijoAsignacionEgresados.id_frecuencia_tipo_personal,
							pNumeroNomina, recConceptoFijoAsignacionEgresados.unidades,
							convert_2_decimal(recConceptoFijoAsignacionEgresados.monto), 0, 'F', 
							recConceptoFijoAsignacionEgresados.documento_soporte, 
							recConceptoFijoAsignacionEgresados.id_tipo_personal, pIdGrupoNomina,
							null, recConceptoFijoAsignacionEgresados.id_concepto_fijo,
							0, null;
		
					elsif pPrenomina = true and pOrdinaria = true then
		
						id := id+1;
						perform add_ultimaprenomina(id,
							recTrabajadoresEgresados.id_trabajador,
							recConceptoFijoAsignacionEgresados.id_concepto_tipo_personal,
							recConceptoFijoAsignacionEgresados.id_frecuencia_tipo_personal,
							pNumeroNomina, 
							recConceptoFijoAsignacionEgresados.unidades, 
							convert_2_decimal(recConceptoFijoAsignacionEgresados.monto), 
							0, 'F', 
							recConceptoFijoAsignacionEgresados.documento_soporte, 
							recConceptoFijoAsignacionEgresados.id_tipo_personal, 
							pIdGrupoNomina, null);
		
					end if;
				end if;
				perform actualizar_montos_conceptofijo(recConceptoFijoAsignacionEgresados.id_concepto_fijo,
					recConceptoFijoAsignacionEgresados.monto_restituir,recConceptoFijoAsignacionEgresados.unidades_restituir,0,0, 'N');
	
			end loop;
	
			close curConceptoFijoAsignacionEgresados;

-- Loop para Conceptos variables para Pesonal Egresados 

		
		open curConceptoVariableDeduccionEgresados(recTrabajadoresEgresados.id_trabajador, f1, f2, f3);

		loop
			fetch curConceptoVariableDeduccionEgresados into recConceptoVariableDeduccionEgresados;			
			exit when not found;

			-- *************** NOMINAS ORDINARIAS *****************

			if pPrenomina = false and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableDeduccionEgresados.id_concepto_tipo_personal,
					recConceptoVariableDeduccionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableDeduccionEgresados.unidades, 0,
					convert_2_decimal(recConceptoVariableDeduccionEgresados.monto), 'V', 
					recConceptoVariableDeduccionEgresados.documento_soporte, 
					recConceptoVariableDeduccionEgresados.id_tipo_personal, pIdGrupoNomina,
					null, recConceptoVariableDeduccionEgresados.id_concepto_variable,
					0, null);

			elsif pPrenomina = true and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableDeduccionEgresados.id_concepto_tipo_personal,
					recConceptoVariableDeduccionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableDeduccionEgresados.unidades, 
					0,
					convert_2_decimal(recConceptoVariableDeduccionEgresados.monto), 
					'V', 
					recConceptoVariableDeduccionEgresados.documento_soporte, 
					recConceptoVariableDeduccionEgresados.id_tipo_personal, 
					pIdGrupoNomina,
					null);
			end if;


			-- *************** NOMINAS ESPECIALES ******************

			if pPrenomina = false and pOrdinaria = false then
				
				id := id+1;

				perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableDeduccionEgresados.id_concepto_tipo_personal,
					recConceptoVariableDeduccionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableDeduccionEgresados.unidades, 0,
					convert_2_decimal(recConceptoVariableDeduccionEgresados.monto), 'V', 
					recConceptoVariableDeduccionEgresados.documento_soporte, 
					recConceptoVariableDeduccionEgresados.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoVariableDeduccionEgresados.id_concepto_variable,
					0, null);
				

			elsif pPrenomina = true and pOrdinaria = false then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableDeduccionEgresados.id_concepto_tipo_personal,
					recConceptoVariableDeduccionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableDeduccionEgresados.unidades, 
					0,
					convert_2_decimal(recConceptoVariableDeduccionEgresados.monto), 
					'V', 
					recConceptoVariableDeduccionEgresados.documento_soporte, 
					recConceptoVariableDeduccionEgresados.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);
			end if;

		end loop;

		close curConceptoVariableDeduccionEgresados;



		open curConceptoVariableAsignacionEgresados(recTrabajadoresEgresados.id_trabajador, f1, f2, f3);

		loop
			fetch curConceptoVariableAsignacionEgresados into recConceptoVariableAsignacionEgresados;			
			exit when not found;

			--****************** NOMINAS ORDINARIAS ******************

			if pPrenomina = false and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableAsignacionEgresados.id_concepto_tipo_personal,
					recConceptoVariableAsignacionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableAsignacionEgresados.unidades,
					convert_2_decimal(recConceptoVariableAsignacionEgresados.monto), 0, 'V', 
					recConceptoVariableAsignacionEgresados.documento_soporte, 
					recConceptoVariableAsignacionEgresados.id_tipo_personal, pIdGrupoNomina,
					null, recConceptoVariableAsignacionEgresados.id_concepto_variable,
					0, null);
			

			elsif pPrenomina = true and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableAsignacionEgresados.id_concepto_tipo_personal,
					recConceptoVariableAsignacionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableAsignacionEgresados.unidades, 
					convert_2_decimal(recConceptoVariableAsignacionEgresados.monto), 
					0,'V', 
					recConceptoVariableAsignacionEgresados.documento_soporte, 
					recConceptoVariableAsignacionEgresados.id_tipo_personal, 
					pIdGrupoNomina,
					null);
			end if;


			--****************** NOMINAS ESPECIALES ******************

			if pPrenomina = false and pOrdinaria = false then
					
				id := id+1;

				perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableAsignacionEgresados.id_concepto_tipo_personal,
					recConceptoVariableAsignacionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableAsignacionEgresados.unidades,
					convert_2_decimal(recConceptoVariableAsignacionEgresados.monto), 0, 'V', 
					recConceptoVariableAsignacionEgresados.documento_soporte, 
					recConceptoVariableAsignacionEgresados.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoVariableAsignacionEgresados.id_concepto_variable,
					0, null);

			elsif pPrenomina = true and pOrdinaria = false then
				
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableAsignacionEgresados.id_concepto_tipo_personal,
					recConceptoVariableAsignacionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableAsignacionEgresados.unidades, 
					convert_2_decimal(recConceptoVariableAsignacionEgresados.monto), 
					0,'V', 
					recConceptoVariableAsignacionEgresados.documento_soporte, 
					recConceptoVariableAsignacionEgresados.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);
			end if;

		end loop;

		close curConceptoVariableAsignacionEgresados;


-- Fin del Loop de Conceptos variables Personal Egresado.,





		end loop;
		close curTrabajadoresEgresados;
	end if;


	-----------TRABAJADORES ACTIVOS
	raise notice '0_va abrir cursor de Trabajadores1';

	open curTrabajadores1 (pIdGrupoNomina, pEstatus);

	raise notice '1_abrio cursor de Trabajadores1';

	loop
		fetch curTrabajadores1 into recTrabajadores1;			
		exit when not found;

		raise notice '1_id_trabajador_%',recTrabajadores1.id_trabajador;

		open curConceptoFijoDeduccion (recTrabajadores1.id_trabajador, f1, f2, f3);

		loop
			fetch curConceptoFijoDeduccion into recConceptoFijoDeduccion;			
			exit when not found;
			montoAporte := 0;

			-- ************** NOMINAS ORDINARIAS **************

			if pPrenomina = false and pOrdinaria = true then
				
				if  recConceptoFijoDeduccion.aporte_patronal = 'S' then
					open curAporte(recConceptoFijoDeduccion.id_concepto_aporte, recTrabajadores1.id_tipo_personal);
					loop
						fetch curAporte into recAporte;
						exit when not found;
						montoAporte := calcular_concepto(
							recAporte.id_concepto_tipo_personal,
							recTrabajadores1.id_trabajador,
							1, recAporte.tipo,
							recConceptoFijoDeduccion.cod_frecuencia_pago,
							1,1, recTrabajadores1.formula_integral, 
							recTrabajadores1.formula_semanal, 
							recTrabajadores1.id_cargo,
							recAporte.valor, recAporte.tope_minimo, recAporte.tope_maximo);
						idAporte := recAporte.id_concepto_tipo_personal;
						
					end loop;				

					close curAporte;
					
				end if;

			end if;



			if pPrenomina = false and pOrdinaria = true then
				
				id := id+1;
				
				if montoAporte = 0 then
					perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
						recConceptoFijoDeduccion.id_concepto_tipo_personal,
						recConceptoFijoDeduccion.id_frecuencia_tipo_personal,
						pNumeroNomina, recConceptoFijoDeduccion.unidades, 0,
						convert_2_decimal(recConceptoFijoDeduccion.monto), 'F', 
						recConceptoFijoDeduccion.documento_soporte, 
						recConceptoFijoDeduccion.id_tipo_personal, pIdGrupoNomina,
						null, recConceptoFijoDeduccion.id_concepto_fijo,
						0, null);
				else
					perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
						recConceptoFijoDeduccion.id_concepto_tipo_personal,
						recConceptoFijoDeduccion.id_frecuencia_tipo_personal,
						pNumeroNomina, recConceptoFijoDeduccion.unidades, 0,
						convert_2_decimal(recConceptoFijoDeduccion.monto), 'F', 
						recConceptoFijoDeduccion.documento_soporte, 
						recConceptoFijoDeduccion.id_tipo_personal, pIdGrupoNomina,
						null, recConceptoFijoDeduccion.id_concepto_fijo,
						convert_2_decimal(montoAporte), idAporte);
				end if;

			elsif pPrenomina = true and pOrdinaria = true then

				id := id+1;
				perform add_ultimaprenomina(
					id,
					recTrabajadores1.id_trabajador,
					recConceptoFijoDeduccion.id_concepto_tipo_personal,
					recConceptoFijoDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoFijoDeduccion.unidades, 
					0,
					convert_2_decimal(recConceptoFijoDeduccion.monto), 
					'F', 
					recConceptoFijoDeduccion.documento_soporte, 
					recConceptoFijoDeduccion.id_tipo_personal, 
					pIdGrupoNomina,
					null);

			end if;



			-- ************** NOMINAS ESPECIALES *****************

			if pPrenomina = false and pOrdinaria = false then
			
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoFijoDeduccion.id_concepto_tipo_personal,
					recConceptoFijoDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoFijoDeduccion.unidades, 0,
					convert_2_decimal(recConceptoFijoDeduccion.monto), 'F', 
					recConceptoFijoDeduccion.documento_soporte, 
					recConceptoFijoDeduccion.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoFijoDeduccion.id_concepto_fijo,
					0, null);	

			elsif pPrenomina = true and pOrdinaria = false then

				id := id+1;
				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoFijoDeduccion.id_concepto_tipo_personal,
					recConceptoFijoDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoFijoDeduccion.unidades, 
					0, convert_2_decimal(recConceptoFijoDeduccion.monto), 
					'F', 
					recConceptoFijoDeduccion.documento_soporte, 
					recConceptoFijoDeduccion.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);

			end if;

		end loop;

		close curConceptoFijoDeduccion;

		--raise notice '2_id_trabajador_%',recTrabajadores1.id_trabajador;

		open curConceptoFijoAsignacion(recTrabajadores1.id_trabajador, f1, f2, f3);

		loop

			fetch curConceptoFijoAsignacion into recConceptoFijoAsignacion;			
			exit when not found;

			-- ************ NOMINAS ORDINARIAS ****************

			if pPrenomina = false and pOrdinaria = true then
					
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoFijoAsignacion.id_concepto_tipo_personal,
					recConceptoFijoAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoFijoAsignacion.unidades,
					convert_2_decimal(recConceptoFijoAsignacion.monto), 0, 'F', 
					recConceptoFijoAsignacion.documento_soporte, 
					recConceptoFijoAsignacion.id_tipo_personal, pIdGrupoNomina,
					null, recConceptoFijoAsignacion.id_concepto_fijo,
					0, null);
			

			elsif pPrenomina = true and pOrdinaria = true then

				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoFijoAsignacion.id_concepto_tipo_personal,
					recConceptoFijoAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoFijoAsignacion.unidades, 
					convert_2_decimal(recConceptoFijoAsignacion.monto), 
					0,'F', 
					recConceptoFijoAsignacion.documento_soporte, 
					recConceptoFijoAsignacion.id_tipo_personal, 
					pIdGrupoNomina,	null);

			end if;



			-- *************** NOMINAS ESPECIALES ****************


			if pPrenomina = false and pOrdinaria = false then

				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoFijoAsignacion.id_concepto_tipo_personal,
					recConceptoFijoAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoFijoAsignacion.unidades,
					convert_2_decimal(recConceptoFijoAsignacion.monto), 0, 'F', 
					recConceptoFijoAsignacion.documento_soporte, 
					recConceptoFijoAsignacion.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoFijoAsignacion.id_concepto_fijo,
					0, null);
			

			elsif pPrenomina = true and pOrdinaria = false then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoFijoAsignacion.id_concepto_tipo_personal,
					recConceptoFijoAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoFijoAsignacion.unidades, 
					convert_2_decimal(recConceptoFijoAsignacion.monto), 
					0,'F', 
					recConceptoFijoAsignacion.documento_soporte, 
					recConceptoFijoAsignacion.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);
			end if;
		end loop;

		close curConceptoFijoAsignacion;

		--raise notice '3_id_trabajador_%',recTrabajadores1.id_trabajador;

		open curConceptoVariableDeduccion(recTrabajadores1.id_trabajador, f1, f2, f3);

		loop
			fetch curConceptoVariableDeduccion into recConceptoVariableDeduccion;			
			exit when not found;

			-- *************** NOMINAS ORDINARIAS *****************

			if pPrenomina = false and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoVariableDeduccion.id_concepto_tipo_personal,
					recConceptoVariableDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableDeduccion.unidades, 0,
					convert_2_decimal(recConceptoVariableDeduccion.monto), 'V', 
					recConceptoVariableDeduccion.documento_soporte, 
					recConceptoVariableDeduccion.id_tipo_personal, pIdGrupoNomina,
					null, recConceptoVariableDeduccion.id_concepto_variable,
					0, null);

			elsif pPrenomina = true and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoVariableDeduccion.id_concepto_tipo_personal,
					recConceptoVariableDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableDeduccion.unidades, 
					0,
					convert_2_decimal(recConceptoVariableDeduccion.monto), 
					'V', 
					recConceptoVariableDeduccion.documento_soporte, 
					recConceptoVariableDeduccion.id_tipo_personal, 
					pIdGrupoNomina,
					null);
			end if;


			-- *************** NOMINAS ESPECIALES ******************

			if pPrenomina = false and pOrdinaria = false then
				
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoVariableDeduccion.id_concepto_tipo_personal,
					recConceptoVariableDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableDeduccion.unidades, 0,
					convert_2_decimal(recConceptoVariableDeduccion.monto), 'V', 
					recConceptoVariableDeduccion.documento_soporte, 
					recConceptoVariableDeduccion.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoVariableDeduccion.id_concepto_variable,
					0, null);
				

			elsif pPrenomina = true and pOrdinaria = false then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoVariableDeduccion.id_concepto_tipo_personal,
					recConceptoVariableDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableDeduccion.unidades, 
					0,
					convert_2_decimal(recConceptoVariableDeduccion.monto), 
					'V', 
					recConceptoVariableDeduccion.documento_soporte, 
					recConceptoVariableDeduccion.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);
			end if;

		end loop;

		close curConceptoVariableDeduccion;



		--raise notice '4_id_trabajador_%',recTrabajadores1.id_trabajador;

		open curConceptoVariableAsignacion(recTrabajadores1.id_trabajador, f1, f2, f3);

		loop
			fetch curConceptoVariableAsignacion into recConceptoVariableAsignacion;			
			exit when not found;

			--****************** NOMINAS ORDINARIAS ******************

			if pPrenomina = false and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoVariableAsignacion.id_concepto_tipo_personal,
					recConceptoVariableAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableAsignacion.unidades,
					convert_2_decimal(recConceptoVariableAsignacion.monto), 0, 'V', 
					recConceptoVariableAsignacion.documento_soporte, 
					recConceptoVariableAsignacion.id_tipo_personal, pIdGrupoNomina,
					null, recConceptoVariableAsignacion.id_concepto_variable,
					0, null);
			

			elsif pPrenomina = true and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoVariableAsignacion.id_concepto_tipo_personal,
					recConceptoVariableAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableAsignacion.unidades, 
					convert_2_decimal(recConceptoVariableAsignacion.monto), 
					0,'V', 
					recConceptoVariableAsignacion.documento_soporte, 
					recConceptoVariableAsignacion.id_tipo_personal, 
					pIdGrupoNomina,
					null);
			end if;


			--****************** NOMINAS ESPECIALES ******************

			if pPrenomina = false and pOrdinaria = false then
					
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoVariableAsignacion.id_concepto_tipo_personal,
					recConceptoVariableAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableAsignacion.unidades,
					convert_2_decimal(recConceptoVariableAsignacion.monto), 0, 'V', 
					recConceptoVariableAsignacion.documento_soporte, 
					recConceptoVariableAsignacion.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoVariableAsignacion.id_concepto_variable,
					0, null);

			elsif pPrenomina = true and pOrdinaria = false then
				
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoVariableAsignacion.id_concepto_tipo_personal,
					recConceptoVariableAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableAsignacion.unidades, 
					convert_2_decimal(recConceptoVariableAsignacion.monto), 
					0,'V', 
					recConceptoVariableAsignacion.documento_soporte, 
					recConceptoVariableAsignacion.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);
			end if;

		end loop;

		close curConceptoVariableAsignacion;


		-- ****************** SOLO NOMINAS ORDINARIAS (PRESTAMOS) *******************

		if pOrdinaria = true then

			--raise notice '5_id_trabajador_%',recTrabajadores1.id_trabajador;

			open curConceptoPrestamo(recTrabajadores1.id_trabajador, f1, f2, f3);

			loop
				fetch curConceptoPrestamo into recConceptoPrestamo;			
				exit when not found;

				if pPrenomina = false and pOrdinaria = true then

					id := id+1;

					perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
						recConceptoPrestamo.id_concepto_tipo_personal,
						recConceptoPrestamo.id_frecuencia_tipo_personal,
						pNumeroNomina, 0, 0,
						convert_2_decimal(recConceptoPrestamo.monto_cuota), 'P', 
						recConceptoPrestamo.documento_soporte, 
						recConceptoPrestamo.id_tipo_personal, pIdGrupoNomina,
						null, recConceptoPrestamo.id_prestamo,
						0, null);
				

				elsif pPrenomina = true and pOrdinaria = true then
				
					id := id+1;
					perform add_ultimaprenomina(id,
						recTrabajadores1.id_trabajador,
						recConceptoPrestamo.id_concepto_tipo_personal,
						recConceptoPrestamo.id_frecuencia_tipo_personal,
						pNumeroNomina, 
						0, 
						0,
						convert_2_decimal(recConceptoPrestamo.monto_cuota), 
						'P', 
						recConceptoPrestamo.documento_soporte, 
						recConceptoPrestamo.id_tipo_personal, 
						pIdGrupoNomina,
						null);

				end if;

			end loop;

			close curConceptoPrestamo;

		end if;

	end loop;

	close curTrabajadores1;


                --
		-- ************* SOLO NOMINAS ORDINARIAS (DEDUCCIONES LEGALES) ****************
                --
		if pOrdinaria = true  then

			--raise notice '6_id_trabajador_%',recTrabajadores1.id_trabajador;

			open curDeduccionSso(pIdGrupoNomina, f1, f2, f3);

			loop
				fetch curDeduccionSso into recDeduccionSso;			
				exit when not found;

				open curTrabajadoresSso(recDeduccionSso.id_tipo_personal);

				loop
					fetch curTrabajadoresSso into recTrabajadoresSso;			
					exit when not found;
					monto := 0;
					montoAporte := 0;
					borrarLunesPrimera = false;
					borrarLunesSegunda = false;
					if pPeriodicidad = 'M' then
	
						if recTrabajadoresSso.lunes_primera = -1 and  recTrabajadoresSso.lunes_segunda > 0 then
							monto:=recTrabajadoresSso.retencion_sso * recTrabajadoresSso.lunes_segunda;
						elsif recTrabajadoresSso.lunes_primera = -1 and recTrabajadoresSso.lunes_segunda = 0 then
							monto:=recTrabajadoresSso.retencion_sso * pLunesSeQuincena;									 						
						elsif recTrabajadoresSso.lunes_primera > 0 then
							monto:=recTrabajadoresSso.retencion_sso *(recTrabajadoresSso.lunes_primera+pLunesSeQuincena);
						else
							monto:=recTrabajadoresSso.retencion_sso *(pLunesPrQuincena+pLunesSeQuincena);				
						end if;

						borrarLunesPrimera := true;
						borrarLunesSegunda := true;
					elsif pPeriodicidad = 'Q' then	
						if recDeduccionSso.cod_frecuencia_pago = 3 then						
							if pPrimeraQuincena=true then
								if recTrabajadoresSso.lunes_primera > 0 then
									monto:=recTrabajadoresSso.retencion_sso*recTrabajadoresSso.lunes_primera;
									montoAporte :=  recTrabajadoresSso.aporte_sso*recTrabajadoresSso.lunes_primera;
									
								elsif recTrabajadoresSso.lunes_primera =  0  then
									monto:=recTrabajadoresSso.retencion_sso*pLunesPrQuincena;
									montoAporte := recTrabajadoresSso.aporte_sso* pLunesPrQuincena;
								end if;
							else
								if recTrabajadoresSso.lunes_segunda > 0 then
									monto:=recTrabajadoresSso.retencion_sso*recTrabajadoresSso.lunes_segunda;
									montoAporte := recTrabajadoresSso.aporte_sso*recTrabajadoresSso.lunes_segunda;
									borrarLunesSegunda = true;
								elsif recTrabajadoresSso.lunes_segunda =  0  then
									monto:=recTrabajadoresSso.retencion_sso*pLunesSeQuincena;
									montoAporte := recTrabajadoresSso.aporte_sso*pLunesSeQuincena;
								end if;
							end if;	
                                                        borrarLunesPrimera := true;																					 						
						else
							if recTrabajadoresSso.lunes_primera = -1 and recTrabajadoresSso.lunes_segunda=0 then
								monto:=recTrabajadoresSso.retencion_sso*pLunesSeQuincena;
								montoAporte := recTrabajadoresSso.aporte_sso*pLunesSeQuincena;	
								borrarLunesPrimera = true;							 						
							elsif recTrabajadoresSso.lunes_primera =-1 and recTrabajadoresSso.lunes_segunda >0 then
								monto:=recTrabajadoresSso.retencion_sso*recTrabajadoresSso.lunes_segunda;
								montoAporte := recTrabajadoresSso.aporte_sso*recTrabajadoresSso.lunes_segunda;
								borrarLunesPrimera = true;
								borrarLunesSegunda = true;
							elsif recTrabajadoresSso.lunes_primera >0 then
								monto:=recTrabajadoresSso.retencion_sso *(recTrabajadoresSso.lunes_primera+pLunesSeQuincena);
								montoAporte := recTrabajadoresSso.aporte_sso *(recTrabajadoresSso.lunes_primera+pLunesSeQuincena);			
								borrarLunesPrimera = true;
							elsif recTrabajadoresSso.lunes_primera=0 and recTrabajadoresSso.lunes_segunda=0 then
								monto:=recTrabajadoresSso.retencion_sso*(pLunesPrQuincena+pLunesSeQuincena);
								montoAporte := recTrabajadoresSso.aporte_sso*(pLunesPrQuincena+pLunesSeQuincena);
							end if;
		
						end if;
					else
						 if recDeduccionSso.cod_frecuencia_pago = f1 
							or recDeduccionSso.cod_frecuencia_pago = f2
							or recDeduccionSso.cod_frecuencia_pago = f3 then
							monto:=recTrabajadoresSso.retencion_sso;	
							montoAporte:=recTrabajadoresSso.aporte_sso;								 			
						 else
							monto:=0;
							montoAporte:=0;
						 end if;				 	
					end if;

					if monto <> 0 then
						if pPrenomina = true and pOrdinaria = true then
						
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresSso.id_trabajador,
								recDeduccionSso.id_concepto_tipo_personal,
								recDeduccionSso.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSso.id_tipo_personal, pIdGrupoNomina,
								null);
						elsif pPrenomina = false and pOrdinaria = true then
							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresSso.id_trabajador,
								recDeduccionSso.id_concepto_tipo_personal,
								recDeduccionSso.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSso.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionSso.id_concepto_aporte);
							
						end if;				
					end if;
                                        if borrarLunesPrimera = true then
					   perform actualizar_trabajador_temporal(recTrabajadoresSso.id_trabajador, 'L1', pIdGrupoNomina);
					end if;
                                        if borrarLunesSegunda = true then
					   perform actualizar_trabajador_temporal(recTrabajadoresSso.id_trabajador, 'L2', pIdGrupoNomina);
					end if;

					-- if rectrabajadoresSso.lunes_retroactivo <> 0 then
					if 1 = 0 then
						monto:=recTrabajadoresSso.retencion_sso*(recTrabajadoresSso.lunes_retroactivo);
						montoAporte := recTrabajadoresSso.aporte_sso*(recTrabajadoresSso.lunes_retroactivo);
						if pPrenomina = true and pOrdinaria = true then
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresSso.id_trabajador,
								recDeduccionSso.id_concepto_retroactivo,
								recDeduccionSso.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSso.id_tipo_personal, pIdGrupoNomina,
								null);
						elsif pPrenomina = false and pOrdinaria = true then
							
							id := id+1;
							
							perform add_ultimanomina(id,recTrabajadoresSso.id_trabajador,
								recDeduccionSso.id_concepto_retroactivo,
								recDeduccionSso.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSso.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionSso.id_concepto_aporte);

								perform actualizar_trabajador_temporal(recTrabajadoresSso.id_trabajador, 'LR', pIdGrupoNomina);
						end if;		
						
					end if;				
				end loop;

				close curTrabajadoresSso;

			end loop;

			close curDeduccionSso;

			raise notice 'sale de SSO';

				--raise notice '7_id_trabajador_%',recTrabajadores1.id_trabajador;

			open curDeduccionSpf(pIdGrupoNomina, f1, f2, f3);

			loop
				fetch curDeduccionSpf into recDeduccionSpf;			
				exit when not found;
	
				open curTrabajadoresSpf(recDeduccionSpf.id_tipo_personal);
				loop

					fetch curTrabajadoresSpf into recTrabajadoresSpf;			
					exit when not found;
					monto := 0;
					montoAporte := 0;
					borrarLunesPrimera := false;
					borrarLunesSegunda := false;
					if pPeriodicidad = 'M' then	
						if recTrabajadoresSpf.lunes_primera = -1 and  recTrabajadoresSpf.lunes_segunda > 0 then
							monto:=recTrabajadoresSpf.retencion_spf * recTrabajadoresSpf.lunes_segunda;							
						elsif recTrabajadoresSpf.lunes_primera = -1 and recTrabajadoresSpf.lunes_segunda = 0 then
							monto:=recTrabajadoresSpf.retencion_spf * pLunesSeQuincena;									 						
						elsif recTrabajadoresSpf.lunes_primera > 0 then
							monto:=recTrabajadoresSpf.retencion_spf *(recTrabajadoresSpf.lunes_primera+pLunesSeQuincena);
						else
							monto:=recTrabajadoresSpf.retencion_spf *(pLunesPrQuincena+pLunesSeQuincena);				
						end if;
						borrarLunesPrimera := true;
						borrarLunesSegunda := true;
					elsif pPeriodicidad = 'Q' then	
						if recDeduccionSpf.cod_frecuencia_pago = 3 then						
							if pPrimeraQuincena=true then
								if recTrabajadoresSpf.lunes_primera > 0 then
									monto:=recTrabajadoresSpf.retencion_spf*recTrabajadoresSpf.lunes_primera;
									montoAporte :=  recTrabajadoresSpf.aporte_spf*recTrabajadoresSpf.lunes_primera;
								elsif recTrabajadoresSpf.lunes_primera = 0 then
									monto:=recTrabajadoresSpf.retencion_spf*pLunesPrQuincena;
									montoAporte := recTrabajadoresSpf.aporte_spf* pLunesPrQuincena;
								end if;
							else
								if recTrabajadoresSpf.lunes_segunda > 0 then
									monto:=recTrabajadoresSpf.retencion_spf*recTrabajadoresSpf.lunes_segunda;
									montoAporte := recTrabajadoresSpf.aporte_spf*recTrabajadoresSpf.lunes_segunda;
									borrarLunesSegunda := true;
								elsif recTrabajadoresSpf.lunes_segunda = 0 then
									monto:=recTrabajadoresSpf.retencion_spf*pLunesSeQuincena;
									montoAporte := recTrabajadoresSpf.aporte_spf*pLunesSeQuincena;
								end if;
							end if;
                                          borrarLunesPrimera := true;																							 						
						else
							if recTrabajadoresSpf.lunes_primera = -1 and recTrabajadoresSpf.lunes_segunda=0 then
								monto:=recTrabajadoresSpf.retencion_spf*pLunesSeQuincena;
								montoAporte := recTrabajadoresSpf.aporte_spf*pLunesSeQuincena;	
								borrarLunesPrimera := true;							 						
							elsif recTrabajadoresSpf.lunes_primera =-1 and recTrabajadoresSpf.lunes_segunda >0 then
								monto:=recTrabajadoresSpf.retencion_spf*recTrabajadoresSpf.lunes_segunda;
								montoAporte := recTrabajadoresSpf.aporte_spf*recTrabajadoresSpf.lunes_segunda;
								borrarLunesPrimera := true;
								borrarLunesSegunda := true;
							elsif recTrabajadoresSpf.lunes_primera >0 then
								monto:=recTrabajadoresSpf.retencion_spf *(recTrabajadoresSpf.lunes_primera+pLunesSeQuincena);
								montoAporte := recTrabajadoresSpf.aporte_spf *(recTrabajadoresSpf.lunes_primera+pLunesSeQuincena);			
								borrarLunesPrimera := true;
							elsif recTrabajadoresSpf.lunes_primera=0 and recTrabajadoresSpf.lunes_segunda=0 then
								monto:=recTrabajadoresSpf.retencion_spf*(pLunesPrQuincena+pLunesSeQuincena);
								montoAporte := recTrabajadoresSpf.aporte_spf*(pLunesPrQuincena+pLunesSeQuincena);
							end if;
						end if;
					else
						  if recDeduccionSpf.cod_frecuencia_pago = f1 
							or recDeduccionSpf.cod_frecuencia_pago = f2
							or recDeduccionSpf.cod_frecuencia_pago = f3 then
							monto:=recTrabajadoresSpf.retencion_spf;	
							montoAporte:=recTrabajadoresSpf.aporte_spf;								 			
						 else
							monto:=0;
							montoAporte:=0;
						 end if;				 	
					end if;
					if monto <> 0 then
						if pPrenomina = true and pOrdinaria = true then
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresSpf.id_trabajador,
								recDeduccionSpf.id_concepto_tipo_personal,
								recDeduccionSpf.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSpf.id_tipo_personal, pIdGrupoNomina,
								null);
						elsif pPrenomina = false and pOrdinaria = true then
									
							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresSpf.id_trabajador,
								recDeduccionSpf.id_concepto_tipo_personal,
								recDeduccionSpf.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSpf.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionSpf.id_concepto_aporte);
						end if;				

					end if;
	                                if borrarLunesPrimera = true then
					   perform actualizar_trabajador_temporal(recTrabajadoresSpf.id_trabajador, 'L1', pIdGrupoNomina);
					end if;
                                        if borrarLunesSegunda = true then
					   perform actualizar_trabajador_temporal(recTrabajadoresSpf.id_trabajador, 'L2', pIdGrupoNomina);
					end if;
						

					if 1 = 0 then
					--- if rectrabajadoresSpf.lunes_retroactivo <> 0 then
						monto:=recTrabajadoresSpf.retencion_spf*(recTrabajadoresSpf.lunes_retroactivo);
						montoAporte := recTrabajadoresSpf.aporte_spf*(recTrabajadoresSpf.lunes_retroactivo);
						if pPrenomina = true and pOrdinaria = true then
									
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresSpf.id_trabajador,
								recDeduccionSpf.id_concepto_retroactivo,
								recDeduccionSpf.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSpf.id_tipo_personal, pIdGrupoNomina,
								null);
						elsif pPrenomina = false and pOrdinaria = true then
						
							id := id+1;
							retencion := 0;
							retencion := recTrabajadoresSpf.retencion_spf * recTrabajadoresSpf.lunes_retroactivo;

							perform add_ultimanomina(id,recTrabajadoresSpf.id_trabajador,
								recDeduccionSpf.id_concepto_retroactivo,
								recDeduccionSpf.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSpf.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionSpf.id_concepto_aporte);

							perform actualizar_trabajador_temporal(recTrabajadoresSpf.id_trabajador, 'LR', pIdGrupoNomina);
						end if;				
					end if;				
				end loop;
				close curTrabajadoresSpf;
			end loop;
			close curDeduccionSpf;
			raise notice 'sale de SPF';

			--raise notice '8_id_trabajador_%',recTrabajadores1.id_trabajador;
			open curDeduccionLph(pIdGrupoNomina, f1, f2, f3);
			loop
				fetch curDeduccionLph into recDeduccionLph;			
				exit when not found;
				open curTrabajadoresLph(recDeduccionLph.id_tipo_personal);
				loop
					fetch curTrabajadoresLph into recTrabajadoresLph;			
					exit when not found;
					monto := 0;	
					montoAporte := 0;				 						 	
					 if pPeriodicidad = 'M' then										 						
						 monto:=recTrabajadoresLph.retencion_lph;	
						 montoAporte:=recTrabajadoresLph.aporte_lph;				  									 					
					 elsif pPeriodicidad = 'Q' then
						 if  recDeduccionLph.cod_frecuencia_pago = 3 then							
							monto:=recTrabajadoresLph.retencion_lph/2;
							montoAporte:=recTrabajadoresLph.aporte_lph/2;																														 					
						 else
							 monto:=recTrabajadoresLph.retencion_lph;
							 montoAporte:=recTrabajadoresLph.aporte_lph;
						 end if;											  									 			
					 else
						 if recDeduccionLph.cod_frecuencia_pago = f1 
							or recDeduccionLph.cod_frecuencia_pago = f2
							or recDeduccionLph.cod_frecuencia_pago = f3 then
							monto:=recTrabajadoresLph.retencion_lph;
							montoAporte:=recTrabajadoresLph.aporte_lph;									
						else
							monto:=0;
							montoAporte:=0;	 			
						end if;
					 end if;

					if monto <> 0 then
						if pPrenomina = true and pOrdinaria = true then
							id := id+1;
							perform add_ultimaprenomina(id,recTrabajadoresLph.id_trabajador,
								recDeduccionLph.id_concepto_tipo_personal,
								recDeduccionLph.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresLph.id_tipo_personal, pIdGrupoNomina,
								null);

						elsif pPrenomina = false and pOrdinaria = true then
								
							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresLph.id_trabajador,
								recDeduccionLph.id_concepto_tipo_personal,
								recDeduccionLph.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresLph.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionLph.id_concepto_aporte);
						end if;		
					end if;

					if 1 = 0 then
					--if recTrabajadoresLph.hay_retroactivo = 'S' then

						if recDeduccionLph.cod_frecuencia_pago = 3 then
							montoCalculado := calcular_concepto(recDeduccionLph.id_concepto_retroactivo, recTrabajadoresLph.id_trabajador, 2, 'P', recDeduccionLph.cod_frecuencia_pago, recTrabajadoresLph.jornada_diaria, recTrabajadoresLph.jornada_semanal, recTrabajadoresLph.formula_integral, recTrabajadoresLph.formula_semanal, recTrabajadoresLph.id_cargo, recDeduccionLph.valor, recDeduccionLph.tope_minimo, recDeduccionLph.tope_maximo);	
						else
							montoCalculado := calcular_concepto(recDeduccionLph.id_concepto_retroactivo, recTrabajadoresLph.id_trabajador, 1, 'P', recDeduccionLph.cod_frecuencia_pago, recTrabajadoresLph.jornada_diaria, recTrabajadoresLph.jornada_semanal, recTrabajadoresLph.formula_integral, recTrabajadoresLph.formula_semanal, recTrabajadoresLph.id_cargo, recDeduccionLph.valor, recDeduccionLph.tope_minimo, recDeduccionLph.tope_maximo);	
						end if;
						if pPrenomina = true and pOrdinaria = true then
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresLph.id_trabajador,
								recDeduccionLph.id_concepto_retroactivo,
								recDeduccionLph.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(montoCalculado), 'C', 
								null, 
								recTrabajadoresLph.id_tipo_personal, pIdGrupoNomina,
								null);

						elsif pPrenomina = false and pOrdinaria = true then

							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresLph.id_trabajador,
								recDeduccionLph.id_concepto_retroactivo,
								recDeduccionLph.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(montoCalculado), 'C', 
								null, 
								recTrabajadoresLph.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								0, null);

							perform actualizar_trabajador_temporal(recTrabajadoresLph.id_trabajador, 'HR', pIdGrupoNomina);
						end if;	
					end if;
				end loop;
				close curTrabajadoresLph;
			end loop;
			close curDeduccionLph;

			raise notice 'sale de LPH';

			--raise notice '9_id_trabajador_%',recTrabajadores1.id_trabajador;

			open curDeduccionFju(pIdGrupoNomina, f1, f2, f3);
			loop
				fetch curDeduccionFju into recDeduccionFju;			
				exit when not found;
				open curTrabajadoresFju(recDeduccionFju.id_tipo_personal);
				loop
					fetch curTrabajadoresFju into recTrabajadoresFju;			
					exit when not found;
					monto := 0;	
					montoAporte := 0;				 						 	
					 if pPeriodicidad = 'M' then										 						
						 monto:=recTrabajadoresFju.retencion_fju;	
						 montoAporte:=recTrabajadoresFju.aporte_fju;				  									 					
					 elsif pPeriodicidad = 'Q' then
						 if  recDeduccionFju.cod_frecuencia_pago = 3 then							
							monto:=recTrabajadoresFju.retencion_fju/2;
							montoAporte:=recTrabajadoresFju.aporte_fju/2;																														 					
						 else
							 monto:=recTrabajadoresFju.retencion_fju;
							 montoAporte:=recTrabajadoresFju.aporte_fju;
						 end if;											  									 			
					 else
						 if recDeduccionFju.cod_frecuencia_pago = f1 
							or recDeduccionFju.cod_frecuencia_pago = f2
							or recDeduccionFju.cod_frecuencia_pago = f3 then
							monto:=recTrabajadoresFju.retencion_fju;
							montoAporte:=recTrabajadoresFju.aporte_fju;									
						else
							monto:=0;
							montoAporte:=0;	 			
						end if;
					 end if;
					if monto <> 0 then
						if pPrenomina = true and pOrdinaria = true then
										
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresFju.id_trabajador,
								recDeduccionFju.id_concepto_tipo_personal,
								recDeduccionFju.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresFju.id_tipo_personal, pIdGrupoNomina,
								null);
						elsif pPrenomina = false and pOrdinaria = true then
						
							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresFju.id_trabajador,
								recDeduccionFju.id_concepto_tipo_personal,
								recDeduccionFju.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresFju.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionFju.id_concepto_aporte);
						end if;		
					end if;
					
					if 1 = 0 then
					-- if recTrabajadoresFju.hay_retroactivo = 'S' then
						if recDeduccionFju.cod_frecuencia_pago = 3 then
							montoCalculado := calcular_concepto(recDeduccionFju.id_concepto_retroactivo, recTrabajadoresFju.id_trabajador, 2, 'P', recDeduccionFju.cod_frecuencia_pago, recTrabajadoresFju.jornada_diaria, recTrabajadoresFju.jornada_semanal, recTrabajadoresFju.formula_integral, recTrabajadoresFju.formula_semanal, recTrabajadoresFju.id_cargo, recDeduccionFju.valor, recDeduccionFju.tope_minimo, recDeduccionFju.tope_maximo);		
						else
							montoCalculado := calcular_concepto(recDeduccionFju.id_concepto_retroactivo, recTrabajadoresFju.id_trabajador, 1, 'P', recDeduccionFju.cod_frecuencia_pago, recTrabajadoresFju.jornada_diaria, recTrabajadoresFju.jornada_semanal, recTrabajadoresFju.formula_integral, recTrabajadoresFju.formula_semanal, recTrabajadoresFju.id_cargo, recDeduccionFju.valor, recDeduccionFju.tope_minimo, recDeduccionFju.tope_maximo);	
						end if;
						if pPrenomina = true and pOrdinaria = true then
									
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresFju.id_trabajador,
								recDeduccionFju.id_concepto_retroactivo,
								recDeduccionFju.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(montoCalculado), 'C', 
								null, 
								recTrabajadoresFju.id_tipo_personal, pIdGrupoNomina,
								null);

						elsif pPrenomina = false and pOrdinaria = true then
						
							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresFju.id_trabajador,
								recDeduccionFju.id_concepto_retroactivo,
								recDeduccionFju.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(montoCalculado), 'C', 
								null, 
								recTrabajadoresFju.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								0, null);

							perform actualizar_trabajador_temporal(recTrabajadoresFju.id_trabajador, 'HR', pIdGrupoNomina);
						end if;		
					end if;
				end loop;
				close curTrabajadoresFju;
			end loop;
			close curDeduccionFju;
			raise notice 'sale de FJU';
		end if;

		open curTiposPersonalIslr(pIdGrupoNomina);
		loop
			fetch curTiposPersonalIslr into recTiposPersonalIslr;			
			exit when not found;

			-- *********** NOMINAS ORDINARIAS ************

			if pOrdinaria = true then
				if (recTiposPersonalIslr.cod_frecuencia_pago = 2 AND extract(day from pFechaInicio)= 16) 
					OR (recTiposPersonalIslr.cod_frecuencia_pago = 3 ) 
					OR (recTiposPersonalIslr.cod_frecuencia_pago = 2 AND pPeriodicidad = 'M') then
					-- PRENOMINA
					if pPrenomina = true then
						open curTrabajadoresPrenominaIslr(recTiposPersonalIslr.id_tipo_personal, pNumeroNomina);
						loop
							fetch curTrabajadoresPrenominaIslr into recTrabajadoresPrenominaIslr;			
							exit when not found;
							monto := 0;
							id:= id+1;
							monto := recTrabajadoresPrenominaIslr.monto * (recTrabajadoresPrenominaIslr.porcentaje_islr/100);
								
								perform add_ultimaprenomina(id,recTrabajadoresPrenominaIslr.id_trabajador,	
									recTiposPersonalIslr.id_concepto_tipo_personal,
									recTiposPersonalIslr.id_frecuencia_tipo_personal,
									pNumeroNomina, recTrabajadoresPrenominaIslr.porcentaje_islr, 0,
									convert_2_decimal(monto), 'C', 
									null, 
									recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
									null);
						end loop;
						close curTrabajadoresPrenominaIslr;
					else
						open curTrabajadoresNominaIslr(recTiposPersonalIslr.id_tipo_personal, pNumeroNomina);	
						loop
							fetch curTrabajadoresNominaIslr into recTrabajadoresNominaIslr;			
							exit when not found;
							monto := 0;
							monto := recTrabajadoresNominaIslr.monto * (recTrabajadoresNominaIslr.porcentaje_islr/100);
							id:= id+1;								

							perform add_ultimanomina(id,recTrabajadoresNominaIslr.id_trabajador,
								recTiposPersonalIslr.id_concepto_tipo_personal,
								recTiposPersonalIslr.id_frecuencia_tipo_personal,
								pNumeroNomina, recTrabajadoresNominaIslr.porcentaje_islr, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
								null, 0, 0, null);
						end loop;
						close curTrabajadoresNominaIslr;
					end if;
				end if;					

				if recTiposPersonalIslr.cod_frecuencia_pago = 2 AND pPeriodicidad = 'Q' then
					open curTrabajadoresIslrQuincenaAnterior(recTiposPersonalIslr.id_tipo_personal, pAnio, pMes);
					loop
						fetch curTrabajadoresIslrQuincenaAnterior into recTrabajadoresIslrQuincenaAnterior;			
						exit when not found;
						montoAnterior := 0;	
						tieneIslrAnterior := false;

						if pPrenomina = true then
							open curTrabajadoresIslrActualPrenomina(recTrabajadoresIslrQuincenaAnterior.id_trabajador);
							loop
								fetch curTrabajadoresIslrActualPrenomina into recTrabajadoresIslrActualPrenomina;			
								exit when not found;							
								montoAnterior := recTrabajadoresIslrQuincenaAnterior.monto*(recTrabajadoresIslrQuincenaAnterior.porcentaje_islr/100);							
								perform update_ultimaprenomina(recTrabajadoresIslrActualPrenomina.id_ultima_prenomina, convert_2_decimal(montoAnterior));							
								tieneIslrAnterior := true;
							end loop;
						else
							open curTrabajadoresIslrActualNomina(recTrabajadoresIslrQuincenaAnterior.id_trabajador);
							loop
								fetch curTrabajadoresIslrActualNomina into recTrabajadoresIslrActualNomina;			
								exit when not found;						
								montoAnterior := recTrabajadoresIslrQuincenaAnterior.monto*(recTrabajadoresIslrQuincenaAnterior.porcentaje_islr/100);							
								perform update_ultimanomina(recTrabajadoresIslrActualNomina.id_ultima_nomina, convert_2_decimal(montoAnterior));
								tieneIslrAnterior := true;	
							end loop;

						end if;
						if tieneIslranterior = false then

							montoAnterior := recTrabajadoresIslrQuincenaAnterior.monto*(recTrabajadoresIslrQuincenaAnterior.porcentaje_islr/100);													

							if pPrenomina = true then

								id := id+1;

								perform add_ultimaprenomina(id,recTrabajadoresIslrQuincenaAnterior.id_trabajador,
									recTiposPersonalIslr.id_concepto_tipo_personal,
									recTiposPersonalIslr.id_frecuencia_tipo_personal,
									pNumeroNomina, recTrabajadoresIslrQuincenaAnterior.porcentaje_islr, 0,
									convert_2_decimal(montoAnterior), 'C', 
									null, 
									recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
									null);

							elsif pPrenomina = false then

								id:=id+1;

								perform add_ultimanomina(id,recTrabajadoresIslrQuincenaAnterior.id_trabajador,
									recTiposPersonalIslr.id_concepto_tipo_personal,
									recTiposPersonalIslr.id_frecuencia_tipo_personal,
									pNumeroNomina, recTrabajadoresIslrQuincenaAnterior.porcentaje_islr, 0,
									convert_2_decimal(monto), 'C', 
									null, 
									recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
									null, 0, 0, null);
							end if;												
						end if;
						if pPrenomina = true then
							close curTrabajadoresIslrActualPrenomina;																					
						else
							close curTrabajadoresIslrActualNomina;
						end if;

					end loop;

					close curTrabajadoresIslrQuincenaAnterior;				

				end if;

			else
				
				open curFrecuenciaTipoPersonalEspecial(recTiposPersonalIslr.id_tipo_personal, recNominaEspecial.id_frecuencia_pago);
				fetch curFrecuenciaTipoPersonalEspecial into recFrecuenciaTipoPersonalEspecial;	
				if recFrecuenciaTipoPersonalEspecial.id_frecuencia_tipo_personal is null then
					return 0;
				end if;

				-- ************* NOMINAS ESPECIALES *************
				if pPrenomina = true  then

					open curTrabajadoresPrenominaIslr(recTiposPersonalIslr.id_tipo_personal, pNumeroNomina);
					loop
						fetch curTrabajadoresPrenominaIslr into recTrabajadoresPrenominaIslr;			
						exit when not found;
						monto := 0;
						monto := recTrabajadoresPrenominaIslr.monto * (recTrabajadoresPrenominaIslr.porcentaje_islr/100);
						

						id := id+1;						
						perform add_ultimaprenomina(id,recTrabajadoresPrenominaIslr.id_trabajador,
							recTiposPersonalIslr.id_concepto_tipo_personal,
							recFrecuenciaTipoPersonalEspecial.id_frecuencia_tipo_personal,
							pNumeroNomina, recTrabajadoresPrenominaIslr.porcentaje_islr, 0,
							convert_2_decimal(monto), 'C', null, 
							recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
							pIdNominaEspecial);
					end loop;
					close curTrabajadoresPrenominaIslr;
				elsif pPrenomina = false  then
					open curTrabajadoresNominaIslr(recTiposPersonalIslr.id_tipo_personal, pNumeroNomina);

					loop
						fetch curTrabajadoresNominaIslr into recTrabajadoresNominaIslr;			
						exit when not found;
					
						id:= id+1;								
						monto := 0;
						monto := recTrabajadoresNominaIslr.monto * (recTrabajadoresNominaIslr.porcentaje_islr/100);
						perform add_ultimanomina(id,recTrabajadoresNominaIslr.id_trabajador,
							recTiposPersonalIslr.id_concepto_tipo_personal,
							recFrecuenciaTipoPersonalEspecial.id_frecuencia_tipo_personal,
							pNumeroNomina, recTrabajadoresNominaIslr.porcentaje_islr, 0,
							convert_2_decimal(monto), 'C', null, 
							recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
							pIdNominaEspecial, 0, 0, null);
					end loop;

					close curTrabajadoresNominaIslr;

				end if;	
			end if;
		end loop;

		close curTiposPersonalIslr;
		raise notice 'sale de ISLR';
		raise notice 'va entrar sobregirado';

	
		if pPrenomina = false then
			open curSobregiradosNomina(pIdGrupoNomina, pNumeroNomina);
			loop
				fetch curSobregiradosNomina into recSobregiradosNomina;			
				exit when not found;
				return 1;
			end loop;
		else
			open curSobregiradosPrenomina(pIdGrupoNomina, pNumeroNomina);
			loop
				fetch curSobregiradosPrenomina into recSobregiradosPrenomina;			
				exit when not found;
				return 1;
			end loop;
		end if;

		raise notice 'sale de  sobregirado';


-- ********************* A PARTIR DE AQUI SOLO NOMINAS **********************

		if pPrenomina = false then 

			-- Se validan los historicos
			open curValidarHistoricoNominaRegistroCargos(pIdGrupoNomina, pNumeroNomina);			

			raise notice '  curValidarHistoricoNominaRegistroCargos(%,%)',pIdGrupoNomina, pNumeroNomina ;
			
			fetch curValidarHistoricoNominaRegistroCargos into recValidarHistoricoNominaRegistroCargos;	
			if recValidarHistoricoNominaRegistroCargos.cantidad <> 0 then
				return 100;
			end if;

			raise notice 'van inciar los historicos';
			open curHistoricoNominaRegistroCargos(pIdGrupoNomina, pNumeroNomina);
			loop
				fetch curHistoricoNominaRegistroCargos into recHistoricoNominaRegistroCargos;			
				exit when not found;

				idHistoricoNomina := idHistoricoNomina+1;			
			--	if recHistoricoNominaRegistroCargos.id_banco = 0 then
			--		idBanco := 1;
			--	end if;


				if pOrdinaria = true then
					if pPeriodicidad = 'S' then	
						-- ********** NOMINAS ORDINARIAS SEMANALES **********	
						perform add_historiconomina(idHistoricoNomina,
							recHistoricoNominaRegistroCargos.id_trabajador,
							pNumeroNomina, pAnio, pMes, pSemanaAnio, pFecha,
							recHistoricoNominaRegistroCargos.id_dependencia,
							recHistoricoNominaRegistroCargos.id_cargo,
							recHistoricoNominaRegistroCargos.numero_registro,
							recHistoricoNominaRegistroCargos.codigo_nomina,
							recHistoricoNominaRegistroCargos.forma_pago,
							recHistoricoNominaRegistroCargos.id_banco,
							recHistoricoNominaRegistroCargos.tipo_cta_nomina,
							recHistoricoNominaRegistroCargos.cuenta_nomina,
							recHistoricoNominaRegistroCargos.estatus,
							recHistoricoNominaRegistroCargos.situacion,
							recHistoricoNominaRegistroCargos.id_tipo_personal,
							pIdGrupoNomina, null,
							recHistoricoNominaRegistroCargos.id_lugar_pago,
							recHistoricoNominaRegistroCargos.id_unidad_ejecutora,
							recHistoricoNominaRegistroCargos.id_unidad_administradora,
							recHistoricoNominaRegistroCargos.cod_dependencia,
							recHistoricoNominaRegistroCargos.cod_cargo, 
							recHistoricoNominaRegistroCargos.cod_unidad_ejecutora,
							recHistoricoNominaRegistroCargos.cod_unidad_administ,
							recHistoricoNominaRegistroCargos.id_sede,
							recHistoricoNominaRegistroCargos.id_region,
							recHistoricoNominaRegistroCargos.cod_sede,
							recHistoricoNominaRegistroCargos.cod_region,
							recHistoricoNominaRegistroCargos.codigo_patronal);

                                             perform update_historiconomina(idHistoricoNomina,
                                                        recHistoricoNominaRegistroCargos.lunes_primera,
                                                        recHistoricoNominaRegistroCargos.lunes_segunda,
                                                        recHistoricoNominaRegistroCargos.lunes_retroactivo,
                                                        recHistoricoNominaRegistroCargos.hay_retroactivo);
					else
						perform add_historiconomina(idHistoricoNomina,
							recHistoricoNominaRegistroCargos.id_trabajador,
							pNumeroNomina, pAnio, pMes, pSemanaQuincena, pFecha,
							recHistoricoNominaRegistroCargos.id_dependencia,
							recHistoricoNominaRegistroCargos.id_cargo,
							recHistoricoNominaRegistroCargos.numero_registro,
							recHistoricoNominaRegistroCargos.codigo_nomina,
							recHistoricoNominaRegistroCargos.forma_pago,
							recHistoricoNominaRegistroCargos.id_banco,
							recHistoricoNominaRegistroCargos.tipo_cta_nomina,
							recHistoricoNominaRegistroCargos.cuenta_nomina,
							recHistoricoNominaRegistroCargos.estatus,
							recHistoricoNominaRegistroCargos.situacion,
							recHistoricoNominaRegistroCargos.id_tipo_personal,
							pIdGrupoNomina, null,
							recHistoricoNominaRegistroCargos.id_lugar_pago,
							recHistoricoNominaRegistroCargos.id_unidad_ejecutora,
							recHistoricoNominaRegistroCargos.id_unidad_administradora,
							recHistoricoNominaRegistroCargos.cod_dependencia,
							recHistoricoNominaRegistroCargos.cod_cargo, 
							recHistoricoNominaRegistroCargos.cod_unidad_ejecutora,
							recHistoricoNominaRegistroCargos.cod_unidad_administ,
							recHistoricoNominaRegistroCargos.id_sede,
							recHistoricoNominaRegistroCargos.id_region,
							recHistoricoNominaRegistroCargos.cod_sede,
							recHistoricoNominaRegistroCargos.cod_region,
							recHistoricoNominaRegistroCargos.codigo_patronal);

                                             perform update_historiconomina(idHistoricoNomina,
                                                        recHistoricoNominaRegistroCargos.lunes_primera,
                                                        recHistoricoNominaRegistroCargos.lunes_segunda,
                                                        recHistoricoNominaRegistroCargos.lunes_retroactivo,
                                                        recHistoricoNominaRegistroCargos.hay_retroactivo);

					end if;
				else
					-- ********** NOMINAS ESPECIALES **********

					perform add_historiconomina(idHistoricoNomina,
						recHistoricoNominaRegistroCargos.id_trabajador,
						pNumeroNomina, pAnio, pMes, pSemanaQuincena, pFecha,
						recHistoricoNominaRegistroCargos.id_dependencia,
						recHistoricoNominaRegistroCargos.id_cargo,
						recHistoricoNominaRegistroCargos.numero_registro,
						recHistoricoNominaRegistroCargos.codigo_nomina,
						recHistoricoNominaRegistroCargos.forma_pago,
						recHistoricoNominaRegistroCargos.id_banco,
						recHistoricoNominaRegistroCargos.tipo_cta_nomina,
						recHistoricoNominaRegistroCargos.cuenta_nomina,
						recHistoricoNominaRegistroCargos.estatus,
						recHistoricoNominaRegistroCargos.situacion,
						recHistoricoNominaRegistroCargos.id_tipo_personal,
						pIdGrupoNomina, pIdNominaEspecial,
						recHistoricoNominaRegistroCargos.id_lugar_pago,
						recHistoricoNominaRegistroCargos.id_unidad_ejecutora,
						recHistoricoNominaRegistroCargos.id_unidad_administradora,
						recHistoricoNominaRegistroCargos.cod_dependencia,
						recHistoricoNominaRegistroCargos.cod_cargo, 
						recHistoricoNominaRegistroCargos.cod_unidad_ejecutora,
						recHistoricoNominaRegistroCargos.cod_unidad_administ,
						recHistoricoNominaRegistroCargos.id_sede,
						recHistoricoNominaRegistroCargos.id_region,
						recHistoricoNominaRegistroCargos.cod_sede,
						recHistoricoNominaRegistroCargos.cod_region,
						recHistoricoNominaRegistroCargos.codigo_patronal);

                                            perform update_historiconomina(idHistoricoNomina,
                                                       recHistoricoNominaRegistroCargos.lunes_primera,
                                                       recHistoricoNominaRegistroCargos.lunes_segunda,
                                                       recHistoricoNominaRegistroCargos.lunes_retroactivo,
                                                       recHistoricoNominaRegistroCargos.hay_retroactivo);

				end if;
			end loop;
			close curHistoricoNominaRegistroCargos;	


			open curValidarHistoricoNominaSinRegistroCargos(pIdGrupoNomina, pNumeroNomina);			
			fetch curValidarHistoricoNominaSinRegistroCargos into recValidarHistoricoNominaSinRegistroCargos;	
			if recValidarHistoricoNominaSinRegistroCargos.cantidad <> 0 then
				return 101;
			end if;
			open curHistoricoNominaSinRegistroCargos(pIdGrupoNomina, pNumeroNomina);
			loop
				fetch curHistoricoNominaSinRegistroCargos into recHistoricoNominaSinRegistroCargos;			
				exit when not found;
						
				idHistoricoNomina := idHistoricoNomina+1;			
			--	if recHistoricoNominaSinRegistroCargos.id_banco = 0 then
			--		idBanco := 1;
			--	end if;

				if pOrdinaria = true then

					-- ********** NOMINAS ORDINARIAS **********
					if pPeriodicidad = 'S' then	 
						perform add_historiconomina(idHistoricoNomina,
							recHistoricoNominaSinRegistroCargos.id_trabajador,
							pNumeroNomina, pAnio, pMes, pSemanaAnio, pFecha,
							recHistoricoNominaSinRegistroCargos.id_dependencia,
							recHistoricoNominaSinRegistroCargos.id_cargo,
							recHistoricoNominaSinRegistroCargos.numero_registro,
							recHistoricoNominaSinRegistroCargos.codigo_nomina,
							recHistoricoNominaSinRegistroCargos.forma_pago,
							recHistoricoNominaSinRegistroCargos.id_banco, 
							recHistoricoNominaSinRegistroCargos.tipo_cta_nomina,
							recHistoricoNominaSinRegistroCargos.cuenta_nomina,
							recHistoricoNominaSinRegistroCargos.estatus,
							recHistoricoNominaSinRegistroCargos.situacion,
							recHistoricoNominaSinRegistroCargos.id_tipo_personal,
							pIdGrupoNomina, null,
							recHistoricoNominaSinRegistroCargos.id_lugar_pago,
							recHistoricoNominaSinRegistroCargos.id_unidad_ejecutora,
							recHistoricoNominaSinRegistroCargos.id_unidad_administradora,
							recHistoricoNominaSinRegistroCargos.cod_dependencia,
							recHistoricoNominaSinRegistroCargos.cod_cargo, 
							recHistoricoNominaSinRegistroCargos.cod_unidad_ejecutora,
							recHistoricoNominaSinRegistroCargos.cod_unidad_administ,
							recHistoricoNominaSinRegistroCargos.id_sede,
							recHistoricoNominaSinRegistroCargos.id_region,
							recHistoricoNominaSinRegistroCargos.cod_sede,
							recHistoricoNominaSinRegistroCargos.cod_region,
							recHistoricoNominaSinRegistroCargos.codigo_patronal);

                                             perform update_historiconomina(idHistoricoNomina,
                                                        recHistoricoNominaSinRegistroCargos.lunes_primera,
                                                        recHistoricoNominaSinRegistroCargos.lunes_segunda,
                                                        recHistoricoNominaSinRegistroCargos.lunes_retroactivo,
                                                        recHistoricoNominaSinRegistroCargos.hay_retroactivo);
					else
						perform add_historiconomina(idHistoricoNomina,
							recHistoricoNominaSinRegistroCargos.id_trabajador,
							pNumeroNomina, pAnio, pMes, pSemanaQuincena, pFecha,
							recHistoricoNominaSinRegistroCargos.id_dependencia,
							recHistoricoNominaSinRegistroCargos.id_cargo,
							recHistoricoNominaSinRegistroCargos.numero_registro,
							recHistoricoNominaSinRegistroCargos.codigo_nomina,
							recHistoricoNominaSinRegistroCargos.forma_pago,
							recHistoricoNominaSinRegistroCargos.id_banco,
							recHistoricoNominaSinRegistroCargos.tipo_cta_nomina,
							recHistoricoNominaSinRegistroCargos.cuenta_nomina,
							recHistoricoNominaSinRegistroCargos.estatus,
							recHistoricoNominaSinRegistroCargos.situacion,
							recHistoricoNominaSinRegistroCargos.id_tipo_personal,
							pIdGrupoNomina, null,
							recHistoricoNominaSinRegistroCargos.id_lugar_pago,
							recHistoricoNominaSinRegistroCargos.id_unidad_ejecutora,
							recHistoricoNominaSinRegistroCargos.id_unidad_administradora,
							recHistoricoNominaSinRegistroCargos.cod_dependencia,
							recHistoricoNominaSinRegistroCargos.cod_cargo, 
							recHistoricoNominaSinRegistroCargos.cod_unidad_ejecutora,
							recHistoricoNominaSinRegistroCargos.cod_unidad_administ,
							recHistoricoNominaSinRegistroCargos.id_sede,
							recHistoricoNominaSinRegistroCargos.id_region,
							recHistoricoNominaSinRegistroCargos.cod_sede,
							recHistoricoNominaSinRegistroCargos.cod_region,
							recHistoricoNominaSinRegistroCargos.codigo_patronal);

                                             perform update_historiconomina(idHistoricoNomina,
                                                        recHistoricoNominaSinRegistroCargos.lunes_primera,
                                                        recHistoricoNominaSinRegistroCargos.lunes_segunda,
                                                        recHistoricoNominaSinRegistroCargos.lunes_retroactivo,
                                                        recHistoricoNominaSinRegistroCargos.hay_retroactivo);
					end if;
				else

					-- ********** NOMINAS ESPECIALES **********

					perform add_historiconomina(idHistoricoNomina,
						recHistoricoNominaSinRegistroCargos.id_trabajador,
						pNumeroNomina, pAnio, pMes, pSemanaQuincena, pFecha,
						recHistoricoNominaSinRegistroCargos.id_dependencia,
						recHistoricoNominaSinRegistroCargos.id_cargo,
						recHistoricoNominaSinRegistroCargos.numero_registro,
						recHistoricoNominaSinRegistroCargos.codigo_nomina,
						recHistoricoNominaSinRegistroCargos.forma_pago,
						recHistoricoNominaSinRegistroCargos.id_banco,
						recHistoricoNominaSinRegistroCargos.tipo_cta_nomina,
						recHistoricoNominaSinRegistroCargos.cuenta_nomina,
						recHistoricoNominaSinRegistroCargos.estatus,
						recHistoricoNominaSinRegistroCargos.situacion,
						recHistoricoNominaSinRegistroCargos.id_tipo_personal,
						pIdGrupoNomina, pIdNominaEspecial,
						recHistoricoNominaSinRegistroCargos.id_lugar_pago,
						recHistoricoNominaSinRegistroCargos.id_unidad_ejecutora,
						recHistoricoNominaSinRegistroCargos.id_unidad_administradora,
						recHistoricoNominaSinRegistroCargos.cod_dependencia,
						recHistoricoNominaSinRegistroCargos.cod_cargo, 
						recHistoricoNominaSinRegistroCargos.cod_unidad_ejecutora,
						recHistoricoNominaSinRegistroCargos.cod_unidad_administ,
						recHistoricoNominaSinRegistroCargos.id_sede,
						recHistoricoNominaSinRegistroCargos.id_region,
						recHistoricoNominaSinRegistroCargos.cod_sede,
						recHistoricoNominaSinRegistroCargos.cod_region,
						recHistoricoNominaSinRegistroCargos.codigo_patronal);

                                          perform update_historiconomina(idHistoricoNomina,
                                                  recHistoricoNominaSinRegistroCargos.lunes_primera,
                                                  recHistoricoNominaSinRegistroCargos.lunes_segunda,
                                                  recHistoricoNominaSinRegistroCargos.lunes_retroactivo,
                                                  recHistoricoNominaSinRegistroCargos.hay_retroactivo);

				end if;

			end loop;

			close curHistoricoNominaSinRegistroCargos;
	
                        perform actualizar_aporte_patronal(pIdGrupoNomina,pnumeronomina,pidorganismo);
			

	                                if pPeriodicidad = 'S' then
                                                           if pOrdinaria = true then
				 open curHistoricoDetalle(pIdGrupoNomina, pAnio, pMes, pSemanaAnio, pNumeroNomina);
                                                          else
				open curHistoricoDetalle(pIdGrupoNomina, pAnio, pMes, pSemanaQuincena, pNumeroNomina);
                                                          end if;

			else

				open curHistoricoDetalle(pIdGrupoNomina, pAnio, pMes, pSemanaQuincena, pNumeroNomina);

			end if;


			loop
				fetch curHistoricoDetalle into recHistoricoDetalle;			
				exit when not found;
						
				idHistoricoDetalle := idHistoricoDetalle+1;	

				-- ********** NOMINAS ORDINARIAS **********		

				if pOrdinaria = true then				
					if pPeriodicidad = 'S' then						
						perform add_historicosemana(idHistoricoDetalle,			
							recHistoricoDetalle.id_trabajador,
							recHistoricoDetalle.id_concepto_tipo_personal,
							recHistoricoDetalle.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaAnio,
							pFecha,
							recHistoricoDetalle.unidades,
							convert_2_decimal(recHistoricoDetalle.monto_asigna),
							convert_2_decimal(recHistoricoDetalle.monto_deduce),
							recHistoricoDetalle.origen,
							recHistoricoDetalle.documento_soporte,
							recHistoricoDetalle.id_tipo_personal,
							pIdGrupoNomina,
							null,
							recHistoricoDetalle.id_historico_nomina,
							recHistoricoDetalle.id_concepto,
							convert_2_decimal(recHistoricoDetalle.monto_aporte),
							recHistoricoDetalle.id_concepto_aporte);

					else
						perform add_historicoquincena(idHistoricoDetalle,			
							recHistoricoDetalle.id_trabajador,
							recHistoricoDetalle.id_concepto_tipo_personal,
							recHistoricoDetalle.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaQuincena,
							pFecha,
							recHistoricoDetalle.unidades,
							convert_2_decimal(recHistoricoDetalle.monto_asigna),
							convert_2_decimal(recHistoricoDetalle.monto_deduce),
							recHistoricoDetalle.origen,
							recHistoricoDetalle.documento_soporte,
							recHistoricoDetalle.id_tipo_personal,
							pIdGrupoNomina,
							null,
							recHistoricoDetalle.id_historico_nomina,
							recHistoricoDetalle.id_concepto,
							convert_2_decimal(recHistoricoDetalle.monto_aporte),
							recHistoricoDetalle.id_concepto_aporte);
					end if;

				else

				-- ********** NOMINAS ESPECIALES **********	

					if pPeriodicidad = 'S' then						

						perform add_historicosemana(idHistoricoDetalle,			
							recHistoricoDetalle.id_trabajador,
							recHistoricoDetalle.id_concepto_tipo_personal,
							recHistoricoDetalle.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaQuincena,
							pFecha,
							recHistoricoDetalle.unidades,
							convert_2_decimal(recHistoricoDetalle.monto_asigna),
							convert_2_decimal(recHistoricoDetalle.monto_deduce),
							recHistoricoDetalle.origen,
							recHistoricoDetalle.documento_soporte,
							recHistoricoDetalle.id_tipo_personal,
							pIdGrupoNomina,
							pIdNominaEspecial,
							recHistoricoDetalle.id_historico_nomina,
							recHistoricoDetalle.id_concepto,
							convert_2_decimal(recHistoricoDetalle.monto_aporte),
							recHistoricoDetalle.id_concepto_aporte);

					else

						perform add_historicoquincena(idHistoricoDetalle,			
							recHistoricoDetalle.id_trabajador,
							recHistoricoDetalle.id_concepto_tipo_personal,
							recHistoricoDetalle.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaQuincena,
							pFecha,
							recHistoricoDetalle.unidades,
							convert_2_decimal(recHistoricoDetalle.monto_asigna),
							convert_2_decimal(recHistoricoDetalle.monto_deduce),
							recHistoricoDetalle.origen,
							recHistoricoDetalle.documento_soporte,
							recHistoricoDetalle.id_tipo_personal,
							pIdGrupoNomina,
							pIdNominaEspecial,
							recHistoricoDetalle.id_historico_nomina,
							recHistoricoDetalle.id_concepto,
							convert_2_decimal(recHistoricoDetalle.monto_aporte),
							recHistoricoDetalle.id_concepto_aporte);

					end if;

				end if;

			end loop;
			close curHistoricoDetalle;
			raise notice 'termino de grabar los historicos ';


			if pPeriodicidad <> 'S' then
				open curMontoNetoQuincenal(pIdGrupoNomina, pNumeroNomina, pAnio, pMes, pSemanaQuincena);
				loop
					fetch curMontoNetoQuincenal into recMontoNetoQuincenal;
					exit when not found;					
					idHistoricoDetalle := idHistoricoDetalle+1;
					if pOrdinaria = true then												
						perform add_historicoquincena(idHistoricoDetalle,			
							recMontoNetoQuincenal.id_trabajador,
							recMontoNetoQuincenal.id_concepto_tipo_personal,
							recMontoNetoQuincenal.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaQuincena,
							pFecha,
							0,
							convert_2_decimal(recMontoNetoQuincenal.neto),
							0,
							'C',
							null,
							recMontoNetoQuincenal.id_tipo_personal,
							pIdGrupoNomina,
							null,
							recMontoNetoQuincenal.id_historico_nomina,
							0,
							0,
							null);
	
					else
						perform add_historicoquincena(idHistoricoDetalle,			
							recMontoNetoQuincenal.id_trabajador,
							recMontoNetoQuincenal.id_concepto_tipo_personal,
							recMontoNetoQuincenal.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaQuincena,
							pFecha,
							0,
							convert_2_decimal(recMontoNetoQuincenal.neto),
							0,
							'C',
							null,
							recMontoNetoQuincenal.id_tipo_personal,
							pIdGrupoNomina,
							pIdNominaEspecial,
							recMontoNetoQuincenal.id_historico_nomina,
							0,
							0,
							null);
					end if;					
				end loop;
				close curMontoNetoQuincenal;
			else
				open curMontoNetoSemanal(pIdGrupoNomina, pNumeroNomina, pAnio, pMes, pSemanaQuincena);
				loop
					fetch curMontoNetoSemanal into recMontoNetoSemanal;
					exit when not found;					
					idHistoricoDetalle := idHistoricoDetalle+1;
					if pOrdinaria = true then												
						perform add_historicosemana(idHistoricoDetalle,			
							recMontoNetoSemanal.id_trabajador,
							recMontoNetoSemanal.id_concepto_tipo_personal,
							recMontoNetoSemanal.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaAnio,
							pFecha,
							0,
							convert_2_decimal(recMontoNetoSemanal.neto),
							0,
							'C',
							null,
							recMontoNetoSemanal.id_tipo_personal,
							pIdGrupoNomina,
							null,
							recMontoNetoSemanal.id_historico_nomina,
							0,
							0,
							null);
	
					else
						perform add_historicosemana(idHistoricoDetalle,			
							recMontoNetoSemanal.id_trabajador,
							recMontoNetoSemanal.id_concepto_tipo_personal,
							recMontoNetoSemanal.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaAnio,
							pFecha,
							0,
							convert_2_decimal(recMontoNetoSemanal.neto),
							0,
							'C',
							null,
							recMontoNetoSemanal.id_tipo_personal,
							pIdGrupoNomina,
							pIdNominaEspecial,
							recMontoNetoSemanal.id_historico_nomina,
							0,
							0,
							null);
					end if;					
				end loop;
				close curMontoNetoSemanal;		
			end if;
			raise notice 'termino de grabar los NETOS ';

			---- ************* NOMINAS ORDINARIAS (ACTUALIZAR PRESTAMOS) ***************

			if pOrdinaria = true then
				open curPrestamo(pIdGrupoNomina);
				loop
					fetch curPrestamo into recPrestamo;			
					exit when not found;

					estatus := 'A';	

					montoPagado := recPrestamo.monto_pagado + recPrestamo.monto_cuota;
					cuotas := recPrestamo.cuotas_pagadas + 1;

					montoCuota := recPrestamo.monto_cuota; 

					if recPrestamo.monto_prestamo = (recPrestamo.monto_pagado+recPrestamo.monto_cuota) then
						estatus := 'P'; 
					end if;

					if (recPrestamo.monto_pagado+(RecPrestamo.monto_cuota*2)) > recPrestamo.monto_prestamo then
						montoCuota := recPrestamo.monto_prestamo-(recPrestamo.monto_pagado+recPrestamo.monto_cuota); 							
					end if;

					perform update_prestamo(recPrestamo.id_prestamo, montoPagado, cuotas, convert_2_decimal(montoCuota), estatus);				

				end loop;
				raise notice 'ya paso por actualizar prestamos ';
			end if;

			if pOrdinaria = true then

				-- ******** NOMINAS ORDINARIAS ***********
				if pPeriodicidad = 'M' OR pPeriodicidad = 'S' OR pPrimeraQuincena = false then
					perform delete_conceptovariable1(pIdGrupoNomina, pNumeroNomina);
				else
					perform delete_conceptovariable2(pIdGrupoNomina);
				end if;

				raise notice 'ya borro los conceptos variables ';

				if pPeriodicidad = 'Q' AND pPrimeraQuincena = true then
					perform delete_conceptovariable3(pIdGrupoNomina);
				end if;

				perform restituir_conceptofijo(pIdGrupoNomina);

				perform borrar_conceptofijo(pIdGrupoNomina, pFechaInicio, pFechaFin);

				perform actualizar_cotiza_lph_femenino(
					pIdGrupoNomina, pFechaTopeLphFemeninoInicio, pFechaTopeLphFemeninoFin);

				perform actualizar_cotiza_lph_masculino(
					pIdGrupoNomina, pFechaTopeLphMasculinoInicio, pFechaTopeLphMasculinoFin);
						
				perform actualizar_monto_variable(pIdGrupoNomina);

				perform actualizar_trabajador_temporal(pIdGrupoNomina);

				raise notice 'actualizo cotiza, restituir, lunes y monto_variable ';

				id:= last_id_seguridadordinaria()+1;
				if pPeriodicidad <> 'S' then
					perform add_seguridadordinaria(id, pAnio, pMes, 
						pFechaInicio, pFechaFin, pSemanaQuincena, pFecha, pUsuario, pIdGruponomina);
				else
					perform add_seguridadordinaria(id, pAnio, pMes, 
						pFechaInicio, pFechaFin, pSemanaAnio, pFecha, pUsuario, pIdGruponomina);
				end if;
				
				raise notice 'actualizo la seguridad ordinaria';

			else

				--- ************ NOMINAS ESPECIALES

				perform delete_conceptovariable1(pIdGrupoNomina, pNumeroNomina);

				raise notice 'ya borro los conceptos variables ';

				id:= last_id_seguridadespecial()+1;
				if id is null then 
					id := 1;
				end if;
				perform add_seguridadespecial(id, pAnio, pMes, 
					pFechaInicio, pFechaFin, pSemanaQuincena, pFecha, pUsuario, pIdGruponomina, pIdNominaEspecial);
		
				raise notice 'actualizo la seguridad especial';

				perform update_nominaespecial(pIdNominaEspecial, pFecha, 'P', pMes, pAnio); 									

				raise notice 'actualizo estatus y fecha de nominaespecial';

			end if;


		end if;
	
		-- se llena la tabla de historicos de base de cálculos del ISLR
	if pPrenomina = false then
				if pPeriodicidad <> 'S' then
					perform add_historicobaseislr(pIdGrupoNomina,pNumeroNomina,pAnio,pMes,pSemanaQuincena);
				else
					perform add_historicobaseislr(pIdGrupoNomina,pNumeroNomina,pAnio,pMes,pSemanaAnio);

				end if;
		raise notice 'se lleno historicobaseislr';
	end if;

	raise notice 'termino ';
	delete from identity;

	return 2;

end;

$_$;


ALTER FUNCTION public.generar_nomina(boolean, boolean, integer, character varying, character varying, date, date, integer, integer, integer, boolean, integer, character varying, integer, integer, boolean, integer, integer, date, integer, integer, date, date, date, date, integer, integer, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 741 (class 1255 OID 183729)
-- Name: generar_partidauelespecifica(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_partidauelespecifica(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare 

	pIdFuenteFinanciamiento alias for $1;
	pAnio alias for $2;
	
	recUelEspecifica record;
	curUelEspecifica cursor (pAnio int4) 
		for select distinct id_uel_especifica
		from uelespecifica 
		where anio = pAnio;

	recCuentaPresupuesto record;
	curCuentaPresupuesto cursor 
		for select distinct id_cuenta_presupuesto		
		from cuentapresupuesto;	

	id int4 := 0;
begin

	delete from partidauelespecifica;

	open curUelEspecifica (pAnio);
	loop
		fetch curUelEspecifica into recUelEspecifica;			
		exit when not found;

		open curCuentaPresupuesto;
		loop
			fetch curCuentaPresupuesto into recCuentaPresupuesto;			
			exit when not found;					
			id := id+1;
			insert into partidauelespecifica 
				(id_partida_uel_especifica, id_uel_especifica,
				id_cuenta_presupuesto, id_fuente_financiamiento, anio)
				values(id, recUelEspecifica.id_uel_especifica,
				recCuentaPresupuesto.id_cuenta_presupuesto, 
				pIdFuenteFinanciamiento, pAnio);
		end loop;
		close curCuentaPresupuesto;
	end loop;
	close curUelEspecifica;
			
	return 0;
end;
$_$;


ALTER FUNCTION public.generar_partidauelespecifica(integer, integer) OWNER TO postgres;

--
-- TOC entry 742 (class 1255 OID 183730)
-- Name: generar_planillaarc(integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_planillaarc(integer, character varying, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare 
	pIdTipoPersonal alias for $1;
	pPeriodicidad alias for $2;	
	pAnio alias for $3;
	
	recDevengadoSemana record;
	curDevengadoSemana cursor (pAnio int4, pMes int4, pIdTipoPersonal int4) 
		for select distinct t.id_trabajador, (sum (hq.monto_asigna) - sum(hq.monto_deduce)) as devengado
		from historicoSemana hq, trabajador t, conceptotipopersonal ctp, concepto c	
		where hq.anio = pAnio and hq.mes = pMes
		and hq.id_trabajador = t.id_trabajador
		and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal		
		and ctp.id_concepto = c.id_concepto
		and t.id_tipo_personal = pIdTipoPersonal
		and (t.estatus = 'A' or t.estatus = 'E')
		and c.gravable = 'S'
		group by t.id_trabajador;

	recDeduccionSemana record;
	curDeduccionSemana cursor (pAnio int4, pMes int4, pIdTipoPersonal int4) 
		for select distinct t.id_trabajador, sum(hq.monto_deduce) as deduccion, max(hq.unidades) as porcentaje
		from historicoSemana hq, trabajador t,  conceptotipopersonal ctp, concepto c	
		where hq.anio = pAnio and hq.mes = pMes
		and hq.id_trabajador = t.id_trabajador
		and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal		
		and ctp.id_concepto = c.id_concepto
		and t.id_tipo_personal = pIdTipoPersonal
		and (t.estatus = 'A' or t.estatus = 'E')
		and c.cod_concepto = '9999'
		group by t.id_trabajador;

        recDevengadoQuincena record;
	curDevengadoQuincena cursor (pAnio int4, pMes int4, pIdTipoPersonal int4) 
		for select distinct t.id_trabajador, (sum (hq.monto_asigna) - sum(hq.monto_deduce)) as devengado
		from historicoquincena hq, trabajador t, conceptotipopersonal ctp, concepto c	
		where hq.anio = pAnio and hq.mes = pMes
		and hq.id_trabajador = t.id_trabajador
		and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal		
		and ctp.id_concepto = c.id_concepto
		and t.id_tipo_personal = pIdTipoPersonal
		and (t.estatus = 'A' or t.estatus = 'E')
		and c.gravable = 'S'
		group by t.id_trabajador;

	recDeduccionQuincena record;
	curDeduccionQuincena cursor (pAnio int4, pMes int4, pIdTipoPersonal int4) 
		for select distinct t.id_trabajador, sum(hq.monto_deduce) as deduccion, max(hq.unidades) as porcentaje
		from historicoquincena hq, trabajador t,  conceptotipopersonal ctp, concepto c	
		where hq.anio = pAnio and hq.mes = pMes
		and hq.id_trabajador = t.id_trabajador
		and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal		
		and ctp.id_concepto = c.id_concepto
		and t.id_tipo_personal = pIdTipoPersonal
		and (t.estatus = 'A' or t.estatus = 'E')
		and c.cod_concepto = '9999'
		group by t.id_trabajador;


	
	recTrabajador record;
	curTrabajador cursor (pIdTrabajador int4, pAnio int4)
		for select count(*) as cantidad
		from planillaarc 
		where id_trabajador = pIdTrabajador and anio = pAnio;

	i int4 := 0;
	id int4 := 0;
begin
	perform delete_all_planillaarc(pIdTipoPersonal, pAnio);
        id := last_id_planillaarc()+1;
        if id is null then 
	   id := 1;
	end if;
	if pPeriodicidad <> 'S' then
		for i in 1..12 loop
			open curDevengadoQuincena(pAnio,i,pIdTipoPersonal);				
				loop
					fetch curDevengadoQuincena into recDevengadoQuincena;			
					exit when not found;					 
										
					open curTrabajador(recDevengadoQuincena.id_trabajador, pAnio);
					fetch curTrabajador into recTrabajador;			
					if recTrabajador.cantidad = 0 then
						
						id := id +1;
						
						perform add_planillaarc(id, recDevengadoQuincena.id_trabajador, pAnio);
					end if;
					close curTrabajador;
					if i = 1 then						
						update planillaarc 
							set devengado_enero = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 2 then						
						update planillaarc 
							set devengado_febrero = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 3 then						
						update planillaarc 
							set devengado_marzo = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 4 then						
						update planillaarc 
							set devengado_abril = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;	
					elsif i = 5 then						
						update planillaarc 
							set devengado_mayo = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 6 then						
						update planillaarc 
							set devengado_junio = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 7 then						
						update planillaarc 
							set devengado_julio = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;					
					elsif i = 8 then						
						update planillaarc 
							set devengado_agosto = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 9 then						
						update planillaarc 
							set devengado_septiembre = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 10 then						
						update planillaarc 
							set devengado_octubre = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 11 then						
						update planillaarc 
							set devengado_noviembre = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;					
					elsif i = 12 then						
						update planillaarc 
							set devengado_diciembre = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					end if;
				end loop;
			close curDevengadoQuincena;

			open curDeduccionQuincena(pAnio,i,pIdTipoPersonal);				
				loop
					fetch curDeduccionQuincena into recDeduccionQuincena;			
					exit when not found;					 
										
					open curTrabajador(recDeduccionQuincena.id_trabajador, pAnio);
					fetch curTrabajador into recTrabajador;			
					if recTrabajador.cantidad = 0 then
						--raise notice 'i=%', i;
						id := last_id_planillaarc()+1;
						if id is null then 
							id := 1;
						end if;
						perform add_planillaarc(id, recDeduccionQuincena.id_trabajador, pAnio);
					end if;
					close curTrabajador;
					if i = 1 then						
						update planillaarc 
							set retencion_enero = recDeduccionQuincena.deduccion, 
							    porcentaje_enero = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 2 then						
						update planillaarc 
							set retencion_febrero = recDeduccionQuincena.deduccion, 
							    porcentaje_febrero = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 3 then						
						update planillaarc 
							set retencion_marzo = recDeduccionQuincena.deduccion, 
							    porcentaje_marzo = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 4 then						
						update planillaarc 
							set retencion_abril = recDeduccionQuincena.deduccion, 
							    porcentaje_abril = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;	
					elsif i = 5 then						
						update planillaarc 
							set retencion_mayo = recDeduccionQuincena.deduccion, 
							    porcentaje_mayo = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 6 then						
						update planillaarc 
							set retencion_junio = recDeduccionQuincena.deduccion, 
							    porcentaje_junio = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 7 then						
						update planillaarc 
							set retencion_julio = recDeduccionQuincena.deduccion, 
							    porcentaje_julio = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;					
					elsif i = 8 then						
						update planillaarc 
							set retencion_agosto = recDeduccionQuincena.deduccion, 
							    porcentaje_agosto = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 9 then						
						update planillaarc 
							set retencion_septiembre = recDeduccionQuincena.deduccion, 
							    porcentaje_septiembre = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 10 then						
						update planillaarc 
							set retencion_octubre = recDeduccionQuincena.deduccion, 
							    porcentaje_octubre = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 11 then						
						update planillaarc 
							set retencion_noviembre = recDeduccionQuincena.deduccion,
							    porcentaje_noviembre = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;					
					elsif i = 12 then						
						update planillaarc 
							set retencion_diciembre = recDeduccionQuincena.deduccion, 
							    porcentaje_diciembre = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					end if;
				end loop;
			close curDeduccionQuincena;
			
		end loop;

	end if;


if pPeriodicidad = 'S' then
		for i in 1..12 loop
			open curDevengadosemana(pAnio,i,pIdTipoPersonal);				
				loop
					fetch curDevengadosemana into recDevengadosemana;			
					exit when not found;					 
										
					open curTrabajador(recDevengadosemana.id_trabajador, pAnio);
					fetch curTrabajador into recTrabajador;			
					if recTrabajador.cantidad = 0 then
						
						id := id +1;
						
						perform add_planillaarc(id, recDevengadosemana.id_trabajador, pAnio);
					end if;
					close curTrabajador;
					if i = 1 then						
						update planillaarc 
							set devengado_enero = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					elsif i = 2 then						
						update planillaarc 
							set devengado_febrero = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					elsif i = 3 then						
						update planillaarc 
							set devengado_marzo = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					elsif i = 4 then						
						update planillaarc 
							set devengado_abril = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;	
					elsif i = 5 then						
						update planillaarc 
							set devengado_mayo = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					elsif i = 6 then						
						update planillaarc 
							set devengado_junio = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					elsif i = 7 then						
						update planillaarc 
							set devengado_julio = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;					
					elsif i = 8 then						
						update planillaarc 
							set devengado_agosto = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					elsif i = 9 then						
						update planillaarc 
							set devengado_septiembre = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					elsif i = 10 then						
						update planillaarc 
							set devengado_octubre = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					elsif i = 11 then						
						update planillaarc 
							set devengado_noviembre = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;					
					elsif i = 12 then						
						update planillaarc 
							set devengado_diciembre = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					end if;
				end loop;
			close curDevengadosemana;

			open curDeduccionsemana(pAnio,i,pIdTipoPersonal);				
				loop
					fetch curDeduccionsemana into recDeduccionsemana;			
					exit when not found;					 
										
					open curTrabajador(recDeduccionsemana.id_trabajador, pAnio);
					fetch curTrabajador into recTrabajador;			
					if recTrabajador.cantidad = 0 then
						--raise notice 'i=%', i;
						id := last_id_planillaarc()+1;
						if id is null then 
							id := 1;
						end if;
						perform add_planillaarc(id, recDeduccionsemana.id_trabajador, pAnio);
					end if;
					close curTrabajador;
					if i = 1 then						
						update planillaarc 
							set retencion_enero = recDeduccionsemana.deduccion, 
							    porcentaje_enero = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					elsif i = 2 then						
						update planillaarc 
							set retencion_febrero = recDeduccionsemana.deduccion, 
							    porcentaje_febrero = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					elsif i = 3 then						
						update planillaarc 
							set retencion_marzo = recDeduccionsemana.deduccion, 
							    porcentaje_marzo = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					elsif i = 4 then						
						update planillaarc 
							set retencion_abril = recDeduccionsemana.deduccion, 
							    porcentaje_abril = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;	
					elsif i = 5 then						
						update planillaarc 
							set retencion_mayo = recDeduccionsemana.deduccion, 
							    porcentaje_mayo = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					elsif i = 6 then						
						update planillaarc 
							set retencion_junio = recDeduccionsemana.deduccion, 
							    porcentaje_junio = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					elsif i = 7 then						
						update planillaarc 
							set retencion_julio = recDeduccionsemana.deduccion, 
							    porcentaje_julio = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;					
					elsif i = 8 then						
						update planillaarc 
							set retencion_agosto = recDeduccionsemana.deduccion, 
							    porcentaje_agosto = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					elsif i = 9 then						
						update planillaarc 
							set retencion_septiembre = recDeduccionsemana.deduccion, 
							    porcentaje_septiembre = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					elsif i = 10 then						
						update planillaarc 
							set retencion_octubre = recDeduccionsemana.deduccion, 
							    porcentaje_octubre = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					elsif i = 11 then						
						update planillaarc 
							set retencion_noviembre = recDeduccionsemana.deduccion,
							    porcentaje_noviembre = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;					
					elsif i = 12 then						
						update planillaarc 
							set retencion_diciembre = recDeduccionsemana.deduccion, 
							    porcentaje_diciembre = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					end if;
				end loop;
			close curDeduccionsemana;
			
		end loop;

	end if;









	return i;

end;
$_$;


ALTER FUNCTION public.generar_planillaarc(integer, character varying, integer) OWNER TO postgres;

--
-- TOC entry 743 (class 1255 OID 183732)
-- Name: generar_poliza_beneficiario(integer, integer, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_poliza_beneficiario(integer, integer, date) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdTipoPersonal alias for $1;
	pIdPlanPoliza alias for $2;
	pFechaInclusion alias for $3;
	
	recTrabajadores record;
	curTrabajadores cursor (piTipoPersonal int4) 
		for select distinct p.id_personal as id_personal, t.id_cargo
		from personal p, trabajador t
		where p.id_personal = t.id_personal
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A';

	recFamiliares record;
	curFamiliares cursor (pIdPersonal int4, pParentesco varchar, pFechaDesde date, pFechaHasta date, pIdPlanPoliza int4) 
		for select distinct f.id_familiar as id_familiar, f.sexo as sexo
		from familiar f
		where f.id_personal = pIdPersonal		
		and f.fecha_nacimiento between pFechaDesde and pFechaHasta
		and f.parentesco = pParentesco
		and id_familiar not in 
		(select id_familiar from beneficiario
		where id_plan_poliza = pIdPlanPoliza)
		and id_familiar not in 
			(select id_familiar from excepcionbeneficiario 
			where id_plan_poliza = pIdPlanPoliza);

	recPrimasPlan record;
	curPrimasPlan cursor (pIdPlanPoliza int4)
		for select  pr.id_primas_plan, pr.id_plan_poliza, 
		pr.cobertura_parentesco, pr.porcentaje_trabajador, 
		pr.porcentaje_trabajador, pr.porcentaje_patron, 
		pr.prima_femenino, pr.prima_masculino,
		pr.edad_minima, pr.edad_maxima, pr.parentesco
		from primasplan pr
		where pr.id_plan_poliza = pIdPlanPoliza and pr.parentesco <> 'T';

	recPrimasCargo record;
	curPrimasCargo cursor (pIdPrimasPlan int4, pIdCargo int4 )
		for select  pr.porcentaje_patron, pr.porcentaje_trabajador		
		from primascargo pr
		where pr.id_primas_plan = pIdPrimasPlan and pr.id_cargo = pIdCargo;
	
	id int4 := 0;
	montoPrima float8 := 0;
	montoPatron float8 := 0;
	montoTrabajador float8 := 0;
	fechaDesde date;
	fechaHasta date;
	porcentajePatron float8 = 0;
	porcentajeTrabajador float8 = 0;
begin
	
	id := last_id_beneficiario();	
	
	open curTrabajadores(pIdTipoPersonal);
	loop
		fetch curTrabajadores into recTrabajadores;			
		exit when not found;
		open curPrimasPlan(pIdPlanPoliza);			
		loop
			fetch curPrimasPlan into recPrimasPlan;			
			exit when not found;
			porcentajePatron = recPrimasPlan.porcentaje_patron;
			porcentajeTrabajador = recPrimasPlan.porcentaje_trabajador;

			open curPrimasCargo(recPrimasPlan.id_primas_plan, recTrabajadores.id_cargo);
			fetch curPrimasCargo into recPrimasCargo;			
			if recPrimasCargo.porcentaje_patron is not null then
				porcentajePatron = recPrimasCargo.porcentaje_patron;
				porcentajeTrabajador = recPrimasCargo.porcentaje_trabajador;
			end if;
			close curPrimasCargo;
			fechaDesde = add_years(pFechaInclusion, -recPrimasPlan.edad_maxima);
			fechaHasta = add_years(pFechaInclusion, -recPrimasPlan.edad_minima);

			open curFamiliares(recTrabajadores.id_personal, recPrimasPlan.parentesco, fechaDesde, fechaHasta, pIdPlanPoliza);
			loop
				fetch curFamiliares into recFamiliares;			
				exit when not found;
				id := id + 1;
		
				if recFamiliares.sexo = 'F'	then
					montoPrima := recPrimasPlan.prima_femenino;
				else
					montoPrima := recPrimasPlan.prima_masculino;
				end if;
		
				montoPatron := (montoPrima * porcentajePatron) / 100;
				montoTrabajador := (montoPrima * porcentajeTrabajador) / 100;
		
				insert into beneficiario(id_beneficiario, id_personal, id_familiar, id_tipo_personal, 
					id_plan_poliza, id_primas_plan, monto_prima, monto_patron,
					monto_trabajador, cobertura, cobertura_extra, prima_extra,
					fecha_inclusion, fecha_exclusion, estatus) values(id,
					recTrabajadores.id_personal, recFamiliares.id_familiar, pIdTipoPersonal,
					recPrimasPlan.id_plan_poliza, recPrimasPlan.id_primas_plan,
					convert_2_decimal(montoPrima), convert_2_decimal(montoPatron), 
					convert_2_decimal(montoTrabajador), recPrimasPlan.cobertura_parentesco,
					0, 0, pFechaInclusion, null, 'A');
			end loop;
			close curFamiliares;
		end loop;
		close curPrimasPlan;
	end loop;
	close curTrabajadores;
	
	
	delete from identity;

	return 0;

end;

$_$;


ALTER FUNCTION public.generar_poliza_beneficiario(integer, integer, date) OWNER TO postgres;

--
-- TOC entry 747 (class 1255 OID 183733)
-- Name: generar_poliza_titular(integer, integer, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_poliza_titular(integer, integer, date) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdTipoPersonal alias for $1;
	pIdPlanPoliza alias for $2;
	pFechaInclusion alias for $3;
	
	recTrabajadores record;
	curTrabajadores cursor (piTipoPersonal int4, pFechaDesde date, pFechaHasta date, pIdPlanPoliza int4) 
		for select distinct p.id_personal as id_personal, max(p.sexo) as sexo, max(t.id_cargo) as id_cargo
		from personal p, trabajador t
		where p.id_personal = t.id_personal
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A'
		and p.fecha_nacimiento between pFechaDesde and pFechaHasta
		and p.id_personal not in 
		(select id_personal from titular
		where id_plan_poliza = pIdPlanPoliza)
		and p.id_personal not in 
			(select id_personal from excepciontitular 
			where id_plan_poliza = pIdPlanPoliza)
		group by p.id_personal;

	recPrimasPlan record;
	curPrimasPlan cursor (pIdPlanPoliza int4)
		for select  pr.id_primas_plan, pr.id_plan_poliza, 
		pr.cobertura_parentesco, pr.porcentaje_trabajador, 
		pr.porcentaje_trabajador, pr.porcentaje_patron, 
		pr.prima_femenino, pr.prima_masculino,
		pr.edad_minima, pr.edad_maxima
		from primasplan pr
		where pr.id_plan_poliza = pIdPlanPoliza and pr.parentesco = 'T';
	
	recPrimasCargo record;
	curPrimasCargo cursor (pIdPrimasPlan int4, pIdCargo int4 )
		for select  pr.porcentaje_patron, pr.porcentaje_trabajador		
		from primascargo pr
		where pr.id_primas_plan = pIdPrimasPlan and pr.id_cargo = pIdCargo;
	
	id int4 := 0;
	montoPrima float8 := 0;
	montoPatron float8 := 0;
	montoTrabajador float8 := 0;
	fechaDesde date;
	fechaHasta date;
	porcentajePatron float8 = 0;
	porcentajeTrabajador float8 = 0;

begin	
	id := last_id_titular();	
	open curPrimasPlan(pIdPlanPoliza);	
	fetch curPrimasPlan into recPrimasPlan;			
	if recPrimasPlan.id_primas_plan is null then
		return 10;
	end if;

	fechaDesde = add_years(pFechaInclusion, -recPrimasPlan.edad_maxima);
	fechaHasta = add_years(pFechaInclusion, -recPrimasPlan.edad_minima);

	open curTrabajadores(pIdTipoPersonal, fechaDesde, fechaHasta, pIdPlanPoliza);
	loop
		fetch curTrabajadores into recTrabajadores;			
		exit when not found;
		porcentajePatron = recPrimasPlan.porcentaje_patron;
		porcentajeTrabajador = recPrimasPlan.porcentaje_trabajador;

		open curPrimasCargo(recPrimasPlan.id_primas_plan, recTrabajadores.id_cargo);
		fetch curPrimasCargo into recPrimasCargo;			
		if recPrimasCargo.porcentaje_patron is not null then
			porcentajePatron = recPrimasCargo.porcentaje_patron;
			porcentajeTrabajador = recPrimasCargo.porcentaje_trabajador;
		end if;
		close curPrimasCargo;

		id := id + 1;

		if recTrabajadores.sexo = 'F'	then
			montoPrima := recPrimasPlan.prima_femenino;
		else
			montoPrima := recPrimasPlan.prima_masculino;
		end if;

		montoPatron := (montoPrima * porcentajePatron) / 100;
		montoTrabajador := (montoPrima * porcentajeTrabajador) / 100;

		insert into titular(id_titular, id_personal, id_tipo_personal, 
			id_plan_poliza, id_primas_plan, monto_prima, monto_patron,
			monto_trabajador, cobertura, cobertura_extra, prima_extra,
			fecha_inclusion, fecha_exclusion, estatus) values(id,
			recTrabajadores.id_personal, pIdTipoPersonal,
			recPrimasPlan.id_plan_poliza, recPrimasPlan.id_primas_plan,
			convert_2_decimal(montoPrima), convert_2_decimal(montoPatron), 
			convert_2_decimal(montoTrabajador), recPrimasPlan.cobertura_parentesco,
			0, 0, pFechaInclusion, null, 'A');
		
	end loop;
	close curTrabajadores;
		
	delete from identity;

	return 0;

end;

$_$;


ALTER FUNCTION public.generar_poliza_titular(integer, integer, date) OWNER TO postgres;

--
-- TOC entry 748 (class 1255 OID 183734)
-- Name: generar_prestamos_desde_poliza(integer, integer, character varying, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_prestamos_desde_poliza(integer, integer, character varying, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdTipoPersonal alias for $1;
	pIdPlanPoliza alias for $2;	
	pTipo alias for $3;
	pIdConceptoTipoPersonal alias for $4;
        pIdFrecuenciaTipoPersonal alias for $5;
	pNumeroCuotas alias for $6;
	
	recRegistro record;

	curTitular cursor (pIdPlanPoliza int4, pIdTipoPersonal int4)
		for select  sum(ti.monto_trabajador) as monto,
		t.id_trabajador as id_trabajador
		from titular ti, trabajador t, primasplan pr
		where pr.id_plan_poliza = pIdPlanPoliza 
		and ti.id_personal = t.id_personal
		and ti.id_primas_plan = pr.id_primas_plan
		and t.id_tipo_personal = pIdTipoPersonal		
		group by t.id_trabajador;

	curBeneficiario cursor (pIdPlanPoliza int4, pIdTipoPersonal int4)
		for select  sum(be.monto_trabajador) as monto,
		t.id_trabajador as id_trabajador
		from beneficiario be, trabajador t, primasplan pr
		where pr.id_plan_poliza = pIdPlanPoliza 
		and be.id_personal = t.id_personal
		and be.id_primas_plan = pr.id_primas_plan
		and t.id_tipo_personal = pIdTipoPersonal		
		group by t.id_trabajador;	
	
	curBeneficiarioTitular cursor (pIdPlanPoliza int4, pIdTipoPersonal int4)
		for select sum(monto) as monto, id_trabajador from (
		select  sum(be.monto_trabajador) as monto,
		t.id_trabajador as id_trabajador
		from beneficiario be, trabajador t, primasplan pr
		where pr.id_plan_poliza = pIdPlanPoliza 
		and be.id_personal = t.id_personal
		and be.id_primas_plan = pr.id_primas_plan
		and t.id_tipo_personal = pIdTipoPersonal		
		group by t.id_trabajador
		union
		select  sum(ti.monto_trabajador) as monto,
		t.id_trabajador as id_trabajador
		from titular ti, trabajador t, primasplan pr
		where pr.id_plan_poliza = pIdPlanPoliza 
		and ti.id_personal = t.id_personal
		and ti.id_primas_plan = pr.id_primas_plan
		and t.id_tipo_personal = pIdTipoPersonal		
		group by t.id_trabajador) as total group by id_trabajador;

	montoCuota float8;
	id int4;
begin
	id := last_id_prestamo();

	if pTipo = 'T' then
		open curTitular(pIdPlanPoliza, pIdTipoPersonal);			
		loop
			
			fetch curTitular into recRegistro;	
			
			exit when not found;			
			id := id + 1 ;
			montoCuota = convert_2_decimal(recRegistro.monto/pNumeroCuotas);
			insert into prestamo (id_prestamo, id_trabajador, id_concepto_tipo_personal,
				id_frecuencia_tipo_personal, monto_prestamo, monto_cuota, monto_pagado,
				numero_cuotas, cuotas_pagadas, fecha_otorgo, fecha_comienzo_pago,
				fecha_registro, documento_soporte, estatus) values(
				id, recRegistro.id_trabajador, pIdConceptoTipoPersonal, 
				pIdFrecuenciaTipoPersonal, recRegistro.monto, montoCuota, 0, 
				pNumeroCuotas, 0, current_date, current_date, current_date, null, 'A');
		end loop;
	end if;
	if pTipo = 'B' then
		open curBeneficiario(pIdPlanPoliza, pIdTipoPersonal);			
		loop			
			fetch curBeneficiario into recRegistro;	
			
			exit when not found;			
			id := id + 1 ;
			montoCuota = convert_2_decimal(recRegistro.monto/pNumeroCuotas);
			insert into prestamo (id_prestamo, id_trabajador, id_concepto_tipo_personal,
				id_frecuencia_tipo_personal, monto_prestamo, monto_cuota, monto_pagado,
				numero_cuotas, cuotas_pagadas, fecha_otorgo, fecha_comienzo_pago,
				fecha_registro, documento_soporte, estatus) values(
				id, recRegistro.id_trabajador, pIdConceptoTipoPersonal, 
				pIdFrecuenciaTipoPersonal, recRegistro.monto, montoCuota, 0, 
				pNumeroCuotas, 0, current_date, current_date, current_date, null, 'A');
		end loop;
	
	end if;

	if pTipo = 'A' then
		open curBeneficiarioTitular(pIdPlanPoliza, pIdTipoPersonal);			
		loop			
			fetch curBeneficiarioTitular into recRegistro;	
			
			exit when not found;			
			id := id + 1 ;
			montoCuota = convert_2_decimal(recRegistro.monto/pNumeroCuotas);
			insert into prestamo (id_prestamo, id_trabajador, id_concepto_tipo_personal,
				id_frecuencia_tipo_personal, monto_prestamo, monto_cuota, monto_pagado,
				numero_cuotas, cuotas_pagadas, fecha_otorgo, fecha_comienzo_pago,
				fecha_registro, documento_soporte, estatus) values(
				id, recRegistro.id_trabajador, pIdConceptoTipoPersonal, 
				pIdFrecuenciaTipoPersonal, recRegistro.monto, montoCuota, 0, 
				pNumeroCuotas, 0, current_date, current_date, current_date, null, 'A');
		end loop;
	end if;
	return 0;

end;

$_$;


ALTER FUNCTION public.generar_prestamos_desde_poliza(integer, integer, character varying, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 749 (class 1255 OID 183735)
-- Name: generar_rendicionmensual(integer, integer, integer, integer, integer, boolean, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_rendicionmensual(integer, integer, integer, integer, integer, boolean, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdEncabezado alias for $1;
	pIdTipoPersonal alias for $2;
	pNumeroNomina alias for $3;
	pAnio alias for $4;
	pMes alias for $5;
	pTieneSemana5 alias for $6;
	pIdUnidadAdministradora alias for $7;	
	pQuincena alias for $8;	
	
	recConceptos record;
	curConceptos cursor (piTipoPersonal int4, pAnio int4, pMes int4, pNumeroNomina int4, pIdUnidadAdministradora int4, pQuincena int4) 
		for select hq.monto_asigna as monto, ctp.id_concepto_tipo_personal, 
		t.id_trabajador, fp.cod_frecuencia_pago, c.cod_concepto	,	
		cp.id_cuenta_presupuesto, cp.cod_presupuesto, ctp.distribucion		
		from historicoquincena hq, historiconomina hn, frecuenciatipopersonal ftp, frecuenciapago fp, 
		conceptotipopersonal ctp, concepto c, trabajador t, 
		conceptocuenta cc, cuentapresupuesto cp
		where 
		hn.id_unidad_administradora = pIdUnidadAdministradora
		and hq.id_historico_nomina = hn.id_historico_nomina
		and hq.anio = pAnio and hq.mes = pMes
		and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and hq.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago		
		and ctp.id_concepto = c.id_concepto				
		and t.id_trabajador = hq.id_trabajador		
		and ctp.id_concepto_tipo_personal = cc.id_concepto_tipo_personal
		and cc.id_cuenta_presupuesto = cp.id_cuenta_presupuesto		
		and hq.id_tipo_personal = pIdTipoPersonal
		and hq.numero_nomina = pNumeroNomina
		and hq.semana_quincena = pQuincena;
	id int4 := 0;
begin
	-- VERSION 06-02-2006

	delete from rendicionmensual
		where id_unidad_administradora = pIdUnidadAdministradora 
		and id_encabezado_rendicion_mensual = pIdEncabezado
		and id_concepto_tipo_personal in(select id_concepto_tipo_personal 
		from conceptotipopersonal where id_tipo_personal = pIdTipoPersonal);
	
	raise notice 'v1';
	open curConceptos (pIdTipoPersonal, pAnio, pMes, pNumeroNomina, pIdUnidadAdministradora, pQuincena);

	loop
		fetch curConceptos into recConceptos;			
		exit when not found;
		raise notice 'v2';
		--- PRIMERA QUINCENA (1)
		--raise notice 'pasa ';
		
		perform actualizar_rendicionmensual(
			pIdEncabezado,
			pIdUnidadAdministradora,
			recConceptos.id_trabajador,
			recConceptos.id_concepto_tipo_personal,
			recConceptos.id_cuenta_presupuesto,
			recConceptos.cod_concepto,
			recConceptos.cod_presupuesto,	
			recConceptos.monto,
			pQuincena,				
			recConceptos.distribucion, pAnio);
		
		
	end loop;
	close curConceptos;
	
	
	delete from identity;

	return 0;

end;

$_$;


ALTER FUNCTION public.generar_rendicionmensual(integer, integer, integer, integer, integer, boolean, integer, integer) OWNER TO postgres;

--
-- TOC entry 750 (class 1255 OID 183736)
-- Name: generar_rendicionmensual_aportes(integer, integer, integer, integer, integer, boolean, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_rendicionmensual_aportes(integer, integer, integer, integer, integer, boolean, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdEncabezado alias for $1;
	pIdTipoPersonal alias for $2;
	pNumeroNomina alias for $3;
	pAnio alias for $4;
	pMes alias for $5;
	pTieneSemana5 alias for $6;
	pIdUnidadAdministradora alias for $7;
	pIdConceptoAporte alias for $8;
	
	
	recConceptos record;
	curConceptos cursor (piTipoPersonal int4, pAnio int4, pMes int4, pNumeroNomina int4, pIdUnidadAdministradora int4, pIdConceptoAporte int4) 
		for select hq.monto_aporte as monto, ctp.id_concepto_tipo_personal, 
		t.id_trabajador, fp.cod_frecuencia_pago, c.cod_concepto	,	
		cp.id_cuenta_presupuesto, cp.cod_presupuesto, ctp.distribucion		
		from historicoquincena hq, historiconomina hn, frecuenciatipopersonal ftp, frecuenciapago fp, 
		conceptotipopersonal ctp, concepto c, trabajador t, 
		conceptocuenta cc, cuentapresupuesto cp
		where 
		hn.id_unidad_administradora = pIdUnidadAdministradora
		and hq.id_historico_nomina = hn.id_historico_nomina
		and hq.anio = pAnio and hq.mes = pMes
		and hq.id_concepto_aporte = c.id_concepto
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago		
		and ctp.id_concepto = c.id_concepto
		and ctp.id_tipo_personal = pIdTipoPersonal
		and ctp.id_concepto_tipo_personal = pIdConceptoAporte
		and t.id_trabajador = hq.id_trabajador		
		and ctp.id_concepto_tipo_personal = cc.id_concepto_tipo_personal
		and cc.id_cuenta_presupuesto = cp.id_cuenta_presupuesto		
		and hq.id_tipo_personal = pIdTipoPersonal
		and hq.numero_nomina = pNumeroNomina;
	id int4 := 0;
begin
	-- VERSION 06-02-2006 - 1

	delete from rendicionmensual
		where id_unidad_administradora = pIdUnidadAdministradora 
		and id_encabezado_rendicion_mensual = pIdEncabezado
		and id_concepto_tipo_personal in(select id_concepto_tipo_personal 
		from conceptotipopersonal where id_tipo_personal = pIdTipoPersonal);
	
	raise notice 'v1';
	open curConceptos (pIdTipoPersonal, pAnio, pMes, pNumeroNomina, pIdUnidadAdministradora, pIdConceptoAporte);

	loop
		fetch curConceptos into recConceptos;			
		exit when not found;
		
		
		perform actualizar_rendicionmensual(
			pIdEncabezado,
			pIdUnidadAdministradora,
			recConceptos.id_trabajador,
			recConceptos.id_concepto_tipo_personal,
			recConceptos.id_cuenta_presupuesto,
			recConceptos.cod_concepto,
			recConceptos.cod_presupuesto,	
			recConceptos.monto,
			2,				
			recConceptos.distribucion, pAnio);
		
		
	end loop;
	close curConceptos;
	
	
	delete from identity;

	return 0;

end;

$_$;


ALTER FUNCTION public.generar_rendicionmensual_aportes(integer, integer, integer, integer, integer, boolean, integer, integer) OWNER TO postgres;

--
-- TOC entry 751 (class 1255 OID 183737)
-- Name: generar_resumenmensual(integer, integer, integer, integer, integer, boolean, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_resumenmensual(integer, integer, integer, integer, integer, boolean, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare
	pIdEncabezado alias for $1;
	pIdTipoPersonal alias for $2;
	pNumeroNomina alias for $3;
	pAnio alias for $4;
	pMes alias for $5;
	pTieneSemana5 alias for $6;
	pIdUnidadAdministradora alias for $7;


	recConceptos record;
	curConceptos cursor (piTipoPersonal int4, pAnio int4, pMes int4, 
pNumeroNomina int4, pIdUnidadAdministradora int4)
		for select cr.monto, ctp.id_concepto_tipo_personal,
		t.id_trabajador, fp.cod_frecuencia_pago, c.cod_concepto	,
		cp.id_cuenta_presupuesto, cp.cod_presupuesto, ctp.distribucion
		from conceptoresumen cr, frecuenciatipopersonal ftp, frecuenciapago 
fp,
		conceptotipopersonal ctp, concepto c, trabajador t,
		conceptocuenta cc, cuentapresupuesto cp
		where cr.id_unidad_administradora = pIdUnidadAdministradora
		and cr.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and cr.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and t.id_trabajador = cr.id_trabajador
		and cr.id_concepto_tipo_personal = cc.id_concepto_tipo_personal
		and cc.id_cuenta_presupuesto = cp.id_cuenta_presupuesto
		and cr.anio = pAnio and cr.mes = pMes
		and numero_nomina = pNumeroNomina
		and cr.id_unidad_administradora = pIdUnidadAdministradora
		and t.id_trabajador in
		(select id_trabajador from trabajador where id_tipo_personal = 
pIdtipoPersonal);
	id int4 := 0;
begin
	-- VERSION 06-02-2006

	--delete from encabezadoresumenmensual
	--	where id_unidad_administradora = pIdUnidadAdministradora
	--	and anio = pAnio and mes = pMes and numero_nomina = pNumeroNomina;

	delete from resumenmensual
		where id_unidad_administradora = pIdUnidadAdministradora
		and id_encabezado_resumen_mensual = pIdEncabezado
		and id_concepto_tipo_personal in(select id_concepto_tipo_personal
		from conceptotipopersonal where id_tipo_personal = pIdTipoPersonal);
	--id := last_id_resumenmensual()+1;
	--if id is null then
	--	id := 1;
	--end if;

	--insert into encabezadoresumenmensual
	--	(id_encabezado_resumen_mensual,anio,mes,id_unidad_administradora,
	--	numero_nomina,cod_unidad_administ,cerrado,usuario) values(
	--	id, pAnio, pMes,pIdUnidadAdministradora,
	--	pNumeroNomina,pCodUnidadAdminist,'N',pUsuario);

	raise notice 'v100';
	open curConceptos (pIdTipoPersonal, pAnio, pMes, pNumeroNomina, 
pIdUnidadAdministradora);

	loop
		fetch curConceptos into recConceptos;
		exit when not found;

		--- PRIMERA QUINCENA (1)
		raise notice 'inicia ';
		if recConceptos.cod_frecuencia_pago = 1 then
			raise notice 'primera_quincena ';
			perform actualizar_resumenmensual(
				pIdEncabezado,
				pIdUnidadAdministradora,
				recConceptos.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_cuenta_presupuesto,
				recConceptos.cod_concepto,
				recConceptos.cod_presupuesto,
				recConceptos.monto,
				1,
				recConceptos.distribucion, pAnio);
		--- SEGUNDA QUINCENA (2)
		elsif recConceptos.cod_frecuencia_pago = 2 then
			raise notice 'segunda_quincena ';
			perform actualizar_resumenmensual(
				pIdEncabezado,
				pIdUnidadAdministradora,
				recConceptos.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_cuenta_presupuesto,
				recConceptos.cod_concepto,
				recConceptos.cod_presupuesto,
				recConceptos.monto,
				2,
				recConceptos.distribucion, pAnio);
		--- AMBAS QUINCENAS (3)

		elsif recConceptos.cod_frecuencia_pago = 3 then
			raise notice 'ambas_quincenas ';
			perform actualizar_resumenmensual(
				pIdEncabezado,
				pIdUnidadAdministradora,
				recConceptos.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_cuenta_presupuesto,
				recConceptos.cod_concepto,
				recConceptos.cod_presupuesto,
				recConceptos.monto*2,
				3,
				recConceptos.distribucion, pAnio);

		--- SEMANAL (4)
		elsif recConceptos.cod_frecuencia_pago = 4 then
			if pTieneSemana5 = true then
				perform actualizar_resumenmensual(
					pIdEncabezado,
					pIdUnidadAdministradora,
					recConceptos.id_trabajador,
					recConceptos.id_concepto_tipo_personal,
					recConceptos.id_cuenta_presupuesto,
					recConceptos.cod_concepto,
					recConceptos.cod_presupuesto,
					recConceptos.monto*3,
					1,
					recConceptos.distribucion, pAnio);
			else
				perform actualizar_resumenmensual(
					pIdEncabezado,
					pIdUnidadAdministradora,
					recConceptos.id_trabajador,
					recConceptos.id_concepto_tipo_personal,
					recConceptos.id_cuenta_presupuesto,
					recConceptos.cod_concepto,
					recConceptos.cod_presupuesto,
					recConceptos.monto*2,
					1,
					recConceptos.distribucion, pAnio);
			end if;

			perform actualizar_resumenmensual(
				pIdEncabezado,
				pIdUnidadAdministradora,
				recConceptos.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_cuenta_presupuesto,
				recConceptos.cod_concepto,
				recConceptos.cod_presupuesto,
				recConceptos.monto*2,
				2,
				recConceptos.distribucion, pAnio);
		--- PRIMERA Y SEGUNDA SEMANA (5,6)
		elsif recConceptos.cod_frecuencia_pago = 5 or 
recConceptos.cod_frecuencia_pago = 6 then
			perform actualizar_resumenmensual(
				pIdEncabezado,
				pIdUnidadAdministradora,
				recConceptos.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_cuenta_presupuesto,
				recConceptos.cod_concepto,
				recConceptos.cod_presupuesto,
				recConceptos.monto,
				1,
				recConceptos.distribucion, pAnio);
		--- SEMANAL (7)
		elsif recConceptos.cod_frecuencia_pago = 7 then
			if pTieneSemana5 = true then
				perform actualizar_resumenmensual(
					pIdEncabezado,
					pIdUnidadAdministradora,
					recConceptos.id_trabajador,
					recConceptos.id_concepto_tipo_personal,
					recConceptos.id_cuenta_presupuesto,
					recConceptos.cod_concepto,
					recConceptos.cod_presupuesto,
					recConceptos.monto,
					1,
					recConceptos.distribucion, pAnio);
			else
				perform actualizar_resumenmensual(
					pIdEncabezado,
					pIdUnidadAdministradora,
					recConceptos.id_trabajador,
					recConceptos.id_concepto_tipo_personal,
					recConceptos.id_cuenta_presupuesto,
					recConceptos.cod_concepto,
					recConceptos.cod_presupuesto,
					recConceptos.monto,
					2,
					recConceptos.distribucion, pAnio);
			end if;
		--- SEMANAL (8,9)
		elsif recConceptos.cod_frecuencia_pago = 8 or 
recConceptos.cod_frecuencia_pago = 9 then
			perform actualizar_resumenmensual(
				pIdEncabezado,
				pIdUnidadAdministradora,
				recConceptos.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_cuenta_presupuesto,
				recConceptos.cod_concepto,
				recConceptos.cod_presupuesto,
				recConceptos.monto,
				2,
				recConceptos.distribucion, pAnio);
		--- SEMANAL (10)
		elsif recConceptos.cod_frecuencia_pago = 10 then
			perform actualizar_resumenmensual(
				pIdEncabezado,
				pIdUnidadAdministradora,
				recConceptos.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_cuenta_presupuesto,
				recConceptos.cod_concepto,
				recConceptos.cod_presupuesto,
				recConceptos.monto*2,
				1,
				recConceptos.distribucion, pAnio);
			perform actualizar_resumenmensual(
				pIdEncabezado,
				pIdUnidadAdministradora,
				recConceptos.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_cuenta_presupuesto,
				recConceptos.cod_concepto,
				recConceptos.cod_presupuesto,
				recConceptos.monto*2,
				2,
				recConceptos.distribucion, pAnio);
		end if;

	end loop;
	close curConceptos;




	return 0;

end;

$_$;


ALTER FUNCTION public.generar_resumenmensual(integer, integer, integer, integer, integer, boolean, integer) OWNER TO postgres;

--
-- TOC entry 756 (class 1255 OID 183738)
-- Name: generar_resumenmensual_aportes(integer, integer, integer, integer, integer, boolean, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_resumenmensual_aportes(integer, integer, integer, integer, integer, boolean, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdEncabezado alias for $1;
	pIdTipoPersonal alias for $2;
	pNumeroNomina alias for $3;
	pAnio alias for $4;
	pMes alias for $5;
	pTieneSemana5 alias for $6;
	pIdUnidadAdministradora alias for $7;
	pIdConceptoAporte alias for $8;
	
	
	recConceptos record;
	curConceptos cursor (piTipoPersonal int4, pAnio int4, pMes int4, pNumeroNomina int4, pIdUnidadAdministradora int4, pIdConceptoAporte int4) 
		for select hq.monto_aporte as monto, ctp.id_concepto_tipo_personal, 
		t.id_trabajador, fp.cod_frecuencia_pago, c.cod_concepto	,	
		cp.id_cuenta_presupuesto, cp.cod_presupuesto, ctp.distribucion		
		from historicoquincena hq, historiconomina hn, frecuenciatipopersonal ftp, frecuenciapago fp, 
		conceptotipopersonal ctp, concepto c, trabajador t, 
		conceptocuenta cc, cuentapresupuesto cp
		where 
		hn.id_unidad_administradora = pIdUnidadAdministradora
		and hq.id_historico_nomina = hn.id_historico_nomina
		and hq.anio = pAnio and hq.mes = pMes
		and hq.id_concepto_aporte = c.id_concepto
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago		
		and ctp.id_concepto = c.id_concepto
		and ctp.id_tipo_personal = pIdTipoPersonal
		and ctp.id_concepto_tipo_personal = pIdConceptoAporte
		and t.id_trabajador = hq.id_trabajador		
		and ctp.id_concepto_tipo_personal = cc.id_concepto_tipo_personal
		and cc.id_cuenta_presupuesto = cp.id_cuenta_presupuesto		
		and hq.id_tipo_personal = pIdTipoPersonal
		and hq.numero_nomina = pNumeroNomina;
	id int4 := 0;
begin
	-- VERSION 06-02-2006 - 1

	delete from resumenmensual
		where id_unidad_administradora = pIdUnidadAdministradora 
		and id_encabezado_resumen_mensual = pIdEncabezado
		and id_concepto_tipo_personal in(select id_concepto_tipo_personal 
		from conceptotipopersonal where id_tipo_personal = pIdTipoPersonal);
	
	raise notice 'v1';
	open curConceptos (pIdTipoPersonal, pAnio, pMes, pNumeroNomina, pIdUnidadAdministradora, pIdConceptoAporte);

	loop
		fetch curConceptos into recConceptos;			
		exit when not found;
		
		raise notice 'pasa 1';
		perform actualizar_resumenmensual(
			pIdEncabezado,
			pIdUnidadAdministradora,
			recConceptos.id_trabajador,
			recConceptos.id_concepto_tipo_personal,
			recConceptos.id_cuenta_presupuesto,
			recConceptos.cod_concepto,
			recConceptos.cod_presupuesto,	
			recConceptos.monto,
			2,				
			recConceptos.distribucion, pAnio);
		
		
	end loop;
	close curConceptos;
	
	
	delete from identity;

	return 0;

end;

$_$;


ALTER FUNCTION public.generar_resumenmensual_aportes(integer, integer, integer, integer, integer, boolean, integer, integer) OWNER TO postgres;

--
-- TOC entry 757 (class 1255 OID 183739)
-- Name: generar_trabajadorcargoespecifica(integer, integer, integer, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_trabajadorcargoespecifica(integer, integer, integer, double precision) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadEjecutora alias for $1;
	pIdUelEspecifica alias for $2;
	pAnio alias for $3;
	pPorcentaje alias for $4;

	
	recTrabajadores record;
	curTrabajadores cursor (pIdUnidadEjecutora int4) 
		for select id_trabajador 
		from trabajador t, dependencia d, administradorauel au
		where t.id_dependencia = d.id_dependencia
		and d.id_administradora_uel = au.id_administradora_uel
		and au.id_unidad_ejecutora = pIdUnidadEjecutora;
	
	recRegistroCargos record;
	curRegistroCargos cursor (pIdUnidadEjecutora int4) 
		for select id_registro_cargos 
		from registrocargos rc, dependencia d, administradorauel au
		where rc.id_dependencia = d.id_dependencia
		and d.id_administradora_uel = au.id_administradora_uel
		and au.id_unidad_ejecutora = pIdUnidadEjecutora;


	sobregirado boolean := false;
	idTrabajadorEspecifica int4 := 0;
	idCargoEspecifica int4 := 0;
begin
	delete from trabajadorespecifica where anio = pAnio and id_uel_especifica = pIdUelEspecifica ;
	

	delete from cargoespecifica where anio = pAnio and id_uel_especifica = pIdUelEspecifica ;
	

	idTrabajadorEspecifica := last_id_trabajadorespecifica()+1;
	if idTrabajadorEspecifica is null then
		idTrabajadorEspecifica := 1;

	end if;

	idCargoEspecifica := last_id_cargoespecifica()+1;
	if idCargoEspecifica is null then
		idCargoEspecifica := 1;

	end if;

	open curTrabajadores(pIdUnidadEjecutora);				
	loop
		fetch curTrabajadores into recTrabajadores;			
		exit when not found;

		sobregirado := false;
		sobregirado := verificar_sobregirado_trabajadorcargoespecifica(recTrabajadores.id_trabajador, pAnio, pPorcentaje, 'T');
		if sobregirado = false then						
			insert into trabajadorespecifica (id_trabajador_especifica, 
			id_uel_especifica, id_trabajador, anio, porcentaje) values
			(idTrabajadorEspecifica, pIdUelEspecifica, recTrabajadores.id_trabajador, 
			pAnio, pPorcentaje);
		else
		
		end if;
		idTrabajadorEspecifica := idTrabajadorEspecifica +1;
	end loop;

	open curRegistroCargos(pIdUnidadEjecutora);				
	loop
		fetch curRegistroCargos into recRegistroCargos;			
		exit when not found;

		sobregirado := false;
		sobregirado := verificar_sobregirado_trabajadorcargoespecifica(recTrabajadores.id_trabajador, pAnio, pPorcentaje, 'R');
		if sobregirado = false then						
			insert into cargoespecifica (id_cargo_especifica, 
			id_uel_especifica, id_registro_cargos, anio, porcentaje) values
			(idCargoEspecifica, pIdUelEspecifica, recRegistroCargos.id_registro_cargos, 
			pAnio, pPorcentaje);
		else
		
		end if;
		idCargoEspecifica := idCargoEspecifica +1;
	end loop;


	
	return 1;
end;

$_$;


ALTER FUNCTION public.generar_trabajadorcargoespecifica(integer, integer, integer, double precision) OWNER TO postgres;

--
-- TOC entry 758 (class 1255 OID 183740)
-- Name: generar_trabajadorcargoespecifica(integer, integer, integer, integer, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_trabajadorcargoespecifica(integer, integer, integer, integer, double precision) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadEjecutora alias for $1;
	pIdUelEspecifica alias for $2;
	pIdTipoPersonal alias for $3;
	pAnio alias for $4;
	pPorcentaje alias for $5;

	
	recTrabajadores record;
	curTrabajadores cursor (pIdUnidadEjecutora int4, pIdTipoPersonal int4) 
		for select id_trabajador 
		from trabajador t, dependencia d, administradorauel au
		where t.id_dependencia = d.id_dependencia
		and d.id_administradora_uel = au.id_administradora_uel
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A'
		and au.id_unidad_ejecutora = pIdUnidadEjecutora;
	
	recRegistroCargos record;
	curRegistroCargos cursor (pIdUnidadEjecutora int4, pIdTipoPersonal int4) 
		for select id_registro_cargos 
		from registrocargos rc, registro r, registropersonal rp, 
		dependencia d, administradorauel au
		where rc.id_dependencia = d.id_dependencia
		and rc.id_registro = r.id_registro
		and r.id_registro = rp.id_registro
		and rp.id_tipo_personal = pIdTipoPersonal
		and d.id_administradora_uel = au.id_administradora_uel
		and au.id_unidad_ejecutora = pIdUnidadEjecutora;


	sobregirado boolean := false;
	idTrabajadorEspecifica int4 := 0;
	idCargoEspecifica int4 := 0;
begin
	delete from trabajadorespecifica where anio = pAnio 
		and id_uel_especifica = pIdUelEspecifica 
		and id_trabajador in 
		(select id_trabajador from trabajador  
		where estatus = 'A' and id_tipo_personal = pIdTipoPersonal);
	

	delete from cargoespecifica where anio = pAnio 
		and id_uel_especifica = pIdUelEspecifica 
		and id_registro_cargos in 
		(select rc.id_registro_cargos from registrocargos rc, registro r, registropersonal rp 
		where rc.id_registro = r.id_registro
		and r.id_registro = rp.id_registro
		and rp.id_tipo_personal = pIdTipoPersonal);
	
	

	idTrabajadorEspecifica := last_id_trabajadorespecifica()+1;
	if idTrabajadorEspecifica is null then
		idTrabajadorEspecifica := 1;

	end if;

	idCargoEspecifica := last_id_cargoespecifica()+1;
	if idCargoEspecifica is null then
		idCargoEspecifica := 1;

	end if;

	open curTrabajadores(pIdUnidadEjecutora, pIdTipoPersonal);				
	loop
		fetch curTrabajadores into recTrabajadores;			
		exit when not found;

		sobregirado := false;
		sobregirado := verificar_sobregirado_trabajadorcargoespecifica(recTrabajadores.id_trabajador, pAnio, pPorcentaje, 'T');
		if sobregirado = false then						
			insert into trabajadorespecifica (id_trabajador_especifica, 
			id_uel_especifica, id_trabajador, anio, porcentaje) values
			(idTrabajadorEspecifica, pIdUelEspecifica, recTrabajadores.id_trabajador, 
			pAnio, pPorcentaje);
		else
		
		end if;
		idTrabajadorEspecifica := idTrabajadorEspecifica +1;
	end loop;

	open curRegistroCargos(pIdUnidadEjecutora, pIdTipoPersonal);				
	loop
		fetch curRegistroCargos into recRegistroCargos;			
		exit when not found;

		sobregirado := false;
		sobregirado := verificar_sobregirado_trabajadorcargoespecifica(recTrabajadores.id_trabajador, pAnio, pPorcentaje, 'R');
		if sobregirado = false then						
			insert into cargoespecifica (id_cargo_especifica, 
			id_uel_especifica, id_registro_cargos, anio, porcentaje) values
			(idCargoEspecifica, pIdUelEspecifica, recRegistroCargos.id_registro_cargos, 
			pAnio, pPorcentaje);
		else
		
		end if;
		idCargoEspecifica := idCargoEspecifica +1;
	end loop;

	delete from identity;
	return 1;
end;

$_$;


ALTER FUNCTION public.generar_trabajadorcargoespecifica(integer, integer, integer, integer, double precision) OWNER TO postgres;

--
-- TOC entry 759 (class 1255 OID 183741)
-- Name: generar_trabajadorcargoespecifica(integer, integer, integer, integer, double precision, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION generar_trabajadorcargoespecifica(integer, integer, integer, integer, double precision, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadEjecutora alias for $1;
	pIdUelEspecifica alias for $2;
	pIdTipoPersonal alias for $3;
	pAnio alias for $4;
	pPorcentaje alias for $5;
	pIdOrganismo alias for $6;

	recUnidadEjecutora record;
	curUnidadEjecutora cursor(pIdOrganismo int4)
		for select distinct au.id_unidad_ejecutora 
		from unidadadministradora ua, administradorauel au
		where ua.id_unidad_administradora = au.id_unidad_administradora
		and ua.id_organismo = pIdOrganismo;		

	recUelEspecifica record;
	curUelEspecifica cursor(pIdUnidadEjecutora int4, pAnio int4)
		for select id_uel_especifica
		from uelespecifica
		where id_unidad_ejecutora = pIdUnidadEjecutora
		and anio = pAnio;
	

	recTrabajadores record;
	curTrabajadores cursor (pIdUnidadEjecutora int4, pIdTipoPersonal int4) 
		for select id_trabajador 
		from trabajador t, dependencia d, administradorauel au
		where t.id_dependencia = d.id_dependencia
		and d.id_administradora_uel = au.id_administradora_uel
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A'
		and au.id_unidad_ejecutora = pIdUnidadEjecutora;

	
	recRegistroCargos record;
	curRegistroCargos cursor (pIdUnidadEjecutora int4, pIdTipoPersonal int4) 
		for select id_registro_cargos 
		from registrocargos rc, registro r, registropersonal rp, 
		dependencia d, administradorauel au
		where rc.id_dependencia = d.id_dependencia
		and rc.id_registro = r.id_registro
		and r.id_registro = rp.id_registro
		and rp.id_tipo_personal = pIdTipoPersonal
		and d.id_administradora_uel = au.id_administradora_uel
		and au.id_unidad_ejecutora = pIdUnidadEjecutora;


	sobregirado boolean := false;
	idTrabajadorEspecifica int4 := 0;
	idCargoEspecifica int4 := 0;
begin
	if pIdUnidadEjecutora <> 0 then
		delete from trabajadorespecifica where anio = pAnio 
			and id_uel_especifica = pIdUelEspecifica 
			and id_trabajador in 
			(select id_trabajador from trabajador  
			where estatus = 'A' and id_tipo_personal = pIdTipoPersonal);
		
	
		delete from cargoespecifica where anio = pAnio 
			and id_uel_especifica = pIdUelEspecifica 
			and id_registro_cargos in 
			(select rc.id_registro_cargos from registrocargos rc, registro r, registropersonal rp 
			where rc.id_registro = r.id_registro
			and r.id_registro = rp.id_registro
			and rp.id_tipo_personal = pIdTipoPersonal);
	else
		delete from trabajadorespecifica where anio = pAnio 
			and id_trabajador in 
			(select id_trabajador from trabajador  
			where estatus = 'A' and id_tipo_personal = pIdTipoPersonal);
		
	
		delete from cargoespecifica where anio = pAnio 
			and id_registro_cargos in 
			(select rc.id_registro_cargos from registrocargos rc, registro r, registropersonal rp 
			where rc.id_registro = r.id_registro
			and r.id_registro = rp.id_registro
			and rp.id_tipo_personal = pIdTipoPersonal);
	end if;
	

	idTrabajadorEspecifica := last_id_trabajadorespecifica()+1;
	if idTrabajadorEspecifica is null then
		idTrabajadorEspecifica := 1;

	end if;

	idCargoEspecifica := last_id_cargoespecifica()+1;
	if idCargoEspecifica is null then
		idCargoEspecifica := 1;

	end if;

	if pIdUnidadEjecutora = 0 then
		open curUnidadEjecutora(pIdOrganismo);
		loop
			fetch curUnidadEjecutora into recUnidadEjecutora;	
			exit when not found;

			open curUelEspecifica(recUnidadEjecutora.id_unidad_ejecutora, pAnio);
			loop
				fetch curUelEspecifica into recUelEspecifica;
				exit when not found;

					----------------ASIGNACION A TRABAJADORES
					open curTrabajadores(recUnidadEjecutora.id_unidad_ejecutora, pIdTipoPersonal);
					loop		
						fetch curTrabajadores into recTrabajadores;			
						
						exit when not found;
				
						sobregirado := false;
						sobregirado := verificar_sobregirado_trabajadorcargoespecifica(recTrabajadores.id_trabajador, pAnio, pPorcentaje, 'T');
						if sobregirado = false then						
							insert into trabajadorespecifica (id_trabajador_especifica, 
							id_uel_especifica, id_trabajador, anio, porcentaje) values
							(idTrabajadorEspecifica, recUelEspecifica.id_uel_especifica, 
							recTrabajadores.id_trabajador, pAnio, pPorcentaje);
						else
						
						end if;
						idTrabajadorEspecifica := idTrabajadorEspecifica +1;
					end loop;	
					close curTrabajadores;
					
		
					----------------ASIGNACION A REGISTRO_CARGOS
					open curRegistroCargos(recUnidadEjecutora.id_unidad_ejecutora, pIdTipoPersonal);	
					loop
						
						fetch curRegistroCargos into recRegistroCargos;			
						
						exit when not found;
				
						sobregirado := false;
						sobregirado := verificar_sobregirado_trabajadorcargoespecifica(recTrabajadores.id_trabajador, pAnio, pPorcentaje, 'R');
						if sobregirado = false then						
							insert into cargoespecifica (id_cargo_especifica, 
							id_uel_especifica, id_registro_cargos, anio, porcentaje) values
							(idCargoEspecifica, recUelEspecifica.id_uel_especifica, 
							recRegistroCargos.id_registro_cargos, pAnio, pPorcentaje);
						else
						
						end if;
						idCargoEspecifica := idCargoEspecifica +1;
					end loop;	
					close curRegistroCargos;	
				
			end loop;
			close curUelEspecifica;
		end loop;
		close curUnidadEjecutora;

	else
		----------------ASIGNACION A TRABAJADORES
		open curTrabajadores(pIdUnidadEjecutora, pIdTipoPersonal);
		loop		
			fetch curTrabajadores into recTrabajadores;			
			
			exit when not found;
	
			sobregirado := false;
			sobregirado := verificar_sobregirado_trabajadorcargoespecifica(recTrabajadores.id_trabajador, pAnio, pPorcentaje, 'T');
			if sobregirado = false then						
				insert into trabajadorespecifica (id_trabajador_especifica, 
				id_uel_especifica, id_trabajador, anio, porcentaje) values
				(idTrabajadorEspecifica, pIdUelEspecifica, recTrabajadores.id_trabajador, 
				pAnio, pPorcentaje);
			else
			
			end if;
			idTrabajadorEspecifica := idTrabajadorEspecifica +1;
		end loop;	
		close curTrabajadores;		
	

		----------------ASIGNACION A REGISTRO_CARGOS	
		open curRegistroCargos(pIdUnidadEjecutora, pIdTipoPersonal);	
		loop
			
			fetch curRegistroCargos into recRegistroCargos;			
			
			exit when not found;
	
			sobregirado := false;
			sobregirado := verificar_sobregirado_trabajadorcargoespecifica(recTrabajadores.id_trabajador, pAnio, pPorcentaje, 'R');
			if sobregirado = false then						
				insert into cargoespecifica (id_cargo_especifica, 
				id_uel_especifica, id_registro_cargos, anio, porcentaje) values
				(idCargoEspecifica, pIdUelEspecifica, recRegistroCargos.id_registro_cargos, 
				pAnio, pPorcentaje);
			else
			
			end if;
			idCargoEspecifica := idCargoEspecifica +1;
		end loop;	
		close curRegistroCargos;	
	end if;


	delete from identity;
	return 1;
end;

$_$;


ALTER FUNCTION public.generar_trabajadorcargoespecifica(integer, integer, integer, integer, double precision, integer) OWNER TO postgres;

--
-- TOC entry 760 (class 1255 OID 183742)
-- Name: last_id_aplicartabulador(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_aplicartabulador() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_aplicar_tabulador)
	from aplicartabulador
	
	
$$;


ALTER FUNCTION public.last_id_aplicartabulador() OWNER TO postgres;

--
-- TOC entry 761 (class 1255 OID 183743)
-- Name: last_id_aumentoevaluacion(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_aumentoevaluacion() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_aumento_evaluacion)
	from aumentoevaluacion
	
	
$$;


ALTER FUNCTION public.last_id_aumentoevaluacion() OWNER TO postgres;

--
-- TOC entry 762 (class 1255 OID 183744)
-- Name: last_id_beneficiario(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_beneficiario() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	id int4 = 0;
BEGIN
	id := (select max(id_beneficiario) from beneficiario);
	IF id IS NULL THEN
		return 0;
	ELSE
		return id;
	END IF;
END
$$;


ALTER FUNCTION public.last_id_beneficiario() OWNER TO postgres;

--
-- TOC entry 763 (class 1255 OID 183745)
-- Name: last_id_calculobonofinanio(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_calculobonofinanio() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_calculo_bono_fin_anio)
	from calculobonofinanio
	
	
$$;


ALTER FUNCTION public.last_id_calculobonofinanio() OWNER TO postgres;

--
-- TOC entry 764 (class 1255 OID 183746)
-- Name: last_id_calculoticket(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_calculoticket() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_calculo_ticket)
	from calculoticket
	
	
$$;


ALTER FUNCTION public.last_id_calculoticket() OWNER TO postgres;

--
-- TOC entry 765 (class 1255 OID 183747)
-- Name: last_id_cargoespecifica(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_cargoespecifica() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_cargo_especifica)
	from cargoespecifica
	
	
$$;


ALTER FUNCTION public.last_id_cargoespecifica() OWNER TO postgres;

--
-- TOC entry 766 (class 1255 OID 183748)
-- Name: last_id_conceptofijo(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_conceptofijo() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_concepto_fijo)
	from conceptofijo
	
	
$$;


ALTER FUNCTION public.last_id_conceptofijo() OWNER TO postgres;

--
-- TOC entry 767 (class 1255 OID 183749)
-- Name: last_id_conceptomovimiento(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_conceptomovimiento() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_concepto_movimiento)
	from conceptomovimiento
	
	
$$;


ALTER FUNCTION public.last_id_conceptomovimiento() OWNER TO postgres;

--
-- TOC entry 768 (class 1255 OID 183750)
-- Name: last_id_conceptoresumen(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_conceptoresumen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_concepto_resumen)
	from conceptoresumen
	
	
$$;


ALTER FUNCTION public.last_id_conceptoresumen() OWNER TO postgres;

--
-- TOC entry 769 (class 1255 OID 183751)
-- Name: last_id_conceptovariable(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_conceptovariable() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_concepto_variable)
	from conceptovariable
	
	
$$;


ALTER FUNCTION public.last_id_conceptovariable() OWNER TO postgres;

--
-- TOC entry 770 (class 1255 OID 183752)
-- Name: last_id_cuadroonapre(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_cuadroonapre() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	id int4 = 0;
BEGIN
	id := (select max(id_cuadro_onapre) from cuadroonapre);
	IF id IS NULL THEN
		return 0;
	ELSE
		return id;
	END IF;
END
$$;


ALTER FUNCTION public.last_id_cuadroonapre() OWNER TO postgres;

--
-- TOC entry 771 (class 1255 OID 183753)
-- Name: last_id_descuentoticket(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_descuentoticket() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_descuento_ticket)
	from descuentoticket
	
	
$$;


ALTER FUNCTION public.last_id_descuentoticket() OWNER TO postgres;

--
-- TOC entry 744 (class 1255 OID 183754)
-- Name: last_id_dotacionentregada(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_dotacionentregada() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	id int4 = 0;
BEGIN
	id := (select max(id_dotacion_entregada)
		from dotacionentregada);
	IF id IS NULL THEN
		return 0;
	ELSE
		return id;
	END IF;
END
	
$$;


ALTER FUNCTION public.last_id_dotacionentregada() OWNER TO postgres;

--
-- TOC entry 745 (class 1255 OID 183755)
-- Name: last_id_dotaciontrabajador(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_dotaciontrabajador() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	id int4 = 0;
BEGIN
	id := (select max(id_dotacion_trabajador)
		from dotaciontrabajador);
	IF id IS NULL THEN
		return 0;
	ELSE
		return id;
	END IF;
END
	
$$;


ALTER FUNCTION public.last_id_dotaciontrabajador() OWNER TO postgres;

--
-- TOC entry 746 (class 1255 OID 183756)
-- Name: last_id_encabezadorendicionmensual(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_encabezadorendicionmensual() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_encabezado_rendicion_mensual)
	from encabezadorendicionmensual
	
	
$$;


ALTER FUNCTION public.last_id_encabezadorendicionmensual() OWNER TO postgres;

--
-- TOC entry 752 (class 1255 OID 183757)
-- Name: last_id_encabezadoresumenmensual(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_encabezadoresumenmensual() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_encabezado_resumen_mensual)
	from encabezadoresumenmensual
	
	
$$;


ALTER FUNCTION public.last_id_encabezadoresumenmensual() OWNER TO postgres;

--
-- TOC entry 753 (class 1255 OID 183758)
-- Name: last_id_historiconomina(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_historiconomina() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_historico_nomina)
	from historiconomina
	
	
	
$$;


ALTER FUNCTION public.last_id_historiconomina() OWNER TO postgres;

--
-- TOC entry 754 (class 1255 OID 183759)
-- Name: last_id_historicoquincena(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_historicoquincena() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_historico_quincena)
	from historicoquincena
	
	
	
$$;


ALTER FUNCTION public.last_id_historicoquincena() OWNER TO postgres;

--
-- TOC entry 755 (class 1255 OID 183760)
-- Name: last_id_historicosemana(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_historicosemana() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_historico_semana)
	from historicosemana
	
	
	
$$;


ALTER FUNCTION public.last_id_historicosemana() OWNER TO postgres;

--
-- TOC entry 636 (class 1255 OID 183761)
-- Name: last_id_historicoticket(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_historicoticket() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_historico_ticket)
	from historicoticket
	
	
$$;


ALTER FUNCTION public.last_id_historicoticket() OWNER TO postgres;

--
-- TOC entry 648 (class 1255 OID 183762)
-- Name: last_id_interesadicional(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_interesadicional() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_interes_adicional)
	from interesadicional
$$;


ALTER FUNCTION public.last_id_interesadicional() OWNER TO postgres;

--
-- TOC entry 649 (class 1255 OID 183763)
-- Name: last_id_interesnuevoregimen(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_interesnuevoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_interes_nuevo_regimen)
	from interesnuevoregimen
$$;


ALTER FUNCTION public.last_id_interesnuevoregimen() OWNER TO postgres;

--
-- TOC entry 772 (class 1255 OID 183764)
-- Name: last_id_interesviejoregimen(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_interesviejoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_interes_viejo_regimen)
	from interesviejoregimen
	
	
	
$$;


ALTER FUNCTION public.last_id_interesviejoregimen() OWNER TO postgres;

--
-- TOC entry 773 (class 1255 OID 183765)
-- Name: last_id_juguete(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_juguete() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	id int4 = 0;
BEGIN
	id := (select max(id_juguete) from juguete);
	IF id IS NULL THEN
		return 0;
	ELSE
		return id;
	END IF;
END
$$;


ALTER FUNCTION public.last_id_juguete() OWNER TO postgres;

--
-- TOC entry 774 (class 1255 OID 183766)
-- Name: last_id_liquidacioninteresadicional(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_liquidacioninteresadicional() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_liquidacion_interes_adicional)
	from liquidacioninteresadicional
	
	
	
$$;


ALTER FUNCTION public.last_id_liquidacioninteresadicional() OWNER TO postgres;

--
-- TOC entry 775 (class 1255 OID 183767)
-- Name: last_id_liquidacioninteresnuevoregimen(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_liquidacioninteresnuevoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_liquidacion_interes_nuevo_regimen)
	from liquidacioninteresnuevoregimen
	
	
	
$$;


ALTER FUNCTION public.last_id_liquidacioninteresnuevoregimen() OWNER TO postgres;

--
-- TOC entry 776 (class 1255 OID 183768)
-- Name: last_id_liquidacioninteresviejoregimen(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_liquidacioninteresviejoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_liquidacion_interes_viejo_regimen)
	from liquidacioninteresviejoregimen
	
	
	
$$;


ALTER FUNCTION public.last_id_liquidacioninteresviejoregimen() OWNER TO postgres;

--
-- TOC entry 777 (class 1255 OID 183769)
-- Name: last_id_liquidacionprestacionesmensuales(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_liquidacionprestacionesmensuales() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_liquidacion_prestaciones_mensuales)
	from liquidacionprestacionesmensuales
	
	
$$;


ALTER FUNCTION public.last_id_liquidacionprestacionesmensuales() OWNER TO postgres;

--
-- TOC entry 778 (class 1255 OID 183770)
-- Name: last_id_liquidacionresumennuevoregimen(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_liquidacionresumennuevoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_liquidacion_resumen_nuevo_regimen)
	from liquidacionresumennuevoregimen
	
	
	
$$;


ALTER FUNCTION public.last_id_liquidacionresumennuevoregimen() OWNER TO postgres;

--
-- TOC entry 779 (class 1255 OID 183771)
-- Name: last_id_liquidacionresumenviejoregimen(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_liquidacionresumenviejoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_liquidacion_resumen_viejo_regimen)
	from liquidacionresumenviejoregimen
	

	
$$;


ALTER FUNCTION public.last_id_liquidacionresumenviejoregimen() OWNER TO postgres;

--
-- TOC entry 780 (class 1255 OID 183772)
-- Name: last_id_pagoguarderia(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_pagoguarderia() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	id int4 = 0;
BEGIN
	id := (select max(id_pago_guarderia) from pagoguarderia);
	IF id IS NULL THEN
		return 0;
	ELSE
		return id;
	END IF;
END
$$;


ALTER FUNCTION public.last_id_pagoguarderia() OWNER TO postgres;

--
-- TOC entry 781 (class 1255 OID 183773)
-- Name: last_id_planillaarc(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_planillaarc() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_planilla_arc)
	from planillaarc
	
	
$$;


ALTER FUNCTION public.last_id_planillaarc() OWNER TO postgres;

--
-- TOC entry 782 (class 1255 OID 183774)
-- Name: last_id_prestacionesmensuales(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_prestacionesmensuales() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_prestaciones_mensuales)
	from prestacionesmensuales
	
	
$$;


ALTER FUNCTION public.last_id_prestacionesmensuales() OWNER TO postgres;

--
-- TOC entry 783 (class 1255 OID 183775)
-- Name: last_id_rendicionmensual(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_rendicionmensual() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_rendicion_mensual)
	from rendicionmensual
	
	
$$;


ALTER FUNCTION public.last_id_rendicionmensual() OWNER TO postgres;

--
-- TOC entry 784 (class 1255 OID 183776)
-- Name: last_id_resumenmensual(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_resumenmensual() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_resumen_mensual)
	from resumenmensual
	
	
$$;


ALTER FUNCTION public.last_id_resumenmensual() OWNER TO postgres;

--
-- TOC entry 785 (class 1255 OID 183777)
-- Name: last_id_resumennuevoregimen(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_resumennuevoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_resumen_nuevo_regimen)
	from resumennuevoregimen
	
	
	
$$;


ALTER FUNCTION public.last_id_resumennuevoregimen() OWNER TO postgres;

--
-- TOC entry 786 (class 1255 OID 183778)
-- Name: last_id_resumenviejoregimen(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_resumenviejoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_resumen_viejo_regimen)
	from resumenviejoregimen
	
	
	
$$;


ALTER FUNCTION public.last_id_resumenviejoregimen() OWNER TO postgres;

--
-- TOC entry 787 (class 1255 OID 183779)
-- Name: last_id_seguridadespecial(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_seguridadespecial() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_seguridad_especial)
	from seguridadespecial
	
	
	
$$;


ALTER FUNCTION public.last_id_seguridadespecial() OWNER TO postgres;

--
-- TOC entry 788 (class 1255 OID 183780)
-- Name: last_id_seguridadinteresadicional(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_seguridadinteresadicional() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_seguridad_interes_adicional)
	from seguridadinteresadicional
	
	
$$;


ALTER FUNCTION public.last_id_seguridadinteresadicional() OWNER TO postgres;

--
-- TOC entry 789 (class 1255 OID 183781)
-- Name: last_id_seguridadnuevoregimen(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_seguridadnuevoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_seguridad_nuevo_regimen) from seguridadnuevoregimen
	
	
$$;


ALTER FUNCTION public.last_id_seguridadnuevoregimen() OWNER TO postgres;

--
-- TOC entry 790 (class 1255 OID 183782)
-- Name: last_id_seguridadordinaria(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_seguridadordinaria() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_seguridad_ordinaria)
	from seguridadordinaria
	
	
$$;


ALTER FUNCTION public.last_id_seguridadordinaria() OWNER TO postgres;

--
-- TOC entry 791 (class 1255 OID 183783)
-- Name: last_id_seguridadordinaria_reverso(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_seguridadordinaria_reverso(integer) RETURNS integer
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---obtener el id de seguridad la ultima nomina procesada
    ---
	select max(id_seguridad_ordinaria)
	from seguridadordinaria
           where id_grupo_nomina = $1;
	
	
$_$;


ALTER FUNCTION public.last_id_seguridadordinaria_reverso(integer) OWNER TO postgres;

--
-- TOC entry 792 (class 1255 OID 183784)
-- Name: last_id_seguridadticket(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_seguridadticket() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_seguridad_ticket)
	from seguridadticket


$$;


ALTER FUNCTION public.last_id_seguridadticket() OWNER TO postgres;

--
-- TOC entry 793 (class 1255 OID 183785)
-- Name: last_id_titular(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_titular() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	id int4 = 0;
BEGIN
	id := (select max(id_titular) from titular);
	IF id IS NULL THEN
		return 0;
	ELSE
		return id;
	END IF;
END
$$;


ALTER FUNCTION public.last_id_titular() OWNER TO postgres;

--
-- TOC entry 794 (class 1255 OID 183786)
-- Name: last_id_trabajadorespecifica(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_trabajadorespecifica() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_trabajador_especifica)
	from trabajadorespecifica
	
	
$$;


ALTER FUNCTION public.last_id_trabajadorespecifica() OWNER TO postgres;

--
-- TOC entry 795 (class 1255 OID 183787)
-- Name: last_id_ultimanomina(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_ultimanomina() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_ultima_nomina)
	from ultimanomina
	
	
$$;


ALTER FUNCTION public.last_id_ultimanomina() OWNER TO postgres;

--
-- TOC entry 796 (class 1255 OID 183788)
-- Name: last_id_ultimaprenomina(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_ultimaprenomina() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_ultima_prenomina)
	from ultimaprenomina
	
	
$$;


ALTER FUNCTION public.last_id_ultimaprenomina() OWNER TO postgres;

--
-- TOC entry 797 (class 1255 OID 183789)
-- Name: last_id_utiles(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION last_id_utiles() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	id int4 = 0;
BEGIN
	id := (select max(id_utiles) from utiles);
	IF id IS NULL THEN
		return 0;
	ELSE
		return id;
	END IF;
END
$$;


ALTER FUNCTION public.last_id_utiles() OWNER TO postgres;

--
-- TOC entry 798 (class 1255 OID 183790)
-- Name: liquidar_interes_adicional(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION liquidar_interes_adicional(integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
	pIdTrabajador                 alias for $2;
	pAnioHasta                    alias for $3;
	pMesHasta                     alias for $4;
        
	
        recTrabajadores                      record;
        recTasaBcv                           record;
        recLiquidacionResumenViejoRegimen    record;
	recInteresAdicionalAcumulado         record;
        recAnticipoMes                       record;
        recAnticipoAcumulado                 record;
	  
      
        curTrabajadores_3 cursor (pIdTipoPersonal int4,Pidtrabajador int4)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,t.estatus
             from trabajador t, personal p, tipopersonal tp
		   where t.id_personal = p.id_personal
		     and t.id_tipo_personal = tp.id_tipo_personal
                     and t.id_tipo_personal = pIdTipoPersonal
                     and t.id_trabajador =pIdtrabajador
	             and t.estatus =  'E'  ---Solo Egresado
                     and t.id_trabajador in 
                      (select b.id_trabajador from LiquidacionResumenViejoRegimen b)
              order by t.id_personal;
        


        curLiquidacionResumenViejoRegimen cursor (pIdtrabajador int4)
		for select rvr.saldo_al_18061997 from liquidacionResumenViejoRegimen rvr
		where rvr.id_trabajador = pidtrabajador; 

        curTasaBcv cursor (panio int4, pmes int4)
		for select t.tasa_promedio,t.tasa_activa
		from tasabcv t
                where t.anio = panio
		and t.mes = pmes;
        
        curInteresAdicionalAcumulado cursor (pidtrabajador int4,panio int4, pmes int4)
		for select max(ia.monto_interes_acumulado) as monto_interes_acumulado 
                from liquidacioninteresadicional ia
                where ia.id_trabajador = pidtrabajador
                  and ia.anio = panio
		  and ia.mes = pmes;
        
	curAnticipoMes cursor (pIdpersonal int4,panio int4, pmes int4)
		for select sum(avr.monto_anticipo) as monto_anticipo from anticipo avr
                where avr.id_personal = pidpersonal
                  and avr.anio = panio
		  and avr.mes = pmes
---
---Anticipos de intereses y antiicpos de capital del viejo regimen.
---
                  and (avr.tipo_anticipo='F' OR avr.tipo_anticipo ='V')
                  and avr.estatus ='A';
        
        curAnticipoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(ia.monto_anticipo_acumulado) as monto_anticipo_acumulado 
                from liquidacioninteresadicional ia
                where ia.id_trabajador = pidtrabajador
                  and ia.anio = panio
		  and ia.mes = pmes;

	montoPrestaciones           float8 :=0;	
	montoCapital                float8 :=0;	
	montoInteresMensual         float8 :=0;
        montoInteresMensualFraccion float8 :=0;	
	monto_Interes_Acumulado     float8 :=0;	
	monto_Anticipo_Acumulado    float8 :=0;	
        monto_transferencia         float8 :=0;
        sueldo_transferencia        float8 :=0;
        tasa                        float8 :=0;
        tasa_aplicada               float8 :=0;
        tiempo                      float8 :=0;
        diasmes                     float8 :=0;
        diasanio                    float8 :=0;
        aniobisiesto                int4   :=0;
        aniosiguientebisiesto       int4   :=0;
        anioingreso                 int4   :=0;
        mesingreso                  int4   :=0;
        diaingreso                  float8 :=0;
        aniosservicios              int4   :=0;
        anioanterior                int4   :=0;
        mesanterior                 int4   :=0;
        anio_fin                    int4   :=0;
        mes_fin                     int4   :=0;
        anio_ini                    int4   :=1997;
        mes_ini                     int4   :=6;
        anio_interes                int4   :=1997;
        mes_interes                 int4   :=6;
        dias_interes                float8 :=0;
        id                          int4   :=0;

begin
        ----
        ----Return 11 no esta la tasa en tasabcv
        ----
        raise notice 'PASA 0 ';
	
	anio_fin :=paniohasta;
        mes_fin  :=pmeshasta;
     
	open curTrabajadores_3(pIdTipoPersonal,Pidtrabajador);
	
	loop
		fetch curTrabajadores_3 into recTrabajadores;	
		exit when not found;
                raise notice 'PASA 2 ';
	        anioingreso := extract(year from recTrabajadores.fecha_ingreso);
	        mesingreso := extract(month from recTrabajadores.fecha_ingreso);
	        diaingreso := extract(day from recTrabajadores.fecha_ingreso);
	

                
                open curLiquidacionResumenViejoRegimen(recTrabajadores.id_trabajador);
		fetch curLiquidacionResumenViejoRegimen into recLiquidacionResumenViejoRegimen;	
		close curLiquidacionResumenViejoRegimen;
 
                if recLiquidacionResumenViejoRegimen.saldo_al_18061997 is not null AND
                   recLiquidacionResumenViejoRegimen.saldo_al_18061997 <> 0 THEN		        
                   anio_interes :=anio_ini;
                   mes_interes  :=mes_ini;
 	           loop
          	     	exit when ((anio_interes > anio_fin) or
                              (anio_interes =anio_fin and mes_interes > mes_fin));
                    
                  	montoCapital := 0;	
			montoInteresMensual := 0;	
   		        raise notice 'PASA 4 ';
                        aniobisiesto :=0;
                        aniosiguientebisiesto:=0;
                        aniobisiesto:=bisiesto(anio_interes);
                        aniosiguientebisiesto:=bisiesto(anio_interes+1);
                        diasanio := 365;
                        


                        if mes_interes in (1,3,5,7,8,10,12) then
                           diasmes  :=31;
                        end if;
                        if mes_interes in (4,6,9,11) then
                           diasmes  :=30;
                        end if;
                        if mes_interes in (2) then
                           diasmes  :=28;
                           if aniobisiesto = 1 and mes_interes < 5 THEN
                              diasanio:=366;
                              diasmes :=29;
                           end if;
                        end if;
	                raise notice 'PASA 6 ';

                        if anio_interes = 1997 and mes_interes = 6 THEN
                           diasmes:=12;
                        end if;

                        if aniosiguientebisiesto = 1 and 
                           mes_interes > 4 THEN
                           diasanio:=366;
                        end if;
                        if aniobisiesto = 1 and 
                           mes_interes <= 4 THEN
                           diasanio:=366;
                        end if;

                        open curTasabcv(anio_interes,mes_interes);
		        fetch curtasabcv into rectasabcv;	
			if not found or rectasabcv.tasa_promedio is null 
                                     or rectasabcv.tasa_activa is null then
		          return 11;
	                end if;
                        close curtasabcv;

                        anioanterior := anio_interes;
                        mesanterior  := mes_interes -1;
                        
                        if mesanterior =0 THEN
                           anioanterior := anio_interes -1;
                           mesanterior  := 12;
                        end if;
 	                raise notice 'PASA 7 ';

                        open curInteresAdicionalAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,
                                                 mesanterior);
		        fetch curInteresAdicionalACumulado into recInteresAdicionalAcumulado;	
			if not found or recinteresAdicionalacumulado.monto_interes_acumulado 
                          is null then
		          recinteresAdicionalacumulado.monto_interes_acumulado:=0;
	                end if;
		        close curInteresAdicionalAcumulado;
                        raise notice 'PASA 8 ';
                        open curAnticipoAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,
                                                 mesanterior);
		        fetch curAnticipoACumulado into recAnticipoAcumulado;	
			if not found or recAnticipoAcumulado.monto_anticipo_acumulado is null then
		          recAnticipoAcumulado.monto_anticipo_acumulado:=0;
	                end if;
                        close curAnticipoAcumulado;
		        raise notice 'PASA 9 ';
                        open curAnticipoMes(rectrabajadores.id_personal,
                                            anio_interes,
                                            mes_interes);
		        fetch curAnticipoMes into recAnticipoMes;	
			if not found or recAnticipoMes.monto_anticipo is null then
		          recAnticipoMes.monto_anticipo:=0;
	                end if;
		        close curAnticipoMes;
                        raise notice 'PASA 10 ';
                        dias_interes := diasmes;
                        montoCapital:=(recLiquidacionResumenViejoRegimen.saldo_al_18061997 +
                                       recInteresAdicionalAcumulado.monto_interes_acumulado)
                                        -(recAnticipoAcumulado.monto_anticipo_acumulado
                                        +recAnticipoMes.monto_anticipo);
                        ---
                        ---Hasta el mes de julio del aÃ±o 2002 se
                        ---calculan los intereses a tasa promedio. A partir
                        ---de agosto del 2002 a tasa activa.
                        ---
                        raise notice 'PASA 11 ';
                        if anio_interes > 2002 OR 
                           (anio_interes =  2002 and mes_interes > 7) THEN
                            tasa := 1 + (rectasabcv.tasa_activa/100);
                            tasa_aplicada := rectasabcv.tasa_activa;
                        else
                            tasa := 1 + (rectasabcv.tasa_promedio/100);
                            tasa_aplicada := rectasabcv.tasa_promedio;
                        end if;
                        
                        tiempo := dias_interes/diasanio;
                        montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			
                        monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                 recAnticipoAcumulado.monto_anticipo_acumulado;
                        monto_interes_acumulado:=
                              recInteresAdicionalAcumulado.monto_interes_acumulado
                                                 +montoInteresMensual;
 
		        id := last_id_liquidacioninteresadicional()+1;
		        if id is null then 
		           id := 1;
		        end if;
                        raise notice 'PASA 12 ';
                        perform add_liquidacioninteresadicional(id,
                           recTrabajadores.id_trabajador, 
                           anio_interes,
                           mes_interes,
                           dias_interes,
                           tasa_aplicada,
                           montoCapital,
                           montoInteresMensual,
                           monto_interes_acumulado,
                           recAnticipoMes.monto_anticipo,
                           monto_anticipo_acumulado,
                           recLiquidacionResumenViejoRegimen.saldo_al_18061997);
                
                       mes_interes := mes_interes + 1;
                       if mes_interes = 13 then
                          anio_interes := anio_interes +1;
                          mes_interes  := 1;
                       end if;
                end loop;
             end if;
        end loop;

        perform update_liquidacion_resumen_viejo_regimen
              (pIdtrabajador,monto_interes_acumulado);

        close curTrabajadores_3;
		
        raise notice 'PASA 13 ';
      
        raise notice 'PASA 15 ';

	delete from identity;

	return 1;
end;
$_$;


ALTER FUNCTION public.liquidar_interes_adicional(integer, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 799 (class 1255 OID 183792)
-- Name: liquidar_interes_nuevo_regimen(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION liquidar_interes_nuevo_regimen(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
        pIdtrabajador                 alias for $2;
        
	recTrabajadores               record;
	recFideicomisomes             record;
        recTasaBcv                    record;
        recprestacionesmensuales      record;
	recInteresAcumulado           record;
        recAnticipoMes                record;
        recAnticipoAcumulado          record;
	recFideicomisoAcumulado       record;
        recParametroVarios            record;
        
        curTrabajadores_4 cursor (pIdTipoPersonal int4, pIdtrabajador int4)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,
                                    t.estatus,p.anios_servicio_apn
		from trabajador t, personal p, tipopersonal tp
		where t.id_personal = p.id_personal
		and t.id_tipo_personal = tp.id_tipo_personal
                and t.id_tipo_personal = pIdTipoPersonal 
                and t.estatus =  'E'
                and t.id_trabajador = Pidtrabajador
                order by t.id_personal;

       

       ---
       ---A partir del aÃ±o 1997 mes junio
       ---
       
       



         curprestacionesmensuales cursor (pIdtrabajador int4)
		for select hd.anio,hd.mes,hd.monto_prestaciones,hd.monto_adicional,
                    dias_mensuales,dias_adicionales
		from liquidacionprestacionesmensuales hd
		where hd.id_trabajador = pidtrabajador
                  and hd.anio *100 + hd.mes >=199706
                 order by  hd.anio,hd.mes;
       
       


        curTasaBcv_4 cursor (panio int4, pmes int4)
		for select t.tasa_promedio,t.tasa_activa
		from tasabcv t
                where t.anio = panio
		and t.mes = pmes;
        
        curInteresAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(inr.monto_prestaciones_acumuladas) 
                           as monto_prestaciones_acumuladas,max(inr.monto_interes_acumulado)
                           as monto_interes_acumulado from liquidacioninteresnuevoregimen inr
                where inr.id_trabajador = pidtrabajador
                  and inr.anio = panio
		  and inr.mes = pmes;
        
	curAnticipoMes cursor (pIdpersonal int4,panio int4, pmes int4,pdia1 int4,pdia2 int4)
		for select sum(avr.monto_anticipo) as monto_anticipo from anticipo avr
                where avr.id_personal = pidpersonal
                  and avr.anio = panio
		  and avr.mes = pmes
                  and extract(day from avr.fecha_anticipo) between pdia1 and pdia2
--
--Anticipos de Capital e intereses del nuevo regimen que esten aprobados.
--
                  and (avr.tipo_anticipo='N' or avr.tipo_anticipo='F')
                  and avr.estatus ='A' ;  
        

         curFideicomisoMes cursor (pIdTrabajador int4,panio int4,
                                   pmes int4,pdia1 int4,pdia2 int4)
		for select sum(f.monto_fideicomiso) as monto_fideicomiso from fideicomiso f
                where f.id_trabajador = pidtrabajador
                  and f.anio = panio
		  and f.mes = pmes
                  and extract(day from f.fecha) between pdia1 and pdia2;
        
---
---OJO
---restar fideicomiso                                           ok
---poner seguridad en parametros varios                         ok
---picar por fecha de ingreso                                   ok
---crear seguridad de intresesnuevoregimen                      ok
---liquidacion todas las tablas iguales con liq adelante
---crear fecha de corte en el calculo historico de prestaciones ok
---ojo: se capitaliza o n o el interes ?
---
---
        curAnticipoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(inr.monto_anticipo_acumulado) as monto_anticipo_acumulado from liquidacioninteresnuevoregimen inr
                where inr.id_trabajador = pidtrabajador
                  and inr.anio = panio
		  and inr.mes = pmes;

	curFideicomisoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(inr.monto_fideicomiso_acumulado) as monto_fideicomiso_acumulado from liquidacioninteresnuevoregimen inr
                where inr.id_trabajador = pidtrabajador
                  and inr.anio = panio
		  and inr.mes = pmes;


        
        montoPrestaciones             float8 :=0;	
	montoCapital                  float8 :=0;	
	montoInteresMensual           float8 :=0;
        monto_Interes_Acumulado       float8 :=0;	
	monto_Anticipo_Acumulado      float8 :=0;	
        monto_Fideicomiso_Acumulado   float8 :=0;	
        monto_Prestaciones_Acumuladas float8 :=0;	
        tasa                          float8 :=0;
        tiempo                        float8 :=0;
        dias_interes                  float8 :=0;
        diasmes                       float8 :=0;
        diasanio                      float8 :=0;
        diasmensuales                 int4   :=0;
        diasadicionales               int4   :=0;
        aniobisiesto                  int4   :=0;
        aniosiguientebisiesto         int4   :=0;
        anioingreso                   int4   :=0;
        mesingreso                    int4   :=0;
        diaingreso                    float8 :=0;
        aniosservicios                int4   :=0;
        anioanterior                  int4   :=0;
        mesanterior                   int4   :=0;
        aniomeshasta                  int4   :=0;
        aniomesdesde                  int4   :=0;
        anio_fin                      int4   :=0;
        mes_fin                       int4   :=0;
        id                            int4   :=0;
        pEstatus                      char   :='E' ;
begin
	

 ----
 ----Return 11 no esta la tasa en tasabcv
 ----
 ----
 ----Return 2 periodo inferior al mes de junio de 1997.Debe ser mayor a esta fecha
 ----
 ----

       

	delete from liquidacioninteresnuevoregimen 
          where id_trabajador =pidtrabajador;
        
       
        raise notice 'PASA 1 ';

	open curTrabajadores_4(pIdTipoPersonal, pIdtrabajador);
	loop
		fetch curTrabajadores_4 into recTrabajadores;	
		exit when not found;

                raise notice 'PASA 2 ';
        
                montoPrestaciones             :=0;	
	        montoCapital                  :=0;	
	        montoInteresMensual           :=0;
                monto_Interes_Acumulado       :=0;	
	        monto_Anticipo_Acumulado      :=0;	
                monto_Fideicomiso_Acumulado   :=0;	
                monto_Prestaciones_Acumuladas :=0;	
                diasmensuales                 :=0;
                diasadicionales               :=0;

                if rectrabajadores.fecha_ingreso > '1997-06-18 ' then 
	           anioingreso := extract(year  from recTrabajadores.fecha_ingreso);
	           mesingreso  := extract(month from recTrabajadores.fecha_ingreso);
	           diaingreso  := extract(day   from recTrabajadores.fecha_ingreso);
	        else
                   anioingreso := 1997;
	           mesingreso  := 6;
	           diaingreso  := 19;
	         --  anioingreso := 1997;
	         --  mesingreso  := 7;
	         --  diaingreso  := 19;
	      
                end if;

                aniomesdesde := anioingreso * 100 + mesingreso;

	        open curprestacionesmensuales(recTrabajadores.id_trabajador);
		loop			
			fetch curprestacionesmensuales into recprestacionesmensuales;	
			exit when not found;
		
                	
	                raise notice 'PASA 3 ';

                        montoPrestaciones    :=0;	
			montoCapital         :=0;	
			montoInteresMensual  :=0;	
		
                        aniobisiesto         :=0;
                        aniosiguientebisiesto:=0;

                        aniobisiesto         :=bisiesto(recprestacionesmensuales.anio);
                        aniosiguientebisiesto:=bisiesto(recprestacionesmensuales.anio+1);
                        diasanio := 365;
                        if recprestacionesmensuales.mes in (1,3,5,7,8,10,12) then
                           diasmes  :=31;
                        end if;
                        if recprestacionesmensuales.mes in (4,6,9,11) then
                           diasmes  :=30;
                        end if;
                        if recprestacionesmensuales.mes in (2) then
                           diasmes  :=28;
                           if aniobisiesto = 1 and recprestacionesmensuales.mes < 5 THEN
                              diasanio:=366;
                              diasmes :=29;
                           end if;
                        end if;
	                raise notice  'PASA 4 ';

                        if recprestacionesmensuales.anio = 1997 and
                           recprestacionesmensuales.mes = 6 THEN
                           diasmes:=12;
                        end if;
                     --   if recprestacionesmensuales.anio = 1997 and
                     --      recprestacionesmensuales.mes = 7 THEN
                     --      diasmes:=13;
                     --   end if;
                        
                        if aniosiguientebisiesto = 1 and 
                           recprestacionesmensuales.mes > 5 THEN
                           diasanio:=366;
                        end if;
                                          
                        if aniobisiesto = 1 and 
                           recprestacionesmensuales.mes <=5 THEN
                           diasanio:=366;
                        end if;
   
                       
                        open curTasaBcv_4(recprestacionesmensuales.anio,
                                        recprestacionesmensuales.mes);
		        fetch curTasaBcv_4 into rectasabcv;	
			if not found or rectasabcv.tasa_promedio is null then
		          return 11;
	                end if;
                        close curTasaBcv_4;

                        anioanterior := recprestacionesmensuales.Anio;
                        mesanterior  := recprestacionesmensuales.mes -1;
                        
                        if mesanterior =0 THEN
                           anioanterior := recprestacionesmensuales.Anio -1;
                           mesanterior  := 12;
                        end if;
 	                raise notice 'PASA 5 ';

                        open curInteresAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,mesanterior);
		        fetch curInteresACumulado into recInteresAcumulado;	
			if not found or 
                           recinteresacumulado.monto_interes_acumulado is null then
		           recinteresacumulado.monto_interes_acumulado:=0;
	                end if;
		        if not found or recinteresacumulado.monto_prestaciones_acumuladas 
                             is null then
		             recinteresacumulado.monto_prestaciones_acumuladas:=0;
	                end if;
		        close curInteresAcumulado;

                        open curAnticipoAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,mesanterior);
		        fetch curAnticipoACumulado into recAnticipoAcumulado;	
			if not found or 
                           recAnticipoAcumulado.monto_anticipo_acumulado is null then
		           recAnticipoAcumulado.monto_anticipo_acumulado:=0;
	                end if;
                        close curAnticipoAcumulado;
		        
                        open curFideicomisoAcumulado(rectrabajadores.id_trabajador,
                                                     anioanterior,mesanterior);
		        fetch curFideicomisoACumulado into recFideicomisoAcumulado;	
			if not found or 
                           recFideicomisoAcumulado.monto_fideicomiso_acumulado is null then
		           recFideicomisoAcumulado.monto_fideicomiso_acumulado:=0;
	                end if;
                        close curFideicomisoAcumulado;
		        

                        if (diaingreso > 1 and (anioingreso <>recprestacionesmensuales.anio
                                            or mesingreso <> recprestacionesmensuales.mes))
                           then
                           raise notice 'PASA 61 ';
                           dias_interes := diaingreso -1;
                           if dias_interes > diasmes then
                              dias_interes := diasmes;
                           end if;
                           open curAnticipoMes(rectrabajadores.id_personal,
                                            recprestacionesmensuales.anio,
                                            recprestacionesmensuales.mes,1,dias_interes);
		           fetch curAnticipoMes into recAnticipoMes;	
			   if not found or recAnticipoMes.monto_anticipo is null then
		              recAnticipoMes.monto_anticipo:=0;
	                   end if;
		           close curAnticipoMes;
                           raise notice 'PASA 62 ';
                          
                           open curFideicomisoMes(rectrabajadores.id_trabajador,
                                  recprestacionesmensuales.anio,
                                  recprestacionesmensuales.mes,1,dias_interes);                
                           fetch curFideicomisoMes into recFideicomisoMes;	
		   	   if not found or recFideicomisoMes.monto_Fideicomiso is null then
		              recFideicomisoMes.monto_Fideicomiso:=0;
	                   end if;
		           close curFideicomisoMes;

                           
                           montoPrestaciones:= (recprestacionesmensuales.monto_prestaciones 
                                              + recprestacionesmensuales.monto_adicional);
                           
                           montoCapital:=(recInteresAcumulado.monto_prestaciones_acumuladas
                                  + recInteresAcumulado.monto_interes_acumulado)
                                  -(recAnticipoAcumulado.monto_anticipo_acumulado
                                    +recAnticipoMes.monto_anticipo
                                    +recFideicomisoAcumulado.monto_fideicomiso_acumulado
                                    +recFideicomisoMes.Monto_fideicomiso);
                           
                           raise notice 'PASA 63 ';
                          
                           tasa := 1 + (rectasabcv.tasa_promedio/100);
                           
                           tiempo := dias_interes/diasanio;
                           montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			   monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                 recAnticipoAcumulado.monto_anticipo_acumulado;
                           monto_fideicomiso_acumulado:=recFideicomisoMes.monto_fideicomiso +
                                 recfideicomisoAcumulado.monto_fideicomiso_acumulado;
                           monto_interes_acumulado:=recInteresAcumulado.monto_interes_acumulado
                                                    +montoInteresMensual;
                           monto_prestaciones_acumuladas:=               
                              recInteresAcumulado.monto_prestaciones_acumuladas;
          	           id := last_id_liquidacioninteresnuevoregimen()+1;
		           if id is null then 
		              id := 1;
		           end if;
                           perform add_liquidacioninteresnuevoregimen(id,
                                 recTrabajadores.id_trabajador, 
                                 recprestacionesmensuales.anio,
                                 recprestacionesmensuales.mes,
                                 dias_interes,
                                 rectasabcv.tasa_promedio,
                                 0,
                                 0,
                                 0,
                                 0,
                                 monto_prestaciones_acumuladas,
                                 MontoCapital,
                                 montoInteresMensual,
                                 monto_interes_acumulado,
                                 recAnticipoMes.monto_anticipo,
                                 monto_anticipo_acumulado,
                                 recFideicomisoMes.monto_fideicomiso,
                                 monto_fideicomiso_acumulado);		
            	           
                           dias_interes := diasmes -dias_interes;
                           
                           if dias_interes > 0 then
                              open curAnticipoMes(rectrabajadores.id_personal,
                                               recprestacionesmensuales.anio,
                                               recprestacionesmensuales.mes,
                                               dias_interes+1,31);
		              fetch curAnticipoMes into recAnticipoMes;	
			      if not found or recAnticipoMes.monto_anticipo is null then
		                 recAnticipoMes.monto_anticipo:=0;
	                      end if;
		              close curAnticipoMes;
                              open curFideicomisoMes(rectrabajadores.id_trabajador,
                                   recprestacionesmensuales.anio,
                              recprestacionesmensuales.mes,dias_interes+1,31);                
                              fetch curFideicomisoMes into recFideicomisoMes;	
		   	      if not found or recFideicomisoMes.monto_Fideicomiso is null then
		                 recFideicomisoMes.monto_Fideicomiso:=0;
	                      end if;
		              close curFideicomisoMes;


                              montoPrestaciones:= (
                                      recprestacionesmensuales.monto_prestaciones 
                                    + recprestacionesmensuales.monto_adicional);
                           
                              montoCapital:=(montoprestaciones +
                                         monto_interes_acumulado+
                                         recInteresAcumulado.monto_prestaciones_acumuladas)
                                         -(monto_anticipo_acumulado
                                         + recAnticipoMes.monto_anticipo
                                         + monto_fideicomiso_acumulado
                                         + recFideicomisoMes.Monto_fideicomiso);
                           
                              tasa := 1 + (rectasabcv.tasa_promedio/100);
                        
                                                    
                              tiempo := (diasmes -(diaingreso-1))/diasanio;
                              montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			
                              monto_interes_acumulado := monto_interes_acumulado +
                                                          montointeresmensual;
                              monto_prestaciones_acumuladas :=
                                      recInteresAcumulado.monto_prestaciones_acumuladas +
                                      montoprestaciones;
                              id := last_id_liquidacioninteresnuevoregimen()+1;
		              if id is null then 
		                 id := 1;
		              end if;
                              perform add_liquidacioninteresnuevoregimen(id,
                                    recTrabajadores.id_trabajador, 
                                    recprestacionesmensuales.anio,
                                    recprestacionesmensuales.mes,
                                    dias_interes,
                                    rectasabcv.tasa_promedio,
                                    recprestacionesmensuales.monto_prestaciones,
                                    recprestacionesmensuales.monto_adicional,
                                    recprestacionesmensuales.dias_mensuales,
                                    recprestacionesmensuales.dias_adicionales,
                                    monto_prestaciones_acumuladas,
                                    montoCapital,
                                    montoInteresMensual,
                                    monto_interes_acumulado,
                                    recAnticipoMes.monto_anticipo,
                                    monto_anticipo_acumulado,
                                    recFideicomisoMes.monto_fideicomiso,
                                    monto_fideicomiso_acumulado);		
                           end if;
             else
	                  raise notice 'PASA 7 ';
                          open curAnticipoMes(rectrabajadores.id_personal,
                                       recprestacionesmensuales.anio,
                                       recprestacionesmensuales.mes,1,31);                
                          fetch curAnticipoMes into recAnticipoMes;	
		   	  if not found or recAnticipoMes.monto_anticipo is null then
		             recAnticipoMes.monto_anticipo:=0;
	                  end if;
		          close curAnticipoMes;
  raise notice 'PASA 8 ';
                        
                          open curFideicomisoMes(rectrabajadores.id_trabajador,
                                       recprestacionesmensuales.anio,
                                       recprestacionesmensuales.mes,1,31);                
                          fetch curFideicomisoMes into recFideicomisoMes;	
		   	  if not found or recFideicomisoMes.monto_Fideicomiso is null then
		             recFideicomisoMes.monto_Fideicomiso:=0;
	                  end if;
		          close curFideicomisoMes;

  raise notice 'PASA 9 ';




                          if (anioingreso =recprestacionesmensuales.anio and
                              mesingreso = recprestacionesmensuales.mes) then
                              if diasmes <> 12 then
                              --if diasmes <> 13 then
                                 dias_interes :=diasmes - diaingreso;
                              else
                                 dias_interes := diasmes;
                              end if;
                          else
                             dias_interes := diasmes;
                          end if;
                          montoPrestaciones:= (recprestacionesmensuales.monto_prestaciones 
                                             + recprestacionesmensuales.monto_adicional);
                          montoCapital:=(montoprestaciones +
                                         recInteresAcumulado.monto_interes_acumulado+
                                         recInteresAcumulado.monto_prestaciones_acumuladas)
                                         -(
                                          recAnticipoAcumulado.monto_anticipo_acumulado
                                         +recAnticipoMes.monto_anticipo
                                         +recFideicomisoAcumulado.monto_fideicomiso_acumulado
                                         +recFideicomisoMes.Monto_fideicomiso);
                           
                          tasa := 1 + (rectasabcv.tasa_promedio/100);
                        
                          tiempo := dias_interes/diasanio;

raise notice 'PASA 91 ';
                          montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			  monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                recAnticipoAcumulado.monto_anticipo_acumulado;
                          monto_fideicomiso_acumulado:=recFideicomisoMes.monto_fideicomiso +
                                recfideicomisoAcumulado.monto_fideicomiso_acumulado;
                          monto_interes_acumulado:=recInteresAcumulado.monto_interes_acumulado

                                                    +montoInteresMensual;
raise notice 'PASA 92 ';

                          monto_prestaciones_acumuladas :=
                                          recInteresAcumulado.monto_prestaciones_acumuladas +
                                          montoprestaciones;
   raise notice 'PASA 10 ';
                        
		          id := last_id_liquidacioninteresnuevoregimen()+1;
		          if id is null then 
		             id := 1;
		          end if;
                          perform add_liquidacioninteresnuevoregimen(id,
                              recTrabajadores.id_trabajador, 
                              recprestacionesmensuales.anio,
                              recprestacionesmensuales.mes,
                              dias_interes,
                              rectasabcv.tasa_promedio,
                              recprestacionesmensuales.monto_prestaciones,
                              recprestacionesmensuales.monto_adicional,
                              recprestacionesmensuales.dias_mensuales,
                              recprestacionesmensuales.dias_adicionales,
                              monto_prestaciones_acumuladas,
                              montoCapital,
                              montoInteresMensual,
                              monto_interes_acumulado,
                              recAnticipoMes.monto_anticipo,
                              monto_anticipo_acumulado,
                              recFideicomisoMes.monto_fideicomiso,
                              monto_fideicomiso_acumulado);		
                       		
                      end if;
                      diasmensuales:= 
                            diasmensuales +recprestacionesmensuales.dias_mensuales;
                      diasadicionales:= 
                            diasadicionales +recprestacionesmensuales.dias_adicionales;
                             
                end loop;
                close curprestacionesmensuales;
                raise notice 'PASA 9 ';
                perform update_liquidacion_resumen_nuevo_regimen(
                              rectrabajadores.id_trabajador,
                              monto_prestaciones_acumuladas,
                              monto_interes_acumulado,
                              monto_anticipo_acumulado,
                              monto_fideicomiso_acumulado,
                              diasmensuales,
                              diasadicionales);		
        end loop;
        close curTrabajadores_4;

        raise notice 'PASA 10 ';

	delete from identity;

	return 1;
end;
$_$;


ALTER FUNCTION public.liquidar_interes_nuevo_regimen(integer, integer) OWNER TO postgres;

--
-- TOC entry 800 (class 1255 OID 183794)
-- Name: liquidar_interes_viejo_regimen(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION liquidar_interes_viejo_regimen(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
	pIdtrabajador                 alias for $2;

	recTrabajadores               record;
        recTasaBcv                    record;
        recHistoricoDevengadoIntegral record;
	recInteresAcumulado           record;
        recAnticipoMes                record;
        recAnticipoAcumulado          record;
	recParametroVarios            record;
        
        curTrabajadores_1 cursor (pIdTipoPersonal int4, PIdtrabajador int4)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,
                                    t.estatus,p.anios_servicio_apn,
                                    cp1.cod_categoria
		from trabajador t, personal p, tipopersonal tp, clasificacionpersonal cp, categoriapersonal cp1
		where t.id_personal = p.id_personal
		and t.id_tipo_personal = tp.id_tipo_personal
                and tp.id_clasificacion_personal = cp.id_clasificacion_personal
                and cp1.id_categoria_personal = cp.id_categoria_personal
                and t.id_tipo_personal = pIdtipopersonal
                and t.id_trabajador    = pIdtrabajador 
                and t.estatus = 'E'
                and p.deuda_regimen_derogado ='N'
                order by t.id_personal;
       ---
       ---
       ---Empleados es a partir del aÃ±o 1991 mes mayo
       ---Obreros a partir del aÃ±o 1975 mes mayo
       ---
       
        curHistoricoDevengadoIntegral cursor (pIdPersonal int4, paniomesdesde  int4)
		for select hd.anio,hd.mes,hd.sueldo_integral
		from historicodevengadoIntegral hd
		where hd.id_personal = pidpersonal
                  and (hd.anio * 100 + hd.mes) >=paniomesdesde 
                 order by  hd.anio,hd.mes;
       curTasaBcv cursor (panio int4, pmes int4)
		for select t.tasa_promedio,t.tasa_activa
		from tasabcv t
                where t.anio = panio
		and t.mes = pmes;
        
        curInteresAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(ivr.monto_interes_acumulado) as monto_interes_acumulado from liquidacioninteresviejoregimen ivr
                where ivr.id_trabajador = pidtrabajador
                  and ivr.anio = panio
		  and ivr.mes = pmes;
        
	curAnticipoMes cursor (pIdpersonal int4,panio int4, pmes int4,pdia1 int4,pdia2 int4)
		for select sum(avr.monto_anticipo) as monto_anticipo from anticipo avr
                where avr.id_personal = pidpersonal
                  and avr.anio = panio
		  and avr.mes = pmes
                  and extract(day from avr.fecha_anticipo) between pdia1 and pdia2
--
--Anticipos de Capital e intereses del viejo regimen que esten aprobados.
--
                  and (avr.tipo_anticipo='V' or avr.tipo_anticipo='F')
                  and avr.estatus ='A' ;  
        
        curAnticipoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(ivr.monto_anticipo_acumulado) as monto_anticipo_acumulado from liquidacioninteresviejoregimen ivr
                where ivr.id_trabajador = pidtrabajador
                  and ivr.anio = panio
		  and ivr.mes = pmes;

	
        
        montoPrestaciones           float8 :=0;	
	montoCapital                float8 :=0;	
	montoInteresMensual         float8 :=0;
        monto_Interes_Acumulado     float8 :=0;	
	monto_Anticipo_Acumulado    float8 :=0;	
        monto_transferencia         float8 :=0;
        tasa                        float8 :=0;
        tiempo                      float8 :=0;
        dias_interes                float8 :=0;
        diasmes                     float8 :=0;
        diasanio                    float8 :=0;
        aniobisiesto                int4   :=0;
        aniosiguientebisiesto       int4   :=0;
        anioingreso                 int4   :=0;
        aniomesdesde                int4   :=0;
        mesingreso                  int4   :=0;
        diaingreso                  float8 :=0;
        anioegreso                  int4   :=0;
        mesegreso                   int4   :=0;
        diaegreso                   float8 :=0;
        aniosservicios              int4   :=0;
        anioanterior                int4   :=0;
        mesanterior                 int4   :=0;
        anio_fin                    int4   :=0;
        mes_fin                     int4   :=0;
        id                          int4   :=0;
        sueldo_transferencia        float8 :=0;
        saldo_al_18061997           float8 :=0;
        pEstatus                    char:='E' ;
begin
	
    ----
    ----Return 11 no esta la tasa en tasabcv
    ----
    raise notice 'PASA 0 ';
	
    
	open curTrabajadores_1(pIdTipoPersonal, pIdtrabajador);
	loop
		fetch curTrabajadores_1 into recTrabajadores;	
		exit when not found;


                montoPrestaciones           :=0;	
	        montoCapital                :=0;	
	        montoInteresMensual         :=0;
                monto_Interes_Acumulado     :=0;	
	        monto_Anticipo_Acumulado    :=0;	
                monto_transferencia         :=0;
                sueldo_transferencia        :=0;
                saldo_al_18061997           :=0;
  
              if recTrabajadores.cod_categoria = 2 then
                 aniomesdesde := 1975;    --Obreros
              else
                 aniomesdesde := 1991;    --Empleados y Otros.
              end if;
	        anioingreso := extract(year from recTrabajadores.fecha_ingreso);
	        mesingreso := extract(month from recTrabajadores.fecha_ingreso);
	        diaingreso := extract(day from recTrabajadores.fecha_ingreso);
	        anioegreso := extract(year from recTrabajadores.fecha_egreso);
	        mesegreso := extract(month from recTrabajadores.fecha_egreso);
	        anio_fin :=1997;
                mes_fin:=6;
     
                
                if recTrabajadores.anios_servicio_apn < 0 then
                   recTrabajadores.anios_servicio_apn:=0;
                end if;
                                    

	        open curHistoricoDevengadoIntegral(recTrabajadores.id_personal,aniomesdesde);
		loop			
			fetch curHistoricoDevengadoIntegral into recHistoricoDevengadoIntegral;	
			exit when not found;
		
                	if (recHistoricoDevengadoIntegral.anio > anio_fin OR
		              (recHistoricoDevengadoIntegral.anio = anio_fin AND
                               recHistoricoDevengadoIntegral.mes > mes_fin)) THEN
	                    exit;
	                end if;

	                raise notice 'PASA 5 ';

                        aniosservicios := recHistoricoDevengadoIntegral.anio - anioingreso;
                        if (recHistoricoDevengadoIntegral.mes < mesingreso) or
                           (recHistoricoDevengadoIntegral.mes = mesingreso and
                            diaingreso > 1) then
                           aniosservicios := aniosservicios -1;
                        end if;

                        aniosservicios := aniosservicios+ recTrabajadores.anios_servicio_apn;
		        	

                	montoPrestaciones:= 0;	
			montoCapital := 0;	
			montoInteresMensual := 0;	
		
                        aniobisiesto :=0;
                        aniosiguientebisiesto:=0;
                        aniobisiesto:=bisiesto(recHistoricoDevengadoIntegral.anio);
                        aniosiguientebisiesto:=bisiesto(recHistoricoDevengadoIntegral.anio+1);
                        diasanio := 365;
                        if recHistoricoDevengadoIntegral.mes in (1,3,5,7,8,10,12) then
                           diasmes  :=31;
                        end if;
                        if recHistoricoDevengadoIntegral.mes in (4,6,9,11) then
                           diasmes  :=30;
                        end if;
                        if recHistoricoDevengadoIntegral.mes in (2) then
                           diasmes  :=28;
                           if aniobisiesto = 1 and recHistoricoDevengadoIntegral.mes < 5 THEN
                              diasanio:=366;
                              diasmes :=29;
                           end if;
                        end if;
	                raise notice  'PASA 6 ';

                        if recHistoricoDevengadoIntegral.anio = 1997 and
                           recHistoricoDevengadoIntegral.mes = 6 THEN
                           diasmes:=18;
                        end if;
                        if recHistoricoDevengadoIntegral.anio = 1996 and
                           recHistoricoDevengadoIntegral.mes = 12 THEN
                            sueldo_transferencia :=
                                 recHistoricoDevengadoIntegral.sueldo_integral;  
                        end if;
                        if aniosiguientebisiesto = 1 and 
                           recHistoricoDevengadoIntegral.mes > 4 THEN
                           diasanio:=366;
                        end if;
                                          
                        if aniobisiesto = 1 and 
                           recHistoricoDevengadoIntegral.mes <=4 THEN
                           diasanio:=366;
                        end if;
   
                        open curTasabcv(recHistoricoDevengadoIntegral.anio,
                                        recHistoricoDevengadoIntegral.mes);
		        fetch curtasabcv into rectasabcv;	
			if not found or rectasabcv.tasa_promedio is null then
		          return 11;
	                end if;
                        close curtasabcv;

                        anioanterior := recHistoricoDevengadoIntegral.Anio;
                        mesanterior  := recHistoricoDevengadoIntegral.mes -1;
                        
                        if mesanterior =0 THEN
                           anioanterior := recHistoricoDevengadoIntegral.Anio -1;
                           mesanterior  := 12;
                        end if;
 	                raise notice 'PASA 7 ';

                        open curInteresAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,
                                                 mesanterior);
		        fetch curInteresACumulado into recInteresAcumulado;	
			if not found or recinteresacumulado.monto_interes_acumulado is null then
		          recinteresacumulado.monto_interes_acumulado:=0;
	                end if;
		        close curInteresAcumulado;

                        open curAnticipoAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,
                                                 mesanterior);
		        fetch curAnticipoACumulado into recAnticipoAcumulado;	
			if not found or recAnticipoAcumulado.monto_anticipo_acumulado is null then
		          recAnticipoAcumulado.monto_anticipo_acumulado:=0;
	                end if;
                        close curAnticipoAcumulado;
		        
                        if (mesingreso = rechistoricoDevengadoIntegral.mes 
                                   and diaingreso > 1) THEN
                           dias_interes := diaingreso -1;
                           if dias_interes > diasmes then
                              dias_interes := diasmes;
                           end if;
                           open curAnticipoMes(rectrabajadores.id_personal,
                                            recHistoricoDevengadoIntegral.anio,
                                            recHistoricoDevengadoIntegral.mes,1,dias_interes);
		           fetch curAnticipoMes into recAnticipoMes;	
			   if not found or recAnticipoMes.monto_anticipo is null then
		              recAnticipoMes.monto_anticipo:=0;
	                   end if;
		           close curAnticipoMes;

                           montoPrestaciones:= (recHistoricoDevengadoIntegral.sueldo_integral 
                                            * aniosservicios);
                           monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                                     recAnticipoAcumulado.monto_anticipo_acumulado;
                           
                           montoCapital:=(montoprestaciones +
                                      recInteresAcumulado.monto_interes_acumulado)-
                                      monto_anticipo_acumulado;
                           tasa := 1 + (rectasabcv.tasa_promedio/100);
                           
                           tiempo := dias_interes/diasanio;
                           montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			   monto_interes_acumulado:=recInteresAcumulado.monto_interes_acumulado
                                                    +montoInteresMensual;
 
                           id := last_id_liquidacioninteresviejoregimen()+1;
		           if id is null then 
		              id := 1;
		           end if;
                           perform add_liquidacioninteresviejoregimen(id,
                           recTrabajadores.id_trabajador, 
                           recHistoricoDevengadoIntegral.anio,
                           recHistoricoDevengadoIntegral.mes,
                           dias_interes,
                           recHistoricoDevengadoIntegral.sueldo_integral,
                           rectasabcv.tasa_promedio,
                           aniosservicios,
                           montoPrestaciones,
                           montoCapital,
                           montoInteresMensual,
                           monto_interes_acumulado,
                           recAnticipoMes.monto_anticipo,
                           monto_anticipo_acumulado);		
            	
                           aniosservicios := aniosservicios +1;
                           dias_interes := diasmes -dias_interes;
                           if dias_interes > 0 then
                             open curAnticipoMes(rectrabajadores.id_personal,
                                              recHistoricoDevengadoIntegral.anio,
                                              recHistoricoDevengadoIntegral.mes,
                                              dias_interes+1,31);
		             fetch curAnticipoMes into recAnticipoMes;	
			     if not found or recAnticipoMes.monto_anticipo is null then
		                recAnticipoMes.monto_anticipo:=0;
	                     end if;
		             close curAnticipoMes;
                             monto_anticipo_acumulado := monto_anticipo_acumulado +
                                                         recAnticipomes.monto_anticipo;
                             montoPrestaciones:= (recHistoricoDevengadoIntegral.sueldo_integral 
                                            * aniosservicios);
                             montoCapital:=(montoprestaciones +
                                            monto_interes_acumulado)-
                             (monto_anticipo_acumulado);

                           
                             tiempo := (diasmes -(diaingreso-1))/diasanio;
                             montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			
                             monto_interes_acumulado:=monto_interes_acumulado+
                                                      MontoInteresMensual;
                             
		             id := last_id_liquidacioninteresviejoregimen()+1;
		             if id is null then 
		                id := 1;
		             end if;
                             perform add_liquidacioninteresviejoregimen(id,
                             recTrabajadores.id_trabajador, 
                             recHistoricoDevengadoIntegral.anio,
                             recHistoricoDevengadoIntegral.mes,
                             dias_interes,
                             recHistoricoDevengadoIntegral.sueldo_integral,
                             rectasabcv.tasa_promedio,
                             aniosservicios,
                             montoPrestaciones,
                             montoCapital,
                             montoInteresMensual,
                             monto_interes_acumulado,
                             recAnticipoMes.monto_anticipo,
                             monto_anticipo_acumulado);		
                          end if;
             else
	                  raise notice 'PASA 8 ';
                          open curAnticipoMes(rectrabajadores.id_personal,
                                       recHistoricoDevengadoIntegral.anio,
                                       recHistoricoDevengadoIntegral.mes,1,31);                
                          fetch curAnticipoMes into recAnticipoMes;	
		   	  if not found or recAnticipoMes.monto_anticipo is null then
		             recAnticipoMes.monto_anticipo:=0;
	                  end if;
		          close curAnticipoMes;

                          dias_interes := diasmes;
                          montoPrestaciones:= (recHistoricoDevengadoIntegral.sueldo_integral 
                                            * aniosservicios);
                          montoCapital:=(montoprestaciones +
                                         recInteresAcumulado.monto_interes_acumulado)
                                         -(recAnticipoAcumulado.monto_anticipo_acumulado
                                         +recAnticipoMes.monto_anticipo);
                           
                          tasa := 1 + (rectasabcv.tasa_promedio/100);
                        
                          tiempo := dias_interes/diasanio;

                          montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			  monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                recAnticipoAcumulado.monto_anticipo_acumulado;
                          monto_interes_acumulado:=recInteresAcumulado.monto_interes_acumulado
                                                    +montoInteresMensual;
 
		          id := last_id_liquidacioninteresviejoregimen()+1;
		          if id is null then 
		             id := 1;
		          end if;

                          perform add_liquidacioninteresviejoregimen(id,
                           recTrabajadores.id_trabajador, 
                           recHistoricoDevengadoIntegral.anio,
                           recHistoricoDevengadoIntegral.mes,
                           dias_interes,
                           recHistoricoDevengadoIntegral.sueldo_integral,
                           rectasabcv.tasa_promedio,
                           aniosservicios,
                           montoPrestaciones,
                           montoCapital,
                           montoInteresMensual,
                           monto_interes_acumulado,
                           recAnticipoMes.monto_anticipo,
                           monto_anticipo_acumulado);		
                    end if;
                end loop;
                close curHistoricoDevengadoIntegral;
                if sueldo_transferencia = 0 AND
                   recHistoricoDevengadoIntegral.sueldo_integral is not null THEN
                   sueldo_transferencia := recHistoricoDevengadoIntegral.sueldo_integral;
                end if;
                id := last_id_liquidacionresumenviejoregimen()+1;
		if id is null then 
                   id := 1;
		end if;
                if sueldo_transferencia <> 0 THEN
                   if sueldo_transferencia > 300000 then
                      sueldo_transferencia := 300000;
                   end if;
                   if sueldo_transferencia < 15000 then
                      sueldo_transferencia := 15000;
                   end if;
                end if;
                if aniosservicios > 13 then
                   aniosservicios :=13;
                end if;
                monto_transferencia := sueldo_transferencia * aniosservicios;
                saldo_al_18061997 := montoprestaciones + monto_interes_acumulado +
                                     monto_transferencia - monto_anticipo_acumulado;

		raise notice 'PASA 9 ';

                IF saldo_al_18061997 <> 0 AND saldo_al_18061997 is not null then
                   perform add_liquidacionresumenviejoregimen(id,
                              rectrabajadores.id_trabajador,
                              sueldo_transferencia,
                              aniosservicios,
                              montoprestaciones,
                              monto_interes_acumulado,
                              monto_anticipo_acumulado,
                              monto_transferencia,
                              saldo_al_18061997,0);
              END IF;		
	        
        
        end loop;
        close curTrabajadores_1;

        raise notice 'PASA 10 ';

        perform liquidar_interes_adicional
                   (pIdTipoPersonal,pIdtrabajador,anioegreso,mesegreso);
       
        
        raise notice 'PASA 11 ';

        delete from identity;

	return 1;
end;
$_$;


ALTER FUNCTION public.liquidar_interes_viejo_regimen(integer, integer) OWNER TO postgres;

--
-- TOC entry 802 (class 1255 OID 183796)
-- Name: liquidar_trabajador(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION liquidar_trabajador(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
	pIdtrabajador                 alias for $2;

begin
	
     raise notice 'PASA 00 ';

        ----
        ----  Se elimina de las tablas de interes de viejo y nuevo regimen
        ----  donde se mantiene la deuda total del organismo.
        ----
	delete from interesviejoregimen 
           where id_trabajador =Pidtrabajador;
 
	delete from resumenviejoregimen
           where id_trabajador =Pidtrabajador;

 	delete from interesadicional
            where id_trabajador =Pidtrabajador;
        
        delete from interesnuevoregimen 
           where id_trabajador =Pidtrabajador;
 
        delete from resumennuevoregimen
           where id_trabajador =Pidtrabajador;

        ---
        ---Se elimina de las tablas de calculo de la
        ---liquidacion para llenar nuevamente en el proceso.
        ---
	delete from liquidacioninteresviejoregimen 
              where id_trabajador =Pidtrabajador;

	delete from liquidacionresumenviejoregimen
           where id_trabajador =Pidtrabajador;

       	delete from liquidacioninteresadicional
           where id_trabajador =Pidtrabajador;
 	
        delete from liquidacioninteresnuevoregimen 
           where id_trabajador =Pidtrabajador;

        delete from liquidacionresumennuevoregimen 
           where id_trabajador =Pidtrabajador;

        delete from liquidacionprestacionesmensuales 
           where id_trabajador =Pidtrabajador;

        raise notice 'va a entrar 01 ';


        perform liquidar_interes_viejo_regimen
           (pIdTipoPersonal,pidtrabajador);
        raise notice 'va a entrar 02 ';
        
       
        perform liquidar_prestaciones_historico(pIdTipopersonal,Pidtrabajador);
        raise notice 'va a entrar 03 ';

        perform liquidar_interes_nuevo_regimen (pIdTipopersonal,Pidtrabajador);
        
        
        raise notice 'va a entrar 04 ';

        delete from identity;

        return 1;

end;
$_$;


ALTER FUNCTION public.liquidar_trabajador(integer, integer) OWNER TO postgres;

--
-- TOC entry 803 (class 1255 OID 183797)
-- Name: pagar_guarderias(integer, date, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pagar_guarderias(integer, date, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
	
	pIdTipoPersonal ALIAS FOR $1;
	pFecha ALIAS FOR $2;
	pTipoConcepto ALIAS FOR $3;
	pInscripcion ALIAS FOR $4;

	curFamiliar refcursor;
	recFamiliar record;

	curPersonal refcursor;
	recPersonal record;

	recParametros record;
	recIdentificadores record;

	fechaDesde date;
	fechaHasta date;
	fechaActual date;		
	
	montoPatron float8;
	montoConcepto float8;

	idConceptoVariable int4;
	idPagoGuarderia int4;	
	validado bool;
        inserto bool;
        quienCobra varchar(1);

	anioProceso int4;
	mesProceso int4;
begin

        inserto := FALSE;
        ---
        ---Selecciona el concepto por tipo de personal predefinido de guarderias
        ---
	SELECT INTO recIdentificadores id_concepto_tipo_personal, id_frecuencia_tipo_personal 
		FROM ConceptoTipoPersonal AS ctp INNER JOIN concepto AS c USING (id_concepto)
		WHERE c.cod_concepto = '4008' AND
			ctp.id_tipo_personal = pIdTipoPersonal;

        ---
        ---Selecciona los parametros del  tipo de personal 
        ---
	SELECT INTO recParametros  edad_maxima,  monto_patron, quien_cobra, pago_nomina 
		FROM parametroguarderia 
		WHERE id_tipo_personal = pIdTipoPersonal;

		fechaDesde = add_years(pFecha, -recParametros.edad_maxima);	
		montoPatron = recParametros.monto_patron;

        quienCobra := 'A';
	IF recParametros.quien_cobra = 'M' THEN
           quienCobra := 'F';
        END IF;
        IF recParametros.quien_cobra = 'P' THEN
           quienCobra := 'M';
        END IF;

	
	fechaActual = current_date;
	anioProceso = extract(day from pFecha);
	mesProceso = extract(month from pFecha);

        ---
        ---Abre el cursor para seleccionar a los hijos de los trabajadores
        ---activos del tipo de personal
        ---
	OPEN curPersonal FOR 
		SELECT p.id_personal, MAX(t.id_trabajador) as id_trabajador, MAX(p.sexo) as sexo
			FROM guarderiafamiliar AS gf, familiar AS f, personal AS p, 
			trabajador AS t
			WHERE gf.id_familiar = f.id_familiar AND
				f.id_personal = p.id_personal AND
				p.id_personal = t.id_personal AND				
				f.fecha_nacimiento BETWEEN fechaDesde AND pFecha AND
				t.id_tipo_personal = pIdTipoPersonal AND
				f.parentesco = 'H' AND
				t.estatus = 'A'
	GROUP BY (p.id_personal);

	idConceptoVariable = last_id_conceptovariable();
        IF idConceptoVariable is null THEN
           idConceptoVariable:=1;
        END IF;	
	idPagoGuarderia = last_id_pagoguarderia();	
	montoConcepto = 0;

	LOOP
		FETCH curPersonal INTO recPersonal;
		EXIT WHEN NOT FOUND;
		validado = TRUE;
                ---
                ---Verifica quien cobra el beneficio (Padre, Madre o Ambos)
                ---
		IF quienCobra <> recPersonal.sexo AND 
			recParametros.quien_cobra <> 'A' THEN
			IF  (validar_conyuge(recPersonal.id_personal)=0) THEN
				validado = TRUE;
			ELSE
				validado = FALSE;
			END IF;
		END IF;
                ---
                ---Validado el titular
                ---
		IF validado = TRUE THEN
			OPEN curFamiliar FOR 
				SELECT gf.monto_mensualidad, gf.monto_inscripcion, gf.id_familiar, gf.id_guarderia
				FROM guarderiafamiliar AS gf INNER JOIN familiar as f USING (id_familiar)
				WHERE f.id_personal = recPersonal.id_personal
				AND f.fecha_nacimiento BETWEEN fechaDesde AND pFecha AND
				f.parentesco = 'H';
			
			LOOP
				
				FETCH curFamiliar INTO recFamiliar;
				EXIT WHEN NOT FOUND;	
                                ---
                                ---Si es inscripcion
                                ---		
				IF pInscripcion = 'S' THEN
					IF recFamiliar.monto_inscripcion > montoPatron THEN
						montoConcepto = montoConcepto + montoPatron;
					ELSE
						montoConcepto = montoConcepto + recFamiliar.monto_inscripcion;
					END IF;
				ELSE
					IF recFamiliar.monto_mensualidad > montoPatron THEN
						montoConcepto = montoConcepto + montoPatron;
					ELSE
						montoConcepto = montoConcepto + recFamiliar.monto_mensualidad;
					END IF;
				END IF;
				IF recParametros.pago_nomina = 'N' THEN
					idPagoGuarderia = idPagoGuarderia + 1;
					INSERT INTO pagoguarderia (id_pago_guarderia, id_personal, id_familiar,
					id_guarderia, anio, mes, monto, inscripcion) values(idPagoGuarderia, 
					recPersonal.id_personal, recFamiliar.id_familiar, recFamiliar.id_guarderia,
					anioProceso, mesProceso, montoConcepto, pInscripcion);
					
				END IF;
						
			END LOOP;
			CLOSE curFamiliar;
		END IF;
                ---
                ---(Si Grabar en Variables o esta la inscripcion) y esta validado, y
                ---se paga por nomina se graba en conceptos variables.
                ---
		IF (pTipoConcepto = 'V') OR pInscripcion = 'S' AND validado = TRUE 
			AND recParametros.pago_nomina = 'S' THEN			
			idConceptoVariable = idConceptoVariable + 1;
			INSERT INTO conceptovariable
				(id_concepto_variable,
				id_trabajador,
				id_concepto_tipo_personal,
				id_frecuencia_tipo_personal,
				monto,
				fecha_registro,
				estatus)
			VALUES (
				idConceptoVariable,
				recPersonal.id_trabajador,
				recIdentificadores.id_concepto_tipo_personal,
				recIdentificadores.id_frecuencia_tipo_personal,
				montoConcepto,
				fechaActual,
				'A');
                        inserto :=true;
		END IF;

	END LOOP;
	CLOSE curPersonal;

        ---
         
        IF inserto=TRUE THEN
            UPDATE identity set last = idConceptoVariable
               WHERE name ='ConceptoVariable';
        END IF;			

	return 0;
end;
$_$;


ALTER FUNCTION public.pagar_guarderias(integer, date, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 804 (class 1255 OID 183799)
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
    LANGUAGE c
    AS '$libdir/plpgsql', 'plpgsql_call_handler';


ALTER FUNCTION public.plpgsql_call_handler() OWNER TO postgres;

--
-- TOC entry 805 (class 1255 OID 183800)
-- Name: registrar_anticipos(integer, integer, integer, date, double precision, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION registrar_anticipos(integer, integer, integer, date, double precision, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdTipoPersonal alias for $1;
	pAnio alias for $2;
	pMes alias for $3;
	pFechaAnticipo alias for $4;
	pMontoAnticipo alias for $5;
	pTipoAnticipo alias for $6;
	pFormaAnticipo alias for $7;		
	
	recTrabajadores record;
	curTrabajadores cursor (piTipoPersonal int4) 
		for select t.id_personal 		
		from trabajador t
		where t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A';

	id int4 := 0;

begin
	id := (select max(id_anticipo) from anticipo);
	if id is null THEN
		id := 0;	
	end if;

	open curTrabajadores (pIdTipoPersonal);

	loop
		fetch curTrabajadores into recTrabajadores;			
		exit when not found;		
		id := id + 1;
		insert into anticipo (id_anticipo, id_personal, id_tipo_personal, anio, mes, fecha_anticipo, 
			monto_anticipo, tipo_anticipo, forma_anticipo) values (id, recTrabajadores.id_personal, 
			pIdTipoPersonal, pAnio, pMes, pFechaAnticipo, pMontoAnticipo, pTipoAnticipo, pFormaAnticipo);
		
		
	end loop;
	close curTrabajadores;
		
	delete from identity;

	return 0;

end;

$_$;


ALTER FUNCTION public.registrar_anticipos(integer, integer, integer, date, double precision, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 806 (class 1255 OID 183801)
-- Name: restituir_conceptofijo(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION restituir_conceptofijo(integer) RETURNS void
    LANGUAGE sql
    AS $_$
	update conceptofijo set unidades=unidades_restituir, monto=monto_restituir, restituir= 'N', 
	unidades_restituir=0, monto_restituir=0 where restituir= 'S' and 
	id_concepto_fijo in (select id_concepto from ultimanomina where id_grupo_nomina= $1 and numero_nomina=0)
		  
$_$;


ALTER FUNCTION public.restituir_conceptofijo(integer) OWNER TO postgres;

--
-- TOC entry 807 (class 1255 OID 183802)
-- Name: reversar_nomina(integer, integer, date, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION reversar_nomina(integer, integer, date, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare 

	pIdGrupoNomina alias for $1;
	pNumeroNomina alias for $2;
	pFechaInicio alias for $3;
	pPeriodicidad alias for $4;
	
	diaInicio int4:= 0;
	id int4 := 0;


	curConceptoVariable cursor (key1 int4, key2 int4) for select distinct un.id_ultima_nomina,
		un.id_trabajador, un.id_concepto_tipo_personal, un.id_frecuencia_tipo_personal,
		un.unidades, un.monto_asigna, un.monto_deduce, un.documento_soporte, fp.cod_frecuencia_pago 
		from ultimanomina un, frecuenciatipopersonal ftp, frecuenciapago fp
		where un.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and numero_nomina = key1 and id_grupo_nomina = key2 and origen = 'V';
	recConceptoVariable record;
	
	curConceptoFijoDeduce cursor (key1 int4, key2 int4) for select distinct un.id_ultima_nomina,
		un.id_trabajador, un.id_concepto, un.unidades, un.monto_deduce
		from ultimanomina un, conceptofijo cf		
		where un.id_concepto = cf.id_concepto_fijo
		and cf.monto <> un.monto_deduce
		and un.monto_deduce <> 0
		and un.numero_nomina = key1 and un.id_grupo_nomina = key2 and un.origen = 'F';
	recConceptoFijoDeduce record;

	curConceptoFijoAsigna cursor (key1 int4, key2 int4) for select distinct un.id_ultima_nomina,
		un.id_trabajador, un.id_concepto, un.unidades, un.monto_asigna 
		from ultimanomina un, conceptofijo cf		
		where un.id_concepto = cf.id_concepto_fijo
		and cf.monto <> un.monto_asigna
		and un.monto_asigna <> 0
		and un.numero_nomina = key1 and un.id_grupo_nomina = key2 and un.origen = 'F';
	recConceptoFijoAsigna record;

	curPrestamo cursor (key1 int4, key2 int4) for select distinct un.id_ultima_nomina,
		un.id_trabajador, un.id_concepto, un.monto_deduce, p.estatus 
		from ultimanomina un, prestamo p		
		where un.id_concepto = p.id_prestamo		
		and un.numero_nomina = key1 and un.id_grupo_nomina = key2 and un.origen = 'P';
	recPrestamo record;
begin
	diaInicio :=extract(DAY from pFechaInicio);
	open curConceptoVariable(pNumeroNomina, pIdGrupoNomina);				
		loop
			fetch curConceptoVariable into recConceptoVariable;			
			exit when not found;
			id := 0;
			if pPeriodicidad = 'Q' and not(diaInicio = 1 and recConceptoVariable.cod_frecuencia_pago = 3) then
				id := last_id_conceptovariable()+1;
				if recConceptoVariable.monto_asigna <> 0 then									
					perform add_conceptovariable(
						id,
						recConceptoVariable.id_trabajador,
						recConceptoVariable.id_concepto_tipo_personal,
						recConceptoVariable.id_frecuencia_tipo_personal,
						recConceptoVariable.unidades,
						recConceptoVariable.monto_asigna,
						pFechaInicio,
						recConceptoVariable.documento_soporte,
						'A');						
				else					
					perform add_conceptovariable(
						id,
						recConceptoVariable.id_trabajador,
						recConceptoVariable.id_concepto_tipo_personal,
						recConceptoVariable.id_frecuencia_tipo_personal,
						recConceptoVariable.unidades,
						recConceptoVariable.monto_deduce,
						pFechaInicio,
						recConceptoVariable.documento_soporte,
						'A');

				end if;
			end if;
			
		end loop;
	close curConceptoVariable;
	open curConceptoFijoDeduce(pNumeroNomina, pIdGrupoNomina);
		loop
			fetch curConceptoFijoDeduce into recConceptoFijoDeduce;			
			exit when not found;			
			perform update_conceptofijo(
				recConceptoFijoDeduce.id_concepto,
				recConceptoFijoDeduce.monto_deduce,
				recConceptoFijoDeduce.unidades);
		end loop;
	close curConceptoFijoDeduce;
	open curConceptoFijoAsigna(pNumeroNomina, pIdGrupoNomina);
		loop
			fetch curConceptoFijoAsigna into recConceptoFijoAsigna;			
			exit when not found;			
			perform update_conceptofijo(
				recConceptoFijoAsigna.id_concepto,
				recConceptoFijoAsigna.monto_asigna,
				recConceptoFijoAsigna.unidades);
		end loop;
	close curConceptoFijoAsigna;
	if pNumeroNomina = 0 then
		open curPrestamo(pNumeroNomina, pIdGrupoNomina);
			loop
				fetch curPrestamo into recPrestamo;			
				exit when not found;			
				if recPrestamo.estatus = 'P' then
					perform update_prestamo(
						recPrestamo.id_concepto,
						recPrestamo.monto_deduce,
						'A');
				else
					perform update_prestamo(
						recPrestamo.id_concepto,
						recPrestamo.monto_deduce);
				end if;
			end loop;
		close curPrestamo;
		id:= 0;
		id:= last_id_seguridad_ordinaria_by_gruponomina(pIdGrupoNomina);
		perform delete_seguridadordinaria(id);
		
	end if;
	
	return diaInicio;


end ;
$_$;


ALTER FUNCTION public.reversar_nomina(integer, integer, date, character varying) OWNER TO postgres;

--
-- TOC entry 808 (class 1255 OID 183803)
-- Name: reversar_nomina(integer, integer, date, character varying, integer, integer, integer, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION reversar_nomina(integer, integer, date, character varying, integer, integer, integer, boolean) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
---
---Proceso utilizado para el reversar la ultima nomina procesada de cualquier
---grupo de nomina.
---
declare 

	pIdGrupoNomina alias for $1;
	pNumeroNomina alias for $2;
	pFechaInicio alias for $3;
	pPeriodicidad alias for $4;
        panio  alias for $5;
        pmes   alias for $6;
        psemanaquincena alias for $7;
        pproceso alias for $8;
	
	diaInicio int4:= 0;
	id int4 := 0;
        reversar boolean := false;


	curTrabajador cursor (pNumeroNomina int4, pIdGrupoNomina int4) 
		for select distinct  t.id_trabajador, hn.lunes_retroactivo, 
		hn.lunes_primera, hn.lunes_segunda, hn.hay_retroactivo
		from ultimanomina un, historiconomina hn, trabajador t
		where t.id_trabajador = hn.id_trabajador
		and un.id_trabajador = hn.id_trabajador
		and un.numero_nomina = pNumeroNomina 
                and un.id_grupo_nomina = pIdGrupoNomina
                and hn.anio = pAnio
                and hn.mes  = pMes
                and hn.semana_quincena = pSemanaQuincena;
                
	recTrabajador record;

	curConceptoVariable cursor (pNumeroNomina int4, pIdGrupoNomina int4) for 
             select un.id_trabajador, un.id_concepto_tipo_personal, un.id_frecuencia_tipo_personal,
		un.unidades, un.monto_asigna, un.monto_deduce, un.documento_soporte,
               fp.cod_frecuencia_pago,
		un.anio_sobretiempo, un.mes_sobretiempo
		from ultimanomina un, frecuenciatipopersonal ftp, frecuenciapago fp
		where un.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and numero_nomina = pNumeroNomina 
                and id_grupo_nomina = pIdGrupoNomina 
                and origen = 'V';
	recConceptoVariable record;
	
	curConceptoFijoBorrados cursor (pNumeroNomina int4, pIdGrupoNomina int4) for 
           select un.id_trabajador, un.id_concepto_tipo_personal, 
                un.id_frecuencia_tipo_personal,
                un.unidades, un.monto_asigna ,un.monto_deduce,un.documento_soporte
		from ultimanomina un
               where un.numero_nomina = pNumeroNomina 
                and un.id_grupo_nomina = pIdGrupoNomina 
                and un.origen = 'F'
                and un.id_concepto NOT IN
              (select distinct cf.id_concepto_fijo from conceptofijo cf
                   where cf.id_trabajador in 
                        (select distinct un2.id_trabajador from ultimanomina un2
                             where un2.numero_nomina = pNumeroNomina 
                               and un2.id_grupo_nomina = pIdGrupoNomina));
	recConceptoFijoBorrados record;

        curConceptoFijoDeduce cursor (pNumeroNomina int4, pIdGrupoNomina int4) for 
          select un.id_trabajador, un.id_concepto, un.unidades, un.monto_deduce,
                cf.monto as monto_restituir,cf.unidades as unidades_restituir
		from ultimanomina un, conceptofijo cf		
		where un.id_concepto = cf.id_concepto_fijo
		and cf.monto <> un.monto_deduce
		and un.monto_deduce <> 0
		and un.numero_nomina = pNumeroNomina 
                and un.id_grupo_nomina = pIdGrupoNomina 
                and un.origen = 'F';
	recConceptoFijoDeduce record;

	curConceptoFijoAsigna cursor (pNumeroNomina int4, pIdGrupoNomina int4) for 
           select un.id_trabajador, un.id_concepto, un.unidades, un.monto_asigna,
                cf.monto as monto_restituir,cf.unidades as unidades_restituir
		from ultimanomina un, conceptofijo cf		
		where un.id_concepto = cf.id_concepto_fijo
		and cf.monto <> un.monto_asigna
		and un.monto_asigna <> 0
		and un.numero_nomina = pNumeroNomina 
                and un.id_grupo_nomina = pIdGrupoNomina 
                and un.origen = 'F';
	recConceptoFijoAsigna record;


	curPrestamo cursor (pNumeroNomina int4, pIdGrupoNomina int4) for 
            select un.id_trabajador, un.id_concepto, un.monto_deduce 
		from ultimanomina un, prestamo p		
		where un.id_concepto = p.id_prestamo		
		and un.numero_nomina = pNumeroNomina 
                and un.id_grupo_nomina = pIdGrupoNomina 
                and un.origen = 'P';
	recPrestamo record;


begin
	diaInicio :=extract(DAY from pFechaInicio);


        ---
        ---Actualiza los indicadores de retroactivo del trabajador.
        ---
        open curTrabajador(pNumeroNomina, pIdGrupoNomina);				
	loop
	   fetch curTrabajador into recTrabajador;			
	   exit when not found;
           reversar=true;  ---hay datos en ultima nomina
	   perform update_lunes_reverso_nomina(
                  recTrabajador.id_trabajador,
                  recTrabajador.lunes_retroactivo,
                  recTrabajador.hay_retroactivo,
                  recTrabajador.lunes_primera,
                  recTrabajador.lunes_segunda);
	end loop;
	close curTrabajador;
        
     

        ---
        ---Recupera los conceptos variables eliminados.
        ---
	open curConceptoVariable(pNumeroNomina, pIdGrupoNomina);				
	loop
	   fetch curConceptoVariable into recConceptoVariable;			
	   exit when not found;
	   id := 0;
	   if pPeriodicidad = 'Q' and not(diaInicio = 1 and
              recConceptoVariable.cod_frecuencia_pago = 3) then
	      id := last_id_conceptovariable()+1;
	      perform add_conceptovariable_reverso_nomina(id,
		      recConceptoVariable.id_trabajador,
		      recConceptoVariable.id_concepto_tipo_personal,
		      recConceptoVariable.id_frecuencia_tipo_personal,
		      recConceptoVariable.unidades,
		      recConceptoVariable.monto_asigna+recConceptoVariable.monto_deduce,
		      pFechaInicio,
		      recConceptoVariable.documento_soporte,
		      'A', 
		      recConceptoVariable.anio_sobretiempo,
                      recConceptoVariable.mes_sobretiempo);  
            else  
              id := last_id_conceptovariable()+1;
	      perform add_conceptovariable_reverso_nomina(id,
		      recConceptoVariable.id_trabajador,
		      recConceptoVariable.id_concepto_tipo_personal,
		      recConceptoVariable.id_frecuencia_tipo_personal,
		      recConceptoVariable.unidades,
		      recConceptoVariable.monto_asigna+recConceptoVariable.monto_deduce,
		      pFechaInicio,
		      recConceptoVariable.documento_soporte,
		      'A', 
		      recConceptoVariable.anio_sobretiempo,
                      recConceptoVariable.mes_sobretiempo);  
       	    end if;
	end loop;
	close curConceptoVariable;
 
       

        ---
        ---Recupera los conceptos fijos eliminados por tener fecha eliminar
        ---en la nomina cerrada.
        ---
        open curConceptoFijoBorrados(pNumeroNomina, pIdGrupoNomina);				
        loop
           fetch curConceptoFijoBorrados into recConceptoFijoBorrados;			
           exit when not found;
           id := 0;
           id := last_id_ConceptoFijo()+1;
            perform add_conceptofijo_reverso_nomina(
                id,
                recConceptoFijoBorrados.id_trabajador,
                recConceptoFijoBorrados.id_concepto_tipo_personal,
                recConceptoFijoBorrados.id_frecuencia_tipo_personal,
                recConceptoFijoBorrados.unidades,
                recConceptoFijoBorrados.monto_asigna+recConceptoFijoBorrados.monto_deduce,
                pFechaInicio,
                recConceptoFijoBorrados.documento_soporte,'A'); 				
        end loop;
        close curConceptoFijoBorrados;

        ---
        ---   Recupera el valor de las deducciones en
        ---   conceptos fijos modificados posterior al cierre de nomina
        ---
	open curConceptoFijoDeduce(pNumeroNomina, pIdGrupoNomina);
		loop
			fetch curConceptoFijoDeduce into recConceptoFijoDeduce;			
			exit when not found;			
			perform update_conceptofijo_reverso_nomina(
				recConceptoFijoDeduce.id_concepto,
				recConceptoFijoDeduce.monto_deduce,
				recConceptoFijoDeduce.unidades,
                                recConceptoFijoDeduce.monto_restituir,
                                recConceptoFijoDeduce.unidades_restituir,'S');
		end loop;
	close curConceptoFijoDeduce;

        ---
        ---   Recupera el valor de las asignaciones en
        ---   conceptos fijos modificados posterior al cierre de nomina
        ---
	open curConceptoFijoAsigna(pNumeroNomina, pIdGrupoNomina);
		loop
			fetch curConceptoFijoAsigna into recConceptoFijoAsigna;			
			exit when not found;			
			perform update_conceptofijo_reverso_nomina(
				recConceptoFijoAsigna.id_concepto,
				recConceptoFijoAsigna.monto_asigna,
				recConceptoFijoAsigna.unidades,
                                recConceptoFijoAsigna.monto_restituir,
                                recConceptoFijoAsigna.unidades_restituir,'S');
		end loop;
	close curConceptoFijoAsigna;

      

        ---
        ---  Reverso de los prestamos.  Activa los pagados en el periodo cerrado,
        ---  rebaja un monto de cuota al monto pagado y rebaja 1 el numero
        ---  de cuotas pagadas
        ---
	if pNumeroNomina = 0 then   ---Nomina ordinaria
		open curPrestamo(pNumeroNomina, pIdGrupoNomina);
			loop
				fetch curPrestamo into recPrestamo;			
				exit when not found;			
				perform update_prestamo_reverso_nomina(
						recPrestamo.id_concepto,
						recPrestamo.monto_deduce);
			end loop;
		close curPrestamo;

	end if;
	
        ---
        ---Si existe nomina por reversar(hay datos en ultimanomina)
        ---
        if (reversar)  then
           if pNumeroNomina = 0 then
              ----
              ----Borrar el ultimo registro de seguridad ordinaria
              ----
              id:= 0;
	      id:= last_id_seguridadordinaria_reverso(pIdGrupoNomina);
	      perform delete_seguridadordinaria(id);
           else
              ---
              ---Colocar el estatus como por procesar
              ---
              perform update_ultimanominaordinaria_reverso(pIdGrupoNomina,pNumeroNomina,'A');
           end if;
           perform delete_ultimanomina_reverso(pIdGrupoNomina,pNumeroNomina);
           ---
           ---Si es semanal borra de historicosemana
           ---
           if pperiodicidad ='S' THEN
              perform delete_historico_semana
                  (pIdGrupoNomina,pNumeroNomina,panio,pmes,psemanaquincena);
           else
               ---
               ---Si es quincenal borra de historicoquincena
               ---
               perform delete_historico_quincena
                  (pIdGrupoNomina,pNumeroNomina,panio,pmes,psemanaquincena);
           end if;
           ---
           ---Elimina el historico nomina.
           ---
           perform delete_historico_nomina
                  (pIdGrupoNomina,pNumeroNomina,panio,pmes,psemanaquincena);
          
        end if;

	--- se elimina el historico de base de cálculo del islr
	--- no esta condicionado a la periodicidad

		perform delete_historicobaseislr(pIdGrupoNomina,pNumeroNomina,panio,pmes,psemanaquincena);
		raise notice 'se elimino historicobaseislr';
			
        
        if reversar then
           return 1;  --reversada exitosamente
        end if;
        return 2;  ---Ya reversada anteriormente porque no hay data en ultimanomina


end ;
$_$;


ALTER FUNCTION public.reversar_nomina(integer, integer, date, character varying, integer, integer, integer, boolean) OWNER TO postgres;

--
-- TOC entry 809 (class 1255 OID 183805)
-- Name: sumar_rendicionmensual(integer, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION sumar_rendicionmensual(integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
update rendicionmensual set monto = monto + $2 where id_rendicion_mensual = $1
$_$;


ALTER FUNCTION public.sumar_rendicionmensual(integer, double precision) OWNER TO postgres;

--
-- TOC entry 810 (class 1255 OID 183806)
-- Name: sumar_resumenmensual(integer, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION sumar_resumenmensual(integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
update resumenmensual set monto = monto + $2 where id_resumen_mensual = $1
$_$;


ALTER FUNCTION public.sumar_resumenmensual(integer, double precision) OWNER TO postgres;

--
-- TOC entry 811 (class 1255 OID 183807)
-- Name: suspender_primas(integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION suspender_primas(integer, integer, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdTipoPersonal alias for $1;
	pIdPlanPoliza alias for $2;	
	pTipo alias for $3;
	
	recPrimasTitular record;
	curPrimasTitular cursor (pIdPlanPoliza int4)
		for select  pr.id_primas_plan,
		pr.edad_minima, pr.edad_maxima
		from primasplan pr
		where pr.id_plan_poliza = pIdPlanPoliza 
		and pr.parentesco = 'T';	

	recPrimasBeneficiario record;
	curPrimasBeneficiario cursor (pIdPlanPoliza int4)
		for select  pr.id_primas_plan,
		pr.edad_minima, pr.edad_maxima
		from primasplan pr
		where pr.id_plan_poliza = pIdPlanPoliza 
		and pr.parentesco <> 'T';	

	fechaDesde date;
	fechaHasta date;
	
begin
	if pTipo = 'T' or pTipo = 'A' then
		open curPrimasTitular(pIdPlanPoliza);			
		loop
			fetch curPrimasTitular into recPrimasTitular;			
			exit when not found;
			fechaDesde = add_years(current_date, -recPrimasTitular.edad_maxima);
			fechaHasta = add_years(current_date, -recPrimasTitular.edad_minima);

			update titular set estatus = 'S', fecha_exclusion = current_date
				where id_primas_plan = recPrimasTitular.id_primas_plan
				and id_personal in 
				(select id_personal from personal
				where fecha_nacimiento not 
				between fechaDesde and fechaHasta);
		end loop;
	end if;

	if pTipo = 'B' or pTipo = 'A' then
		open curPrimasBeneficiario(pIdPlanPoliza);			
		loop
			fetch curPrimasBeneficiario into recPrimasBeneficiario;			
			exit when not found;
			fechaDesde = add_years(current_date, -recPrimasBeneficiario.edad_maxima);
			fechaHasta = add_years(current_date, -recPrimasBeneficiario.edad_minima);

			update beneficiario set estatus = 'S', fecha_exclusion = current_date
				where id_primas_plan = recPrimasBeneficiario.id_primas_plan
				and id_familiar in 
				(select id_familiar from familiar
				where fecha_nacimiento not 
				between fechaDesde and fechaHasta);
		end loop;
	end if;

	return 0;

end;

$_$;


ALTER FUNCTION public.suspender_primas(integer, integer, character varying) OWNER TO postgres;

--
-- TOC entry 812 (class 1255 OID 183808)
-- Name: suspender_trabajadores(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION suspender_trabajadores(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;
	
	recTrabajadores record;
	curTrabajadores cursor(pIdTipoPersonal int4) 
	for select count(*) as cantidad from trabajador 
	where id_tipo_personal = pIdTipoPersonal
	and fe_vida = 'N';

	cantidad int4 := 0;
begin

	open curTrabajadores(pIdTipoPersonal);
	fetch curTrabajadores into recTrabajadores;

	if recTrabajadores.cantidad is not null then
		cantidad := recTrabajadores.cantidad;
	end if;

	update trabajador set  estatus = 'S' 
		where id_tipo_personal = pIdTipoPersonal and fe_vida = 'N' and estatus = 'A';

	return cantidad;
end;

$_$;


ALTER FUNCTION public.suspender_trabajadores(integer) OWNER TO postgres;

--
-- TOC entry 813 (class 1255 OID 183809)
-- Name: update_conceptofijo_reverso_nomina(integer, double precision, double precision, double precision, double precision, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_conceptofijo_reverso_nomina(integer, double precision, double precision, double precision, double precision, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---restablecer los valores anteriores
    ---
    UPDATE  conceptofijo set monto_restituir = $4,
                             unidades_restituir = $5,
                             restituir =$6,
                             monto= $2,
                             unidades = $3
                           
      WHERE id_concepto_fijo = $1;


$_$;


ALTER FUNCTION public.update_conceptofijo_reverso_nomina(integer, double precision, double precision, double precision, double precision, character varying) OWNER TO postgres;

--
-- TOC entry 814 (class 1255 OID 183810)
-- Name: update_descuentoticket(integer, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_descuentoticket(integer, integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
	update descuentoticket set
	referencia_ticket = $4,
	referencia_embargo = $5,
	referencia_ausencia = $6
	where 
	id_trabajador = $1 and 
	anio = $2 and 
	mes = $3
	
	
$_$;


ALTER FUNCTION public.update_descuentoticket(integer, integer, integer, integer, integer, integer) OWNER TO postgres;

--
-- TOC entry 801 (class 1255 OID 183811)
-- Name: update_dotacion_entregada(integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_dotacion_entregada(integer, character varying, integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---llamado desde el proceso de entregar dotacion
    ---para actualizar la cantidad y talla de la
    ---dotacion por trabajador procesda
    ---
    UPDATE  dotacionentregada set talla = $2,
                             cantidad =$3
                           
      WHERE id_dotacion_entregada = $1;


$_$;


ALTER FUNCTION public.update_dotacion_entregada(integer, character varying, integer) OWNER TO postgres;

--
-- TOC entry 815 (class 1255 OID 183812)
-- Name: update_dotacion_trabajador(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_dotacion_trabajador(integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---llamado desde el proceso de dotacion trabajador
    ---para actualizar la cantidad que coresponde a la dotacion
    ---a entregar
    ---
    UPDATE  dotaciontrabajador set cantidad =$2
      WHERE id_dotacion_trabajador = $1;


$_$;


ALTER FUNCTION public.update_dotacion_trabajador(integer, integer) OWNER TO postgres;

--
-- TOC entry 816 (class 1255 OID 183813)
-- Name: update_historiconomina(integer, integer, integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_historiconomina(integer, integer, integer, integer, character varying) RETURNS void
    LANGUAGE sql
    AS $_$


 update historiconomina set  lunes_primera=$2,  lunes_segunda=$3,
                                             lunes_retroactivo=$4,  hay_retroactivo=$5
    where id_historico_nomina = $1

$_$;


ALTER FUNCTION public.update_historiconomina(integer, integer, integer, integer, character varying) OWNER TO postgres;

--
-- TOC entry 817 (class 1255 OID 183814)
-- Name: update_liquidacion_resumen_nuevo_regimen(integer, double precision, double precision, double precision, double precision, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_liquidacion_resumen_nuevo_regimen(integer, double precision, double precision, double precision, double precision, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
	update liquidacionresumennuevoregimen set 
	   monto_prestaciones_acumuladas=$2,
           monto_interes_acumulado=$3,
           monto_anticipo_acumulado=$4,
           monto_fideicomiso_acumulado=$5,
           dias_mensuales=$6,
           dias_adicionales=$7
	where id_trabajador = $1;
$_$;


ALTER FUNCTION public.update_liquidacion_resumen_nuevo_regimen(integer, double precision, double precision, double precision, double precision, integer, integer) OWNER TO postgres;

--
-- TOC entry 818 (class 1255 OID 183815)
-- Name: update_liquidacion_resumen_viejo_regimen(integer, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_liquidacion_resumen_viejo_regimen(integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
	update liquidacionresumenviejoregimen set 
	monto_interes_adicional = $2
	where id_trabajador = $1;
$_$;


ALTER FUNCTION public.update_liquidacion_resumen_viejo_regimen(integer, double precision) OWNER TO postgres;

--
-- TOC entry 819 (class 1255 OID 183816)
-- Name: update_lunes_reverso_nomina(integer, integer, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_lunes_reverso_nomina(integer, integer, character varying, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---restablecer los campos para los retroactivos actualizados
    ---cuando se cerro la nomina que se esta reversando
    ---
    UPDATE  trabajador set lunes_retroactivo = $2,
                           hay_retroactivo   = $3,
                           lunes_primera     = $4,
                           lunes_segunda     = $5
      WHERE id_trabajador =$1;
$_$;


ALTER FUNCTION public.update_lunes_reverso_nomina(integer, integer, character varying, integer, integer) OWNER TO postgres;

--
-- TOC entry 820 (class 1255 OID 183817)
-- Name: update_monto_concepto_fijo(integer, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_monto_concepto_fijo(integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$	
	update conceptofijo set monto_anterior = monto where monto <> $2 and id_concepto_fijo = $1;
	update conceptofijo set monto = $2 where id_concepto_fijo = $1;
	
$_$;


ALTER FUNCTION public.update_monto_concepto_fijo(integer, double precision) OWNER TO postgres;

--
-- TOC entry 821 (class 1255 OID 183818)
-- Name: update_nominaespecial(integer, date, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_nominaespecial(integer, date, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
	update nominaespecial
	set fecha_proceso = $2, estatus = $3
	where id_nomina_especial = $1
	
$_$;


ALTER FUNCTION public.update_nominaespecial(integer, date, character varying) OWNER TO postgres;

--
-- TOC entry 822 (class 1255 OID 183819)
-- Name: update_nominaespecial(integer, date, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_nominaespecial(integer, date, character varying, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
	update nominaespecial
	set fecha_proceso = $2, estatus = $3, mes = $4, anio = $5
	
	where id_nomina_especial = $1
	
$_$;


ALTER FUNCTION public.update_nominaespecial(integer, date, character varying, integer, integer) OWNER TO postgres;

--
-- TOC entry 823 (class 1255 OID 183820)
-- Name: update_planillaarc_devengado_enero(integer, integer, integer, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_planillaarc_devengado_enero(integer, integer, integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
 update planillaarc set id_planilla_arc = $1, 
	id_trabajador = $2,
	anio = $3, devengado_enero = $4


$_$;


ALTER FUNCTION public.update_planillaarc_devengado_enero(integer, integer, integer, double precision) OWNER TO postgres;

--
-- TOC entry 824 (class 1255 OID 183821)
-- Name: update_prestamo(integer, double precision, integer, double precision, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_prestamo(integer, double precision, integer, double precision, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
	update prestamo 
		set monto_pagado = $2, cuotas_pagadas = $3, 
			monto_cuota = $4, estatus = $5
		where id_prestamo = $1;
$_$;


ALTER FUNCTION public.update_prestamo(integer, double precision, integer, double precision, character varying) OWNER TO postgres;

--
-- TOC entry 825 (class 1255 OID 183822)
-- Name: update_prestamo_reverso_nomina(integer, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_prestamo_reverso_nomina(integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---actualizar el prestamo con la cuota descontada
    ---cuando se cerro la nomina
    ---
	update prestamo 
		set monto_pagado = monto_pagado - $2,
                    cuotas_pagadas = cuotas_pagadas -1,
                    estatus ='A'
 		where id_prestamo = $1;
$_$;


ALTER FUNCTION public.update_prestamo_reverso_nomina(integer, double precision) OWNER TO postgres;

--
-- TOC entry 826 (class 1255 OID 183823)
-- Name: update_sueldo_promedio(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_sueldo_promedio(integer) RETURNS void
    LANGUAGE sql
    AS $_$
	update sueldopromedio set 
	retencion_sso = 0, 
	retencion_spf = 0,
	retencion_lph = 0, 
	retencion_fju = 0, 
	promedio_sso =0,
	promedio_lph = 0,
	promedio_fju = 0, 
	aporte_sso = 0, 
	aporte_spf = 0, 
	aporte_lph=0, 
	aporte_fju = 0 
	where  id_grupo_nomina  = $1
$_$;


ALTER FUNCTION public.update_sueldo_promedio(integer) OWNER TO postgres;

--
-- TOC entry 827 (class 1255 OID 183824)
-- Name: update_sueldo_promedio(integer, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_sueldo_promedio(integer, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
	update sueldopromedio set 
	monto_variable_sso = $2,
	monto_variable_lph = $3,
	monto_variable_fju = $4
	where id_trabajador = $1;
$_$;


ALTER FUNCTION public.update_sueldo_promedio(integer, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 828 (class 1255 OID 183825)
-- Name: update_sueldo_promedio(integer, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_sueldo_promedio(integer, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
	update sueldopromedio set 
	promedio_integral = $2,
	promedio_sueldo = $3,
	promedio_compensacion = $4,
	promedio_primast = $5,
	promedio_primasc = $6,
	promedio_ajustes = $7
	where id_trabajador = $1;
$_$;


ALTER FUNCTION public.update_sueldo_promedio(integer, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 829 (class 1255 OID 183826)
-- Name: update_sueldo_promedio(integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_sueldo_promedio(integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
	update sueldopromedio set 
	promedio_sso = $2,
	retencion_sso = $3,
	retencion_spf = $4,
	promedio_lph = $5,
	retencion_lph = $6,
	promedio_fju = $7,
	retencion_fju = $8,
	aporte_sso = $9,
	aporte_lph = $10,
	aporte_spf = $11,
	aporte_fju = $12
	where id_trabajador = $1;
$_$;


ALTER FUNCTION public.update_sueldo_promedio(integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 830 (class 1255 OID 183827)
-- Name: update_trabajador_sueldo_basico(integer, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_trabajador_sueldo_basico(integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
	update trabajador set 
	sueldo_basico = $2
	where id_trabajador = $1;
$_$;


ALTER FUNCTION public.update_trabajador_sueldo_basico(integer, double precision) OWNER TO postgres;

--
-- TOC entry 831 (class 1255 OID 183828)
-- Name: update_ultimanomina(integer, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_ultimanomina(integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
	update ultimanomina
	set monto_deduce = monto_deduce + $2 
	where id_ultima_nomina = $1
	
$_$;


ALTER FUNCTION public.update_ultimanomina(integer, double precision) OWNER TO postgres;

--
-- TOC entry 832 (class 1255 OID 183829)
-- Name: update_ultimanominaordinaria_reverso(integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_ultimanominaordinaria_reverso(integer, integer, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---restablecer el estatus de no pagada de la nomina especial reversada
    ---
    UPDATE  nominaespecial set  estatus = $3
      WHERE id_grupo_nomina =$1
        AND numero_nomina = $2;
$_$;


ALTER FUNCTION public.update_ultimanominaordinaria_reverso(integer, integer, character varying) OWNER TO postgres;

--
-- TOC entry 833 (class 1255 OID 183830)
-- Name: update_ultimaprenomina(integer, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION update_ultimaprenomina(integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
	update ultimaprenomina
	set monto_deduce = monto_deduce + $2 
	where id_ultima_prenomina = $1
	
$_$;


ALTER FUNCTION public.update_ultimaprenomina(integer, double precision) OWNER TO postgres;

--
-- TOC entry 834 (class 1255 OID 183831)
-- Name: valida_estructura_trabajador(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION valida_estructura_trabajador() RETURNS void
    LANGUAGE plpgsql
    AS $$  declare  	

/*
	Programa de Modernizacion de la Administracion Financiera del Estado
	Sistema de Gestion Financiera de Recursos Humanos
	Procedimiento de Carga Masiva del ingreso del trabajador - Validación de estructura 
	Revision : 1.0
	Fecha : Abril 2010
	Versión Base de Aplicación : 3.10

	Entidades Afectadas:
		NINGUNA

	carga_masiva_trabajador()

	NOTAS: - Solo emplear durante el proceso de implantación del SIGEFIRRHH bajo las condiciones controladas 
	      contenidas en el documento anexo.
	       - Va sin acentos.
	       - Se entiende que existe la tabla cargamasivatrabajador y que la misma contiene la informacion a 
	       ser migrada.
*/


-- Creacion de los alias de los parametros


-- Definicion de las constantes
	contadorCarga int4;
	contador int4;

	-- para Trabajador 

	-- para Registrocargos

	-- para registrositp

	-- para movimientoSitp


	-- para historicocargos


	-- para trayectoria
	
	
-- Definicion de las variables de trabajo

	
-- Definición de los registros y cursores

	recTipoPersonal record;
	
	recDatosDependencia record;
/*	curDatosDependencia cursor
		for select distinct id_dependencia 
		from dependencia;
*/
	curDatosDependencia cursor
		for select distinct id_dependencia 
		from cargamasivatrabajador;
	
	recDatosTipoPersonalRegistro record;
	curDatosTipoPersonalRegistro cursor 
		for select distinct id_tipo_personal,id_registro 
		from cargamasivatrabajador;

	recDatosTipoPersonalCargo record;
	curDatosTipoPersonalCargo cursor 
		for select distinct id_cargo,id_tipo_personal 
		from cargamasivatrabajador;
	

	recDatosRegistroCodigo record;
	curDatosRegistroCodigo cursor 
		for select id_registro,codigo_nomina,count(*) as son 
		from cargamasivatrabajador 
		group by id_registro,codigo_nomina;
	

 begin 	
	raise notice 'Se inicia la ejecucion de la funcion valida_estructura_trabajador()';

	 
	-----------------------------------------------------------------------------------------------
	
	raise notice '--- Se inicia la validacion de las cedulas';
		contadorCarga:=(select count(*) from cargamasivatrabajador); -- cantidad de personas a trabajar

		contador := ( select count(*)
				from personal p,personalorganismo po,cargamasivatrabajador cm
				where p.id_personal = po.id_personal and
				p.cedula = cm.cedula);

		IF contador<>contadorCarga THEN
			RAISE EXCEPTION 'Existen cedulas con error, verifique la existencia en la tabla personal y su correspondencia en personalorganismo';
		END IF;


	raise notice '--- culminada la validacion de las cedulas';

	-----------------------------------------------------------------------------------------------
	raise notice '--- Se inicia la validacion de las dependencias';
	open curDatosDependencia;
	loop
		fetch curDatosDependencia into recDatosDependencia;
		exit when not found;
		contador:=(select count(*) 
				from 
					dependencia d, grupoorganismo go, organismo o, region r, sede s,
					lugarpago lp, ciudad c, estado e, turno t
				where 
					d.id_grupo_organismo = go.id_grupo_organismo and
					go.id_organismo = o.id_organismo and
					d.id_region = r.id_region and
					d.id_sede = s.id_sede and
					s.id_turno = t.id_turno and
					s.id_lugar_pago = lp.id_lugar_pago and
					lp.id_ciudad =  c.id_ciudad and
					c.id_estado = e. id_estado and 
					d.id_dependencia = recDatosDependencia.id_dependencia);
		IF contador=0 THEN
			RAISE EXCEPTION 'Verifique la estructura de la dependencia con id_dependencia = %',recDatosDependencia.id_dependencia;
		END IF;

	end loop;
	close curDatosDependencia;
	raise notice '--- culminada la validacion de las dependencias';
			
	-----------------------------------------------------------------------------------------------

	raise notice '--- Se inicia la validacion de los tipos de de personal y su registro';
	open curDatosTipoPersonalRegistro;
	loop
		fetch curDatosTipoPersonalRegistro into recDatosTipoPersonalRegistro;
		exit when not found;

		-- necesito los atributos del tipopersonal 
		select * into recTipoPersonal from tipopersonal where id_tipo_personal = recDatosTipoPersonalRegistro.id_tipo_personal;

		-- no maneja registro 
		if recTipoPersonal.maneja_rac = 'N' then -- deberia ser nulo el id_registro en la tabla 
			if recDatosTipoPersonalRegistro.id_registro is not null then
				RAISE EXCEPTION 'El tipo de personal % no debe tener registro asociado ya que no maneja RAC en su definicion', recDatosTipoPersonalRegistro.id_tipo_personal;
			end if;
		else -- maneja Registro 
			contador:=(select count(*) 
					from registropersonal 
					where id_tipo_personal = recDatosTipoPersonalRegistro.id_tipo_personal and
					id_registro = recDatosTipoPersonalRegistro.id_registro);
			IF contador=0 THEN
				RAISE EXCEPTION 'Verifique la estructura de registropersonal del tipo de personal = %',recDatosTipoPersonalRegistro.id_tipo_personal;
			END IF;
		end if;

	end loop;
	close curDatosTipoPersonalRegistro;
	raise notice '--- culminada la validacion de los tipos de personal y su registro';
			
	-----------------------------------------------------------------------------------------------

	raise notice '--- Se inicia la validacion de los cargos';


	-- que existan todos
		contadorCarga:=(select count(*) from cargamasivatrabajador); -- cantidad de personas a trabajar

		contador := ( select count(*)
				from cargo c,cargamasivatrabajador cm
				where c.id_cargo = cm.id_cargo);

		IF contador<>contadorCarga THEN
			RAISE EXCEPTION 'Existen cargos con error en su id, verifique la existencia en la tabla cargo';
		END IF;

	-- que se enmarquen en la estructura	
	open curDatosTipoPersonalCargo;
	loop
		fetch curDatosTipoPersonalCargo into recDatosTipoPersonalCargo;
		exit when not found;

		-- se valida si la estructura esta completa 
		contador:=(select count(*) 
				from 
					cargo c, manualcargo mc, manualpersonal mp
				where 
					c.id_manual_cargo = mc.id_manual_cargo and
					mp.id_manual_cargo = mc.id_manual_cargo and
					c.id_cargo = recDatosTipoPersonalCargo.id_cargo and
					mp.id_tipo_personal  = recDatosTipoPersonalCargo.id_tipo_personal);
		IF contador=0 THEN
			RAISE EXCEPTION 'Verifique el manualpersonal correspondientes al tipo de personal = %',recDatosTipoPersonalCargo.id_tipo_personal;
		END IF;

		--- vemos si el cargo tiene remuneración asociada en su manualcargo
		contador:=(select count(*) 
				from 
					cargo c, manualcargo mc, tabulador t, detalletabulador dt
				where 
					c.id_manual_cargo = mc.id_manual_cargo and
					mc.id_tabulador = t.id_tabulador and
					t.id_tabulador = dt.id_tabulador and
					c.grado = dt.grado and
					c.sub_grado = dt.sub_grado and
					c.id_cargo = recDatosTipoPersonalCargo.id_cargo);
		IF contador=0 THEN
			RAISE NOTICE 'El id_cargo % no tiene remuneracion asociada',recDatosTipoPersonalCargo.id_cargo;
		END IF;
		

	end loop;
	close curDatosTipoPersonalCargo;
	raise notice '--- culminada la validacion de los cargos';


	-----------------------------------------------------------------------------------------------


	raise notice '--- Se inicia la validacion de los codigos de nomina';
	open curDatosRegistroCodigo;
	loop
		fetch curDatosRegistroCodigo into recDatosRegistroCodigo;
		exit when not found;

		-- se valida si la estructura esta completa 
		contador:=(select count(*) 
				from 
					registrocargos rc
				where 
					rc.id_registro = recDatosRegistroCodigo.id_registro and
					rc.codigo_nomina = recDatosRegistroCodigo.codigo_nomina );
					
		IF contador > 0 or recDatosRegistroCodigo.son > 1 THEN
			RAISE EXCEPTION 'Verifique codigo de nomina = %, se encuentra repetido en el lote o ya existe en registrocargos',recDatosRegistroCodigo.codigo_nomina;
		END IF;

	end loop;
	close curDatosRegistroCodigo;
	raise notice '--- culminada la validacion de los codigos de nómina';


-----------------------------------------------------------------------------------------------

	raise notice 'Se culmina la ejecucion de la funcion valida_estructura_trabajador()';

	
end;  $$;


ALTER FUNCTION public.valida_estructura_trabajador() OWNER TO postgres;

--
-- TOC entry 835 (class 1255 OID 183833)
-- Name: validar_conyuge(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION validar_conyuge(integer) RETURNS bigint
    LANGUAGE sql
    AS $_$
	select count(*) from familiar where parentesco = 'C' 
		and id_personal = $1 and familiar.cedula_familiar in 
			(select personal.cedula from personal, trabajador 
			where personal.id_personal = trabajador.id_personal
			and trabajador.estatus = 'A')
$_$;


ALTER FUNCTION public.validar_conyuge(integer) OWNER TO postgres;

--
-- TOC entry 836 (class 1255 OID 183834)
-- Name: validar_prestamos_activos(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION validar_prestamos_activos() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
-- Por JACKSON PEREZ (PROMAFE)
-- Sistema de Gestión Financiera de Recursos Humanos SIGEFIRRHH (Versión 3.10)
-- 02/01/2010
-- trigger que impide que un trabajador posea dos prestamos activos
DECLARE
	my_record record;
	_codigo text;
	_orga text;
	_unad text;
	_anho int4;
	i int4 :=0;
	aux int4 :=0;
	contador int4 ;
	ceros text;
	codigo text;
BEGIN


	contador:=(select  count(*)
			from  prestamo where id_trabajador=NEW.id_trabajador  and
				id_concepto_tipo_personal=NEW.id_concepto_tipo_personal and
				id_concepto_tipo_personal =NEW.id_concepto_tipo_personal
				and estatus='A');
				
	IF TG_OP='INSERT' and  NEW.estatus ='A'  AND  contador=1 THEN
		RAISE EXCEPTION 'No se puede registrar otro prestamo activo para el trabajador';
	ELSIF TG_OP='UPDATE' THEN
		IF OLD.estatus <>'A' and  NEW.estatus ='A'  AND  contador=1 THEN
			RAISE EXCEPTION 'No se puede registrar otro prestamo activo para el trabajador';
		END IF;
	END IF;
	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.validar_prestamos_activos() OWNER TO postgres;

--
-- TOC entry 837 (class 1255 OID 183835)
-- Name: verificar_sobregirado_trabajadorcargoespecifica(integer, integer, double precision, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION verificar_sobregirado_trabajadorcargoespecifica(integer, integer, double precision, character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$

declare 

	pId alias for $1;
	pAnio alias for $2;
	pPorcentaje alias for $3;
	pTipo alias for $4;
	
	recTrabajadores1 record;
	curTrabajadores1 cursor (pId int4, pAnio int4) 
		for select sum(te.porcentaje) as total
		from trabajadorespecifica te
		where te.id_trabajador = pId
		and te.anio = pAnio;
	
	recRegistroCargos1 record;
	curRegistroCargos1 cursor (pId int4, pAnio int4) 
		for select sum(ce.porcentaje) as total
		from cargoespecifica ce
		where ce.id_registro_cargos = pId
		and ce.anio = pAnio;
	porcentaje float8 := 0;
	
begin
	if pTipo = 'T' then
		open curTrabajadores1(pId, pAnio);				
		
		fetch curTrabajadores1 into recTrabajadores1;			
		
		if recTrabajadores1.total <> null then
		porcentaje := recTrabajadores1.total + pPorcentaje;
			if porcentaje > 100 then
				return true;
			end if;		
		end if;
		close curTrabajadores1;
	else
		open curRegistroCargos1(pId, pAnio);				
		
		fetch curRegistroCargos1 into recRegistroCargos1;			
		
		if recRegistroCargos1.total <> null then
		porcentaje := recRegistroCargos1.total + pPorcentaje;
			if porcentaje > 100 then
				return true;
			end if;		
		end if;
		close curRegistroCargos1;
	end if;
	
	return false;
end;

$_$;


ALTER FUNCTION public.verificar_sobregirado_trabajadorcargoespecifica(integer, integer, double precision, character varying) OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 173 (class 1259 OID 183836)
-- Name: accioncentralizada; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE accioncentralizada (
    id_accion_centralizada integer NOT NULL,
    cod_accion_centralizada character varying(4) NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    denominacion character varying(90),
    id_organismo integer NOT NULL
);


ALTER TABLE accioncentralizada OWNER TO postgres;

--
-- TOC entry 174 (class 1259 OID 183840)
-- Name: accionespecifica; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE accionespecifica (
    id_accion_especifica integer NOT NULL,
    cod_accion_especifica character varying(4) NOT NULL,
    tipo character varying(1) NOT NULL,
    denominacion character varying(90) NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    id_proyecto integer,
    id_accion_centralizada integer
);


ALTER TABLE accionespecifica OWNER TO postgres;

--
-- TOC entry 175 (class 1259 OID 183844)
-- Name: accionevaluacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE accionevaluacion (
    id_accion_evaluacion integer NOT NULL,
    cod_accion_evaluacion character varying(2) NOT NULL,
    descripcion character varying(80) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE accionevaluacion OWNER TO postgres;

--
-- TOC entry 176 (class 1259 OID 183848)
-- Name: acreencia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE acreencia (
    id_acreencia integer NOT NULL,
    id_tipo_acreencia integer NOT NULL,
    monto_acreencia double precision DEFAULT 0,
    estatus character varying(1) DEFAULT 'P'::character varying NOT NULL,
    fecha_registro date,
    observaciones text,
    id_personal integer NOT NULL
);


ALTER TABLE acreencia OWNER TO postgres;

--
-- TOC entry 177 (class 1259 OID 183856)
-- Name: actividaddocente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE actividaddocente (
    id_actividad_docente integer NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    anio_inicio integer NOT NULL,
    anio_fin integer DEFAULT 0 NOT NULL,
    estatus character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_carrera integer,
    id_personal integer NOT NULL,
    sector character varying(1) DEFAULT 'P'::character varying NOT NULL,
    relacion_laboral character varying(30),
    nombre_entidad character varying(90),
    asignatura character varying(60),
    observaciones text,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT actividaddocente_estatus CHECK ((((estatus)::text = 'S'::text) OR ((estatus)::text = 'N'::text))),
    CONSTRAINT actividaddocente_nivel_educativo CHECK ((((((((((((((((((nivel_educativo)::text = 'P'::text) OR ((nivel_educativo)::text = 'B'::text)) OR ((nivel_educativo)::text = 'I'::text)) OR ((nivel_educativo)::text = 'D'::text)) OR ((nivel_educativo)::text = 'H'::text)) OR ((nivel_educativo)::text = 'T'::text)) OR ((nivel_educativo)::text = 'S'::text)) OR ((nivel_educativo)::text = 'U'::text)) OR ((nivel_educativo)::text = 'E'::text)) OR ((nivel_educativo)::text = 'M'::text)) OR ((nivel_educativo)::text = 'C'::text)) OR ((nivel_educativo)::text = 'R'::text)) OR ((nivel_educativo)::text = 'G'::text)) OR ((nivel_educativo)::text = 'L'::text)) OR ((nivel_educativo)::text = 'O'::text)) OR ((nivel_educativo)::text = 'N'::text))),
    CONSTRAINT actividaddocente_sector CHECK (((((sector)::text = 'P'::text) OR ((sector)::text = 'U'::text)) OR ((sector)::text = 'E'::text)))
);


ALTER TABLE actividaddocente OWNER TO postgres;

--
-- TOC entry 178 (class 1259 OID 183870)
-- Name: adiestramientocargo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE adiestramientocargo (
    id_adiestramiento_cargo integer NOT NULL,
    id_cargo integer NOT NULL,
    id_area_conocimiento integer NOT NULL,
    nivel character varying(1) DEFAULT 'A'::character varying NOT NULL,
    peso double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT adiestramientocargo_nivel CHECK (((((nivel)::text = 'A'::text) OR ((nivel)::text = 'M'::text)) OR ((nivel)::text = 'B'::text)))
);


ALTER TABLE adiestramientocargo OWNER TO postgres;

--
-- TOC entry 179 (class 1259 OID 183877)
-- Name: administradorauel; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE administradorauel (
    id_administradora_uel integer NOT NULL,
    id_unidad_ejecutora integer NOT NULL,
    id_unidad_administradora integer NOT NULL
);


ALTER TABLE administradorauel OWNER TO postgres;

--
-- TOC entry 180 (class 1259 OID 183880)
-- Name: afiliacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE afiliacion (
    id_afiliacion integer NOT NULL,
    fecha date,
    id_gremio integer NOT NULL,
    numero_afiliacion character varying(10),
    id_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE afiliacion OWNER TO postgres;

--
-- TOC entry 181 (class 1259 OID 183884)
-- Name: ajustetabuladoronu; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ajustetabuladoronu (
    id_ajuste_tabulador_onu integer NOT NULL,
    id_tabulador integer NOT NULL,
    nivel integer DEFAULT 1 NOT NULL,
    estado_civil character varying(1) DEFAULT 'S'::character varying,
    anios_servicio integer DEFAULT 0 NOT NULL,
    ajuste_anual double precision DEFAULT 0 NOT NULL
);


ALTER TABLE ajustetabuladoronu OWNER TO postgres;

--
-- TOC entry 182 (class 1259 OID 183891)
-- Name: antecedente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE antecedente (
    id_antecedente integer NOT NULL,
    fecha_ingreso date NOT NULL,
    personal_ingreso character varying(60),
    cargo_ingreso character varying(6),
    descargo_ingreso character varying(60),
    codrac_ingreso integer DEFAULT 1 NOT NULL,
    sueldo_ingreso double precision DEFAULT 0 NOT NULL,
    compensacion_ingreso double precision DEFAULT 0 NOT NULL,
    primas_ingreso double precision DEFAULT 0 NOT NULL,
    fecha_egreso date,
    personal_egreso character varying(60),
    cargo_egreso character varying(6),
    descargo_egreso character varying(60),
    causa_egreso character varying(60),
    codrac_egreso integer DEFAULT 1 NOT NULL,
    sueldo_egreso double precision DEFAULT 0 NOT NULL,
    compensacion_egreso double precision DEFAULT 0 NOT NULL,
    primas_egreso double precision DEFAULT 0 NOT NULL,
    prestaciones_pendientes character varying(1) DEFAULT 'S'::character varying NOT NULL,
    vacaciones_pendientes character varying(1) DEFAULT 'N'::character varying NOT NULL,
    dias_vacaciones integer DEFAULT 0 NOT NULL,
    observaciones text,
    id_personal integer NOT NULL,
    nombre_institucion character varying(90) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT antecedente_prestaciones_pendie CHECK ((((prestaciones_pendientes)::text = 'S'::text) OR ((prestaciones_pendientes)::text = 'N'::text))),
    CONSTRAINT antecedente_vacaciones_pendient CHECK ((((vacaciones_pendientes)::text = 'S'::text) OR ((vacaciones_pendientes)::text = 'N'::text)))
);


ALTER TABLE antecedente OWNER TO postgres;

--
-- TOC entry 183 (class 1259 OID 183911)
-- Name: anticipo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE anticipo (
    id_anticipo integer DEFAULT 0 NOT NULL,
    anio integer NOT NULL,
    mes integer NOT NULL,
    fecha_anticipo date NOT NULL,
    monto_anticipo double precision DEFAULT 0 NOT NULL,
    tipo_anticipo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    forma_anticipo character varying(1) DEFAULT 'P'::character varying NOT NULL,
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    observaciones text,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE anticipo OWNER TO postgres;

--
-- TOC entry 184 (class 1259 OID 183923)
-- Name: apelacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE apelacion (
    id_apelacion integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    fecha date NOT NULL,
    resultado character varying(1) NOT NULL,
    cedula_supervisor integer DEFAULT 0,
    nombre_supervisor character varying(50) DEFAULT 'H'::character varying NOT NULL,
    observaciones text,
    id_personal integer NOT NULL
);


ALTER TABLE apelacion OWNER TO postgres;

--
-- TOC entry 185 (class 1259 OID 183933)
-- Name: aperturaescolar; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE aperturaescolar (
    id_apertura_escolar integer NOT NULL,
    id_dependencia integer NOT NULL,
    cod_cargo character varying(8),
    cargos_apertura integer DEFAULT 0,
    cargos_restante integer DEFAULT 0,
    horas_apertura double precision DEFAULT 0,
    horas_restante double precision DEFAULT 0
);


ALTER TABLE aperturaescolar OWNER TO postgres;

--
-- TOC entry 186 (class 1259 OID 183940)
-- Name: aplicartabulador; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE aplicartabulador (
    id_aplicar_tabulador integer NOT NULL,
    fecha_proceso date,
    grado_actual integer DEFAULT 0 NOT NULL,
    paso_actual integer DEFAULT 0 NOT NULL,
    sueldo_actual double precision DEFAULT 0 NOT NULL,
    ajuste_actual double precision DEFAULT 0 NOT NULL,
    compensacion_actual double precision DEFAULT 0 NOT NULL,
    paso_nuevo integer DEFAULT 0 NOT NULL,
    sueldo_nuevo double precision DEFAULT 0 NOT NULL,
    ajuste_nuevo double precision DEFAULT 0 NOT NULL,
    compensacion_nueva double precision DEFAULT 0 NOT NULL,
    id_trabajador integer NOT NULL,
    monto_retroactivo double precision DEFAULT 0,
    dias_retroactivo integer DEFAULT 0,
    base_aumento double precision DEFAULT 0
);


ALTER TABLE aplicartabulador OWNER TO postgres;

--
-- TOC entry 187 (class 1259 OID 183955)
-- Name: areacarrera; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE areacarrera (
    id_area_carrera integer NOT NULL,
    cod_area_carrera character varying(3) NOT NULL,
    descripcion character varying(60) NOT NULL
);


ALTER TABLE areacarrera OWNER TO postgres;

--
-- TOC entry 188 (class 1259 OID 183958)
-- Name: areaconocimiento; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE areaconocimiento (
    id_area_conocimiento integer NOT NULL,
    cod_area_conocimiento character varying(3) NOT NULL,
    descripcion character varying(60) NOT NULL
);


ALTER TABLE areaconocimiento OWNER TO postgres;

--
-- TOC entry 189 (class 1259 OID 183961)
-- Name: asignatura; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE asignatura (
    id_asignatura integer NOT NULL,
    cod_asignatura character varying(3) NOT NULL,
    nombre character varying(50),
    tope_horas double precision DEFAULT 0
);


ALTER TABLE asignatura OWNER TO postgres;

--
-- TOC entry 190 (class 1259 OID 183965)
-- Name: auditoria; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE auditoria (
    id_usuario integer DEFAULT 0,
    id_organismo integer DEFAULT 0,
    hora time without time zone NOT NULL,
    fecha date NOT NULL,
    usuario character varying(90) NOT NULL,
    ruta character varying(150) NOT NULL,
    accion character varying(1) NOT NULL,
    registro character varying(400) NOT NULL,
    cedula_trabajador integer DEFAULT 0 NOT NULL,
    concepto character varying(55),
    monto double precision DEFAULT 0 NOT NULL,
    frecuencia_pago integer DEFAULT 0 NOT NULL
);


ALTER TABLE auditoria OWNER TO postgres;

--
-- TOC entry 191 (class 1259 OID 183976)
-- Name: aumentoevaluacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE aumentoevaluacion (
    id_aumento_evaluacion integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    fecha_proceso date,
    resultado double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    paso_anterior integer DEFAULT 0 NOT NULL,
    sueldo_anterior double precision DEFAULT 0 NOT NULL,
    ajuste_anterior double precision DEFAULT 0 NOT NULL,
    compensacion_anterior double precision DEFAULT 0 NOT NULL,
    otros_anterior double precision DEFAULT 0 NOT NULL,
    base_aumento double precision DEFAULT 0 NOT NULL,
    sueldo_nuevo double precision DEFAULT 0 NOT NULL,
    compensacion_nueva double precision DEFAULT 0 NOT NULL,
    monto_aumentar double precision DEFAULT 0 NOT NULL,
    aumento_definitivo double precision DEFAULT 0 NOT NULL,
    paso_nuevo integer DEFAULT 0 NOT NULL,
    porcentaje_aumentar double precision DEFAULT 0 NOT NULL,
    monto_unico double precision DEFAULT 0 NOT NULL,
    ajuste_escala double precision DEFAULT 0 NOT NULL,
    dias_retroactivo integer DEFAULT 0 NOT NULL,
    monto_retroactivo double precision DEFAULT 0 NOT NULL,
    id_trabajador integer NOT NULL,
    id_resultado_evaluacion integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    estatus character varying(2)
);


ALTER TABLE aumentoevaluacion OWNER TO postgres;

--
-- TOC entry 192 (class 1259 OID 183999)
-- Name: ausencia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ausencia (
    id_ausencia integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    cesta_ticket character varying(1) DEFAULT 'S'::character varying NOT NULL,
    dias_continuos integer DEFAULT 0 NOT NULL,
    dias_habiles integer DEFAULT 0 NOT NULL,
    cedula_director integer,
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    clase character varying(1) DEFAULT 'A'::character varying NOT NULL,
    fecha_fin date,
    fecha_inicio date NOT NULL,
    horas_dias character varying(1) DEFAULT 'D'::character varying NOT NULL,
    cedula_jefe integer,
    mes integer DEFAULT 0 NOT NULL,
    nombre_director character varying(50),
    nombre_jefe character varying(50),
    nombre_supervisor character varying(50),
    observaciones character varying(250),
    id_personal integer NOT NULL,
    cedula_supervisor integer,
    id_tipo_ausencia integer NOT NULL,
    remunerado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    CONSTRAINT ausencia_cesta_ticket CHECK ((((cesta_ticket)::text = 'S'::text) OR ((cesta_ticket)::text = 'N'::text))),
    CONSTRAINT ausencia_clase CHECK (((((clase)::text = 'A'::text) OR ((clase)::text = 'P'::text)) OR ((clase)::text = 'R'::text))),
    CONSTRAINT ausencia_estatus CHECK (((((((estatus)::text = 'P'::text) OR ((estatus)::text = 'A'::text)) OR ((estatus)::text = 'R'::text)) OR ((estatus)::text = 'G'::text)) OR ((estatus)::text = 'O'::text))),
    CONSTRAINT ausencia_horas_dias CHECK ((((((horas_dias)::text = 'H'::text) OR ((horas_dias)::text = 'D'::text)) OR ((horas_dias)::text = 'M'::text)) OR ((horas_dias)::text = 'A'::text))),
    CONSTRAINT ausencia_remunerado CHECK ((((remunerado)::text = 'S'::text) OR ((remunerado)::text = 'N'::text)))
);


ALTER TABLE ausencia OWNER TO postgres;

--
-- TOC entry 193 (class 1259 OID 184016)
-- Name: averiguacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE averiguacion (
    id_averiguacion integer NOT NULL,
    estatus character varying(1) DEFAULT 'P'::character varying NOT NULL,
    fecha_proceso date NOT NULL,
    fecha_fin_proceso date,
    fecha_fin date,
    fecha_inicio date,
    inhabilitado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    observaciones text,
    origen character varying(1) DEFAULT 'C'::character varying NOT NULL,
    id_personal integer NOT NULL,
    resolucion character varying(20),
    suspension_sueldo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT averiguacion_estatus CHECK (((((estatus)::text = 'P'::text) OR ((estatus)::text = 'C'::text)) OR ((estatus)::text = 'R'::text))),
    CONSTRAINT averiguacion_inhabilitado CHECK ((((inhabilitado)::text = 'S'::text) OR ((inhabilitado)::text = 'N'::text))),
    CONSTRAINT averiguacion_origen CHECK (((((origen)::text = 'C'::text) OR ((origen)::text = 'I'::text)) OR ((origen)::text = 'O'::text))),
    CONSTRAINT averiguacion_suspension_sueldo CHECK ((((suspension_sueldo)::text = 'S'::text) OR ((suspension_sueldo)::text = 'N'::text)))
);


ALTER TABLE averiguacion OWNER TO postgres;

--
-- TOC entry 194 (class 1259 OID 184031)
-- Name: banco; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE banco (
    id_banco integer NOT NULL,
    cod_banco character varying(3),
    identificador_ahorro character varying(6),
    identificador_corriente character varying(6),
    nombre character varying(90),
    correlativo integer DEFAULT 0
);


ALTER TABLE banco OWNER TO postgres;

--
-- TOC entry 195 (class 1259 OID 184035)
-- Name: baremopreseleccionado; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE baremopreseleccionado (
    id_baremo_preseleccionado integer NOT NULL,
    id_postulado_concurso integer NOT NULL,
    id_varemos integer NOT NULL,
    resultado double precision DEFAULT 0 NOT NULL,
    entrevistador character varying(60),
    fecha date,
    observaciones text
);


ALTER TABLE baremopreseleccionado OWNER TO postgres;

--
-- TOC entry 196 (class 1259 OID 184042)
-- Name: becafamiliar; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE becafamiliar (
    id_beca_familiar integer NOT NULL,
    id_personal integer NOT NULL,
    id_familiar integer NOT NULL,
    id_concepto_tipo_personal integer,
    fecha date,
    tramite_beca character varying(1) DEFAULT 'S'::character varying NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'O'::character varying NOT NULL,
    monto_beca double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    promedio_notas integer DEFAULT 0 NOT NULL,
    estatus_beca character varying(1) DEFAULT 'S'::character varying NOT NULL,
    instituto character varying(90),
    instituto_otra_beca character varying(90),
    carrera_especialidad character varying(90),
    otra_beca character varying(1) DEFAULT 'N'::character varying NOT NULL,
    pagada character varying(1) DEFAULT 'N'::character varying NOT NULL,
    monto_otra_beca double precision DEFAULT 0 NOT NULL,
    trajo_recaudos character varying(1) DEFAULT 'N'::character varying NOT NULL,
    fecha_ultimo_pago date
);


ALTER TABLE becafamiliar OWNER TO postgres;

--
-- TOC entry 197 (class 1259 OID 184055)
-- Name: becatrabajador; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE becatrabajador (
    id_beca_trabajador integer NOT NULL,
    id_personal integer NOT NULL,
    tramite_beca character varying(1) DEFAULT 'S'::character varying NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'O'::character varying NOT NULL,
    monto_beca double precision DEFAULT 0 NOT NULL,
    fecha_inicio date,
    fecha_fin date,
    unidad character varying(1) DEFAULT 'S'::character varying NOT NULL,
    periodo_cursando character varying(2),
    promedio_notas character varying(2),
    estatus_beca character varying(1) DEFAULT 'S'::character varying NOT NULL,
    instituto character varying(90),
    instituto_otra_beca character varying(90),
    carrera_especialidad character varying(90),
    id_pais integer,
    otra_beca character varying(1) DEFAULT 'N'::character varying NOT NULL,
    pagada character varying(1) DEFAULT 'N'::character varying NOT NULL,
    monto_otra_beca double precision DEFAULT 0 NOT NULL,
    trajo_recaudos character varying(1) DEFAULT 'N'::character varying NOT NULL,
    fecha_ultimo_pago date
);


ALTER TABLE becatrabajador OWNER TO postgres;

--
-- TOC entry 198 (class 1259 OID 184067)
-- Name: beneficiario; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE beneficiario (
    id_beneficiario integer NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_plan_poliza integer NOT NULL,
    id_primas_plan integer NOT NULL,
    id_familiar integer NOT NULL,
    monto_prima double precision DEFAULT 0 NOT NULL,
    monto_patron double precision DEFAULT 0 NOT NULL,
    monto_trabajador double precision DEFAULT 0 NOT NULL,
    cobertura double precision DEFAULT 0 NOT NULL,
    cobertura_extra double precision DEFAULT 0 NOT NULL,
    prima_extra double precision DEFAULT 0 NOT NULL,
    fecha_inclusion date,
    fecha_exclusion date,
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL
);


ALTER TABLE beneficiario OWNER TO postgres;

--
-- TOC entry 199 (class 1259 OID 184077)
-- Name: cajaahorro; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cajaahorro (
    id_caja_ahorro integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    porcentaje_trabajador double precision DEFAULT 0 NOT NULL,
    porcentaje_patron double precision DEFAULT 0 NOT NULL,
    aporte_trabajador double precision DEFAULT 0 NOT NULL,
    aporte_patron double precision DEFAULT 0 NOT NULL,
    acumulado_trabajador double precision DEFAULT 0 NOT NULL,
    acumulado_patron double precision DEFAULT 0 NOT NULL,
    acumulado_retiros double precision DEFAULT 0 NOT NULL,
    acumulado_haberes double precision DEFAULT 0 NOT NULL
);


ALTER TABLE cajaahorro OWNER TO postgres;

--
-- TOC entry 200 (class 1259 OID 184088)
-- Name: calculoantiguedad; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE calculoantiguedad (
    id_calculo_antiguedad integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    anios_servicio integer DEFAULT 0,
    mes integer DEFAULT 0,
    monto double precision DEFAULT 0 NOT NULL,
    monto_anterior double precision DEFAULT 0 NOT NULL
);


ALTER TABLE calculoantiguedad OWNER TO postgres;

--
-- TOC entry 201 (class 1259 OID 184095)
-- Name: calculobonofinanio; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE calculobonofinanio (
    id_calculo_bono_fin_anio integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    total_bono double precision DEFAULT 0 NOT NULL,
    monto_alicuota double precision DEFAULT 0 NOT NULL,
    bono_sin_alicuota double precision DEFAULT 0 NOT NULL,
    dias double precision DEFAULT 0,
    base_fijo double precision DEFAULT 0 NOT NULL,
    base_promedio double precision DEFAULT 0 NOT NULL,
    base_devengado double precision DEFAULT 0 NOT NULL,
    base_mensual double precision DEFAULT 0 NOT NULL,
    base_variable double precision DEFAULT 0 NOT NULL,
    base_proyectado double precision DEFAULT 0 NOT NULL,
    bono_vacacional double precision DEFAULT 0 NOT NULL,
    anios_servicio double precision DEFAULT 0 NOT NULL
);


ALTER TABLE calculobonofinanio OWNER TO postgres;

--
-- TOC entry 202 (class 1259 OID 184110)
-- Name: calculoticket; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE calculoticket (
    id_calculo_ticket integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    cantidad_ticket integer DEFAULT 0 NOT NULL,
    denominacion_ticket double precision DEFAULT 0 NOT NULL,
    monto_cobrar double precision DEFAULT 0 NOT NULL,
    total_descuentos_ticket integer DEFAULT 0 NOT NULL,
    neto_cantidad_ticket integer DEFAULT 0 NOT NULL,
    neto_monto_cobrar double precision DEFAULT 0 NOT NULL,
    especial character varying(1) DEFAULT 'N'::character varying NOT NULL,
    fecha_proceso date,
    anio_proceso integer DEFAULT 0 NOT NULL,
    mes_proceso integer DEFAULT 0 NOT NULL,
    cod_ticket character varying(10),
    id_trabajador integer DEFAULT 0 NOT NULL,
    id_concepto_tipo_personal integer,
    id_proveedor_ticket integer,
    id_tipo_personal integer DEFAULT 0 NOT NULL,
    cod_dependencia character varying(12),
    nombre_dependencia character varying(90)
);


ALTER TABLE calculoticket OWNER TO postgres;

--
-- TOC entry 203 (class 1259 OID 184126)
-- Name: calculovacacional; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE calculovacacional (
    id_calculo_vacacional integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    anios_servicio integer DEFAULT 0,
    mes integer DEFAULT 0,
    bono_sin_alicuota double precision DEFAULT 0 NOT NULL,
    monto_alicuota double precision DEFAULT 0 NOT NULL,
    monto_petrolero double precision DEFAULT 0 NOT NULL,
    bono_extra double precision DEFAULT 0 NOT NULL,
    total_bono double precision DEFAULT 0 NOT NULL,
    dias double precision DEFAULT 0 NOT NULL,
    base_fijo double precision DEFAULT 0 NOT NULL,
    base_promedio double precision DEFAULT 0 NOT NULL,
    base_devengado double precision DEFAULT 0 NOT NULL,
    base_proyectado double precision DEFAULT 0 NOT NULL,
    momento_pago character varying(1) DEFAULT 'A'::character varying NOT NULL,
    base_alicuota double precision DEFAULT 0 NOT NULL,
    CONSTRAINT cal_momento_pago CHECK ((((momento_pago)::text = 'A'::text) OR ((momento_pago)::text = 'D'::text)))
);


ALTER TABLE calculovacacional OWNER TO postgres;

--
-- TOC entry 204 (class 1259 OID 184144)
-- Name: caracteristicadependencia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE caracteristicadependencia (
    id_caracteristica_dependencia integer NOT NULL,
    nombre character varying(60) NOT NULL,
    codigo character varying(2) NOT NULL,
    id_tipo_caracteristica integer NOT NULL
);


ALTER TABLE caracteristicadependencia OWNER TO postgres;

--
-- TOC entry 205 (class 1259 OID 184147)
-- Name: cargamasivatrabajador; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cargamasivatrabajador (
    id_tipo_personal integer NOT NULL,
    cedula integer NOT NULL,
    id_cargo integer NOT NULL,
    codigo_nomina integer NOT NULL,
    id_dependencia integer NOT NULL,
    fecha_ingreso date NOT NULL,
    fecha_ingreso_apn date NOT NULL,
    fecha_vacaciones date NOT NULL,
    fecha_prestaciones date NOT NULL,
    fecha_antiguedad date NOT NULL,
    id_banco_nomina integer NOT NULL,
    tipo_cta_nomina character varying(1) NOT NULL,
    cuenta_nomina character varying(20) NOT NULL,
    id_banco_lph integer NOT NULL,
    cuenta_lph character varying(20),
    id_banco_fid integer NOT NULL,
    cuenta_fid character varying(20),
    porcentaje_islr double precision DEFAULT 0 NOT NULL,
    cotiza_sso character varying(1) NOT NULL,
    cotiza_spf character varying(1) NOT NULL,
    cotiza_lph character varying(1) NOT NULL,
    cotiza_fju character varying(1) NOT NULL,
    id_causa_movimiento integer NOT NULL,
    id_registro integer
);


ALTER TABLE cargamasivatrabajador OWNER TO postgres;

--
-- TOC entry 206 (class 1259 OID 184151)
-- Name: cargo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cargo (
    id_cargo integer NOT NULL,
    cod_cargo character varying(8) NOT NULL,
    id_manual_cargo integer NOT NULL,
    tipo_cargo character varying(1) DEFAULT '1'::character varying NOT NULL,
    grado integer DEFAULT 1 NOT NULL,
    sub_grado integer DEFAULT 1 NOT NULL,
    caucion character varying(1) DEFAULT '0'::character varying NOT NULL,
    id_serie_cargo integer,
    descripcion_cargo character varying(60) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT cargo_caucion CHECK ((((((caucion)::text = '0'::text) OR ((caucion)::text = '1'::text)) OR ((caucion)::text = '2'::text)) OR ((caucion)::text = '3'::text))),
    CONSTRAINT cargo_tipo_cargo CHECK ((((((((tipo_cargo)::text = '0'::text) OR ((tipo_cargo)::text = '1'::text)) OR ((tipo_cargo)::text = '2'::text)) OR ((tipo_cargo)::text = '3'::text)) OR ((tipo_cargo)::text = '4'::text)) OR ((tipo_cargo)::text = '5'::text)))
);


ALTER TABLE cargo OWNER TO postgres;

--
-- TOC entry 207 (class 1259 OID 184161)
-- Name: cargoespecifica; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cargoespecifica (
    id_cargo_especifica integer NOT NULL,
    id_uel_especifica integer NOT NULL,
    id_registro_cargos integer,
    anio integer DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 100 NOT NULL
);


ALTER TABLE cargoespecifica OWNER TO postgres;

--
-- TOC entry 208 (class 1259 OID 184166)
-- Name: cargosplan; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cargosplan (
    id_cargos_plan integer NOT NULL,
    id_plan_personal integer NOT NULL,
    id_movimiento_cargo integer NOT NULL,
    cantidad_planificados integer DEFAULT 0 NOT NULL,
    cantidad_realizados integer DEFAULT 0 NOT NULL,
    cantidad_aprobados integer DEFAULT 0 NOT NULL,
    cantidad_devueltos integer DEFAULT 0 NOT NULL
);


ALTER TABLE cargosplan OWNER TO postgres;

--
-- TOC entry 209 (class 1259 OID 184173)
-- Name: carrera; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE carrera (
    id_carrera integer NOT NULL,
    cod_carrera character varying(3) NOT NULL,
    nombre character varying(90) NOT NULL
);


ALTER TABLE carrera OWNER TO postgres;

--
-- TOC entry 210 (class 1259 OID 184176)
-- Name: carreraarea; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE carreraarea (
    id_carrera_area integer NOT NULL,
    id_carrera integer NOT NULL,
    id_area_carrera integer NOT NULL
);


ALTER TABLE carreraarea OWNER TO postgres;

--
-- TOC entry 211 (class 1259 OID 184179)
-- Name: categoriadocente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE categoriadocente (
    id_categoria_docente integer NOT NULL,
    digito_categoria character varying(1) NOT NULL,
    nombre character varying(60) NOT NULL
);


ALTER TABLE categoriadocente OWNER TO postgres;

--
-- TOC entry 212 (class 1259 OID 184182)
-- Name: categoriapersonal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE categoriapersonal (
    id_categoria_personal integer NOT NULL,
    cod_categoria character varying(1) NOT NULL,
    desc_categoria character varying(20) NOT NULL
);


ALTER TABLE categoriapersonal OWNER TO postgres;

--
-- TOC entry 213 (class 1259 OID 184185)
-- Name: categoriapresupuesto; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE categoriapresupuesto (
    id_categoria_presupuesto integer NOT NULL,
    cod_categoria character varying(1) NOT NULL,
    desc_categoria character varying(20) NOT NULL
);


ALTER TABLE categoriapresupuesto OWNER TO postgres;

--
-- TOC entry 214 (class 1259 OID 184188)
-- Name: causadocente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE causadocente (
    id_causa_docente integer NOT NULL,
    cod_causa_docente character varying(2) NOT NULL,
    nombre character varying(60) NOT NULL,
    tipo character varying(1) DEFAULT '1'::character varying
);


ALTER TABLE causadocente OWNER TO postgres;

--
-- TOC entry 215 (class 1259 OID 184192)
-- Name: causamovimiento; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE causamovimiento (
    id_causa_movimiento integer NOT NULL,
    cod_causa_movimiento character varying(3) NOT NULL,
    descripcion character varying(60) NOT NULL,
    id_movimiento_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    sujeto_lefp character varying(1),
    grado99 character varying(1),
    tipo_validacion integer,
    formato character varying(8)
);


ALTER TABLE causamovimiento OWNER TO postgres;

--
-- TOC entry 216 (class 1259 OID 184196)
-- Name: causapersonal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE causapersonal (
    id_causa_personal integer NOT NULL,
    id_causa_movimiento integer NOT NULL,
    id_clasificacion_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE causapersonal OWNER TO postgres;

--
-- TOC entry 217 (class 1259 OID 184200)
-- Name: certificacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE certificacion (
    id_certificacion integer NOT NULL,
    id_area_conocimiento integer,
    fecha_certificacion date,
    vigencia character varying(20),
    id_personal integer NOT NULL,
    nombre_certificacion character varying(90),
    nombre_entidad character varying(90) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE certificacion OWNER TO postgres;

--
-- TOC entry 218 (class 1259 OID 184204)
-- Name: certificado; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE certificado (
    id_certificado integer NOT NULL,
    id_personal integer NOT NULL,
    fecha_emision date,
    numero character varying(10) DEFAULT 0 NOT NULL,
    libro character varying(10),
    folio character varying(10),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE certificado OWNER TO postgres;

--
-- TOC entry 219 (class 1259 OID 184209)
-- Name: cierreunidad; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cierreunidad (
    id_cierre_unidad integer NOT NULL,
    id_unidad_funcional integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_usuario integer NOT NULL,
    mes_cierre integer DEFAULT 0 NOT NULL,
    anio_cierre integer DEFAULT 0 NOT NULL,
    fecha_proceso date
);


ALTER TABLE cierreunidad OWNER TO postgres;

--
-- TOC entry 220 (class 1259 OID 184214)
-- Name: ciudad; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ciudad (
    id_ciudad integer NOT NULL,
    abreviatura character varying(3),
    cod_ciudad character varying(3) NOT NULL,
    id_estado integer NOT NULL,
    nombre character varying(40) NOT NULL,
    multiplicador double precision DEFAULT 0 NOT NULL,
    fluctuacion double precision DEFAULT 0 NOT NULL
);


ALTER TABLE ciudad OWNER TO postgres;

--
-- TOC entry 221 (class 1259 OID 184219)
-- Name: clasificacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE clasificacion (
    id_clasificacion integer NOT NULL,
    cod_clasificacion character varying(1),
    nombre character varying(40),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE clasificacion OWNER TO postgres;

--
-- TOC entry 222 (class 1259 OID 184223)
-- Name: clasificaciondependencia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE clasificaciondependencia (
    id_clasificacion_dependencia integer NOT NULL,
    id_dependencia integer NOT NULL,
    id_caracteristica_dependencia integer NOT NULL
);


ALTER TABLE clasificaciondependencia OWNER TO postgres;

--
-- TOC entry 223 (class 1259 OID 184226)
-- Name: clasificacionpersonal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE clasificacionpersonal (
    id_clasificacion_personal integer NOT NULL,
    id_categoria_personal integer NOT NULL,
    id_relacion_personal integer NOT NULL,
    id_categoria_presupuesto integer
);


ALTER TABLE clasificacionpersonal OWNER TO postgres;

--
-- TOC entry 224 (class 1259 OID 184229)
-- Name: comisionservicio; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE comisionservicio (
    id_comision_servicio integer NOT NULL,
    id_sede_diplomatica integer,
    fecha_fin date,
    fecha_inicio date NOT NULL,
    id_personal integer NOT NULL,
    observaciones text,
    nombre_institucion character varying(90) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE comisionservicio OWNER TO postgres;

--
-- TOC entry 225 (class 1259 OID 184236)
-- Name: comisionservicioext; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE comisionservicioext (
    id_comision_servicio_ext integer NOT NULL,
    id_sede_diplomatica integer,
    fecha_fin date,
    fecha_inicio date NOT NULL,
    id_personal integer NOT NULL,
    observaciones text,
    nombre_institucion character varying(90) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE comisionservicioext OWNER TO postgres;

--
-- TOC entry 226 (class 1259 OID 184243)
-- Name: concepto; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE concepto (
    id_concepto integer NOT NULL,
    cod_concepto character varying(4) NOT NULL,
    descripcion character varying(50) NOT NULL,
    tipo_prestamo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    unidad character varying(1) DEFAULT 'M'::character varying NOT NULL,
    valor double precision DEFAULT 0 NOT NULL,
    reservado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    sueldo_basico character varying(1) DEFAULT 'N'::character varying NOT NULL,
    compensacion character varying(1) DEFAULT 'S'::character varying NOT NULL,
    primas_cargo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    primas_trabajador character varying(1) DEFAULT 'N'::character varying NOT NULL,
    gravable character varying(1) DEFAULT 'N'::character varying NOT NULL,
    deduccion_sindicato character varying(1) DEFAULT 'N'::character varying NOT NULL,
    deduccion_gremio character varying(1) DEFAULT 'N'::character varying NOT NULL,
    sobretiempo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    beneficio character varying(1) DEFAULT 'N'::character varying NOT NULL,
    jubilacion character varying(1) DEFAULT 'N'::character varying NOT NULL,
    anticipo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    deduccion_caja character varying(1) DEFAULT 'N'::character varying NOT NULL,
    aporte_patronal character varying(1) DEFAULT 'N'::character varying NOT NULL,
    embargo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    prestaciones_nr character varying(1) DEFAULT 'N'::character varying NOT NULL,
    prestaciones_vr character varying(1) DEFAULT 'N'::character varying NOT NULL,
    onapre character varying(1) DEFAULT 'N'::character varying NOT NULL,
    recalculo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    anual character varying(1) DEFAULT 'N'::character varying NOT NULL,
    ocurrencia double precision DEFAULT 1 NOT NULL,
    movimiento character varying(1) DEFAULT 'N'::character varying NOT NULL,
    proyeccion character varying(1) DEFAULT 'N'::character varying NOT NULL,
    base_legal text,
    id_organismo integer NOT NULL,
    id_sitp integer DEFAULT 0,
    tiempo_sitp date,
    id_concepto_aporte integer,
    ajuste_sueldo character varying(1) DEFAULT 'N'::character varying,
    sueldo_integral character varying(1),
    retroactivo character varying(1),
    id_concepto_retroactivo integer,
    id_concepto_caja integer,
    retroactivo_anterior character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_concepto_retroactivo_anterior integer,
    CONSTRAINT conajuste_sueldo CHECK ((((ajuste_sueldo)::text = 'S'::text) OR ((ajuste_sueldo)::text = 'N'::text))),
    CONSTRAINT concepto_anticipo CHECK ((((anticipo)::text = 'S'::text) OR ((anticipo)::text = 'N'::text))),
    CONSTRAINT concepto_anual CHECK ((((anual)::text = 'S'::text) OR ((anual)::text = 'N'::text))),
    CONSTRAINT concepto_aporte_patronal CHECK ((((aporte_patronal)::text = 'S'::text) OR ((aporte_patronal)::text = 'N'::text))),
    CONSTRAINT concepto_beneficio CHECK ((((beneficio)::text = 'S'::text) OR ((beneficio)::text = 'N'::text))),
    CONSTRAINT concepto_compensacion CHECK ((((compensacion)::text = 'S'::text) OR ((compensacion)::text = 'N'::text))),
    CONSTRAINT concepto_deduccion_caja CHECK ((((deduccion_caja)::text = 'S'::text) OR ((deduccion_caja)::text = 'N'::text))),
    CONSTRAINT concepto_deduccion_gremio CHECK ((((deduccion_gremio)::text = 'S'::text) OR ((deduccion_gremio)::text = 'N'::text))),
    CONSTRAINT concepto_deduccion_sindicato CHECK ((((deduccion_sindicato)::text = 'S'::text) OR ((deduccion_sindicato)::text = 'N'::text))),
    CONSTRAINT concepto_embargo CHECK ((((embargo)::text = 'S'::text) OR ((embargo)::text = 'N'::text))),
    CONSTRAINT concepto_gravable CHECK ((((gravable)::text = 'S'::text) OR ((gravable)::text = 'N'::text))),
    CONSTRAINT concepto_jubilacion CHECK ((((jubilacion)::text = 'S'::text) OR ((jubilacion)::text = 'N'::text))),
    CONSTRAINT concepto_onapre CHECK ((((onapre)::text = 'S'::text) OR ((onapre)::text = 'N'::text))),
    CONSTRAINT concepto_prestaciones_nr CHECK ((((prestaciones_nr)::text = 'S'::text) OR ((prestaciones_nr)::text = 'N'::text))),
    CONSTRAINT concepto_prestaciones_vr CHECK ((((prestaciones_vr)::text = 'S'::text) OR ((prestaciones_vr)::text = 'N'::text))),
    CONSTRAINT concepto_primas_cargo CHECK ((((primas_cargo)::text = 'S'::text) OR ((primas_cargo)::text = 'N'::text))),
    CONSTRAINT concepto_primas_trabajador CHECK ((((primas_trabajador)::text = 'S'::text) OR ((primas_trabajador)::text = 'N'::text))),
    CONSTRAINT concepto_recalculo CHECK ((((recalculo)::text = 'S'::text) OR ((recalculo)::text = 'N'::text))),
    CONSTRAINT concepto_reservado CHECK ((((reservado)::text = 'S'::text) OR ((reservado)::text = 'N'::text))),
    CONSTRAINT concepto_sobretiempo CHECK ((((sobretiempo)::text = 'S'::text) OR ((sobretiempo)::text = 'N'::text))),
    CONSTRAINT concepto_sueldo_basico CHECK ((((sueldo_basico)::text = 'S'::text) OR ((sueldo_basico)::text = 'N'::text))),
    CONSTRAINT concepto_unidad CHECK (((((unidad)::text = 'H'::text) OR ((unidad)::text = 'D'::text)) OR ((unidad)::text = 'M'::text))),
    CONSTRAINT consueldointegral CHECK ((((sueldo_integral)::text = 'S'::text) OR ((sueldo_integral)::text = 'N'::text))),
    CONSTRAINT movimiento CHECK ((((movimiento)::text = 'S'::text) OR ((movimiento)::text = 'N'::text))),
    CONSTRAINT proyeccion CHECK ((((proyeccion)::text = 'S'::text) OR ((proyeccion)::text = 'N'::text)))
);


ALTER TABLE concepto OWNER TO postgres;

--
-- TOC entry 227 (class 1259 OID 184303)
-- Name: conceptoasociado; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptoasociado (
    id_concepto_asociado integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_concepto_asociar integer NOT NULL,
    base character varying(1) DEFAULT 'M'::character varying NOT NULL,
    factor double precision DEFAULT 1 NOT NULL,
    id_sitp integer DEFAULT 0,
    tiempo_sitp date,
    CONSTRAINT concepto_asociado_base CHECK (((((((base)::text = 'N'::text) OR ((base)::text = 'H'::text)) OR ((base)::text = 'D'::text)) OR ((base)::text = 'M'::text)) OR ((base)::text = 'S'::text)))
);


ALTER TABLE conceptoasociado OWNER TO postgres;

--
-- TOC entry 228 (class 1259 OID 184310)
-- Name: conceptocargo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptocargo (
    id_concepto_cargo integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_cargo integer NOT NULL,
    excluir character varying(1) DEFAULT 'N'::character varying NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    automatico_ingreso character varying(1) DEFAULT 'N'::character varying,
    id_sitp integer,
    tiempo_sitp date,
    CONSTRAINT conceptoc_excluir CHECK ((((excluir)::text = 'S'::text) OR ((excluir)::text = 'N'::text)))
);


ALTER TABLE conceptocargo OWNER TO postgres;

--
-- TOC entry 229 (class 1259 OID 184319)
-- Name: conceptocargoanio; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptocargoanio (
    id_concepto_cargo_anio integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_cargo integer NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    anios integer NOT NULL,
    id_sitp integer,
    tiempo_sitp date
);


ALTER TABLE conceptocargoanio OWNER TO postgres;

--
-- TOC entry 230 (class 1259 OID 184325)
-- Name: conceptoconstancia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptoconstancia (
    id_concepto_constancia integer NOT NULL,
    id_constancia integer,
    id_concepto_tipo_personal integer,
    origen character varying(1) DEFAULT 'F'::character varying
);


ALTER TABLE conceptoconstancia OWNER TO postgres;

--
-- TOC entry 231 (class 1259 OID 184329)
-- Name: conceptocuenta; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptocuenta (
    id_concepto_cuenta integer NOT NULL,
    id_concepto_tipo_personal integer DEFAULT 0 NOT NULL,
    id_cuenta_presupuesto integer DEFAULT 0 NOT NULL
);


ALTER TABLE conceptocuenta OWNER TO postgres;

--
-- TOC entry 232 (class 1259 OID 184334)
-- Name: conceptocuentacontable; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptocuentacontable (
    id_concepto_cuenta integer NOT NULL,
    id_concepto_tipo_personal integer DEFAULT 0 NOT NULL,
    id_cuenta_contable integer DEFAULT 0 NOT NULL
);


ALTER TABLE conceptocuentacontable OWNER TO postgres;

--
-- TOC entry 233 (class 1259 OID 184339)
-- Name: conceptodependencia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptodependencia (
    id_concepto_dependencia integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_dependencia integer NOT NULL,
    excluir character varying(1) DEFAULT 'N'::character varying NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    automatico_ingreso character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_sitp integer,
    tiempo_sitp date,
    CONSTRAINT conceptodepen_excluir CHECK ((((excluir)::text = 'S'::text) OR ((excluir)::text = 'N'::text))),
    CONSTRAINT conceptodepen_ingreso CHECK ((((automatico_ingreso)::text = 'S'::text) OR ((automatico_ingreso)::text = 'N'::text)))
);


ALTER TABLE conceptodependencia OWNER TO postgres;

--
-- TOC entry 234 (class 1259 OID 184349)
-- Name: conceptodiplomatico; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptodiplomatico (
    id_concepto_diplomatico integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    monto double precision DEFAULT 0 NOT NULL
);


ALTER TABLE conceptodiplomatico OWNER TO postgres;

--
-- TOC entry 235 (class 1259 OID 184353)
-- Name: conceptodocente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptodocente (
    id_concepto_docente integer NOT NULL,
    id_movimiento integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    fecha_registro date,
    variable character varying(1) DEFAULT 'S'::character varying
);


ALTER TABLE conceptodocente OWNER TO postgres;

--
-- TOC entry 236 (class 1259 OID 184359)
-- Name: conceptoespecifica; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptoespecifica (
    id_concepto_especifica integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_uel_especifica integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL
);


ALTER TABLE conceptoespecifica OWNER TO postgres;

--
-- TOC entry 237 (class 1259 OID 184363)
-- Name: conceptoevaluacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptoevaluacion (
    id_concepto_evaluacion integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    eliminar_despues_aumento character varying(1) DEFAULT 'N'::character varying
);


ALTER TABLE conceptoevaluacion OWNER TO postgres;

--
-- TOC entry 238 (class 1259 OID 184367)
-- Name: conceptofijo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptofijo (
    id_concepto_fijo integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    fecha_registro date,
    fecha_comienzo date,
    fecha_eliminar date,
    documento_soporte character varying(10),
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    restituir character varying(1) DEFAULT 'N'::character varying,
    monto_restituir double precision DEFAULT 0,
    unidades_restituir double precision DEFAULT 0,
    monto_anterior double precision DEFAULT 0,
    monto_proyectado double precision,
    CONSTRAINT conceptofijo_estatus CHECK ((((estatus)::text = 'A'::text) OR ((estatus)::text = 'S'::text)))
);


ALTER TABLE conceptofijo OWNER TO postgres;

--
-- TOC entry 239 (class 1259 OID 184379)
-- Name: conceptofijo_cambio_unidad; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptofijo_cambio_unidad (
    cedula integer,
    unidad double precision,
    id_trabajador1 integer
);


ALTER TABLE conceptofijo_cambio_unidad OWNER TO postgres;

--
-- TOC entry 240 (class 1259 OID 184382)
-- Name: conceptoliquidacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptoliquidacion (
    id_concepto_variable integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    fecha_registro date,
    documento_soporte character varying(10),
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    mes_sobretiempo integer DEFAULT 0,
    anio_sobretiempo integer DEFAULT 0,
    monto_proyectado integer DEFAULT 0,
    CONSTRAINT conceptoliquidacion_estatus CHECK ((((estatus)::text = 'A'::text) OR ((estatus)::text = 'S'::text)))
);


ALTER TABLE conceptoliquidacion OWNER TO postgres;

--
-- TOC entry 241 (class 1259 OID 184392)
-- Name: conceptomovimiento; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptomovimiento (
    id_concepto_movimiento integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    anio integer NOT NULL,
    numero_movimiento integer NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    monto_anterior double precision DEFAULT 0 NOT NULL
);


ALTER TABLE conceptomovimiento OWNER TO postgres;

--
-- TOC entry 242 (class 1259 OID 184397)
-- Name: conceptoprestaciones; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptoprestaciones (
    id_concepto_prestaciones integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    tipo character varying(1) DEFAULT 'B'::character varying NOT NULL,
    posicion_onapre character varying(1) DEFAULT '0'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT conceptoprestaciones_tipo CHECK ((((tipo)::text = 'B'::text) OR ((tipo)::text = 'D'::text)))
);


ALTER TABLE conceptoprestaciones OWNER TO postgres;

--
-- TOC entry 243 (class 1259 OID 184404)
-- Name: conceptopresupuesto; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptopresupuesto (
    id_concepto_presupuesto integer NOT NULL,
    id_concepto_tipo_personal integer DEFAULT 0 NOT NULL,
    id_cuenta_presupuesto integer DEFAULT 0 NOT NULL
);


ALTER TABLE conceptopresupuesto OWNER TO postgres;

--
-- TOC entry 244 (class 1259 OID 184409)
-- Name: conceptoproyectado; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptoproyectado (
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    monto double precision DEFAULT 0 NOT NULL
);


ALTER TABLE conceptoproyectado OWNER TO postgres;

--
-- TOC entry 245 (class 1259 OID 184413)
-- Name: conceptoresumen; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptoresumen (
    id_concepto_resumen integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    id_unidad_administradora integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    numero_nomina integer DEFAULT 0 NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    tipo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    cerrado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    CONSTRAINT conceptoresumen_tipo CHECK ((((tipo)::text = 'F'::text) OR ((tipo)::text = 'V'::text)))
);


ALTER TABLE conceptoresumen OWNER TO postgres;

--
-- TOC entry 246 (class 1259 OID 184424)
-- Name: conceptotipopersonal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptotipopersonal (
    id_concepto_tipo_personal integer NOT NULL,
    id_concepto integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    tipo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    valor double precision DEFAULT 0 NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    automatico_ingreso character varying(1) DEFAULT 'N'::character varying NOT NULL,
    tope_minimo double precision DEFAULT 0 NOT NULL,
    tope_maximo double precision DEFAULT 0 NOT NULL,
    tope_anual double precision DEFAULT 0 NOT NULL,
    monto_escenario double precision DEFAULT 0 NOT NULL,
    formula_concepto character varying(1) DEFAULT 'N'::character varying NOT NULL,
    multiplicador_formula double precision DEFAULT 0 NOT NULL,
    otra_moneda character varying(1) DEFAULT 'N'::character varying NOT NULL,
    homologacion character varying(1) DEFAULT 'N'::character varying NOT NULL,
    cod_concepto character varying(4),
    cod_tipo_personal character varying(2),
    cod_frecuencia_pago integer,
    base_legal text,
    anual character varying(1) DEFAULT 'N'::character varying,
    ocurrencia double precision DEFAULT 1,
    id_sitp integer DEFAULT 0,
    tiempo_sitp date,
    id_contrato_colectivo integer,
    refleja_movimiento character varying(1) DEFAULT 'N'::character varying,
    aprobacion_mpd character varying(1) DEFAULT 'N'::character varying,
    recalculo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    distribucion character varying(1) DEFAULT 'S'::character varying,
    base_jubilacion character varying(1) DEFAULT 'N'::character varying,
    CONSTRAINT concepto_tipo_personal_automati CHECK ((((automatico_ingreso)::text = 'S'::text) OR ((automatico_ingreso)::text = 'N'::text))),
    CONSTRAINT concepto_tipo_personal_formula_ CHECK ((((formula_concepto)::text = 'S'::text) OR ((formula_concepto)::text = 'N'::text))),
    CONSTRAINT concepto_tipo_personal_homologa CHECK ((((homologacion)::text = 'S'::text) OR ((homologacion)::text = 'N'::text))),
    CONSTRAINT concepto_tipo_personal_otra_mon CHECK ((((otra_moneda)::text = 'S'::text) OR ((otra_moneda)::text = 'N'::text))),
    CONSTRAINT concepto_tipo_personal_tipo CHECK ((((((tipo)::text = 'F'::text) OR ((tipo)::text = 'P'::text)) OR ((tipo)::text = 'I'::text)) OR ((tipo)::text = 'D'::text))),
    CONSTRAINT ctp_anual CHECK ((((anual)::text = 'S'::text) OR ((anual)::text = 'N'::text)))
);


ALTER TABLE conceptotipopersonal OWNER TO postgres;

--
-- TOC entry 247 (class 1259 OID 184456)
-- Name: conceptotipopersonalhist; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptotipopersonalhist (
    id_concepto_tipo_personal integer NOT NULL,
    id_concepto integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    tipo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    valor double precision DEFAULT 0 NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    automatico_ingreso character varying(1) DEFAULT 'N'::character varying NOT NULL,
    tope_minimo double precision DEFAULT 0 NOT NULL,
    tope_maximo double precision DEFAULT 0 NOT NULL,
    tope_anual double precision DEFAULT 0 NOT NULL,
    monto_escenario double precision DEFAULT 0 NOT NULL,
    formula_concepto character varying(1) DEFAULT 'N'::character varying NOT NULL,
    multiplicador_formula double precision DEFAULT 0 NOT NULL,
    otra_moneda character varying(1) DEFAULT 'N'::character varying NOT NULL,
    homologacion character varying(1) DEFAULT 'N'::character varying NOT NULL,
    cod_concepto character varying(4),
    cod_tipo_personal character varying(2),
    cod_frecuencia_pago integer,
    base_legal text,
    anual character varying(1) DEFAULT 'N'::character varying,
    ocurrencia double precision DEFAULT 1,
    id_sitp integer DEFAULT 0,
    tiempo_sitp date,
    id_contrato_colectivo integer,
    refleja_movimiento character varying(1) DEFAULT 'N'::character varying,
    aprobacion_mpd character varying(1) DEFAULT 'N'::character varying,
    recalculo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    distribucion character varying(1) DEFAULT 'S'::character varying,
    base_jubilacion character varying(1) DEFAULT 'N'::character varying
);


ALTER TABLE conceptotipopersonalhist OWNER TO postgres;

--
-- TOC entry 248 (class 1259 OID 184482)
-- Name: conceptoutilidades; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptoutilidades (
    id_concepto_utilidades integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    tipo character varying(1) DEFAULT 'B'::character varying NOT NULL,
    mes_inicio integer DEFAULT 0 NOT NULL,
    factor double precision DEFAULT 0 NOT NULL,
    tope_monto double precision DEFAULT 0 NOT NULL,
    tope_unidades double precision DEFAULT 0 NOT NULL,
    mes_buscar integer DEFAULT 0,
    semana_buscar integer DEFAULT 0,
    mes_final integer DEFAULT 0 NOT NULL,
    numero_dias integer DEFAULT 0 NOT NULL,
    numero_meses double precision DEFAULT 0
);


ALTER TABLE conceptoutilidades OWNER TO postgres;

--
-- TOC entry 249 (class 1259 OID 184495)
-- Name: conceptovacaciones; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptovacaciones (
    id_concepto_vacaciones integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    tipo character varying(1) DEFAULT 'B'::character varying NOT NULL,
    mes_cerrado character varying(1) DEFAULT 'S'::character varying NOT NULL,
    mes30 character varying(1) DEFAULT 'S'::character varying NOT NULL,
    numero_meses integer DEFAULT 0 NOT NULL,
    factor double precision DEFAULT 0 NOT NULL,
    tope_monto double precision DEFAULT 0 NOT NULL,
    tope_unidades double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    alicuota_vacacional character varying(1) DEFAULT 'N'::character varying,
    id_concepto_alicuota integer,
    CONSTRAINT conceptovacaciones_alicuota_vacacional CHECK ((((alicuota_vacacional)::text = 'S'::text) OR ((alicuota_vacacional)::text = 'N'::text))),
    CONSTRAINT conceptovacaciones_mes30 CHECK ((((mes30)::text = 'S'::text) OR ((mes30)::text = 'N'::text))),
    CONSTRAINT conceptovacaciones_mes_cerrado CHECK ((((mes_cerrado)::text = 'S'::text) OR ((mes_cerrado)::text = 'N'::text))),
    CONSTRAINT conceptovacaciones_tipo CHECK ((((((tipo)::text = 'B'::text) OR ((tipo)::text = 'P'::text)) OR ((tipo)::text = 'D'::text)) OR ((tipo)::text = 'Y'::text)))
);


ALTER TABLE conceptovacaciones OWNER TO postgres;

--
-- TOC entry 250 (class 1259 OID 184511)
-- Name: conceptovariable; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conceptovariable (
    id_concepto_variable integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    fecha_registro date,
    documento_soporte character varying(10),
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    mes_sobretiempo integer DEFAULT 0,
    anio_sobretiempo integer DEFAULT 0,
    monto_proyectado double precision DEFAULT 0,
    CONSTRAINT conceptovariable_estatus CHECK ((((estatus)::text = 'A'::text) OR ((estatus)::text = 'S'::text)))
);


ALTER TABLE conceptovariable OWNER TO postgres;

--
-- TOC entry 251 (class 1259 OID 184521)
-- Name: concurso; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE concurso (
    id_concurso integer NOT NULL,
    cod_concurso character varying(15) NOT NULL,
    nombre character varying(60) NOT NULL,
    descripcion text,
    estatus character varying(1) DEFAULT '1'::character varying,
    fecha_apertura date,
    inicio_convocatoria date,
    fin_convocatoria date,
    inicio_retiro date,
    fin_retiro date,
    inicio_inscripcion date,
    fin_inscripcion date,
    ini_publicacion_insc date,
    fin_publicacion_insc date,
    ini_examenes date,
    fin_examenes date,
    ini_publicacion_exam date,
    fin_publicacion_exam date,
    ini_entrevistas date,
    fin_entrevistas date,
    ini_publicacion_entr date,
    fin_publicacion_entr date,
    entrega_informe date,
    id_organismo integer NOT NULL,
    aprobado_mpd character varying(1) DEFAULT 'S'::character varying,
    id_plan_personal integer
);


ALTER TABLE concurso OWNER TO postgres;

--
-- TOC entry 252 (class 1259 OID 184529)
-- Name: concursocargo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE concursocargo (
    id_concurso_cargo integer NOT NULL,
    id_concurso integer NOT NULL,
    id_registro_cargos integer NOT NULL,
    id_postulado_concurso integer,
    cedula integer,
    estatus character varying(1) DEFAULT 'P'::character varying NOT NULL
);


ALTER TABLE concursocargo OWNER TO postgres;

--
-- TOC entry 253 (class 1259 OID 184533)
-- Name: constancia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE constancia (
    id_constancia integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    tipo character varying(15),
    oficina character varying(90) NOT NULL,
    firmante character varying(90) NOT NULL,
    cargo character varying(90) NOT NULL,
    nombramiento text,
    observacion text,
    pie_pagina_uno character varying(90),
    pie_pagina_dos character varying(90),
    pie_pagina_tres character varying(90),
    direccion character varying(10),
    telefono integer,
    pie_pagina_cuatro character varying(90),
    iniciales character varying(10)
);


ALTER TABLE constancia OWNER TO postgres;

--
-- TOC entry 254 (class 1259 OID 184539)
-- Name: continente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE continente (
    id_continente integer NOT NULL,
    abreviatura character varying(3),
    cod_continente character varying(1) NOT NULL,
    nombre character varying(40) NOT NULL
);


ALTER TABLE continente OWNER TO postgres;

--
-- TOC entry 255 (class 1259 OID 184542)
-- Name: contrato; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE contrato (
    id_contrato integer NOT NULL,
    fecha_inicio date,
    fecha_fin date,
    fecha_registro date,
    fecha_rescision date,
    estatus character varying(1) DEFAULT 'V'::character varying NOT NULL,
    modalidad character varying(1) DEFAULT 'M'::character varying NOT NULL,
    prorroga character varying(1) DEFAULT 'S'::character varying NOT NULL,
    institucion character varying(90),
    monto_unico double precision DEFAULT 0 NOT NULL,
    monto_mensual double precision DEFAULT 0 NOT NULL,
    objeto_contrato text,
    tareas_contrato text,
    observaciones text,
    id_tipo_contrato integer NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    apartado character varying(20)
);


ALTER TABLE contrato OWNER TO postgres;

--
-- TOC entry 256 (class 1259 OID 184554)
-- Name: contratocolectivo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE contratocolectivo (
    id_contrato_colectivo integer NOT NULL,
    cod_contrato_colectivo character varying(10) NOT NULL,
    denominacion character varying(90) NOT NULL,
    descripcion text,
    sector character varying(90),
    fecha_vigencia date,
    fecha_vencimiento date,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE contratocolectivo OWNER TO postgres;

--
-- TOC entry 257 (class 1259 OID 184561)
-- Name: contratosplan; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE contratosplan (
    id_contratos_plan integer NOT NULL,
    id_plan_personal integer NOT NULL,
    id_region integer NOT NULL,
    cantidad_aprobados integer DEFAULT 0 NOT NULL,
    cantidad_realizados integer DEFAULT 0 NOT NULL
);


ALTER TABLE contratosplan OWNER TO postgres;

--
-- TOC entry 258 (class 1259 OID 184566)
-- Name: credencial; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE credencial (
    id_credencial integer NOT NULL,
    id_subtipo_credencial integer NOT NULL,
    numero character varying(15) NOT NULL,
    color character varying(20) NOT NULL,
    fecha_entrega date,
    fecha_retiro date,
    observaciones text,
    id_personal integer NOT NULL,
    motivo character varying(1) NOT NULL
);


ALTER TABLE credencial OWNER TO postgres;

--
-- TOC entry 259 (class 1259 OID 184572)
-- Name: cuadroonapre; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cuadroonapre (
    id_cuadro_onapre integer NOT NULL,
    id_organismo integer NOT NULL,
    id_proyecto integer,
    id_accion_centralizada integer,
    id_clasificacion_personal integer NOT NULL,
    anio integer NOT NULL,
    tipo_cargo character varying(1) DEFAULT '1'::character varying NOT NULL,
    jornada character varying(1) DEFAULT 'C'::character varying NOT NULL,
    sexo_vacante character varying(1) DEFAULT 'M'::character varying NOT NULL,
    cantidad integer DEFAULT 0 NOT NULL,
    sueldo double precision DEFAULT 0 NOT NULL,
    compensacion double precision DEFAULT 0 NOT NULL,
    primas double precision DEFAULT 0 NOT NULL,
    tipo character varying(20) DEFAULT 'PROYECTO'::character varying NOT NULL
);


ALTER TABLE cuadroonapre OWNER TO postgres;

--
-- TOC entry 260 (class 1259 OID 184583)
-- Name: cuenta; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cuenta (
    cedula character varying(20),
    cuentano text
);


ALTER TABLE cuenta OWNER TO postgres;

--
-- TOC entry 261 (class 1259 OID 184589)
-- Name: cuentabanco; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cuentabanco (
    id_cuenta_banco integer NOT NULL,
    id_banco integer NOT NULL,
    cod_cuenta_banco character varying(20) NOT NULL,
    agencia character varying(80),
    id_ciudad integer NOT NULL,
    id_organismo integer NOT NULL
);


ALTER TABLE cuentabanco OWNER TO postgres;

--
-- TOC entry 262 (class 1259 OID 184592)
-- Name: cuentacontable; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cuentacontable (
    id_cuenta_contable integer NOT NULL,
    cod_contable character varying(20) NOT NULL,
    descripcion character varying(90) NOT NULL,
    tipo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    id_organismo integer NOT NULL,
    indicador integer DEFAULT 0,
    CONSTRAINT cuentacontable_tipo CHECK ((((tipo)::text = 'D'::text) OR ((tipo)::text = 'T'::text)))
);


ALTER TABLE cuentacontable OWNER TO postgres;

--
-- TOC entry 263 (class 1259 OID 184598)
-- Name: cuentapresupuesto; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cuentapresupuesto (
    id_cuenta_presupuesto integer NOT NULL,
    cod_presupuesto character varying(20) NOT NULL,
    descripcion character varying(98) NOT NULL,
    tipo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    id_organismo integer NOT NULL,
    indicador integer DEFAULT 0 NOT NULL,
    CONSTRAINT cuentapresupuesto_tipo CHECK ((((tipo)::text = 'D'::text) OR ((tipo)::text = 'T'::text)))
);


ALTER TABLE cuentapresupuesto OWNER TO postgres;

--
-- TOC entry 264 (class 1259 OID 184604)
-- Name: curso; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE curso (
    id_curso integer NOT NULL,
    cod_curso character varying(6) NOT NULL,
    descripcion character varying(60) NOT NULL,
    id_area_conocimiento integer NOT NULL,
    id_tipo_curso integer NOT NULL
);


ALTER TABLE curso OWNER TO postgres;

--
-- TOC entry 265 (class 1259 OID 184607)
-- Name: cursoentidad; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cursoentidad (
    id_curso_entidad integer NOT NULL,
    costo_participante double precision DEFAULT 0 NOT NULL,
    id_curso integer NOT NULL,
    id_entidad_educativa integer NOT NULL
);


ALTER TABLE cursoentidad OWNER TO postgres;

--
-- TOC entry 266 (class 1259 OID 184611)
-- Name: declaracion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE declaracion (
    id_declaracion integer NOT NULL,
    fecha_registro date,
    descargo character varying(60),
    observaciones text,
    id_personal integer NOT NULL,
    id_organismo integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE declaracion OWNER TO postgres;

--
-- TOC entry 267 (class 1259 OID 184618)
-- Name: dedicaciondocente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE dedicaciondocente (
    id_dedicacion_docente integer NOT NULL,
    digito_dedicacion character varying(1) NOT NULL,
    nombre character varying(60) NOT NULL
);


ALTER TABLE dedicaciondocente OWNER TO postgres;

--
-- TOC entry 268 (class 1259 OID 184621)
-- Name: denominacionticket; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE denominacionticket (
    id_denominacion_ticket integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_proveedor_ticket integer NOT NULL,
    valor double precision DEFAULT 0 NOT NULL,
    tickets_por_dia integer DEFAULT 0 NOT NULL,
    estatus character varying(1) DEFAULT 'S'::character varying NOT NULL,
    costo double precision DEFAULT 0
);


ALTER TABLE denominacionticket OWNER TO postgres;

--
-- TOC entry 269 (class 1259 OID 184628)
-- Name: dependencia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE dependencia (
    id_dependencia integer NOT NULL,
    cod_dependencia character varying(12) NOT NULL,
    dependencia_staff character varying(1) DEFAULT 'N'::character varying NOT NULL,
    vigente character varying(1) DEFAULT 'S'::character varying NOT NULL,
    fecha_fin date,
    fecha_vigencia date,
    localidad character varying(1) DEFAULT 'C'::character varying NOT NULL,
    nivel_estructura integer DEFAULT 1 NOT NULL,
    sede_diplomatica character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_tipo_dependencia integer,
    id_administradora_uel integer NOT NULL,
    id_unidad_funcional integer,
    id_grupo_organismo integer,
    id_organismo integer NOT NULL,
    id_dependencia_anterior integer,
    nombre character varying(90) NOT NULL,
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying NOT NULL,
    id_sede integer,
    cod_cesta character varying(10),
    id_region integer NOT NULL,
    id_estructura integer,
    CONSTRAINT dependencia_aprobacion_mpd CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text))),
    CONSTRAINT dependencia_dependencia_staff CHECK ((((dependencia_staff)::text = 'S'::text) OR ((dependencia_staff)::text = 'N'::text))),
    CONSTRAINT dependencia_localidad CHECK ((((localidad)::text = 'C'::text) OR ((localidad)::text = 'R'::text))),
    CONSTRAINT dependencia_sede_diplomatica CHECK ((((sede_diplomatica)::text = 'S'::text) OR ((sede_diplomatica)::text = 'N'::text))),
    CONSTRAINT dependencia_vigente CHECK ((((vigente)::text = 'S'::text) OR ((vigente)::text = 'N'::text)))
);


ALTER TABLE dependencia OWNER TO postgres;

--
-- TOC entry 270 (class 1259 OID 184642)
-- Name: dependenciajudicial; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE dependenciajudicial (
    id_dependencia_judicial integer NOT NULL,
    id_dependencia integer NOT NULL,
    id_operacion integer NOT NULL,
    id_materia integer NOT NULL,
    id_instancia integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE dependenciajudicial OWNER TO postgres;

--
-- TOC entry 271 (class 1259 OID 184646)
-- Name: descuentoticket; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE descuentoticket (
    id_descuento_ticket integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    referencia_ticket integer DEFAULT 0 NOT NULL,
    referencia_embargo integer DEFAULT 0 NOT NULL,
    referencia_ausencia integer DEFAULT 0 NOT NULL,
    descuento_ausencia integer DEFAULT 0 NOT NULL,
    descuento_reposo integer DEFAULT 0 NOT NULL,
    descuento_permiso integer DEFAULT 0 NOT NULL,
    descuento_vacaciones integer DEFAULT 0 NOT NULL,
    descuento_otros integer DEFAULT 0 NOT NULL,
    pagado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    observaciones text
);


ALTER TABLE descuentoticket OWNER TO postgres;

--
-- TOC entry 272 (class 1259 OID 184663)
-- Name: detalledisquete; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE detalledisquete (
    id_detalle_disquete integer NOT NULL,
    id_disquete integer NOT NULL,
    tipo_registro character varying(1) DEFAULT 'D'::character varying NOT NULL,
    numero_campo integer DEFAULT 1 NOT NULL,
    tipo_campo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    longitud_campo integer DEFAULT 1 NOT NULL,
    campo_base_datos character varying(3) DEFAULT '0'::character varying NOT NULL,
    campo_entrada character varying(3) DEFAULT '0'::character varying,
    campo_usuario character varying(100),
    separador_decimal character varying(1) DEFAULT 'N'::character varying NOT NULL,
    alineacion_campo character varying(1) DEFAULT 'I'::character varying NOT NULL,
    rellenar_cero character varying(1) DEFAULT 'N'::character varying NOT NULL,
    multiplicador double precision DEFAULT 1 NOT NULL,
    id_concepto integer,
    campo_totales character varying(3) DEFAULT '0'::character varying
);


ALTER TABLE detalledisquete OWNER TO postgres;

--
-- TOC entry 273 (class 1259 OID 184677)
-- Name: detalletabulador; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE detalletabulador (
    id_detalle_tabulador integer NOT NULL,
    id_tabulador integer NOT NULL,
    grado integer DEFAULT 1 NOT NULL,
    sub_grado integer DEFAULT 1 NOT NULL,
    paso integer DEFAULT 1 NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    sueldo_hora double precision DEFAULT 0 NOT NULL,
    carga_horaria double precision DEFAULT 0 NOT NULL
);


ALTER TABLE detalletabulador OWNER TO postgres;

--
-- TOC entry 274 (class 1259 OID 184686)
-- Name: detalletabuladormed; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE detalletabuladormed (
    id_detalle_tabulador_med integer NOT NULL,
    id_tabulador integer NOT NULL,
    cod_cargo character varying(8) NOT NULL,
    sueldo_mensual double precision DEFAULT 0 NOT NULL,
    sueldo_hora double precision DEFAULT 0 NOT NULL,
    carga_horaria double precision DEFAULT 1 NOT NULL
);


ALTER TABLE detalletabuladormed OWNER TO postgres;

--
-- TOC entry 275 (class 1259 OID 184692)
-- Name: detalletabuladormre; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE detalletabuladormre (
    id_detalle_tabulador_mre integer NOT NULL,
    id_tabulador integer NOT NULL,
    id_ciudad integer NOT NULL,
    nivel integer DEFAULT 1 NOT NULL,
    asignacion_mensual double precision DEFAULT 0 NOT NULL,
    fluctuacion_mensual double precision DEFAULT 0 NOT NULL
);


ALTER TABLE detalletabuladormre OWNER TO postgres;

--
-- TOC entry 276 (class 1259 OID 184698)
-- Name: detalletabuladoronu; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE detalletabuladoronu (
    id_detalle_tabulador_onu integer NOT NULL,
    id_tabulador integer NOT NULL,
    nivel integer DEFAULT 1 NOT NULL,
    estado_civil character varying(1) DEFAULT 'S'::character varying,
    anios_servicio integer DEFAULT 0 NOT NULL,
    asignacion_anual double precision DEFAULT 0 NOT NULL
);


ALTER TABLE detalletabuladoronu OWNER TO postgres;

--
-- TOC entry 277 (class 1259 OID 184705)
-- Name: disquete; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE disquete (
    id_disquete integer NOT NULL,
    cod_disquete character varying(3) NOT NULL,
    descripcion character varying(90),
    tipo_disquete character varying(1) NOT NULL,
    id_banco integer,
    id_organismo integer NOT NULL,
    ingresos character varying(1) DEFAULT 'N'::character varying,
    egresos character varying(1) DEFAULT 'N'::character varying,
    id_concepto integer
);


ALTER TABLE disquete OWNER TO postgres;

--
-- TOC entry 278 (class 1259 OID 184710)
-- Name: dotacioncargo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE dotacioncargo (
    id_dotacion_cargo integer NOT NULL,
    id_cargo integer NOT NULL,
    id_subtipo_dotacion integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    unidad character varying(1) DEFAULT 'M'::character varying NOT NULL,
    cantidad double precision DEFAULT 0 NOT NULL,
    CONSTRAINT subtipodotacion_unidad CHECK ((((((unidad)::text = 'M'::text) OR ((unidad)::text = 'T'::text)) OR ((unidad)::text = 'S'::text)) OR ((unidad)::text = 'A'::text)))
);


ALTER TABLE dotacioncargo OWNER TO postgres;

--
-- TOC entry 279 (class 1259 OID 184716)
-- Name: dotacionentregada; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE dotacionentregada (
    id_dotacion_entregada integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_subtipo_dotacion integer NOT NULL,
    talla character varying(3),
    cantidad integer DEFAULT 0 NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    fecha date NOT NULL
);


ALTER TABLE dotacionentregada OWNER TO postgres;

--
-- TOC entry 280 (class 1259 OID 184722)
-- Name: dotaciontrabajador; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE dotaciontrabajador (
    id_dotacion_trabajador integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_subtipo_dotacion integer NOT NULL,
    talla character varying(3),
    cantidad integer DEFAULT 0 NOT NULL
);


ALTER TABLE dotaciontrabajador OWNER TO postgres;

--
-- TOC entry 281 (class 1259 OID 184726)
-- Name: educacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE educacion (
    id_educacion integer NOT NULL,
    anio_fin integer DEFAULT 0 NOT NULL,
    anio_inicio integer DEFAULT 0 NOT NULL,
    anios_experiencia integer DEFAULT 0 NOT NULL,
    becado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_carrera integer,
    id_titulo integer,
    estatus character varying(1) DEFAULT 'F'::character varying NOT NULL,
    sector character varying(1) DEFAULT 'P'::character varying NOT NULL,
    meses_experiencia integer DEFAULT 0 NOT NULL,
    id_nivel_educativo integer,
    id_ciudad integer,
    organizacion_becaria character varying(100),
    id_personal integer NOT NULL,
    registro_titulo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    fecha_registro date,
    reembolso character varying(1) DEFAULT 'N'::character varying NOT NULL,
    observaciones text,
    nombre_entidad character varying(90),
    nombre_postgrado character varying(90),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    escala character varying(3),
    calificacion character varying(3),
    mencion character varying(25),
    CONSTRAINT educacion_becado CHECK ((((becado)::text = 'S'::text) OR ((becado)::text = 'N'::text))),
    CONSTRAINT educacion_estatus CHECK (((((estatus)::text = 'E'::text) OR ((estatus)::text = 'F'::text)) OR ((estatus)::text = 'N'::text))),
    CONSTRAINT educacion_reembolso CHECK ((((reembolso)::text = 'S'::text) OR ((reembolso)::text = 'N'::text))),
    CONSTRAINT educacion_registro_titulo CHECK ((((registro_titulo)::text = 'S'::text) OR ((registro_titulo)::text = 'N'::text))),
    CONSTRAINT educacion_sector CHECK (((((sector)::text = 'P'::text) OR ((sector)::text = 'U'::text)) OR ((sector)::text = 'E'::text)))
);


ALTER TABLE educacion OWNER TO postgres;

--
-- TOC entry 282 (class 1259 OID 184747)
-- Name: elegible; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE elegible (
    id_elegible integer NOT NULL,
    anios_servicio_apn integer DEFAULT 0 NOT NULL,
    cedula integer NOT NULL,
    cedula_conyugue integer DEFAULT 0 NOT NULL,
    id_ciudad_nacimiento integer,
    id_ciudad_residencia integer,
    diestralidad character varying(1) DEFAULT 'D'::character varying NOT NULL,
    direccion_residencia character varying(100),
    doble_nacionalidad character varying(1) DEFAULT 'N'::character varying NOT NULL,
    email character varying(60),
    estado_civil character varying(1) DEFAULT 'S'::character varying NOT NULL,
    estatura double precision DEFAULT 0 NOT NULL,
    fecha_nacimiento date NOT NULL,
    fecha_nacionalizacion date,
    gaceta_nacionalizacion character varying(10),
    grado_licencia integer DEFAULT 0 NOT NULL,
    grupo_sanguineo character varying(3) DEFAULT 'NO'::character varying NOT NULL,
    maneja character varying(1) DEFAULT 'N'::character varying NOT NULL,
    marca_vehiculo character varying(20),
    mismo_organismo_conyugue character varying(1) DEFAULT 'N'::character varying NOT NULL,
    modelo_vehiculo character varying(20),
    nacionalidad character varying(1) DEFAULT 'V'::character varying NOT NULL,
    nacionalizado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    nombre_conyugue character varying(50),
    numero_libreta_militar character varying(15),
    numero_rif character varying(15),
    numero_sso character varying(15),
    otra_normativa_nac character varying(40),
    id_pais_nacionalidad integer,
    id_parroquia integer,
    peso double precision DEFAULT 0 NOT NULL,
    placa_vehiculo character varying(10),
    primer_apellido character varying(20) NOT NULL,
    primer_nombre character varying(20) NOT NULL,
    sector_trabajo_conyugue character varying(1) DEFAULT 'P'::character varying NOT NULL,
    segundo_apellido character varying(20),
    segundo_nombre character varying(20),
    sexo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    telefono_celular character varying(15),
    telefono_oficina character varying(15),
    telefono_residencia character varying(15),
    tenencia_vivienda character varying(1) DEFAULT 'P'::character varying NOT NULL,
    tiene_hijos character varying(1) DEFAULT 'N'::character varying NOT NULL,
    tiene_vehiculo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    tipo_vivienda character varying(1) DEFAULT 'A'::character varying NOT NULL,
    zona_postal_residencia character varying(6),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    fecha_registro date,
    cargo_aspira character varying(50),
    sueldo_aspira double precision DEFAULT 0 NOT NULL,
    disponibilidad character varying(20),
    trabajando_actualmente character varying(1) DEFAULT 'N'::character varying NOT NULL,
    trabajo_actual character varying(80),
    cargo_actual character varying(50),
    sueldo_actual double precision DEFAULT 0 NOT NULL,
    motivo_retiro character varying(30),
    CONSTRAINT elegible_diestralidad CHECK (((((diestralidad)::text = 'D'::text) OR ((diestralidad)::text = 'Z'::text)) OR ((diestralidad)::text = 'A'::text))),
    CONSTRAINT elegible_doble_nacionalidad CHECK ((((doble_nacionalidad)::text = 'S'::text) OR ((doble_nacionalidad)::text = 'N'::text))),
    CONSTRAINT elegible_estado_civil CHECK ((((((((estado_civil)::text = 'S'::text) OR ((estado_civil)::text = 'C'::text)) OR ((estado_civil)::text = 'D'::text)) OR ((estado_civil)::text = 'V'::text)) OR ((estado_civil)::text = 'U'::text)) OR ((estado_civil)::text = 'O'::text))),
    CONSTRAINT elegible_grupo_sanguineo CHECK (((((((((((grupo_sanguineo)::text = 'A+'::text) OR ((grupo_sanguineo)::text = 'A-'::text)) OR ((grupo_sanguineo)::text = 'B+'::text)) OR ((grupo_sanguineo)::text = 'B-'::text)) OR ((grupo_sanguineo)::text = 'O+'::text)) OR ((grupo_sanguineo)::text = 'O-'::text)) OR ((grupo_sanguineo)::text = 'AB+'::text)) OR ((grupo_sanguineo)::text = 'AB-'::text)) OR ((grupo_sanguineo)::text = 'NO'::text))),
    CONSTRAINT elegible_maneja CHECK ((((maneja)::text = 'S'::text) OR ((maneja)::text = 'N'::text))),
    CONSTRAINT elegible_mismo_organismo_conyug CHECK ((((mismo_organismo_conyugue)::text = 'S'::text) OR ((mismo_organismo_conyugue)::text = 'N'::text))),
    CONSTRAINT elegible_nacionalidad CHECK ((((nacionalidad)::text = 'V'::text) OR ((nacionalidad)::text = 'E'::text))),
    CONSTRAINT elegible_nacionalizado CHECK ((((nacionalizado)::text = 'S'::text) OR ((nacionalizado)::text = 'N'::text))),
    CONSTRAINT elegible_nivel_educativo CHECK ((((((((((((nivel_educativo)::text = 'P'::text) OR ((nivel_educativo)::text = 'B'::text)) OR ((nivel_educativo)::text = 'D'::text)) OR ((nivel_educativo)::text = 'T'::text)) OR ((nivel_educativo)::text = 'S'::text)) OR ((nivel_educativo)::text = 'U'::text)) OR ((nivel_educativo)::text = 'G'::text)) OR ((nivel_educativo)::text = 'C'::text)) OR ((nivel_educativo)::text = 'O'::text)) OR ((nivel_educativo)::text = 'N'::text))),
    CONSTRAINT elegible_sector_trabajo_conyugu CHECK (((((sector_trabajo_conyugue)::text = 'P'::text) OR ((sector_trabajo_conyugue)::text = 'U'::text)) OR ((sector_trabajo_conyugue)::text = 'N'::text))),
    CONSTRAINT elegible_sexo CHECK ((((sexo)::text = 'F'::text) OR ((sexo)::text = 'M'::text))),
    CONSTRAINT elegible_tenencia_vivienda CHECK ((((((tenencia_vivienda)::text = 'P'::text) OR ((tenencia_vivienda)::text = 'H'::text)) OR ((tenencia_vivienda)::text = 'A'::text)) OR ((tenencia_vivienda)::text = 'F'::text))),
    CONSTRAINT elegible_tiene_hijos CHECK ((((tiene_hijos)::text = 'S'::text) OR ((tiene_hijos)::text = 'N'::text))),
    CONSTRAINT elegible_tiene_vehiculo CHECK ((((tiene_vehiculo)::text = 'S'::text) OR ((tiene_vehiculo)::text = 'N'::text))),
    CONSTRAINT elegible_tipo_vivienda CHECK ((((((tipo_vivienda)::text = 'C'::text) OR ((tipo_vivienda)::text = 'A'::text)) OR ((tipo_vivienda)::text = 'H'::text)) OR ((tipo_vivienda)::text = 'B'::text)))
);


ALTER TABLE elegible OWNER TO postgres;

--
-- TOC entry 283 (class 1259 OID 184792)
-- Name: elegibleactividaddocente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE elegibleactividaddocente (
    id_elegible_actividad_docente integer NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    anio_inicio integer NOT NULL,
    anio_fin integer DEFAULT 0 NOT NULL,
    estatus character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_carrera integer,
    id_elegible integer NOT NULL,
    sector character varying(1) DEFAULT 'P'::character varying NOT NULL,
    relacion_laboral character varying(30),
    nombre_entidad character varying(90),
    asignatura character varying(60),
    observaciones text,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT elegibleactividaddocente_estatus CHECK ((((estatus)::text = 'S'::text) OR ((estatus)::text = 'N'::text))),
    CONSTRAINT elegibleactividaddocente_nivel_educativo CHECK ((((((((((((((((((nivel_educativo)::text = 'P'::text) OR ((nivel_educativo)::text = 'B'::text)) OR ((nivel_educativo)::text = 'I'::text)) OR ((nivel_educativo)::text = 'D'::text)) OR ((nivel_educativo)::text = 'H'::text)) OR ((nivel_educativo)::text = 'T'::text)) OR ((nivel_educativo)::text = 'S'::text)) OR ((nivel_educativo)::text = 'U'::text)) OR ((nivel_educativo)::text = 'E'::text)) OR ((nivel_educativo)::text = 'M'::text)) OR ((nivel_educativo)::text = 'C'::text)) OR ((nivel_educativo)::text = 'R'::text)) OR ((nivel_educativo)::text = 'G'::text)) OR ((nivel_educativo)::text = 'L'::text)) OR ((nivel_educativo)::text = 'O'::text)) OR ((nivel_educativo)::text = 'N'::text))),
    CONSTRAINT elegibleactividaddocente_sector CHECK (((((sector)::text = 'P'::text) OR ((sector)::text = 'U'::text)) OR ((sector)::text = 'E'::text)))
);


ALTER TABLE elegibleactividaddocente OWNER TO postgres;

--
-- TOC entry 284 (class 1259 OID 184806)
-- Name: elegibleafiliacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE elegibleafiliacion (
    id_elegible_afiliacion integer NOT NULL,
    fecha date,
    id_gremio integer NOT NULL,
    numero_afiliacion character varying(10),
    id_elegible integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE elegibleafiliacion OWNER TO postgres;

--
-- TOC entry 285 (class 1259 OID 184810)
-- Name: elegiblecertificacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE elegiblecertificacion (
    id_elegible_certificacion integer NOT NULL,
    id_area_conocimiento integer,
    fecha_certificacion date,
    vigencia character varying(20),
    id_elegible integer NOT NULL,
    nombre_certificacion character varying(90),
    nombre_entidad character varying(90) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE elegiblecertificacion OWNER TO postgres;

--
-- TOC entry 286 (class 1259 OID 184814)
-- Name: elegibleeducacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE elegibleeducacion (
    id_elegible_educacion integer NOT NULL,
    anio_fin integer DEFAULT 0 NOT NULL,
    anio_inicio integer DEFAULT 0 NOT NULL,
    anios_experiencia integer DEFAULT 0 NOT NULL,
    becado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_carrera integer,
    id_titulo integer,
    estatus character varying(1) DEFAULT 'F'::character varying NOT NULL,
    sector character varying(1) DEFAULT 'P'::character varying NOT NULL,
    meses_experiencia integer DEFAULT 0 NOT NULL,
    id_nivel_educativo integer,
    id_ciudad integer,
    organizacion_becaria character varying(100),
    id_elegible integer NOT NULL,
    registro_titulo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    fecha_registro date,
    reembolso character varying(1) DEFAULT 'N'::character varying NOT NULL,
    observaciones text,
    nombre_entidad character varying(90),
    nombre_postgrado character varying(90),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    escala character varying(3),
    calificacion character varying(3),
    mencion character varying(25),
    CONSTRAINT elegibleeducacion_becado CHECK ((((becado)::text = 'S'::text) OR ((becado)::text = 'N'::text))),
    CONSTRAINT elegibleeducacion_estatus CHECK (((((estatus)::text = 'E'::text) OR ((estatus)::text = 'F'::text)) OR ((estatus)::text = 'N'::text))),
    CONSTRAINT elegibleeducacion_reembolso CHECK ((((reembolso)::text = 'S'::text) OR ((reembolso)::text = 'N'::text))),
    CONSTRAINT elegibleeducacion_registro_titulo CHECK ((((registro_titulo)::text = 'S'::text) OR ((registro_titulo)::text = 'N'::text))),
    CONSTRAINT elegibleeducacion_sector CHECK (((((sector)::text = 'P'::text) OR ((sector)::text = 'U'::text)) OR ((sector)::text = 'E'::text)))
);


ALTER TABLE elegibleeducacion OWNER TO postgres;

--
-- TOC entry 287 (class 1259 OID 184835)
-- Name: elegibleestudio; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE elegibleestudio (
    id_elegible_estudio integer NOT NULL,
    anios_experiencia integer DEFAULT 0 NOT NULL,
    certifico character varying(1) DEFAULT 'S'::character varying NOT NULL,
    duracion integer DEFAULT 0 NOT NULL,
    meses_experiencia integer DEFAULT 0 NOT NULL,
    origen_curso character varying(1) DEFAULT 'I'::character varying NOT NULL,
    participacion character varying(1) DEFAULT 'P'::character varying NOT NULL,
    id_elegible integer NOT NULL,
    unidad_tiempo character varying(1) DEFAULT 'H'::character varying NOT NULL,
    becado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    financiamiento character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_pais integer,
    id_tipo_curso integer NOT NULL,
    id_area_conocimiento integer NOT NULL,
    observaciones character varying(100),
    nombre_curso character varying(90),
    nombre_entidad character varying(90) NOT NULL,
    anio integer DEFAULT 0,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT elegibleestudio_becado CHECK ((((becado)::text = 'S'::text) OR ((becado)::text = 'N'::text))),
    CONSTRAINT elegibleestudio_certifico CHECK ((((certifico)::text = 'S'::text) OR ((certifico)::text = 'N'::text))),
    CONSTRAINT elegibleestudio_financiamiento CHECK ((((((financiamiento)::text = 'O'::text) OR ((financiamiento)::text = 'E'::text)) OR ((financiamiento)::text = 'P'::text)) OR ((financiamiento)::text = 'N'::text))),
    CONSTRAINT elegibleestudio_origen_curso CHECK ((((origen_curso)::text = 'I'::text) OR ((origen_curso)::text = 'O'::text))),
    CONSTRAINT elegibleestudio_participacion CHECK (((((((participacion)::text = 'P'::text) OR ((participacion)::text = 'I'::text)) OR ((participacion)::text = 'O'::text)) OR ((participacion)::text = 'C'::text)) OR ((participacion)::text = 'N'::text))),
    CONSTRAINT elegibleestudio_unidad_tiempo CHECK (((((((unidad_tiempo)::text = 'H'::text) OR ((unidad_tiempo)::text = 'D'::text)) OR ((unidad_tiempo)::text = 'S'::text)) OR ((unidad_tiempo)::text = 'M'::text)) OR ((unidad_tiempo)::text = 'A'::text)))
);


ALTER TABLE elegibleestudio OWNER TO postgres;

--
-- TOC entry 288 (class 1259 OID 184855)
-- Name: elegibleexperiencia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE elegibleexperiencia (
    id_elegible_experiencia integer NOT NULL,
    nombre_institucion character varying(90),
    fecha_ingreso date NOT NULL,
    fecha_egreso date,
    cargo_ingreso character varying(50),
    cargo_egreso character varying(50),
    jefe character varying(50),
    telefono character varying(15),
    causa_retiro character varying(20),
    ultimo_sueldo double precision DEFAULT 0 NOT NULL,
    observaciones character varying(300),
    id_elegible integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE elegibleexperiencia OWNER TO postgres;

--
-- TOC entry 289 (class 1259 OID 184863)
-- Name: elegiblefamiliar; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE elegiblefamiliar (
    id_elegible_familiar integer NOT NULL,
    alergias character varying(100),
    alergico character varying(1) DEFAULT 'N'::character varying NOT NULL,
    cedula_familiar integer DEFAULT 0 NOT NULL,
    estado_civil character varying(1) DEFAULT 'S'::character varying NOT NULL,
    fecha_nacimiento date NOT NULL,
    goza_beca character varying(1) DEFAULT 'N'::character varying NOT NULL,
    goza_prima_por_hijo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    goza_seguro character varying(1) DEFAULT 'N'::character varying NOT NULL,
    goza_utiles character varying(1) DEFAULT 'N'::character varying NOT NULL,
    grado character varying(2),
    grupo_sanguineo character varying(3) DEFAULT 'NO'::character varying NOT NULL,
    mismo_organismo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    nino_excepcional character varying(1) DEFAULT 'N'::character varying NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'B'::character varying NOT NULL,
    parentesco character varying(1) DEFAULT 'C'::character varying NOT NULL,
    sexo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    talla_franela character varying(2),
    talla_gorra character varying(2),
    talla_pantalon character varying(2),
    id_elegible integer NOT NULL,
    primer_nombre character varying(30),
    segundo_nombre character varying(30),
    primer_apellido character varying(30),
    segundo_apellido character varying(30),
    promedio_nota character varying(2),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT elegiblefamiliar_alergico CHECK ((((alergico)::text = 'S'::text) OR ((alergico)::text = 'N'::text))),
    CONSTRAINT elegiblefamiliar_estado_civil CHECK ((((((((estado_civil)::text = 'S'::text) OR ((estado_civil)::text = 'C'::text)) OR ((estado_civil)::text = 'D'::text)) OR ((estado_civil)::text = 'V'::text)) OR ((estado_civil)::text = 'O'::text)) OR ((estado_civil)::text = 'U'::text))),
    CONSTRAINT elegiblefamiliar_goza_beca CHECK ((((goza_beca)::text = 'S'::text) OR ((goza_beca)::text = 'N'::text))),
    CONSTRAINT elegiblefamiliar_goza_prima_por_hijo CHECK ((((goza_prima_por_hijo)::text = 'S'::text) OR ((goza_prima_por_hijo)::text = 'N'::text))),
    CONSTRAINT elegiblefamiliar_goza_seguro CHECK ((((goza_seguro)::text = 'S'::text) OR ((goza_seguro)::text = 'N'::text))),
    CONSTRAINT elegiblefamiliar_goza_utiles CHECK ((((goza_utiles)::text = 'S'::text) OR ((goza_utiles)::text = 'N'::text))),
    CONSTRAINT elegiblefamiliar_grupo_sanguineo CHECK (((((((((((grupo_sanguineo)::text = 'A+'::text) OR ((grupo_sanguineo)::text = 'A-'::text)) OR ((grupo_sanguineo)::text = 'B+'::text)) OR ((grupo_sanguineo)::text = 'B-'::text)) OR ((grupo_sanguineo)::text = 'O+'::text)) OR ((grupo_sanguineo)::text = 'O-'::text)) OR ((grupo_sanguineo)::text = 'AB+'::text)) OR ((grupo_sanguineo)::text = 'AB-'::text)) OR ((grupo_sanguineo)::text = 'NO'::text))),
    CONSTRAINT elegiblefamiliar_mismo_organismo CHECK ((((mismo_organismo)::text = 'S'::text) OR ((mismo_organismo)::text = 'N'::text))),
    CONSTRAINT elegiblefamiliar_nino_excepcional CHECK ((((nino_excepcional)::text = 'S'::text) OR ((nino_excepcional)::text = 'N'::text))),
    CONSTRAINT elegiblefamiliar_nivel_educativo CHECK ((((((((((((((((((nivel_educativo)::text = 'P'::text) OR ((nivel_educativo)::text = 'B'::text)) OR ((nivel_educativo)::text = 'I'::text)) OR ((nivel_educativo)::text = 'D'::text)) OR ((nivel_educativo)::text = 'H'::text)) OR ((nivel_educativo)::text = 'T'::text)) OR ((nivel_educativo)::text = 'S'::text)) OR ((nivel_educativo)::text = 'U'::text)) OR ((nivel_educativo)::text = 'E'::text)) OR ((nivel_educativo)::text = 'M'::text)) OR ((nivel_educativo)::text = 'C'::text)) OR ((nivel_educativo)::text = 'R'::text)) OR ((nivel_educativo)::text = 'G'::text)) OR ((nivel_educativo)::text = 'L'::text)) OR ((nivel_educativo)::text = 'O'::text)) OR ((nivel_educativo)::text = 'N'::text))),
    CONSTRAINT elegiblefamiliar_parentesco CHECK (((((((((((((parentesco)::text = 'C'::text) OR ((parentesco)::text = 'M'::text)) OR ((parentesco)::text = 'P'::text)) OR ((parentesco)::text = 'H'::text)) OR ((parentesco)::text = 'S'::text)) OR ((parentesco)::text = 'E'::text)) OR ((parentesco)::text = 'A'::text)) OR ((parentesco)::text = 'B'::text)) OR ((parentesco)::text = 'I'::text)) OR ((parentesco)::text = 'T'::text)) OR ((parentesco)::text = 'O'::text))),
    CONSTRAINT elegiblefamiliar_sexo CHECK ((((sexo)::text = 'F'::text) OR ((sexo)::text = 'M'::text)))
);


ALTER TABLE elegiblefamiliar OWNER TO postgres;

--
-- TOC entry 290 (class 1259 OID 184892)
-- Name: elegiblehabilidad; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE elegiblehabilidad (
    id_elegible_habilidad integer NOT NULL,
    id_elegible integer NOT NULL,
    id_tipo_habilidad integer NOT NULL,
    nivel character varying(1) DEFAULT 'A'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT elegiblehabilidad_nivel CHECK (((((nivel)::text = 'A'::text) OR ((nivel)::text = 'M'::text)) OR ((nivel)::text = 'B'::text)))
);


ALTER TABLE elegiblehabilidad OWNER TO postgres;

--
-- TOC entry 291 (class 1259 OID 184898)
-- Name: elegibleidioma; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE elegibleidioma (
    id_elegible_idioma integer NOT NULL,
    escribe character varying(1) DEFAULT 'N'::character varying NOT NULL,
    habla character varying(1) DEFAULT 'N'::character varying NOT NULL,
    lee character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_elegible integer NOT NULL,
    id_tipo_idioma integer NOT NULL,
    examen_suficiencia character varying(1) DEFAULT 'N'::character varying,
    entidad_suficiencia character varying(100),
    fecha_suficiencia date,
    examen_academico character varying(1) DEFAULT 'N'::character varying,
    entidad_academica character varying(100),
    fecha_academica date,
    nombre_entidad character varying(100),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT elegibleidioma_escribe CHECK ((((((escribe)::text = 'N'::text) OR ((escribe)::text = 'B'::text)) OR ((escribe)::text = 'I'::text)) OR ((escribe)::text = 'A'::text))),
    CONSTRAINT elegibleidioma_examenacademico CHECK ((((examen_academico)::text = 'S'::text) OR ((examen_academico)::text = 'N'::text))),
    CONSTRAINT elegibleidioma_examensuficiencia CHECK ((((examen_suficiencia)::text = 'S'::text) OR ((examen_suficiencia)::text = 'N'::text))),
    CONSTRAINT elegibleidioma_habla CHECK ((((((habla)::text = 'N'::text) OR ((habla)::text = 'B'::text)) OR ((habla)::text = 'I'::text)) OR ((habla)::text = 'A'::text))),
    CONSTRAINT elegibleidioma_lee CHECK ((((((lee)::text = 'N'::text) OR ((lee)::text = 'B'::text)) OR ((lee)::text = 'I'::text)) OR ((lee)::text = 'A'::text)))
);


ALTER TABLE elegibleidioma OWNER TO postgres;

--
-- TOC entry 292 (class 1259 OID 184912)
-- Name: elegibleorganismo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE elegibleorganismo (
    id_elegible_organismo integer NOT NULL,
    id_elegible integer NOT NULL,
    id_organismo integer NOT NULL
);


ALTER TABLE elegibleorganismo OWNER TO postgres;

--
-- TOC entry 293 (class 1259 OID 184915)
-- Name: elegibleotraactividad; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE elegibleotraactividad (
    id_elegible_otra_actividad integer NOT NULL,
    observaciones character varying(100),
    id_tipo_otra_actividad integer NOT NULL,
    id_elegible integer NOT NULL
);


ALTER TABLE elegibleotraactividad OWNER TO postgres;

--
-- TOC entry 294 (class 1259 OID 184918)
-- Name: elegibleprofesion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE elegibleprofesion (
    id_elegible_profesion integer NOT NULL,
    id_profesion integer NOT NULL,
    id_elegible integer NOT NULL,
    actualmente character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT elegibleprofesion_actualmente CHECK ((((actualmente)::text = 'S'::text) OR ((actualmente)::text = 'N'::text)))
);


ALTER TABLE elegibleprofesion OWNER TO postgres;

--
-- TOC entry 295 (class 1259 OID 184924)
-- Name: elegiblepublicacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE elegiblepublicacion (
    id_elegible_publicacion integer DEFAULT 0 NOT NULL,
    anio_publicacion integer NOT NULL,
    editorial character varying(60),
    propiedad_intelectual character varying(25),
    titulo text,
    id_elegible integer NOT NULL,
    observaciones text,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE elegiblepublicacion OWNER TO postgres;

--
-- TOC entry 296 (class 1259 OID 184932)
-- Name: embargo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE embargo (
    id_embargo integer NOT NULL,
    oficio character varying(20),
    expediente character varying(20),
    fecha_vigencia date,
    numero_menores integer DEFAULT 0 NOT NULL,
    numero_tickets integer DEFAULT 0 NOT NULL,
    id_personal integer NOT NULL
);


ALTER TABLE embargo OWNER TO postgres;

--
-- TOC entry 297 (class 1259 OID 184937)
-- Name: embargoconcepto; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE embargoconcepto (
    id_embargo_concepto integer NOT NULL,
    id_embargo integer NOT NULL,
    id_concepto integer NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    banco character varying(30),
    cedula_beneficiario integer,
    cuenta character varying(30),
    nombre character varying(30),
    id_personal integer NOT NULL,
    rif_beneficiario character varying(12)
);


ALTER TABLE embargoconcepto OWNER TO postgres;

--
-- TOC entry 298 (class 1259 OID 184943)
-- Name: encabezadorendicionmensual; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE encabezadorendicionmensual (
    id_encabezado_rendicion_mensual integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    id_unidad_administradora integer NOT NULL,
    numero_nomina integer DEFAULT 0 NOT NULL,
    cod_unidad_administ character varying(6) NOT NULL,
    cerrado character varying(1) NOT NULL,
    usuario character varying(20) NOT NULL,
    fecha_cierre date,
    numero_expediente integer DEFAULT 0 NOT NULL,
    titulo character varying(50),
    aportes character varying(1) DEFAULT 'N'::character varying,
    id_aporte integer DEFAULT 0
);


ALTER TABLE encabezadorendicionmensual OWNER TO postgres;

--
-- TOC entry 299 (class 1259 OID 184952)
-- Name: encabezadoresumenmensual; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE encabezadoresumenmensual (
    id_encabezado_resumen_mensual integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    id_unidad_administradora integer NOT NULL,
    numero_nomina integer DEFAULT 0 NOT NULL,
    cod_unidad_administ character varying(6) NOT NULL,
    cerrado character varying(1) NOT NULL,
    usuario character varying(20) NOT NULL,
    fecha_cierre date,
    numero_expediente integer DEFAULT 0 NOT NULL,
    titulo character varying(50),
    aportes character varying(1) DEFAULT 'N'::character varying,
    id_aporte integer DEFAULT 0
);


ALTER TABLE encabezadoresumenmensual OWNER TO postgres;

--
-- TOC entry 300 (class 1259 OID 184961)
-- Name: encargaduria; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE encargaduria (
    id_encargaduria integer DEFAULT 0 NOT NULL,
    fecha_inicio date NOT NULL,
    fecha_fin date,
    cargo character varying(60) NOT NULL,
    dependencia character varying(90),
    id_personal integer NOT NULL,
    observaciones text,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    id_organismo integer DEFAULT 0 NOT NULL
);


ALTER TABLE encargaduria OWNER TO postgres;

--
-- TOC entry 301 (class 1259 OID 184970)
-- Name: entidadeducativa; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE entidadeducativa (
    id_entidad_educativa integer NOT NULL,
    cod_entidad_educativa character varying(6) NOT NULL,
    cod_ince character varying(10),
    direccion character varying(200),
    nombre character varying(60) NOT NULL,
    numero_rif character varying(10),
    persona_contacto character varying(50),
    sector character varying(1) DEFAULT 'P'::character varying NOT NULL,
    telefono1 character varying(15),
    telefono2 character varying(15),
    numero_med character varying(15),
    id_tipo_entidad integer NOT NULL,
    id_estado integer,
    CONSTRAINT entidadeducativa_sector CHECK ((((sector)::text = 'P'::text) OR ((sector)::text = 'U'::text)))
);


ALTER TABLE entidadeducativa OWNER TO postgres;

--
-- TOC entry 302 (class 1259 OID 184975)
-- Name: escalacuadroonapre; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE escalacuadroonapre (
    id_escalacuadroonapre integer NOT NULL,
    cod_escala character varying(10) NOT NULL,
    desde double precision DEFAULT 0 NOT NULL,
    hasta double precision DEFAULT 0 NOT NULL
);


ALTER TABLE escalacuadroonapre OWNER TO postgres;

--
-- TOC entry 303 (class 1259 OID 184980)
-- Name: establecimientosalud; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE establecimientosalud (
    id_establecimiento_salud integer NOT NULL,
    id_ciudad integer,
    cod_establecimiento_salud character varying(6) NOT NULL,
    direccion character varying(100),
    nombre character varying(60) NOT NULL,
    sector character varying(1) DEFAULT 'P'::character varying NOT NULL,
    sso character varying(1) DEFAULT 'S'::character varying NOT NULL,
    telefono character varying(15),
    CONSTRAINT establecimientosalud_sector CHECK ((((sector)::text = 'P'::text) OR ((sector)::text = 'U'::text))),
    CONSTRAINT establecimientosalud_sso CHECK ((((sso)::text = 'S'::text) OR ((sso)::text = 'N'::text)))
);


ALTER TABLE establecimientosalud OWNER TO postgres;

--
-- TOC entry 304 (class 1259 OID 184987)
-- Name: estado; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE estado (
    id_estado integer NOT NULL,
    abreviatura character varying(3),
    cod_estado character varying(2) NOT NULL,
    nombre character varying(40) NOT NULL,
    id_pais integer NOT NULL
);


ALTER TABLE estado OWNER TO postgres;

--
-- TOC entry 305 (class 1259 OID 184990)
-- Name: estructura; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE estructura (
    id_estructura integer NOT NULL,
    nombre character varying(60) NOT NULL,
    aprobacion_mpd character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_organismo integer NOT NULL,
    anio integer DEFAULT 0,
    fecha_vigencia date,
    vigente character varying(1) DEFAULT 'S'::character varying NOT NULL,
    CONSTRAINT estructura_aprobacion_mpd CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text)))
);


ALTER TABLE estructura OWNER TO postgres;

--
-- TOC entry 306 (class 1259 OID 184997)
-- Name: estudio; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE estudio (
    id_estudio integer NOT NULL,
    anios_experiencia integer DEFAULT 0 NOT NULL,
    certifico character varying(1) DEFAULT 'S'::character varying NOT NULL,
    duracion integer DEFAULT 0 NOT NULL,
    meses_experiencia integer DEFAULT 0 NOT NULL,
    origen_curso character varying(1) DEFAULT 'I'::character varying NOT NULL,
    participacion character varying(1) DEFAULT 'P'::character varying NOT NULL,
    id_personal integer NOT NULL,
    unidad_tiempo character varying(1) DEFAULT 'H'::character varying NOT NULL,
    becado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    financiamiento character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_pais integer,
    id_tipo_curso integer NOT NULL,
    id_area_conocimiento integer NOT NULL,
    observaciones character varying(100),
    nombre_curso character varying(90),
    nombre_entidad character varying(90),
    anio integer DEFAULT 0,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    escala character varying(3),
    calificacion character varying(3),
    CONSTRAINT estudio_becado CHECK ((((becado)::text = 'S'::text) OR ((becado)::text = 'N'::text))),
    CONSTRAINT estudio_certifico CHECK ((((certifico)::text = 'S'::text) OR ((certifico)::text = 'N'::text))),
    CONSTRAINT estudio_financiamiento CHECK ((((((financiamiento)::text = 'O'::text) OR ((financiamiento)::text = 'E'::text)) OR ((financiamiento)::text = 'P'::text)) OR ((financiamiento)::text = 'N'::text))),
    CONSTRAINT estudio_origen_curso CHECK ((((origen_curso)::text = 'I'::text) OR ((origen_curso)::text = 'O'::text))),
    CONSTRAINT estudio_participacion CHECK (((((((participacion)::text = 'P'::text) OR ((participacion)::text = 'I'::text)) OR ((participacion)::text = 'O'::text)) OR ((participacion)::text = 'C'::text)) OR ((participacion)::text = 'N'::text))),
    CONSTRAINT estudio_unidad_tiempo CHECK (((((((unidad_tiempo)::text = 'H'::text) OR ((unidad_tiempo)::text = 'D'::text)) OR ((unidad_tiempo)::text = 'S'::text)) OR ((unidad_tiempo)::text = 'M'::text)) OR ((unidad_tiempo)::text = 'A'::text)))
);


ALTER TABLE estudio OWNER TO postgres;

--
-- TOC entry 307 (class 1259 OID 185017)
-- Name: evaluacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE evaluacion (
    id_evaluacion integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    cedula_supervisor integer DEFAULT 0,
    nombre_supervisor character varying(50),
    cedula_jefe integer DEFAULT 0,
    nombre_jefe character varying(50),
    porcentaje_aumento double precision DEFAULT 0 NOT NULL,
    numero_pasos integer DEFAULT 0 NOT NULL,
    monto_aumentar double precision DEFAULT 0 NOT NULL,
    monto_unico double precision DEFAULT 0 NOT NULL,
    observaciones text,
    id_accion_evaluacion integer,
    id_resultado_evaluacion integer,
    id_personal integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_cargo integer,
    id_dependencia integer,
    nombre_cargo character varying(60),
    nombre_dependencia character varying(90),
    resultado_competencias double precision DEFAULT 0,
    resultado_objetivos double precision DEFAULT 0,
    manejo_bienes double precision DEFAULT 0,
    habito_seguridad double precision DEFAULT 0,
    calidad_trabajo double precision DEFAULT 0,
    cumplimiento_normas double precision DEFAULT 0,
    atencion_publico double precision DEFAULT 0,
    interes_trabajo double precision DEFAULT 0,
    cooperacion double precision DEFAULT 0,
    cantidad_trabajo double precision DEFAULT 0,
    toma_decisiones double precision DEFAULT 0,
    comunicacion double precision DEFAULT 0,
    capacidad_mando double precision DEFAULT 0,
    coordinacion double precision DEFAULT 0,
    nivel character varying(1)
);


ALTER TABLE evaluacion OWNER TO postgres;

--
-- TOC entry 308 (class 1259 OID 185045)
-- Name: excepcionbeneficiario; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE excepcionbeneficiario (
    id_excepcion_beneficiario integer NOT NULL,
    id_personal integer NOT NULL,
    id_plan_poliza integer NOT NULL,
    id_familiar integer NOT NULL
);


ALTER TABLE excepcionbeneficiario OWNER TO postgres;

--
-- TOC entry 309 (class 1259 OID 185048)
-- Name: excepcionticket; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE excepcionticket (
    id_excepcion_ticket integer NOT NULL,
    numero_tickets integer DEFAULT 0 NOT NULL,
    observaciones character varying(80) NOT NULL,
    id_trabajador integer DEFAULT 0 NOT NULL
);


ALTER TABLE excepcionticket OWNER TO postgres;

--
-- TOC entry 310 (class 1259 OID 185053)
-- Name: excepciontitular; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE excepciontitular (
    id_excepcion_titular integer NOT NULL,
    id_personal integer NOT NULL,
    id_plan_poliza integer NOT NULL
);


ALTER TABLE excepciontitular OWNER TO postgres;

--
-- TOC entry 311 (class 1259 OID 185056)
-- Name: experiencia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE experiencia (
    id_experiencia integer NOT NULL,
    nombre_institucion character varying(90),
    fecha_ingreso date NOT NULL,
    fecha_egreso date,
    cargo_ingreso character varying(50),
    cargo_egreso character varying(50),
    jefe character varying(50),
    telefono character varying(15),
    causa_retiro character varying(20),
    ultimo_sueldo double precision DEFAULT 0 NOT NULL,
    observaciones character varying(300),
    id_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE experiencia OWNER TO postgres;

--
-- TOC entry 312 (class 1259 OID 185064)
-- Name: experienciacargo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE experienciacargo (
    id_experiencia_cargo integer NOT NULL,
    id_cargo integer NOT NULL,
    id_cargo_requerido integer NOT NULL,
    anios_experiencia integer DEFAULT 0 NOT NULL,
    meses_experiencia integer DEFAULT 0 NOT NULL,
    peso double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE experienciacargo OWNER TO postgres;

--
-- TOC entry 313 (class 1259 OID 185071)
-- Name: experiencianoest; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE experiencianoest (
    id_experiencia_no_est integer NOT NULL,
    nombre_institucion character varying(90),
    fecha_ingreso date NOT NULL,
    fecha_egreso date,
    cargo_ingreso character varying(50),
    cargo_egreso character varying(50),
    jefe character varying(50),
    telefono character varying(15),
    causa_retiro character varying(20),
    ultimo_sueldo double precision DEFAULT 0 NOT NULL,
    observaciones character varying(300),
    id_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE experiencianoest OWNER TO postgres;

--
-- TOC entry 314 (class 1259 OID 185079)
-- Name: familiar; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE familiar (
    id_familiar integer NOT NULL,
    alergias character varying(100),
    alergico character varying(1) DEFAULT 'N'::character varying NOT NULL,
    cedula_familiar integer DEFAULT 0 NOT NULL,
    estado_civil character varying(1) DEFAULT 'S'::character varying NOT NULL,
    fecha_nacimiento date NOT NULL,
    goza_beca character varying(1) DEFAULT 'N'::character varying NOT NULL,
    goza_prima_por_hijo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    goza_seguro character varying(1) DEFAULT 'N'::character varying NOT NULL,
    goza_utiles character varying(1) DEFAULT 'N'::character varying NOT NULL,
    grado character varying(2),
    grupo_sanguineo character varying(3) DEFAULT 'NO'::character varying NOT NULL,
    mismo_organismo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    nino_excepcional character varying(1) DEFAULT 'N'::character varying NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'B'::character varying NOT NULL,
    parentesco character varying(1) DEFAULT 'C'::character varying NOT NULL,
    sexo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    talla_franela character varying(2),
    talla_gorra character varying(2),
    talla_pantalon character varying(2),
    id_personal integer NOT NULL,
    primer_nombre character varying(30),
    segundo_nombre character varying(30),
    primer_apellido character varying(30),
    segundo_apellido character varying(30),
    promedio_nota character varying(2),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT familiar_alergico CHECK ((((alergico)::text = 'S'::text) OR ((alergico)::text = 'N'::text))),
    CONSTRAINT familiar_estado_civil CHECK ((((((((estado_civil)::text = 'S'::text) OR ((estado_civil)::text = 'C'::text)) OR ((estado_civil)::text = 'D'::text)) OR ((estado_civil)::text = 'V'::text)) OR ((estado_civil)::text = 'O'::text)) OR ((estado_civil)::text = 'U'::text))),
    CONSTRAINT familiar_goza_beca CHECK ((((goza_beca)::text = 'S'::text) OR ((goza_beca)::text = 'N'::text))),
    CONSTRAINT familiar_goza_prima_por_hijo CHECK ((((goza_prima_por_hijo)::text = 'S'::text) OR ((goza_prima_por_hijo)::text = 'N'::text))),
    CONSTRAINT familiar_goza_seguro CHECK ((((goza_seguro)::text = 'S'::text) OR ((goza_seguro)::text = 'N'::text))),
    CONSTRAINT familiar_goza_utiles CHECK ((((goza_utiles)::text = 'S'::text) OR ((goza_utiles)::text = 'N'::text))),
    CONSTRAINT familiar_grupo_sanguineo CHECK (((((((((((grupo_sanguineo)::text = 'A+'::text) OR ((grupo_sanguineo)::text = 'A-'::text)) OR ((grupo_sanguineo)::text = 'B+'::text)) OR ((grupo_sanguineo)::text = 'B-'::text)) OR ((grupo_sanguineo)::text = 'O+'::text)) OR ((grupo_sanguineo)::text = 'O-'::text)) OR ((grupo_sanguineo)::text = 'AB+'::text)) OR ((grupo_sanguineo)::text = 'AB-'::text)) OR ((grupo_sanguineo)::text = 'NO'::text))),
    CONSTRAINT familiar_mismo_organismo CHECK ((((mismo_organismo)::text = 'S'::text) OR ((mismo_organismo)::text = 'N'::text))),
    CONSTRAINT familiar_nino_excepcional CHECK ((((nino_excepcional)::text = 'S'::text) OR ((nino_excepcional)::text = 'N'::text))),
    CONSTRAINT familiar_nivel_educativo CHECK ((((((((((((((((((nivel_educativo)::text = 'P'::text) OR ((nivel_educativo)::text = 'B'::text)) OR ((nivel_educativo)::text = 'I'::text)) OR ((nivel_educativo)::text = 'D'::text)) OR ((nivel_educativo)::text = 'H'::text)) OR ((nivel_educativo)::text = 'T'::text)) OR ((nivel_educativo)::text = 'S'::text)) OR ((nivel_educativo)::text = 'U'::text)) OR ((nivel_educativo)::text = 'E'::text)) OR ((nivel_educativo)::text = 'M'::text)) OR ((nivel_educativo)::text = 'C'::text)) OR ((nivel_educativo)::text = 'R'::text)) OR ((nivel_educativo)::text = 'G'::text)) OR ((nivel_educativo)::text = 'L'::text)) OR ((nivel_educativo)::text = 'O'::text)) OR ((nivel_educativo)::text = 'N'::text))),
    CONSTRAINT familiar_parentesco CHECK ((((((((((((((parentesco)::text = 'C'::text) OR ((parentesco)::text = 'M'::text)) OR ((parentesco)::text = 'P'::text)) OR ((parentesco)::text = 'H'::text)) OR ((parentesco)::text = 'S'::text)) OR ((parentesco)::text = 'E'::text)) OR ((parentesco)::text = 'A'::text)) OR ((parentesco)::text = 'B'::text)) OR ((parentesco)::text = 'I'::text)) OR ((parentesco)::text = 'T'::text)) OR ((parentesco)::text = 'O'::text)) OR ((parentesco)::text = 'U'::text))),
    CONSTRAINT familiar_sexo CHECK ((((sexo)::text = 'F'::text) OR ((sexo)::text = 'M'::text)))
);


ALTER TABLE familiar OWNER TO postgres;

--
-- TOC entry 315 (class 1259 OID 185108)
-- Name: fideicomiso; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE fideicomiso (
    id_trabajador integer,
    id_tipo_personal integer,
    anio integer,
    mes integer,
    monto_fideicomiso double precision,
    fecha date,
    id_banco integer,
    id_fideicomiso integer NOT NULL,
    anio_abono integer DEFAULT 0,
    mes_abono integer DEFAULT 0
);


ALTER TABLE fideicomiso OWNER TO postgres;

--
-- TOC entry 316 (class 1259 OID 185113)
-- Name: firmasreportes; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE firmasreportes (
    id_firmas_reportes integer NOT NULL,
    nombre character varying(80),
    cargo character varying(90),
    nombramiento text,
    id_organismo integer
);


ALTER TABLE firmasreportes OWNER TO postgres;

--
-- TOC entry 317 (class 1259 OID 185119)
-- Name: frecuenciapago; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE frecuenciapago (
    id_frecuencia_pago integer NOT NULL,
    cod_frecuencia_pago integer NOT NULL,
    nombre character varying(60) NOT NULL,
    id_organismo integer NOT NULL,
    reservado character varying(1) DEFAULT 'N'::character varying,
    CONSTRAINT frecuenciapago_reservado CHECK ((((reservado)::text = 'S'::text) OR ((reservado)::text = 'N'::text)))
);


ALTER TABLE frecuenciapago OWNER TO postgres;

--
-- TOC entry 318 (class 1259 OID 185124)
-- Name: frecuenciatipopersonal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE frecuenciatipopersonal (
    id_frecuencia_tipo_personal integer NOT NULL,
    id_frecuencia_pago integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    cod_tipo_personal character varying(2),
    cod_frecuencia_pago integer
);


ALTER TABLE frecuenciatipopersonal OWNER TO postgres;

--
-- TOC entry 319 (class 1259 OID 185127)
-- Name: fuentefinanciamiento; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE fuentefinanciamiento (
    id_fuente_financiamiento integer NOT NULL,
    cod_fuente_financiamiento character varying(2) NOT NULL,
    nombre character varying(50) NOT NULL
);


ALTER TABLE fuentefinanciamiento OWNER TO postgres;

--
-- TOC entry 320 (class 1259 OID 185130)
-- Name: gradodocente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE gradodocente (
    id_grado_docente integer NOT NULL,
    digito_grado character varying(1) NOT NULL,
    nombre character varying(60) NOT NULL
);


ALTER TABLE gradodocente OWNER TO postgres;

--
-- TOC entry 321 (class 1259 OID 185133)
-- Name: gradoniveldocente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE gradoniveldocente (
    id_grado_nivel_docente integer NOT NULL,
    id_grado_docente integer NOT NULL,
    id_nivel_docente integer NOT NULL
);


ALTER TABLE gradoniveldocente OWNER TO postgres;

--
-- TOC entry 322 (class 1259 OID 185136)
-- Name: gremio; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE gremio (
    id_gremio integer NOT NULL,
    cod_gremio character varying(3) NOT NULL,
    nombre character varying(90) NOT NULL
);


ALTER TABLE gremio OWNER TO postgres;

--
-- TOC entry 323 (class 1259 OID 185139)
-- Name: gruponomina; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE gruponomina (
    id_grupo_nomina integer NOT NULL,
    id_organismo integer NOT NULL,
    anticipo_quincenal double precision DEFAULT 0,
    cod_grupo_nomina integer NOT NULL,
    nombre character varying(60) NOT NULL,
    periodicidad character varying(1) DEFAULT 'S'::character varying,
    pagos_nomina_egresados character varying(1) DEFAULT 'N'::character varying,
    CONSTRAINT gruponomina_periodicidad CHECK (((((periodicidad)::text = 'Q'::text) OR ((periodicidad)::text = 'S'::text)) OR ((periodicidad)::text = 'M'::text)))
);


ALTER TABLE gruponomina OWNER TO postgres;

--
-- TOC entry 324 (class 1259 OID 185146)
-- Name: grupoocupacional; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE grupoocupacional (
    id_grupo_ocupacional integer NOT NULL,
    id_ramo_ocupacional integer NOT NULL,
    cod_grupo_ocupacional character varying(1) NOT NULL,
    nombre character varying(60) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE grupoocupacional OWNER TO postgres;

--
-- TOC entry 325 (class 1259 OID 185150)
-- Name: grupoorganismo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE grupoorganismo (
    id_grupo_organismo integer NOT NULL,
    cod_grupo_organismo character varying(4) NOT NULL,
    nombre character varying(60) NOT NULL,
    id_organismo integer NOT NULL,
    nombre_corto character varying(15)
);


ALTER TABLE grupoorganismo OWNER TO postgres;

--
-- TOC entry 326 (class 1259 OID 185153)
-- Name: grupoprofesion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE grupoprofesion (
    id_grupo_profesion integer NOT NULL,
    cod_grupo_profesion character varying(2) NOT NULL,
    nombre character varying(60) NOT NULL,
    descripcion character varying(400) NOT NULL
);


ALTER TABLE grupoprofesion OWNER TO postgres;

--
-- TOC entry 327 (class 1259 OID 185156)
-- Name: grupoticket; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE grupoticket (
    id_grupo_ticket integer NOT NULL,
    id_organismo integer NOT NULL,
    cod_grupo_ticket integer NOT NULL,
    nombre character varying(60) NOT NULL
);


ALTER TABLE grupoticket OWNER TO postgres;

--
-- TOC entry 328 (class 1259 OID 185159)
-- Name: guarderia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE guarderia (
    id_guarderia integer NOT NULL,
    cod_guarderia character varying(3) NOT NULL,
    nombre character varying(90) NOT NULL,
    direccion text,
    id_ciudad integer,
    telefono1 character varying(15),
    telefono2 character varying(15),
    persona_contacto character varying(50),
    numero_rif character varying(15),
    permiso_inam character varying(10),
    beneficiario_cheque character varying(10),
    seguro_medico character varying(1) DEFAULT 'S'::character varying NOT NULL,
    monto_inscripcion double precision DEFAULT 0 NOT NULL,
    monto_mensualidad double precision DEFAULT 0 NOT NULL,
    mes character varying(2) DEFAULT '1'::character varying NOT NULL,
    CONSTRAINT guarderia_mes CHECK ((((((((((((((mes)::text = '1'::text) OR ((mes)::text = '2'::text)) OR ((mes)::text = '3'::text)) OR ((mes)::text = '4'::text)) OR ((mes)::text = '5'::text)) OR ((mes)::text = '6'::text)) OR ((mes)::text = '7'::text)) OR ((mes)::text = '8'::text)) OR ((mes)::text = '9'::text)) OR ((mes)::text = '10'::text)) OR ((mes)::text = '11'::text)) OR ((mes)::text = '12'::text))),
    CONSTRAINT guarderia_seguro_medico CHECK ((((seguro_medico)::text = 'S'::text) OR ((seguro_medico)::text = 'N'::text)))
);


ALTER TABLE guarderia OWNER TO postgres;

--
-- TOC entry 329 (class 1259 OID 185171)
-- Name: guarderiafamiliar; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE guarderiafamiliar (
    id_guarderia_familiar integer NOT NULL,
    id_personal integer NOT NULL,
    id_familiar integer NOT NULL,
    id_guarderia integer NOT NULL,
    fecha_registro date NOT NULL,
    monto_mensualidad double precision DEFAULT 0 NOT NULL,
    monto_inscripcion double precision DEFAULT 0 NOT NULL
);


ALTER TABLE guarderiafamiliar OWNER TO postgres;

--
-- TOC entry 330 (class 1259 OID 185176)
-- Name: habilidad; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE habilidad (
    id_habilidad integer NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_habilidad integer NOT NULL,
    nivel character varying(1) DEFAULT 'A'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT habilidad_nivel CHECK (((((nivel)::text = 'A'::text) OR ((nivel)::text = 'M'::text)) OR ((nivel)::text = 'B'::text)))
);


ALTER TABLE habilidad OWNER TO postgres;

--
-- TOC entry 331 (class 1259 OID 185182)
-- Name: habilidadcargo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE habilidadcargo (
    id_habilidad_cargo integer NOT NULL,
    id_cargo integer NOT NULL,
    id_tipo_habilidad integer NOT NULL,
    nivel character varying(1) DEFAULT 'A'::character varying NOT NULL,
    peso double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT habilidadcargo_nivel CHECK (((((nivel)::text = 'A'::text) OR ((nivel)::text = 'M'::text)) OR ((nivel)::text = 'B'::text)))
);


ALTER TABLE habilidadcargo OWNER TO postgres;

--
-- TOC entry 332 (class 1259 OID 185189)
-- Name: historialapn; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE historialapn (
    id_historial_apn integer NOT NULL,
    fecha_registro date,
    fecha_movimiento date NOT NULL,
    codigo_nomina integer DEFAULT 0 NOT NULL,
    sueldo double precision DEFAULT 0 NOT NULL,
    compensacion double precision DEFAULT 0 NOT NULL,
    primas_cargo double precision DEFAULT 0 NOT NULL,
    primas_trabajador double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    paso integer DEFAULT 1 NOT NULL,
    cod_dependencia character varying(12),
    cod_sede character varying(6),
    tipo_personal character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_tipo_personal character varying(60),
    id_clasificacion_personal integer,
    id_causa_movimiento integer,
    cod_causa_movimiento character varying(3),
    cod_manual_cargo integer,
    cod_cargo character varying(8),
    descripcion_cargo character varying(60) NOT NULL,
    cod_tabulador character varying(6),
    afecta_sueldo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying NOT NULL,
    documento_soporte character varying(25),
    localidad character varying(1) DEFAULT 'C'::character varying NOT NULL,
    numero_movimiento integer DEFAULT 0 NOT NULL,
    cedula integer NOT NULL,
    apellidos_nombres character varying(60),
    id_personal integer NOT NULL,
    remesa character varying(4),
    estatus character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_dependencia character varying(90),
    nombre_sede character varying(90),
    id_organismo integer NOT NULL,
    cod_organismo character varying(12),
    nombre_organismo character varying(90),
    observaciones text,
    usuario character varying(25),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    cod_region character varying(2),
    nombre_region character varying(60),
    origen_movimiento character varying(1),
    fecha_punto_cuenta date,
    punto_cuenta character varying(15),
    cod_concurso character varying(15),
    CONSTRAINT historialan_localidad CHECK ((((localidad)::text = 'C'::text) OR ((localidad)::text = 'R'::text))),
    CONSTRAINT historialapn_afecta_sueld CHECK ((((afecta_sueldo)::text = 'S'::text) OR ((afecta_sueldo)::text = 'N'::text))),
    CONSTRAINT historialapn_aprobacion_m CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text)))
);


ALTER TABLE historialapn OWNER TO postgres;

--
-- TOC entry 333 (class 1259 OID 185212)
-- Name: historialorganismo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE historialorganismo (
    id_historial_organismo integer NOT NULL,
    fecha_registro date,
    fecha_movimiento date NOT NULL,
    codigo_nomina integer DEFAULT 0 NOT NULL,
    sueldo double precision DEFAULT 0 NOT NULL,
    compensacion double precision DEFAULT 0 NOT NULL,
    primas_cargo double precision DEFAULT 0 NOT NULL,
    primas_trabajador double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    paso integer DEFAULT 1 NOT NULL,
    cod_dependencia character varying(12),
    cod_sede character varying(6),
    tipo_personal character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_tipo_personal character varying(60),
    id_clasificacion_personal integer,
    id_causa_movimiento integer,
    cod_causa_movimiento character varying(3),
    cod_manual_cargo integer,
    cod_cargo character varying(8),
    descripcion_cargo character varying(60) NOT NULL,
    cod_tabulador character varying(6),
    afecta_sueldo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying NOT NULL,
    documento_soporte character varying(25),
    localidad character varying(1) DEFAULT 'C'::character varying NOT NULL,
    numero_movimiento integer DEFAULT 0 NOT NULL,
    cedula integer NOT NULL,
    apellidos_nombres character varying(60),
    id_personal integer NOT NULL,
    remesa character varying(4),
    estatus character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_dependencia character varying(90),
    nombre_sede character varying(90),
    id_organismo integer NOT NULL,
    cod_organismo character varying(12),
    nombre_organismo character varying(90),
    observaciones text,
    usuario character varying(25),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    cod_region character varying(2),
    nombre_region character varying(60),
    origen_movimiento character varying(1),
    fecha_punto_cuenta date,
    punto_cuenta character varying(15),
    cod_concurso character varying(15),
    CONSTRAINT historialorganismo_afecta_sueld CHECK ((((afecta_sueldo)::text = 'S'::text) OR ((afecta_sueldo)::text = 'N'::text))),
    CONSTRAINT historialorganismo_aprobacion_m CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text))),
    CONSTRAINT historialorganismo_localidad CHECK ((((localidad)::text = 'C'::text) OR ((localidad)::text = 'R'::text)))
);


ALTER TABLE historialorganismo OWNER TO postgres;

--
-- TOC entry 334 (class 1259 OID 185235)
-- Name: historialremun; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE historialremun (
    id_historial_remun integer NOT NULL,
    fecha_movimiento date NOT NULL,
    codrac integer DEFAULT 0 NOT NULL,
    sueldo double precision DEFAULT 0 NOT NULL,
    compensacion double precision DEFAULT 0 NOT NULL,
    primas_cargo double precision DEFAULT 0 NOT NULL,
    primas_trabajador double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    paso integer DEFAULT 1 NOT NULL,
    codigo_dependencia character varying(12),
    id_clasificacion_personal integer,
    id_mov_remuneracion integer,
    codigo_manual integer,
    codigo_cargo character varying(8),
    descripcion_cargo character varying(60) NOT NULL,
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying NOT NULL,
    documento_soporte character varying(25),
    numero_movimiento integer DEFAULT 0 NOT NULL,
    id_personal integer NOT NULL,
    nombre_dependencia character varying(90),
    nombre_institucion character varying(90),
    id_organismo integer NOT NULL,
    id_cargo integer,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT historialremun_aprobacion_m CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text)))
);


ALTER TABLE historialremun OWNER TO postgres;

--
-- TOC entry 335 (class 1259 OID 185249)
-- Name: historicobaseislr; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE historicobaseislr (
    id_historico_base_islr integer NOT NULL,
    id_grupo_nomina integer,
    id_tipo_personal integer,
    numero_nomina integer,
    id_nomina_especial integer,
    anio integer,
    mes integer,
    semana_quincena integer,
    id_trabajador integer,
    porcentaje double precision,
    asignaciones double precision,
    deducciones double precision
);


ALTER TABLE historicobaseislr OWNER TO postgres;

--
-- TOC entry 336 (class 1259 OID 185252)
-- Name: historicobaseislr_id_historico_base_islr_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE historicobaseislr_id_historico_base_islr_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE historicobaseislr_id_historico_base_islr_seq OWNER TO postgres;

--
-- TOC entry 7768 (class 0 OID 0)
-- Dependencies: 336
-- Name: historicobaseislr_id_historico_base_islr_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE historicobaseislr_id_historico_base_islr_seq OWNED BY historicobaseislr.id_historico_base_islr;


--
-- TOC entry 337 (class 1259 OID 185254)
-- Name: historicocargos; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE historicocargos (
    id_historico_cargos integer NOT NULL,
    id_registro integer NOT NULL,
    id_causa_movimiento integer NOT NULL,
    id_cargo integer NOT NULL,
    id_dependencia integer NOT NULL,
    codigo_nomina integer NOT NULL,
    situacion character varying(1) DEFAULT 'O'::character varying NOT NULL,
    movimiento character varying(1) DEFAULT '4'::character varying NOT NULL,
    fecha_movimiento date,
    horas double precision DEFAULT 8 NOT NULL,
    cedula integer,
    primer_apellido character varying(20),
    segundo_apellido character varying(20),
    primer_nombre character varying(20),
    segundo_nombre character varying(20)
);


ALTER TABLE historicocargos OWNER TO postgres;

--
-- TOC entry 338 (class 1259 OID 185260)
-- Name: historicodevengadointegral; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE historicodevengadointegral (
    id_historico_devengado_integral integer NOT NULL,
    id_personal integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    sueldo_integral double precision DEFAULT 0 NOT NULL
);


ALTER TABLE historicodevengadointegral OWNER TO postgres;

--
-- TOC entry 339 (class 1259 OID 185266)
-- Name: historiconomina; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE historiconomina (
    id_historico_nomina integer NOT NULL,
    id_trabajador integer NOT NULL,
    numero_nomina integer DEFAULT 1 NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    semana_quincena integer DEFAULT 0 NOT NULL,
    fecha date,
    id_dependencia integer NOT NULL,
    id_cargo integer NOT NULL,
    numero_registro integer DEFAULT 1 NOT NULL,
    codigo_nomina integer DEFAULT 1 NOT NULL,
    forma_pago character varying(1) DEFAULT '1'::character varying,
    id_banco integer,
    tipo_cta_nomina character varying(1),
    cuenta_nomina character varying(20),
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    situacion character varying(2) DEFAULT '1'::character varying NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer,
    id_lugar_pago integer,
    id_unidad_ejecutora integer,
    id_unidad_administradora integer,
    cod_dependencia character varying(12),
    cod_cargo character varying(8),
    cod_unidad_ejecutora character varying(6),
    cod_unidad_administ character varying(6),
    id_sede integer,
    id_region integer,
    cod_sede character varying(6),
    cod_region character varying(2),
    mes_sobretiempo integer DEFAULT 0 NOT NULL,
    anio_sobretiempo integer DEFAULT 0 NOT NULL,
    lunes_retroactivo integer DEFAULT 0 NOT NULL,
    lunes_primera integer DEFAULT 0 NOT NULL,
    lunes_segunda integer DEFAULT 0 NOT NULL,
    hay_retroactivo character varying(1),
    codigo_patronal character varying(10),
    categoria_presupuesto character varying(15),
    CONSTRAINT histnom_estatus CHECK (((((estatus)::text = 'A'::text) OR ((estatus)::text = 'E'::text)) OR ((estatus)::text = 'S'::text))),
    CONSTRAINT histnom_forma_pago CHECK (((((forma_pago)::text = '1'::text) OR ((forma_pago)::text = '2'::text)) OR ((forma_pago)::text = '3'::text))),
    CONSTRAINT histnom_situacion CHECK (((((((((((((((situacion)::text = '1'::text) OR ((situacion)::text = '2'::text)) OR ((situacion)::text = '3'::text)) OR ((situacion)::text = '4'::text)) OR ((situacion)::text = '5'::text)) OR ((situacion)::text = '6'::text)) OR ((situacion)::text = '7'::text)) OR ((situacion)::text = '8'::text)) OR ((situacion)::text = '9'::text)) OR ((situacion)::text = '10'::text)) OR ((situacion)::text = '11'::text)) OR ((situacion)::text = '12'::text)) OR ((situacion)::text = '13'::text))),
    CONSTRAINT histnom_tipo_cta_nomina CHECK ((((((tipo_cta_nomina)::text = 'A'::text) OR ((tipo_cta_nomina)::text = 'C'::text)) OR ((tipo_cta_nomina)::text = 'O'::text)) OR ((tipo_cta_nomina)::text = 'N'::text)))
);


ALTER TABLE historiconomina OWNER TO postgres;

--
-- TOC entry 340 (class 1259 OID 185287)
-- Name: historicoquincena; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE historicoquincena (
    id_historico_quincena integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    numero_nomina integer DEFAULT 1 NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    semana_quincena integer DEFAULT 0 NOT NULL,
    fecha date,
    unidades double precision DEFAULT 0 NOT NULL,
    monto_asigna double precision DEFAULT 0 NOT NULL,
    monto_deduce double precision DEFAULT 0 NOT NULL,
    origen character varying(1) DEFAULT 'F'::character varying NOT NULL,
    documento_soporte character varying(10),
    id_tipo_personal integer NOT NULL,
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer,
    id_historico_nomina integer,
    id_concepto integer NOT NULL,
    monto_aporte double precision DEFAULT 0,
    id_concepto_aporte integer,
    mes_sobretiempo integer DEFAULT 0 NOT NULL,
    anio_sobretiempo integer DEFAULT 0 NOT NULL,
    CONSTRAINT historicoquincena_origen CHECK ((((((origen)::text = 'F'::text) OR ((origen)::text = 'V'::text)) OR ((origen)::text = 'P'::text)) OR ((origen)::text = 'C'::text)))
);


ALTER TABLE historicoquincena OWNER TO postgres;

--
-- TOC entry 341 (class 1259 OID 185302)
-- Name: historicosemana; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE historicosemana (
    id_historico_semana integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    numero_nomina integer DEFAULT 1 NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    semana_quincena integer DEFAULT 0 NOT NULL,
    fecha date,
    unidades double precision DEFAULT 0 NOT NULL,
    monto_asigna double precision DEFAULT 0 NOT NULL,
    monto_deduce double precision DEFAULT 0 NOT NULL,
    origen character varying(1) DEFAULT 'F'::character varying NOT NULL,
    documento_soporte character varying(10),
    id_tipo_personal integer NOT NULL,
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer,
    id_historico_nomina integer,
    id_concepto integer,
    monto_aporte double precision DEFAULT 0,
    id_concepto_aporte integer,
    mes_sobretiempo integer DEFAULT 0 NOT NULL,
    anio_sobretiempo integer DEFAULT 0 NOT NULL,
    CONSTRAINT historicosemana_origen CHECK ((((((origen)::text = 'F'::text) OR ((origen)::text = 'V'::text)) OR ((origen)::text = 'P'::text)) OR ((origen)::text = 'C'::text)))
);


ALTER TABLE historicosemana OWNER TO postgres;

--
-- TOC entry 342 (class 1259 OID 185317)
-- Name: historicoticket; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE historicoticket (
    id_historico_ticket integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    cantidad_ticket integer DEFAULT 0 NOT NULL,
    denominacion_ticket double precision DEFAULT 0 NOT NULL,
    monto_cobrar double precision DEFAULT 0 NOT NULL,
    total_descuentos_ticket integer DEFAULT 0 NOT NULL,
    neto_cantidad_ticket integer DEFAULT 0 NOT NULL,
    neto_monto_cobrar double precision DEFAULT 0 NOT NULL,
    especial character varying(1) DEFAULT 'N'::character varying NOT NULL,
    fecha_proceso date,
    anio_proceso integer DEFAULT 0 NOT NULL,
    mes_proceso integer DEFAULT 0 NOT NULL,
    cod_ticket character varying(10),
    id_trabajador integer DEFAULT 0 NOT NULL,
    id_concepto_tipo_personal integer,
    id_proveedor_ticket integer,
    id_tipo_personal integer DEFAULT 0 NOT NULL,
    id_dependencia integer DEFAULT 0 NOT NULL,
    cod_dependencia character varying(12),
    nombre_dependencia character varying(90)
);


ALTER TABLE historicoticket OWNER TO postgres;

--
-- TOC entry 343 (class 1259 OID 185334)
-- Name: identity; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE identity (
    name character varying(150) NOT NULL,
    last bigint NOT NULL
);


ALTER TABLE identity OWNER TO postgres;

--
-- TOC entry 344 (class 1259 OID 185337)
-- Name: idioma; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE idioma (
    id_idioma integer NOT NULL,
    escribe character varying(1) DEFAULT 'N'::character varying NOT NULL,
    habla character varying(1) DEFAULT 'N'::character varying NOT NULL,
    lee character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_idioma integer NOT NULL,
    examen_suficiencia character varying(1) DEFAULT 'N'::character varying,
    entidad_suficiencia character varying(100),
    fecha_suficiencia date,
    examen_academico character varying(1) DEFAULT 'N'::character varying,
    entidad_academica character varying(100),
    fecha_academica date,
    nombre_entidad character varying(100),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT idioma_escribe CHECK ((((((escribe)::text = 'N'::text) OR ((escribe)::text = 'B'::text)) OR ((escribe)::text = 'I'::text)) OR ((escribe)::text = 'A'::text))),
    CONSTRAINT idioma_examenacademico CHECK ((((examen_academico)::text = 'S'::text) OR ((examen_academico)::text = 'N'::text))),
    CONSTRAINT idioma_examensuficiencia CHECK ((((examen_suficiencia)::text = 'S'::text) OR ((examen_suficiencia)::text = 'N'::text))),
    CONSTRAINT idioma_habla CHECK ((((((habla)::text = 'N'::text) OR ((habla)::text = 'B'::text)) OR ((habla)::text = 'I'::text)) OR ((habla)::text = 'A'::text))),
    CONSTRAINT idioma_lee CHECK ((((((lee)::text = 'N'::text) OR ((lee)::text = 'B'::text)) OR ((lee)::text = 'I'::text)) OR ((lee)::text = 'A'::text)))
);


ALTER TABLE idioma OWNER TO postgres;

--
-- TOC entry 345 (class 1259 OID 185351)
-- Name: informacionmpd; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE informacionmpd (
    codigo_nomina character varying(7),
    cedula integer DEFAULT 0,
    nombre_apellido character varying(80),
    sueldo1 double precision DEFAULT 0,
    compensacion1 double precision DEFAULT 0,
    sueldo2 double precision DEFAULT 0,
    compensacion2 double precision DEFAULT 0
);


ALTER TABLE informacionmpd OWNER TO postgres;

--
-- TOC entry 346 (class 1259 OID 185359)
-- Name: inhabilitado; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE inhabilitado (
    id_inhabilitado integer NOT NULL,
    cedula integer NOT NULL,
    primer_apellido character varying(20) NOT NULL,
    primer_nombre character varying(20) NOT NULL,
    segundo_apellido character varying(20),
    segundo_nombre character varying(20)
);


ALTER TABLE inhabilitado OWNER TO postgres;

--
-- TOC entry 347 (class 1259 OID 185362)
-- Name: instancia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE instancia (
    id_instancia integer NOT NULL,
    id_clasificacion integer NOT NULL,
    cod_instancia character varying(1),
    nombre character varying(40),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE instancia OWNER TO postgres;

--
-- TOC entry 348 (class 1259 OID 185366)
-- Name: institucion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE institucion (
    id_institucion integer NOT NULL,
    cod_institucion character varying(10) NOT NULL,
    nombre character varying(90) NOT NULL,
    nombre_corto character varying(15) NOT NULL,
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    ley_estatuto character varying(1) DEFAULT 'S'::character varying NOT NULL,
    CONSTRAINT institucion_estatus CHECK ((((estatus)::text = 'A'::text) OR ((estatus)::text = 'I'::text))),
    CONSTRAINT institucion_estatuto CHECK ((((ley_estatuto)::text = 'S'::text) OR ((ley_estatuto)::text = 'N'::text)))
);


ALTER TABLE institucion OWNER TO postgres;

--
-- TOC entry 349 (class 1259 OID 185373)
-- Name: interesadicional; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE interesadicional (
    id_interes_adicional integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    dias integer DEFAULT 0 NOT NULL,
    tasa_interes double precision DEFAULT 0 NOT NULL,
    monto_capital double precision DEFAULT 0 NOT NULL,
    monto_interes_mensual double precision DEFAULT 0 NOT NULL,
    monto_interes_acumulado double precision DEFAULT 0 NOT NULL,
    monto_anticipo double precision DEFAULT 0 NOT NULL,
    monto_anticipo_acumulado double precision DEFAULT 0 NOT NULL,
    saldo_al_18061997 double precision DEFAULT 0 NOT NULL
);


ALTER TABLE interesadicional OWNER TO postgres;

--
-- TOC entry 350 (class 1259 OID 185386)
-- Name: intereses; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE intereses (
    concepto character varying(6),
    cedula character varying(12),
    monto double precision DEFAULT 0
);


ALTER TABLE intereses OWNER TO postgres;

--
-- TOC entry 351 (class 1259 OID 185390)
-- Name: interesnuevoregimen; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE interesnuevoregimen (
    id_interes_nuevo_regimen integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    dias integer DEFAULT 0 NOT NULL,
    tasa_interes double precision DEFAULT 0 NOT NULL,
    monto_prestaciones double precision DEFAULT 0,
    monto_prestaciones_acumuladas double precision DEFAULT 0,
    monto_adicional double precision DEFAULT 0,
    monto_capital double precision DEFAULT 0,
    monto_interes_mensual double precision DEFAULT 0,
    monto_interes_acumulado double precision DEFAULT 0,
    monto_anticipo double precision DEFAULT 0,
    monto_anticipo_acumulado double precision DEFAULT 0,
    monto_fideicomiso double precision DEFAULT 0,
    monto_fideicomiso_acumulado double precision DEFAULT 0,
    dias_mensuales integer DEFAULT 0 NOT NULL,
    dias_adicionales integer DEFAULT 0 NOT NULL
);


ALTER TABLE interesnuevoregimen OWNER TO postgres;

--
-- TOC entry 352 (class 1259 OID 185409)
-- Name: interesviejoregimen; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE interesviejoregimen (
    id_interes_viejo_regimen integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    dias integer DEFAULT 0 NOT NULL,
    sueldo_integral double precision DEFAULT 0 NOT NULL,
    tasa_interes double precision DEFAULT 0 NOT NULL,
    anios_servicio integer DEFAULT 0 NOT NULL,
    monto_prestaciones double precision DEFAULT 0,
    monto_capital double precision DEFAULT 0,
    monto_interes_mensual double precision DEFAULT 0,
    monto_interes_acumulado double precision DEFAULT 0,
    monto_anticipo double precision DEFAULT 0,
    monto_anticipo_acumulado double precision DEFAULT 0
);


ALTER TABLE interesviejoregimen OWNER TO postgres;

--
-- TOC entry 353 (class 1259 OID 185424)
-- Name: jerarquiacategoriadocente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE jerarquiacategoriadocente (
    id_jerarquia_categoria_docente integer NOT NULL,
    id_jerarquia_docente integer NOT NULL,
    id_categoria_docente integer NOT NULL
);


ALTER TABLE jerarquiacategoriadocente OWNER TO postgres;

--
-- TOC entry 354 (class 1259 OID 185427)
-- Name: jerarquiadocente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE jerarquiadocente (
    id_jerarquia_docente integer NOT NULL,
    digito_jerarquia character varying(1) NOT NULL,
    nombre character varying(60) NOT NULL
);


ALTER TABLE jerarquiadocente OWNER TO postgres;

--
-- TOC entry 355 (class 1259 OID 185430)
-- Name: jubilado; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE jubilado (
    id_jubilado integer NOT NULL,
    id_trabajador integer NOT NULL,
    fecha_jubilacion date,
    tipo_jubilacion character varying(1) DEFAULT '0'::character varying NOT NULL,
    cod_cargo character varying(8),
    descripcion_cargo character varying(60),
    grado integer DEFAULT 1,
    base_jubilacion double precision DEFAULT 0,
    porcentaje_jubilacion double precision DEFAULT 0,
    monto_jubilacion double precision DEFAULT 0,
    id_institucion integer
);


ALTER TABLE jubilado OWNER TO postgres;

--
-- TOC entry 356 (class 1259 OID 185438)
-- Name: juguete; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE juguete (
    id_juguete integer NOT NULL,
    id_personal integer NOT NULL,
    id_familiar integer NOT NULL,
    fecha_nacimiento date NOT NULL,
    sexo character varying(1) NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    CONSTRAINT sexo CHECK ((((sexo)::text = 'F'::text) OR ((sexo)::text = 'M'::text)))
);


ALTER TABLE juguete OWNER TO postgres;

--
-- TOC entry 357 (class 1259 OID 185443)
-- Name: liquidacioninteresadicional; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE liquidacioninteresadicional (
    id_liquidacion_interes_adicional integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    dias integer DEFAULT 0 NOT NULL,
    tasa_interes double precision DEFAULT 0 NOT NULL,
    monto_capital double precision DEFAULT 0 NOT NULL,
    monto_interes_mensual double precision DEFAULT 0 NOT NULL,
    monto_interes_acumulado double precision DEFAULT 0 NOT NULL,
    monto_anticipo double precision DEFAULT 0 NOT NULL,
    monto_anticipo_acumulado double precision DEFAULT 0 NOT NULL,
    saldo_al_18061997 double precision DEFAULT 0 NOT NULL
);


ALTER TABLE liquidacioninteresadicional OWNER TO postgres;

--
-- TOC entry 358 (class 1259 OID 185456)
-- Name: liquidacioninteresnuevoregimen; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE liquidacioninteresnuevoregimen (
    id_liquidacion_interes_nuevo_regimen integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    dias integer DEFAULT 0 NOT NULL,
    tasa_interes double precision DEFAULT 0 NOT NULL,
    monto_prestaciones double precision DEFAULT 0,
    monto_adicional double precision DEFAULT 0,
    monto_capital double precision DEFAULT 0,
    monto_interes_mensual double precision DEFAULT 0,
    monto_interes_acumulado double precision DEFAULT 0,
    monto_anticipo double precision DEFAULT 0,
    monto_anticipo_acumulado double precision DEFAULT 0,
    monto_fideicomiso double precision DEFAULT 0,
    monto_fideicomiso_acumulado double precision DEFAULT 0,
    dias_mensuales integer DEFAULT 0 NOT NULL,
    dias_adicionales integer DEFAULT 0 NOT NULL,
    monto_prestaciones_acumuladas double precision DEFAULT 0 NOT NULL
);


ALTER TABLE liquidacioninteresnuevoregimen OWNER TO postgres;

--
-- TOC entry 359 (class 1259 OID 185475)
-- Name: liquidacioninteresviejoregimen; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE liquidacioninteresviejoregimen (
    id_liquidacion_interes_viejo_regimen integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    dias integer DEFAULT 0 NOT NULL,
    sueldo_integral double precision DEFAULT 0 NOT NULL,
    tasa_interes double precision DEFAULT 0 NOT NULL,
    anios_servicio integer DEFAULT 0 NOT NULL,
    monto_prestaciones double precision DEFAULT 0,
    monto_capital double precision DEFAULT 0,
    monto_interes_mensual double precision DEFAULT 0,
    monto_interes_acumulado double precision DEFAULT 0,
    monto_anticipo double precision DEFAULT 0,
    monto_anticipo_acumulado double precision DEFAULT 0
);


ALTER TABLE liquidacioninteresviejoregimen OWNER TO postgres;

--
-- TOC entry 360 (class 1259 OID 185490)
-- Name: liquidacionprestacionesmensuales; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE liquidacionprestacionesmensuales (
    id_liquidacion_prestaciones_mensuales integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer NOT NULL,
    mes integer NOT NULL,
    dias_mensuales integer DEFAULT 5 NOT NULL,
    dias_adicionales integer NOT NULL,
    base_mensual double precision DEFAULT 0,
    base_adicional double precision DEFAULT 0,
    monto_prestaciones double precision DEFAULT 0,
    monto_adicional double precision DEFAULT 0,
    fideicomiso character varying(1) DEFAULT 'N'::character varying,
    dias_cancelados character varying(1) DEFAULT 'N'::character varying,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE liquidacionprestacionesmensuales OWNER TO postgres;

--
-- TOC entry 361 (class 1259 OID 185501)
-- Name: liquidacionresumennuevoregimen; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE liquidacionresumennuevoregimen (
    id_liquidacion_resumen_nuevo_regimen integer NOT NULL,
    id_trabajador integer NOT NULL,
    monto_prestaciones_acumuladas double precision DEFAULT 0 NOT NULL,
    monto_interes_acumulado double precision DEFAULT 0 NOT NULL,
    monto_anticipo_acumulado double precision DEFAULT 0 NOT NULL,
    monto_fideicomiso_acumulado double precision DEFAULT 0 NOT NULL,
    dias_mensuales integer DEFAULT 0,
    dias_adicionales integer DEFAULT 0,
    monto_fraccion_adicional double precision DEFAULT 0,
    monto_fraccion_mensual double precision DEFAULT 0
);


ALTER TABLE liquidacionresumennuevoregimen OWNER TO postgres;

--
-- TOC entry 362 (class 1259 OID 185512)
-- Name: liquidacionresumenviejoregimen; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE liquidacionresumenviejoregimen (
    id_liquidacion_resumen_viejo_regimen integer NOT NULL,
    id_trabajador integer NOT NULL,
    sueldo_transferencia double precision DEFAULT 0 NOT NULL,
    aniosservicios integer DEFAULT 0 NOT NULL,
    monto_prestaciones double precision DEFAULT 0 NOT NULL,
    monto_interes_acumulado double precision DEFAULT 0 NOT NULL,
    monto_anticipo_acumulado double precision DEFAULT 0 NOT NULL,
    monto_transferencia double precision DEFAULT 0 NOT NULL,
    saldo_al_18061997 double precision DEFAULT 0 NOT NULL,
    monto_interes_adicional double precision DEFAULT 0 NOT NULL
);


ALTER TABLE liquidacionresumenviejoregimen OWNER TO postgres;

--
-- TOC entry 363 (class 1259 OID 185523)
-- Name: lugarpago; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE lugarpago (
    id_lugar_pago integer NOT NULL,
    id_ciudad integer NOT NULL,
    cod_lugar_pago character varying(6) NOT NULL,
    direccion character varying(100) NOT NULL,
    id_sede integer NOT NULL,
    nombre character varying(90),
    cod_cesta character varying(10)
);


ALTER TABLE lugarpago OWNER TO postgres;

--
-- TOC entry 364 (class 1259 OID 185526)
-- Name: manualcargo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE manualcargo (
    id_manual_cargo integer NOT NULL,
    cod_manual_cargo integer NOT NULL,
    nombre character varying(60) NOT NULL,
    fecha_vigencia date NOT NULL,
    id_tabulador integer,
    id_organismo integer NOT NULL,
    tipo_manual character varying(1) DEFAULT '1'::character varying NOT NULL,
    multiple_descripcion character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    cod_mpd character varying(1),
    proceso_seleccion character varying(1) DEFAULT 'N'::character varying,
    tipo_cargo character varying(2) DEFAULT 'TA'::character varying,
    CONSTRAINT manualcargo_multiple_descripcio CHECK ((((multiple_descripcion)::text = 'S'::text) OR ((multiple_descripcion)::text = 'N'::text))),
    CONSTRAINT manualcargo_tipo_manual CHECK ((((((tipo_manual)::text = '1'::text) OR ((tipo_manual)::text = '2'::text)) OR ((tipo_manual)::text = '3'::text)) OR ((tipo_manual)::text = '4'::text)))
);


ALTER TABLE manualcargo OWNER TO postgres;

--
-- TOC entry 365 (class 1259 OID 185536)
-- Name: manualpersonal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE manualpersonal (
    id_manual_personal integer NOT NULL,
    id_manual_cargo integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE manualpersonal OWNER TO postgres;

--
-- TOC entry 366 (class 1259 OID 185540)
-- Name: materia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE materia (
    id_materia integer NOT NULL,
    id_clasificacion integer NOT NULL,
    cod_materia character varying(1),
    nombre character varying(40),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE materia OWNER TO postgres;

--
-- TOC entry 367 (class 1259 OID 185544)
-- Name: mes; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE mes (
    id_mes integer NOT NULL,
    anio integer NOT NULL,
    mes character varying(2) DEFAULT '1'::character varying NOT NULL,
    lunes_pr_quincena integer DEFAULT 0 NOT NULL,
    lunes_se_quincena integer DEFAULT 0 NOT NULL,
    dias_habiles integer DEFAULT 0 NOT NULL,
    con_sabados integer DEFAULT 0 NOT NULL,
    CONSTRAINT mes_mes CHECK ((((((((((((((mes)::text = '1'::text) OR ((mes)::text = '2'::text)) OR ((mes)::text = '3'::text)) OR ((mes)::text = '4'::text)) OR ((mes)::text = '5'::text)) OR ((mes)::text = '6'::text)) OR ((mes)::text = '7'::text)) OR ((mes)::text = '8'::text)) OR ((mes)::text = '9'::text)) OR ((mes)::text = '10'::text)) OR ((mes)::text = '11'::text)) OR ((mes)::text = '12'::text)))
);


ALTER TABLE mes OWNER TO postgres;

--
-- TOC entry 368 (class 1259 OID 185553)
-- Name: mesesjubilacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE mesesjubilacion (
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    base_mensual double precision DEFAULT 0 NOT NULL
);


ALTER TABLE mesesjubilacion OWNER TO postgres;

--
-- TOC entry 369 (class 1259 OID 185559)
-- Name: mm_conceptocolumna; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE mm_conceptocolumna (
    id_concepto integer,
    cod_concepto character varying(4),
    descripcion character varying(50),
    columna text
);


ALTER TABLE mm_conceptocolumna OWNER TO postgres;

--
-- TOC entry 370 (class 1259 OID 185565)
-- Name: mm_tipopersonal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE mm_tipopersonal (
    id_tipo_personal integer,
    nombre character varying(60),
    letra text
);


ALTER TABLE mm_tipopersonal OWNER TO postgres;

--
-- TOC entry 371 (class 1259 OID 185571)
-- Name: movimientocargo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE movimientocargo (
    id_movimiento_cargo integer NOT NULL,
    cod_movimiento_cargo character varying(3) NOT NULL,
    descripcion character varying(60) NOT NULL,
    tipo character varying(1) DEFAULT '1'::character varying NOT NULL
);


ALTER TABLE movimientocargo OWNER TO postgres;

--
-- TOC entry 372 (class 1259 OID 185575)
-- Name: movimientopersonal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE movimientopersonal (
    id_movimiento_personal integer NOT NULL,
    cod_movimiento_personal character varying(2) NOT NULL,
    descripcion character varying(60) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE movimientopersonal OWNER TO postgres;

--
-- TOC entry 373 (class 1259 OID 185579)
-- Name: movimientoregistro; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE movimientoregistro (
    id_movimiento_registro integer NOT NULL,
    fecha_registro date,
    fecha_movimiento date NOT NULL,
    codigo_nomina integer DEFAULT 0 NOT NULL,
    sueldo double precision DEFAULT 0 NOT NULL,
    compensacion double precision DEFAULT 0 NOT NULL,
    primas_cargo double precision DEFAULT 0 NOT NULL,
    primas_trabajador double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    paso integer DEFAULT 1 NOT NULL,
    cod_dependencia character varying(12),
    cod_sede character varying(6),
    tipo_personal character varying(1) DEFAULT '0'::character varying NOT NULL,
    id_movimiento_cargo integer,
    id_causa_movimiento integer,
    cod_movimiento_cargo character varying(2),
    cod_movimiento_personal character varying(2),
    cod_causa_movimiento character varying(3),
    cod_manual_cargo integer,
    cod_cargo character varying(8),
    descripcion_cargo character varying(60) NOT NULL,
    cod_tabulador character varying(6),
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying NOT NULL,
    documento_soporte character varying(25),
    localidad character varying(1) DEFAULT 'C'::character varying NOT NULL,
    numero_movimiento integer DEFAULT 0 NOT NULL,
    cedula integer NOT NULL,
    apellidos_nombres character varying(60),
    id_personal integer NOT NULL,
    remesa character varying(5),
    estatus character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_dependencia character varying(90),
    nombre_sede character varying(90),
    id_organismo integer NOT NULL,
    cod_organismo character varying(10),
    nombre_organismo character varying(90),
    observaciones text,
    usuario character varying(25),
    cod_region character varying(2),
    nombre_region character varying(90),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT movimregistro_aprobacion_m CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text))),
    CONSTRAINT movimregistro_localidad CHECK ((((localidad)::text = 'C'::text) OR ((localidad)::text = 'R'::text)))
);


ALTER TABLE movimientoregistro OWNER TO postgres;

--
-- TOC entry 374 (class 1259 OID 185600)
-- Name: movimientoscio; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE movimientoscio (
    id_movimiento_scio integer NOT NULL,
    fecha_registro date,
    fecha_movimiento date NOT NULL,
    codigo_nomina integer DEFAULT 0 NOT NULL,
    sueldo double precision DEFAULT 0 NOT NULL,
    compensacion double precision DEFAULT 0 NOT NULL,
    primas_cargo double precision DEFAULT 0 NOT NULL,
    primas_trabajador double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    paso integer DEFAULT 1 NOT NULL,
    cod_dependencia character varying(12),
    cod_sede character varying(6),
    tipo_personal character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_tipo_personal character varying(60),
    cod_movimiento_personal character varying(2),
    cod_causa_movimiento character varying(3),
    cod_manual_cargo integer,
    cod_manual_mpd character varying(1),
    cod_cargo character varying(8),
    descripcion_cargo character varying(60) NOT NULL,
    nombramiento character varying(1),
    caucion character varying(1),
    horario character varying(1) DEFAULT 'R'::character varying NOT NULL,
    cod_tabulador character varying(6),
    documento_soporte character varying(25),
    numero_movimiento integer DEFAULT 0 NOT NULL,
    cedula integer NOT NULL,
    apellidos_nombres character varying(60),
    sexo character varying(1),
    estado_civil character varying(1),
    nivel_educativo character varying(1),
    fecha_nacimiento date,
    id_personal integer NOT NULL,
    remesa character varying(5),
    estatus character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_dependencia character varying(90),
    nombre_sede character varying(90),
    id_organismo integer NOT NULL,
    cod_organismo character varying(4),
    grupo_organismo character varying(1),
    cod_organismo_mpd character varying(10),
    nombre_organismo character varying(90),
    observaciones text,
    usuario character varying(25),
    estatus_mpd character varying(1),
    codigo_devolucion character varying(3),
    analista_mpd character varying(25),
    cod_analista_mpd integer,
    id_analista_mpd integer,
    fecha_inicio_mpd date,
    fecha_fin_mpd date,
    observaciones_mpd text,
    cod_region character varying(2),
    nombre_region character varying(90),
    cod_manual_mpd_anterior character varying(1),
    cod_cargo_anterior character varying(6),
    codigo_nomina_anterior integer DEFAULT 0 NOT NULL,
    nombramiento_anterior character varying(1),
    sueldo_anterior double precision DEFAULT 0 NOT NULL,
    compensacion_anterior double precision DEFAULT 0 NOT NULL,
    primas_cargo_anterior double precision DEFAULT 0 NOT NULL,
    primas_trabajador_anterior double precision DEFAULT 0 NOT NULL,
    grado_anterior integer DEFAULT 0 NOT NULL,
    cod_organismo_mpd_anterior character varying(10),
    nombre_organismo_anterior character varying(90),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT movimientoscio_estatus CHECK (((((estatus)::text = '0'::text) OR ((estatus)::text = '3'::text)) OR ((estatus)::text = '4'::text)))
);


ALTER TABLE movimientoscio OWNER TO postgres;

--
-- TOC entry 375 (class 1259 OID 185625)
-- Name: movimientositp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE movimientositp (
    id_movimiento_sitp integer NOT NULL,
    fecha_registro date,
    fecha_movimiento date NOT NULL,
    codigo_nomina integer DEFAULT 0 NOT NULL,
    sueldo double precision DEFAULT 0 NOT NULL,
    compensacion double precision DEFAULT 0 NOT NULL,
    primas_cargo double precision DEFAULT 0 NOT NULL,
    primas_trabajador double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    paso integer DEFAULT 1 NOT NULL,
    cod_dependencia character varying(12),
    cod_sede character varying(6),
    tipo_personal character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_tipo_personal character varying(60),
    id_clasificacion_personal integer,
    id_causa_movimiento integer,
    cod_causa_movimiento character varying(3),
    cod_manual_cargo integer,
    cod_cargo character varying(8),
    descripcion_cargo character varying(60) NOT NULL,
    cod_tabulador character varying(6),
    afecta_sueldo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    documento_soporte character varying(25),
    localidad character varying(1) DEFAULT 'C'::character varying NOT NULL,
    numero_movimiento integer DEFAULT 0 NOT NULL,
    cedula integer NOT NULL,
    apellidos_nombres character varying(60),
    id_personal integer NOT NULL,
    id_remesa integer,
    estatus character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_dependencia character varying(90),
    nombre_sede character varying(90),
    id_organismo integer NOT NULL,
    cod_organismo character varying(4),
    cod_organismo_mpd character varying(10),
    nombre_organismo character varying(90),
    observaciones text,
    id_usuario integer NOT NULL,
    estatus_mpd character varying(1),
    codigo_devolucion character varying(3),
    analista_mpd character varying(25),
    id_analista_mpd integer,
    fecha_inicio_mpd date,
    fecha_fin_mpd date,
    observaciones_mpd text,
    cod_region character varying(2),
    nombre_region character varying(90),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    fecha_punto_cuenta date,
    punto_cuenta character varying(15),
    anio integer DEFAULT 0 NOT NULL,
    anterior_cod_manual_cargo integer,
    anterior_cod_cargo character varying(6),
    anterior_descripcion_cargo character varying(60),
    anterior_codigo_nomina integer DEFAULT 0,
    anterior_cod_sede character varying(6),
    anterior_nombre_sede character varying(90),
    anterior_cod_dependencia character varying(12),
    anterior_nombre_dependencia character varying(90),
    anterior_sueldo double precision DEFAULT 0,
    anterior_compensacion double precision DEFAULT 0,
    anterior_primas_cargo double precision DEFAULT 0,
    anterior_primas_trabajador double precision DEFAULT 0,
    anterior_grado integer DEFAULT 0,
    anterior_paso integer DEFAULT 1,
    anterior_cod_region character varying(2),
    anterior_nombre_region character varying(90),
    cod_concurso character varying(15),
    fecha_ingreso date,
    id_turno integer,
    fecha_culminacion date,
    monto_jubilacion double precision DEFAULT 0 NOT NULL,
    sueldo_promedio double precision DEFAULT 0 NOT NULL,
    porc_jubilacion double precision DEFAULT 0 NOT NULL,
    CONSTRAINT movimientositp_afecta_sueld CHECK ((((afecta_sueldo)::text = 'S'::text) OR ((afecta_sueldo)::text = 'N'::text))),
    CONSTRAINT movimientositp_localidad CHECK ((((localidad)::text = 'C'::text) OR ((localidad)::text = 'R'::text)))
);


ALTER TABLE movimientositp OWNER TO postgres;

--
-- TOC entry 376 (class 1259 OID 185657)
-- Name: movimientosplan; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE movimientosplan (
    id_movimientos_plan integer NOT NULL,
    id_plan_personal integer NOT NULL,
    id_causa_movimiento integer NOT NULL,
    cantidad_planificados integer DEFAULT 0 NOT NULL,
    cantidad_realizados integer DEFAULT 0 NOT NULL,
    cantidad_aprobados integer DEFAULT 0 NOT NULL,
    cantidad_devueltos integer DEFAULT 0 NOT NULL
);


ALTER TABLE movimientosplan OWNER TO postgres;

--
-- TOC entry 377 (class 1259 OID 185664)
-- Name: movremuneracion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE movremuneracion (
    id_mov_remuneracion integer NOT NULL,
    cod_mov_remuneracion character varying(2),
    descripcion character varying(60),
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying NOT NULL,
    CONSTRAINT movremuneracion_aprobacion_m CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text)))
);


ALTER TABLE movremuneracion OWNER TO postgres;

--
-- TOC entry 378 (class 1259 OID 185669)
-- Name: mpdcontratado; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE mpdcontratado (
    cedula integer DEFAULT 0,
    apellido1 character varying(20),
    apellido2 character varying(20),
    nombre1 character varying(20),
    nombre2 character varying(20),
    sexo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    fecha_nacimiento date NOT NULL,
    codigo_nomina integer DEFAULT 1,
    cod_cargo character varying(8),
    denom_cargo character varying(60),
    grado integer DEFAULT 1 NOT NULL,
    sueldo_basico double precision DEFAULT 0,
    compensacion double precision DEFAULT 0,
    prima_profesional double precision DEFAULT 0,
    prima_antiguedad double precision DEFAULT 0,
    otro_serv double precision DEFAULT 0
);


ALTER TABLE mpdcontratado OWNER TO postgres;

--
-- TOC entry 379 (class 1259 OID 185681)
-- Name: mpdempleado; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE mpdempleado (
    cedula integer DEFAULT 0,
    apellido1 character varying(20),
    apellido2 character varying(20),
    nombre1 character varying(20),
    nombre2 character varying(20),
    sexo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    fecha_nacimiento date NOT NULL,
    codigo_nomina integer DEFAULT 1,
    cod_cargo character varying(8),
    denom_cargo character varying(60),
    grado integer DEFAULT 1 NOT NULL,
    sueldo_basico double precision DEFAULT 0,
    compensacion double precision DEFAULT 0,
    prima_profesional double precision DEFAULT 0,
    prima_antiguedad double precision DEFAULT 0,
    otro_serv double precision DEFAULT 0
);


ALTER TABLE mpdempleado OWNER TO postgres;

--
-- TOC entry 380 (class 1259 OID 185693)
-- Name: mpdfinanciero; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE mpdfinanciero (
    fecha_vigencia date NOT NULL,
    codigo_organismo character varying(7),
    codigo_grupo character varying(2),
    numero_nomina character varying(7),
    codigo_adm character varying(12),
    codigo_clase character varying(5),
    grado character varying(2),
    tipo_cargo character varying(1),
    deno_cargo character varying(30),
    jornada character varying(6),
    cedula integer DEFAULT 0,
    apellido1 character varying(40),
    nombre1 character varying(40),
    codigo_ubi_geo character varying(6),
    codigo_decreto_serie character varying(5),
    codigo_decreto_escala character varying(5),
    accion_administrativa character varying(7),
    situacion_cargo character varying(1),
    cod_asig_aprobada1 character varying(3),
    monto_asig_aprobada1 double precision DEFAULT 0,
    cod_asig_aprobada2 character varying(3),
    monto_asig_aprobada2 double precision DEFAULT 0,
    cod_asig_aprobada3 character varying(3),
    monto_asig_aprobada3 double precision DEFAULT 0,
    cod_asig_aprobada4 character varying(3),
    monto_asig_aprobada4 double precision DEFAULT 0,
    cod_asig_aprobada5 character varying(3),
    monto_asig_aprobada5 double precision DEFAULT 0,
    cod_asig_aprobada6 character varying(3),
    monto_asig_aprobada6 double precision DEFAULT 0,
    cod_asig_aprobada7 character varying(3),
    monto_asig_aprobada7 double precision DEFAULT 0,
    cod_asig_aprobada8 character varying(3),
    monto_asig_aprobada8 double precision DEFAULT 0,
    cod_asig_aprobada9 character varying(3),
    monto_asig_aprobada9 double precision DEFAULT 0,
    cod_asig_aprobada10 character varying(3),
    monto_asig_aprobada10 double precision DEFAULT 0,
    cod_asig_noaprobada1 character varying(3),
    denominacion_asig_noaprobada1 character varying(40),
    partida_concepto_noaprobada1 character varying(12),
    monto_asig_noaprobada1 double precision DEFAULT 0,
    cod_asig_noaprobada2 character varying(3),
    denominacion_asig_noaprobada2 character varying(40),
    partida_concepto_noaprobada2 character varying(12),
    monto_asig_noaprobada2 double precision DEFAULT 0,
    cod_asig_noaprobada3 character varying(3),
    denominacion_asig_noaprobada3 character varying(40),
    partida_concepto_noaprobada3 character varying(12),
    monto_asig_noaprobada3 double precision DEFAULT 0,
    cod_asig_noaprobada4 character varying(3),
    denominacion_asig_noaprobada4 character varying(40),
    partida_concepto_noaprobada4 character varying(12),
    monto_asig_noaprobada4 double precision DEFAULT 0,
    cod_asig_noaprobada5 character varying(3),
    denominacion_asig_noaprobada5 character varying(40),
    partida_concepto_noaprobada5 character varying(12),
    monto_asig_noaprobada5 double precision DEFAULT 0,
    cod_asig_noaprobada6 character varying(3),
    denominacion_asig_noaprobada6 character varying(40),
    partida_concepto_noaprobada6 character varying(12),
    monto_asig_noaprobada6 double precision DEFAULT 0,
    cod_asig_noaprobada7 character varying(3),
    denominacion_asig_noaprobada7 character varying(40),
    partida_concepto_noaprobada7 character varying(12),
    monto_asig_noaprobada7 double precision DEFAULT 0,
    cod_asig_noaprobada8 character varying(3),
    denominacion_asig_noaprobada8 character varying(40),
    partida_concepto_noaprobada8 character varying(12),
    monto_asig_noaprobada8 double precision DEFAULT 0,
    cod_asig_noaprobada9 character varying(3),
    denominacion_asig_noaprobada9 character varying(40),
    partida_concepto_noaprobada9 character varying(12),
    monto_asig_noaprobada9 double precision DEFAULT 0,
    cod_asig_noaprobada10 character varying(3),
    denominacion_asig_noaprobada10 character varying(40),
    partida_concepto_noaprobada10 character varying(12),
    monto_asig_noaprobada10 double precision DEFAULT 0,
    fecha_vigencia_tran character varying(10),
    codigo_org_tran character varying(7),
    grupo_tran character varying(2),
    nomina_tran character varying(7),
    espacios character(24)
);


ALTER TABLE mpdfinanciero OWNER TO postgres;

--
-- TOC entry 381 (class 1259 OID 185720)
-- Name: mpdobrero; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE mpdobrero (
    cedula integer DEFAULT 0,
    apellido1 character varying(20),
    apellido2 character varying(20),
    nombre1 character varying(20),
    nombre2 character varying(20),
    sexo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    fecha_nacimiento date NOT NULL,
    codigo_nomina integer DEFAULT 1,
    cod_cargo character varying(8),
    denom_cargo character varying(60),
    grado integer DEFAULT 1 NOT NULL,
    sueldo_basico double precision DEFAULT 0,
    compensacion double precision DEFAULT 0,
    prima_profesional double precision DEFAULT 0,
    prima_antiguedad double precision DEFAULT 0,
    otro_serv double precision DEFAULT 0
);


ALTER TABLE mpdobrero OWNER TO postgres;

--
-- TOC entry 382 (class 1259 OID 185732)
-- Name: municipio; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE municipio (
    id_municipio integer NOT NULL,
    abreviatura character varying(3),
    cod_municipio character varying(2) NOT NULL,
    id_estado integer NOT NULL,
    nombre character varying(40) NOT NULL
);


ALTER TABLE municipio OWNER TO postgres;

--
-- TOC entry 383 (class 1259 OID 185735)
-- Name: nivelbeca; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nivelbeca (
    id_nivel_beca integer NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    inicio_nivel integer DEFAULT 1 NOT NULL,
    fin_nivel integer DEFAULT 1 NOT NULL,
    proximo_nivel character varying(1)
);


ALTER TABLE nivelbeca OWNER TO postgres;

--
-- TOC entry 384 (class 1259 OID 185741)
-- Name: niveldocente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE niveldocente (
    id_nivel_docente integer NOT NULL,
    digito_nivel character varying(1) NOT NULL,
    nombre character varying(60) NOT NULL
);


ALTER TABLE niveldocente OWNER TO postgres;

--
-- TOC entry 385 (class 1259 OID 185744)
-- Name: niveleducativo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE niveleducativo (
    id_nivel_educativo integer NOT NULL,
    cod_nivel_educativo character varying(1) NOT NULL,
    descripcion character varying(60) NOT NULL,
    orden integer DEFAULT 0
);


ALTER TABLE niveleducativo OWNER TO postgres;

--
-- TOC entry 386 (class 1259 OID 185748)
-- Name: noevaluacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE noevaluacion (
    id_no_evaluacion integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    motivo character varying(1) NOT NULL,
    cedula_supervisor integer DEFAULT 0,
    nombre_supervisor character varying(50) DEFAULT 'H'::character varying NOT NULL,
    observaciones text,
    id_personal integer NOT NULL,
    id_tipo_personal integer NOT NULL
);


ALTER TABLE noevaluacion OWNER TO postgres;

--
-- TOC entry 387 (class 1259 OID 185758)
-- Name: nombreorganismo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nombreorganismo (
    id_nombre_organismo integer NOT NULL,
    fecha_vigencia date NOT NULL,
    id_organismo integer NOT NULL,
    nombre character varying(90) NOT NULL,
    nombre_corto character varying(10)
);


ALTER TABLE nombreorganismo OWNER TO postgres;

--
-- TOC entry 388 (class 1259 OID 185761)
-- Name: nominaconversion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nominaconversion (
    id_nomina_conversion integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_cargo integer NOT NULL,
    anio integer NOT NULL,
    mes integer NOT NULL,
    numero_nomina integer DEFAULT 1 NOT NULL,
    asignacion_bs double precision DEFAULT 0 NOT NULL,
    asignacion_otra_moneda double precision DEFAULT 0 NOT NULL,
    deduccion_ley_bs double precision DEFAULT 0 NOT NULL,
    deduccion_ley_otra_moneda double precision DEFAULT 0 NOT NULL,
    deduccion_personal_bs double precision DEFAULT 0 NOT NULL,
    deduccion_personal_otra_moneda double precision DEFAULT 0 NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer
);


ALTER TABLE nominaconversion OWNER TO postgres;

--
-- TOC entry 389 (class 1259 OID 185771)
-- Name: nominadiplomatico; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nominadiplomatico (
    id_nomina_diplomatico integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_cargo integer NOT NULL,
    id_dependencia integer NOT NULL,
    anio integer NOT NULL,
    mes integer NOT NULL,
    numero_nomina integer DEFAULT 1 NOT NULL,
    asignacion_bs double precision DEFAULT 0 NOT NULL,
    asignacion_otra_moneda double precision DEFAULT 0 NOT NULL,
    deduccion_ley_bs double precision DEFAULT 0 NOT NULL,
    deduccion_ley_otra_moneda double precision DEFAULT 0 NOT NULL,
    deduccion_personal_bs double precision DEFAULT 0 NOT NULL,
    deduccion_personal_otra_moneda double precision DEFAULT 0 NOT NULL,
    asignacion_mre double precision DEFAULT 0 NOT NULL,
    fluctuacion_mre double precision DEFAULT 0 NOT NULL,
    asignacion_anual_onu double precision DEFAULT 0 NOT NULL,
    ajuste_anual_onu double precision DEFAULT 0 NOT NULL,
    asignacion_mensual_onu double precision DEFAULT 0 NOT NULL,
    prima_destino_onu double precision DEFAULT 0 NOT NULL,
    prima_destino_mre double precision DEFAULT 0 NOT NULL,
    otras_asignaciones double precision DEFAULT 0 NOT NULL,
    multiplicador double precision DEFAULT 0 NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer
);


ALTER TABLE nominadiplomatico OWNER TO postgres;

--
-- TOC entry 390 (class 1259 OID 185790)
-- Name: nominaespecial; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nominaespecial (
    id_nomina_especial integer NOT NULL,
    numero_nomina integer DEFAULT 1 NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    fecha_registro date,
    id_grupo_nomina integer,
    descripcion character varying(60) NOT NULL,
    estatus character varying(1) NOT NULL,
    fecha_proceso date,
    mes smallint DEFAULT 0 NOT NULL,
    usuario character varying(20),
    id_frecuencia_pago bigint NOT NULL,
    fecha_inicio date,
    fecha_fin date,
    personal character varying(1) DEFAULT 'A'::character varying,
    pagada character varying(1) DEFAULT 'N'::character varying,
    fecha_pago date
);


ALTER TABLE nominaespecial OWNER TO postgres;

--
-- TOC entry 391 (class 1259 OID 185798)
-- Name: opcion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE opcion (
    id_opcion integer NOT NULL,
    codigo_opcion character varying(15) NOT NULL,
    descripcion character varying(75) NOT NULL,
    ruta character varying(200) NOT NULL,
    tipo character varying(1) NOT NULL
);


ALTER TABLE opcion OWNER TO postgres;

--
-- TOC entry 392 (class 1259 OID 185801)
-- Name: operacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE operacion (
    id_operacion integer NOT NULL,
    cod_operacion character varying(1),
    nombre character varying(40),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE operacion OWNER TO postgres;

--
-- TOC entry 393 (class 1259 OID 185805)
-- Name: organismo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE organismo (
    id_organismo integer NOT NULL,
    cedula_agente_retencion character varying(10),
    cedula_director integer DEFAULT 0 NOT NULL,
    id_ciudad integer DEFAULT 0,
    cod_organismo character varying(4) NOT NULL,
    cod_sigecof character varying(4),
    cod_uel character varying(6),
    direccion character varying(100),
    nit character varying(12),
    nombre_agente_retencion character varying(50),
    organo_rector character varying(1) DEFAULT 'N'::character varying NOT NULL,
    rif character varying(12),
    rif_agente_retencion character varying(12),
    telefono character varying(15),
    zona_postal character varying(10),
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying NOT NULL,
    organismo_adscrito character varying(4),
    nombre_organismo character varying(90),
    actualiza_expediente character varying(1) DEFAULT 'S'::character varying NOT NULL,
    nombre_rrhh character varying(50),
    cedula_rrhh integer DEFAULT 0,
    nombre_informatica character varying(50),
    cedula_informatica integer DEFAULT 0,
    nombre_maxima_autoridad character varying(50),
    cedula_maxima_autoridad integer DEFAULT 0,
    codigo_anterior_mpd character varying(10),
    telefono_rrhh character varying(15),
    telefono_informatica character varying(15),
    telefono_maxima_autoridad character varying(15),
    gaceta_rrhh character varying(80),
    gaceta_informatica character varying(80),
    gaceta_maxima_autoridad character varying(80),
    nombre_corto character varying(15),
    CONSTRAINT organismo_actualiza_expediente CHECK ((((actualiza_expediente)::text = 'S'::text) OR ((actualiza_expediente)::text = 'N'::text))),
    CONSTRAINT organismo_aprobacion_mpd CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text))),
    CONSTRAINT organismo_organo_rector CHECK ((((organo_rector)::text = 'S'::text) OR ((organo_rector)::text = 'N'::text)))
);


ALTER TABLE organismo OWNER TO postgres;

--
-- TOC entry 394 (class 1259 OID 185822)
-- Name: otraactividad; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE otraactividad (
    id_otra_actividad integer NOT NULL,
    observaciones character varying(100),
    id_tipo_otra_actividad integer NOT NULL,
    id_personal integer NOT NULL
);


ALTER TABLE otraactividad OWNER TO postgres;

--
-- TOC entry 395 (class 1259 OID 185825)
-- Name: otrasalicuotas; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE otrasalicuotas (
    id_otras_alicuotas integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_alicuota integer NOT NULL,
    monto double precision DEFAULT 0 NOT NULL
);


ALTER TABLE otrasalicuotas OWNER TO postgres;

--
-- TOC entry 396 (class 1259 OID 185829)
-- Name: pagoguarderia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE pagoguarderia (
    id_pago_guarderia integer NOT NULL,
    id_personal integer NOT NULL,
    id_familiar integer NOT NULL,
    id_guarderia integer NOT NULL,
    anio integer NOT NULL,
    mes integer NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    inscripcion character varying(1) DEFAULT 'N'::character varying
);


ALTER TABLE pagoguarderia OWNER TO postgres;

--
-- TOC entry 397 (class 1259 OID 185834)
-- Name: pais; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE pais (
    id_pais integer NOT NULL,
    abreviatura character varying(3),
    cod_pais character varying(3) NOT NULL,
    nombre character varying(40) NOT NULL,
    moneda character varying(30),
    moneda_sing character varying(30),
    moneda_plur character varying(30),
    simbolo character varying(6),
    fraccion character varying(20),
    id_region_continente integer
);


ALTER TABLE pais OWNER TO postgres;

--
-- TOC entry 398 (class 1259 OID 185837)
-- Name: parametroari; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE parametroari (
    id_parametro_ari integer NOT NULL,
    unidad_tributaria double precision DEFAULT 0 NOT NULL,
    fecha_vigencia date,
    un_desgravamenes double precision DEFAULT 0 NOT NULL,
    un_persona_natural double precision DEFAULT 0 NOT NULL,
    un_carga double precision DEFAULT 0 NOT NULL
);


ALTER TABLE parametroari OWNER TO postgres;

--
-- TOC entry 399 (class 1259 OID 185844)
-- Name: parametrobeca; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE parametrobeca (
    id_parametro_beca integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_nivel_beca integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    anios_servicio integer DEFAULT 0 NOT NULL,
    meses_servicio integer DEFAULT 0 NOT NULL,
    edad_maxima integer DEFAULT 0 NOT NULL,
    promedio_notas integer DEFAULT 0 NOT NULL,
    numero_becas integer DEFAULT 0 NOT NULL,
    maximo_trabajador integer DEFAULT 0 NOT NULL,
    monto_beca double precision DEFAULT 0 NOT NULL,
    monto_excepcional double precision DEFAULT 0 NOT NULL,
    sueldo_maximo double precision DEFAULT 0 NOT NULL,
    sueldo character varying(1) DEFAULT 'I'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT parametrobeca_sueldo CHECK ((((sueldo)::text = 'I'::text) OR ((sueldo)::text = 'B'::text)))
);


ALTER TABLE parametrobeca OWNER TO postgres;

--
-- TOC entry 400 (class 1259 OID 185859)
-- Name: parametrobecageneral; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE parametrobecageneral (
    id_parametro_beca_general integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    maximo_tipo_personal integer NOT NULL,
    maximo_trabajador integer DEFAULT 0 NOT NULL,
    incluye_trabajador character varying(1) DEFAULT 'N'::character varying NOT NULL,
    aprobacion_solicitud character varying(1) DEFAULT 'N'::character varying NOT NULL,
    quien_cobra character varying(1) DEFAULT 'M'::character varying NOT NULL
);


ALTER TABLE parametrobecageneral OWNER TO postgres;

--
-- TOC entry 401 (class 1259 OID 185866)
-- Name: parametrocaja; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE parametrocaja (
    id_parametro_caja integer NOT NULL,
    aporte_fijo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    aporte_trabajador double precision DEFAULT 0 NOT NULL,
    aporte_patron double precision DEFAULT 0 NOT NULL,
    maximo_trabajador double precision DEFAULT 0 NOT NULL,
    maximo_patron double precision DEFAULT 0 NOT NULL,
    ingreso_automatico integer DEFAULT 0 NOT NULL,
    recalculo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT parametrocaja_aporte_fijo CHECK ((((aporte_fijo)::text = 'S'::text) OR ((aporte_fijo)::text = 'N'::text))),
    CONSTRAINT parametrocaja_recalculo CHECK ((((recalculo)::text = 'S'::text) OR ((recalculo)::text = 'N'::text)))
);


ALTER TABLE parametrocaja OWNER TO postgres;

--
-- TOC entry 402 (class 1259 OID 185879)
-- Name: parametrodotacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE parametrodotacion (
    id_parametro_dotacion integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_tipo_dotacion integer NOT NULL,
    modalidad character varying(1) DEFAULT 'M'::character varying NOT NULL,
    monto_dotacion double precision DEFAULT 0 NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT parametrodotacion_modalidad CHECK ((((modalidad)::text = 'M'::text) OR ((modalidad)::text = 'A'::text)))
);


ALTER TABLE parametrodotacion OWNER TO postgres;

--
-- TOC entry 403 (class 1259 OID 185886)
-- Name: parametrogobierno; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE parametrogobierno (
    id_parametro_gobierno integer NOT NULL,
    limsem_sso double precision DEFAULT 0 NOT NULL,
    limmen_sso double precision DEFAULT 0 NOT NULL,
    limsem_lph double precision DEFAULT 0 NOT NULL,
    limmen_lph double precision DEFAULT 0 NOT NULL,
    limsem_fju double precision DEFAULT 0 NOT NULL,
    limmen_fju double precision DEFAULT 0 NOT NULL,
    edadmasc_sso integer DEFAULT 0 NOT NULL,
    edadfem_sso integer DEFAULT 0 NOT NULL,
    edadmasc_lph integer DEFAULT 0 NOT NULL,
    edadfem_lph integer DEFAULT 0 NOT NULL,
    edadmasc_fju integer DEFAULT 0 NOT NULL,
    edadfem_fju integer DEFAULT 0 NOT NULL,
    porcentaje_integral double precision DEFAULT 0 NOT NULL,
    porcentaje_parcial double precision DEFAULT 0 NOT NULL,
    porcbpat_sso double precision DEFAULT 0 NOT NULL,
    porcmpat_sso double precision DEFAULT 0 NOT NULL,
    porcapat_sso double precision DEFAULT 0 NOT NULL,
    porctrab_spf double precision DEFAULT 0 NOT NULL,
    porcpat_spf double precision DEFAULT 0 NOT NULL,
    porctrab_lph double precision DEFAULT 0 NOT NULL,
    porcpat_lph double precision DEFAULT 0 NOT NULL,
    porctrab_fju double precision DEFAULT 0 NOT NULL,
    porcpat_fju double precision DEFAULT 0 NOT NULL,
    id_grupo_organismo integer DEFAULT 0 NOT NULL,
    limsem_spf double precision DEFAULT 0,
    limmen_spf double precision DEFAULT 0
);


ALTER TABLE parametrogobierno OWNER TO postgres;

--
-- TOC entry 404 (class 1259 OID 185915)
-- Name: parametroguarderia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE parametroguarderia (
    id_parametro_guarderia integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    sueldo_maximo double precision DEFAULT 0 NOT NULL,
    edad_maxima integer DEFAULT 0 NOT NULL,
    monto_patron double precision DEFAULT 0 NOT NULL,
    pago_nomina character varying(1) DEFAULT 'N'::character varying NOT NULL,
    quien_cobra character varying(1) DEFAULT 'M'::character varying NOT NULL,
    CONSTRAINT pago_nomina CHECK ((((pago_nomina)::text = 'S'::text) OR ((pago_nomina)::text = 'N'::text))),
    CONSTRAINT parametroguarderia_quien_cobra CHECK (((((quien_cobra)::text = 'M'::text) OR ((quien_cobra)::text = 'P'::text)) OR ((quien_cobra)::text = 'A'::text)))
);


ALTER TABLE parametroguarderia OWNER TO postgres;

--
-- TOC entry 405 (class 1259 OID 185925)
-- Name: parametrojubilacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE parametrojubilacion (
    id_parametro_jubilacion integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    edad integer DEFAULT 0 NOT NULL,
    edadm integer DEFAULT 0 NOT NULL,
    anios_servicio integer DEFAULT 0 NOT NULL,
    anios_serviciom integer DEFAULT 0 NOT NULL,
    anios_servicio_sin_edad integer DEFAULT 0 NOT NULL,
    anios_servicio_especial integer DEFAULT 0 NOT NULL,
    meses_promediar integer DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    factor double precision DEFAULT 0
);


ALTER TABLE parametrojubilacion OWNER TO postgres;

--
-- TOC entry 406 (class 1259 OID 185937)
-- Name: parametrojuguete; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE parametrojuguete (
    id_parametro_juguete integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    edad_minima integer DEFAULT 0 NOT NULL,
    edad_maxima integer DEFAULT 0 NOT NULL,
    cantidad_beneficiarios integer DEFAULT 0 NOT NULL,
    monto_juguetes double precision DEFAULT 0 NOT NULL,
    quien_cobra character varying(1) DEFAULT 'M'::character varying NOT NULL,
    CONSTRAINT parametroguarderia_quien_cobra CHECK (((((quien_cobra)::text = 'M'::text) OR ((quien_cobra)::text = 'P'::text)) OR ((quien_cobra)::text = 'A'::text)))
);


ALTER TABLE parametrojuguete OWNER TO postgres;

--
-- TOC entry 407 (class 1259 OID 185946)
-- Name: parametroticket; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE parametroticket (
    id_parametro_ticket integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_concepto_tipo_personal integer,
    dias_habiles character varying(1) DEFAULT 'S'::character varying NOT NULL,
    incluye_sabados character varying(1) DEFAULT 'N'::character varying NOT NULL,
    deducir_ausencias character varying(1) DEFAULT 'S'::character varying NOT NULL,
    cierre_ausencias character varying(1) DEFAULT 'N'::character varying NOT NULL,
    dias_fijos integer DEFAULT 0 NOT NULL,
    monto_fijo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    monto_unico double precision DEFAULT 0 NOT NULL,
    pago_nomina character varying(1) DEFAULT 'N'::character varying NOT NULL,
    pago_tarjeta character varying(1) DEFAULT 'N'::character varying NOT NULL,
    tickets_por_dia integer DEFAULT 0 NOT NULL,
    maximo_tickets integer DEFAULT 0 NOT NULL,
    sueldo_basico_integral character varying(1) DEFAULT 'B'::character varying NOT NULL,
    sueldo_maximo double precision DEFAULT 0 NOT NULL,
    varias_denominaciones character varying(1) DEFAULT 'N'::character varying NOT NULL,
    distribucion character varying(1) DEFAULT 'D'::character varying,
    CONSTRAINT parametroticket_deducir_ausencias CHECK ((((deducir_ausencias)::text = 'S'::text) OR ((deducir_ausencias)::text = 'N'::text))),
    CONSTRAINT parametroticket_dias_habiles CHECK ((((dias_habiles)::text = 'S'::text) OR ((dias_habiles)::text = 'N'::text))),
    CONSTRAINT parametroticket_pago_nomina CHECK ((((pago_nomina)::text = 'S'::text) OR ((pago_nomina)::text = 'N'::text)))
);


ALTER TABLE parametroticket OWNER TO postgres;

--
-- TOC entry 408 (class 1259 OID 185967)
-- Name: parametroutiles; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE parametroutiles (
    id_parametro_utiles integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    nivel_educativo character varying(1) NOT NULL,
    cantidad_beneficiarios integer DEFAULT 0 NOT NULL,
    monto_utiles double precision DEFAULT 0 NOT NULL,
    quien_cobra character varying(1) DEFAULT 'M'::character varying NOT NULL,
    CONSTRAINT parametroutiles_quien_cobra CHECK (((((quien_cobra)::text = 'M'::text) OR ((quien_cobra)::text = 'P'::text)) OR ((quien_cobra)::text = 'A'::text)))
);


ALTER TABLE parametroutiles OWNER TO postgres;

--
-- TOC entry 409 (class 1259 OID 185974)
-- Name: parametrovarios; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE parametrovarios (
    id_parametro_varios integer NOT NULL,
    nuevo_regimen character varying(1) DEFAULT 'S'::character varying NOT NULL,
    alicuota_bfa_prestac character varying(1) DEFAULT 'N'::character varying NOT NULL,
    alicuota_bfa_bvac character varying(1) DEFAULT 'N'::character varying NOT NULL,
    alicuota_bvac_prestac character varying(1) DEFAULT 'N'::character varying NOT NULL,
    alicuota_bvac_bfa character varying(1) DEFAULT 'N'::character varying NOT NULL,
    dias_anio integer DEFAULT 360 NOT NULL,
    aniversario_disfrute character varying(1) DEFAULT 'A'::character varying NOT NULL,
    dias_bfa1997 integer DEFAULT 30 NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_grupo_organismo integer NOT NULL,
    calculo_utilidades integer DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0,
    tiempo_sitp date,
    alicuota_bono_petrolero character varying(1) DEFAULT 'N'::character varying NOT NULL,
    constante_petrolero_a integer DEFAULT 0,
    constante_petrolero_b integer DEFAULT 0,
    constante_petrolero_c integer DEFAULT 0,
    bono_extra character varying(1) DEFAULT 'N'::character varying NOT NULL,
    sumo_apn character varying(1) DEFAULT 'N'::character varying,
    calculo_alicuota_bfa character varying(1) DEFAULT 'F'::character varying NOT NULL,
    fecha_tope_utilidades date,
    fecha_apertura_fideicomiso date,
    regimen_derogado_procesado character varying(1) DEFAULT 'S'::character varying,
    intereses_adicionales character varying(1) DEFAULT 'N'::character varying,
    cambio_moneda double precision DEFAULT 0 NOT NULL,
    tipo_calculo_bfa character varying(1) DEFAULT 'D'::character varying NOT NULL,
    CONSTRAINT parametrosvarios_tipocalculobfa CHECK ((((tipo_calculo_bfa)::text = 'D'::text) OR ((tipo_calculo_bfa)::text = 'P'::text))),
    CONSTRAINT pv_alicuota_bfa_bvac CHECK ((((alicuota_bfa_bvac)::text = 'S'::text) OR ((alicuota_bfa_bvac)::text = 'N'::text))),
    CONSTRAINT pv_alicuota_bfa_prestac CHECK ((((alicuota_bfa_prestac)::text = 'S'::text) OR ((alicuota_bfa_prestac)::text = 'N'::text))),
    CONSTRAINT pv_alicuota_bvac_bfa CHECK ((((alicuota_bvac_bfa)::text = 'S'::text) OR ((alicuota_bvac_bfa)::text = 'N'::text))),
    CONSTRAINT pv_alicuota_bvac_prestac CHECK ((((alicuota_bvac_prestac)::text = 'S'::text) OR ((alicuota_bvac_prestac)::text = 'N'::text))),
    CONSTRAINT pv_aniversario_disfrute CHECK ((((aniversario_disfrute)::text = 'A'::text) OR ((aniversario_disfrute)::text = 'D'::text))),
    CONSTRAINT pv_nuevo_regimen CHECK ((((nuevo_regimen)::text = 'S'::text) OR ((nuevo_regimen)::text = 'N'::text)))
);


ALTER TABLE parametrovarios OWNER TO postgres;

--
-- TOC entry 410 (class 1259 OID 186005)
-- Name: parroquia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE parroquia (
    id_parroquia integer NOT NULL,
    abreviatura character varying(3),
    cod_parroquia character varying(2) NOT NULL,
    id_municipio integer NOT NULL,
    nombre character varying(40) NOT NULL
);


ALTER TABLE parroquia OWNER TO postgres;

--
-- TOC entry 411 (class 1259 OID 186008)
-- Name: participante; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE participante (
    id_participante integer NOT NULL,
    id_plan_adiestramiento integer NOT NULL,
    asistencia character varying(1) DEFAULT 'P'::character varying NOT NULL,
    estatus character varying(1) DEFAULT 'N'::character varying NOT NULL,
    desempenio character varying(1) DEFAULT 'N'::character varying NOT NULL,
    evaluacion_instructor character varying(1) DEFAULT 'N'::character varying NOT NULL,
    evaluacion_contenido character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_personal integer NOT NULL
);


ALTER TABLE participante OWNER TO postgres;

--
-- TOC entry 412 (class 1259 OID 186016)
-- Name: partidauelespecifica; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE partidauelespecifica (
    id_partida_uel_especifica integer NOT NULL,
    id_uel_especifica integer NOT NULL,
    id_cuenta_presupuesto integer NOT NULL,
    id_fuente_financiamiento integer NOT NULL,
    anio integer NOT NULL
);


ALTER TABLE partidauelespecifica OWNER TO postgres;

--
-- TOC entry 413 (class 1259 OID 186019)
-- Name: pasantia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE pasantia (
    id_pasantia integer DEFAULT 0 NOT NULL,
    fecha_inicio date NOT NULL,
    fecha_fin date,
    instituto character varying(60),
    proyecto text,
    dependencia character varying(90),
    id_personal integer NOT NULL,
    observaciones text,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    institucion character varying(90)
);


ALTER TABLE pasantia OWNER TO postgres;

--
-- TOC entry 414 (class 1259 OID 186027)
-- Name: pensioninvalidez; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE pensioninvalidez (
    id_pension_invalidez integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    porcentaje_maximo_pension double precision DEFAULT 0 NOT NULL,
    base character varying(1) DEFAULT 'P'::character varying,
    numero_meses double precision DEFAULT 0 NOT NULL,
    id_organismo integer DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE pensioninvalidez OWNER TO postgres;

--
-- TOC entry 415 (class 1259 OID 186035)
-- Name: pensionsobreviviviente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE pensionsobreviviviente (
    id_pension_sobreviviente integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    porcentaje_maximo_pension double precision DEFAULT 0 NOT NULL,
    base character varying(1) DEFAULT 'P'::character varying,
    numero_meses double precision DEFAULT 0 NOT NULL,
    id_organismo integer DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE pensionsobreviviviente OWNER TO postgres;

--
-- TOC entry 416 (class 1259 OID 186043)
-- Name: perfil; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE perfil (
    id_perfil integer NOT NULL,
    id_cargo integer NOT NULL,
    tipo_cargo character varying(1) DEFAULT '1'::character varying,
    naturaleza text,
    responsabilidades text,
    propositos text,
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE perfil OWNER TO postgres;

--
-- TOC entry 417 (class 1259 OID 186052)
-- Name: personal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE personal (
    id_personal integer NOT NULL,
    anios_servicio_apn integer DEFAULT 0 NOT NULL,
    cedula integer NOT NULL,
    cedula_conyugue integer DEFAULT 0 NOT NULL,
    id_ciudad_nacimiento integer,
    id_ciudad_residencia integer,
    diestralidad character varying(1) DEFAULT 'D'::character varying NOT NULL,
    direccion_residencia character varying(100),
    doble_nacionalidad character varying(1) DEFAULT 'N'::character varying NOT NULL,
    email character varying(60),
    id_establecimiento_salud integer,
    estado_civil character varying(1) DEFAULT 'S'::character varying NOT NULL,
    estatura double precision DEFAULT 0 NOT NULL,
    fecha_nacimiento date NOT NULL,
    fecha_nacionalizacion date,
    gaceta_nacionalizacion character varying(10),
    grado_licencia integer DEFAULT 0 NOT NULL,
    grupo_sanguineo character varying(3) DEFAULT 'NO'::character varying NOT NULL,
    maneja character varying(1) DEFAULT 'N'::character varying NOT NULL,
    marca_vehiculo character varying(20),
    mismo_organismo_conyugue character varying(1) DEFAULT 'N'::character varying NOT NULL,
    modelo_vehiculo character varying(20),
    nacionalidad character varying(1) DEFAULT 'V'::character varying NOT NULL,
    nacionalizado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    nombre_conyugue character varying(50),
    numero_libreta_militar character varying(15),
    numero_rif character varying(15),
    numero_sso character varying(15),
    otra_normativa_nac character varying(40),
    id_pais_nacionalidad integer,
    id_parroquia integer,
    peso double precision DEFAULT 0 NOT NULL,
    placa_vehiculo character varying(10),
    primer_apellido character varying(20) NOT NULL,
    primer_nombre character varying(20) NOT NULL,
    reingresable character varying(1) DEFAULT 'S'::character varying NOT NULL,
    sector_trabajo_conyugue character varying(1) DEFAULT 'P'::character varying NOT NULL,
    segundo_apellido character varying(20),
    segundo_nombre character varying(20),
    sexo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    telefono_celular character varying(15),
    telefono_oficina character varying(15),
    telefono_residencia character varying(15),
    tenencia_vivienda character varying(1) DEFAULT 'P'::character varying NOT NULL,
    tiene_hijos character varying(1) DEFAULT 'N'::character varying NOT NULL,
    tiene_vehiculo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    tipo_vivienda character varying(1) DEFAULT 'A'::character varying NOT NULL,
    zona_postal_residencia character varying(6),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    password character varying(20),
    madre_padre character varying(1) DEFAULT 'N'::character varying,
    fecha_fallecimiento date,
    dias_servicio_apn integer DEFAULT 0,
    meses_servicio_apn integer DEFAULT 0,
    deuda_regimen_derogado character varying(1) DEFAULT 'N'::character varying,
    credencial character varying(15),
    puebloindigena character varying(6),
    discapacidad character varying(1) DEFAULT 'N'::character varying NOT NULL,
    tipodiscapacidad character varying(1) DEFAULT 'O'::character varying NOT NULL,
    CONSTRAINT personal_diestralidad CHECK (((((diestralidad)::text = 'D'::text) OR ((diestralidad)::text = 'Z'::text)) OR ((diestralidad)::text = 'A'::text))),
    CONSTRAINT personal_doble_nacionalidad CHECK ((((doble_nacionalidad)::text = 'S'::text) OR ((doble_nacionalidad)::text = 'N'::text))),
    CONSTRAINT personal_estado_civil CHECK ((((((((estado_civil)::text = 'S'::text) OR ((estado_civil)::text = 'C'::text)) OR ((estado_civil)::text = 'D'::text)) OR ((estado_civil)::text = 'V'::text)) OR ((estado_civil)::text = 'U'::text)) OR ((estado_civil)::text = 'O'::text))),
    CONSTRAINT personal_grupo_sanguineo CHECK (((((((((((grupo_sanguineo)::text = 'A+'::text) OR ((grupo_sanguineo)::text = 'A-'::text)) OR ((grupo_sanguineo)::text = 'B+'::text)) OR ((grupo_sanguineo)::text = 'B-'::text)) OR ((grupo_sanguineo)::text = 'O+'::text)) OR ((grupo_sanguineo)::text = 'O-'::text)) OR ((grupo_sanguineo)::text = 'AB+'::text)) OR ((grupo_sanguineo)::text = 'AB-'::text)) OR ((grupo_sanguineo)::text = 'NO'::text))),
    CONSTRAINT personal_maneja CHECK ((((maneja)::text = 'S'::text) OR ((maneja)::text = 'N'::text))),
    CONSTRAINT personal_mismo_organismo_conyug CHECK ((((mismo_organismo_conyugue)::text = 'S'::text) OR ((mismo_organismo_conyugue)::text = 'N'::text))),
    CONSTRAINT personal_nacionalidad CHECK ((((nacionalidad)::text = 'V'::text) OR ((nacionalidad)::text = 'E'::text))),
    CONSTRAINT personal_nacionalizado CHECK ((((nacionalizado)::text = 'S'::text) OR ((nacionalizado)::text = 'N'::text))),
    CONSTRAINT personal_nivel_educativo CHECK ((((((((((((nivel_educativo)::text = 'P'::text) OR ((nivel_educativo)::text = 'B'::text)) OR ((nivel_educativo)::text = 'D'::text)) OR ((nivel_educativo)::text = 'T'::text)) OR ((nivel_educativo)::text = 'S'::text)) OR ((nivel_educativo)::text = 'U'::text)) OR ((nivel_educativo)::text = 'G'::text)) OR ((nivel_educativo)::text = 'C'::text)) OR ((nivel_educativo)::text = 'O'::text)) OR ((nivel_educativo)::text = 'N'::text))),
    CONSTRAINT personal_reingresable CHECK ((((reingresable)::text = 'S'::text) OR ((reingresable)::text = 'N'::text))),
    CONSTRAINT personal_sector_trabajo_conyugu CHECK (((((sector_trabajo_conyugue)::text = 'P'::text) OR ((sector_trabajo_conyugue)::text = 'U'::text)) OR ((sector_trabajo_conyugue)::text = 'N'::text))),
    CONSTRAINT personal_sexo CHECK ((((sexo)::text = 'F'::text) OR ((sexo)::text = 'M'::text))),
    CONSTRAINT personal_tenencia_vivienda CHECK ((((((tenencia_vivienda)::text = 'P'::text) OR ((tenencia_vivienda)::text = 'H'::text)) OR ((tenencia_vivienda)::text = 'A'::text)) OR ((tenencia_vivienda)::text = 'F'::text))),
    CONSTRAINT personal_tiene_hijos CHECK ((((tiene_hijos)::text = 'S'::text) OR ((tiene_hijos)::text = 'N'::text))),
    CONSTRAINT personal_tiene_vehiculo CHECK ((((tiene_vehiculo)::text = 'S'::text) OR ((tiene_vehiculo)::text = 'N'::text))),
    CONSTRAINT personal_tipo_vivienda CHECK ((((((tipo_vivienda)::text = 'C'::text) OR ((tipo_vivienda)::text = 'A'::text)) OR ((tipo_vivienda)::text = 'H'::text)) OR ((tipo_vivienda)::text = 'B'::text)))
);


ALTER TABLE personal OWNER TO postgres;

--
-- TOC entry 418 (class 1259 OID 186102)
-- Name: personalorganismo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE personalorganismo (
    id_personal_organismo integer NOT NULL,
    id_personal integer NOT NULL,
    id_organismo integer NOT NULL
);


ALTER TABLE personalorganismo OWNER TO postgres;

--
-- TOC entry 419 (class 1259 OID 186105)
-- Name: planadiestramiento; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE planadiestramiento (
    id_plan_adiestramiento integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    numero_plan integer DEFAULT 1 NOT NULL,
    numero_participantes integer DEFAULT 1 NOT NULL,
    duracion integer DEFAULT 1 NOT NULL,
    costo_estimado double precision DEFAULT 0 NOT NULL,
    costo_aprobado double precision DEFAULT 0 NOT NULL,
    costo_real double precision DEFAULT 0 NOT NULL,
    trimestre integer DEFAULT 1 NOT NULL,
    id_unidad_funcional integer NOT NULL,
    id_area_conocimiento integer NOT NULL,
    nombre_curso character varying(90) NOT NULL,
    unidad_tiempo character varying(1) DEFAULT 'H'::character varying NOT NULL,
    tipo_cargo character varying(1) DEFAULT '9'::character varying NOT NULL,
    estatus character varying(1) DEFAULT 'P'::character varying NOT NULL,
    fecha_inicio date,
    interno_externo character varying(1) DEFAULT 'I'::character varying NOT NULL,
    nombre_entidad character varying(90),
    aprobacion_mpd character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_tipo_curso integer NOT NULL,
    id_plan_personal integer,
    nivel character varying(1),
    CONSTRAINT plan_aprobacion_mpd CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text))),
    CONSTRAINT plan_estatus CHECK (((((estatus)::text = 'P'::text) OR ((estatus)::text = 'A'::text)) OR ((estatus)::text = 'E'::text))),
    CONSTRAINT plan_interno_externo CHECK ((((interno_externo)::text = 'I'::text) OR ((interno_externo)::text = 'E'::text))),
    CONSTRAINT plan_tipo_cargo CHECK ((((((((tipo_cargo)::text = '1'::text) OR ((tipo_cargo)::text = '2'::text)) OR ((tipo_cargo)::text = '3'::text)) OR ((tipo_cargo)::text = '4'::text)) OR ((tipo_cargo)::text = '5'::text)) OR ((tipo_cargo)::text = '9'::text))),
    CONSTRAINT plan_unidad_tiempo CHECK (((((((unidad_tiempo)::text = 'H'::text) OR ((unidad_tiempo)::text = 'D'::text)) OR ((unidad_tiempo)::text = 'S'::text)) OR ((unidad_tiempo)::text = 'M'::text)) OR ((unidad_tiempo)::text = 'A'::text)))
);


ALTER TABLE planadiestramiento OWNER TO postgres;

--
-- TOC entry 420 (class 1259 OID 186126)
-- Name: planillaarc; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE planillaarc (
    id_planilla_arc integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer NOT NULL,
    devengado_enero double precision DEFAULT 0 NOT NULL,
    retencion_enero double precision DEFAULT 0 NOT NULL,
    porcentaje_enero double precision DEFAULT 0 NOT NULL,
    devengado_febrero double precision DEFAULT 0 NOT NULL,
    retencion_febrero double precision DEFAULT 0 NOT NULL,
    porcentaje_febrero double precision DEFAULT 0 NOT NULL,
    devengado_marzo double precision DEFAULT 0 NOT NULL,
    retencion_marzo double precision DEFAULT 0 NOT NULL,
    porcentaje_marzo double precision DEFAULT 0 NOT NULL,
    devengado_abril double precision DEFAULT 0 NOT NULL,
    retencion_abril double precision DEFAULT 0 NOT NULL,
    porcentaje_abril double precision DEFAULT 0 NOT NULL,
    devengado_mayo double precision DEFAULT 0 NOT NULL,
    retencion_mayo double precision DEFAULT 0 NOT NULL,
    porcentaje_mayo double precision DEFAULT 0 NOT NULL,
    devengado_junio double precision DEFAULT 0 NOT NULL,
    retencion_junio double precision DEFAULT 0 NOT NULL,
    porcentaje_junio double precision DEFAULT 0 NOT NULL,
    devengado_julio double precision DEFAULT 0 NOT NULL,
    retencion_julio double precision DEFAULT 0 NOT NULL,
    porcentaje_julio double precision DEFAULT 0 NOT NULL,
    devengado_agosto double precision DEFAULT 0 NOT NULL,
    retencion_agosto double precision DEFAULT 0 NOT NULL,
    porcentaje_agosto double precision DEFAULT 0 NOT NULL,
    devengado_septiembre double precision DEFAULT 0 NOT NULL,
    retencion_septiembre double precision DEFAULT 0 NOT NULL,
    porcentaje_septiembre double precision DEFAULT 0 NOT NULL,
    devengado_octubre double precision DEFAULT 0 NOT NULL,
    retencion_octubre double precision DEFAULT 0 NOT NULL,
    porcentaje_octubre double precision DEFAULT 0 NOT NULL,
    devengado_noviembre double precision DEFAULT 0 NOT NULL,
    retencion_noviembre double precision DEFAULT 0 NOT NULL,
    porcentaje_noviembre double precision DEFAULT 0 NOT NULL,
    devengado_diciembre double precision DEFAULT 0 NOT NULL,
    retencion_diciembre double precision DEFAULT 0 NOT NULL,
    porcentaje_diciembre double precision DEFAULT 0 NOT NULL,
    acumulado_sso double precision DEFAULT 0 NOT NULL,
    acumulado_spf double precision DEFAULT 0 NOT NULL,
    acumulado_lph double precision DEFAULT 0 NOT NULL,
    acumulado_hcm double precision DEFAULT 0 NOT NULL,
    acumulado_caja double precision DEFAULT 0 NOT NULL,
    acumulado_otros double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE planillaarc OWNER TO postgres;

--
-- TOC entry 421 (class 1259 OID 186172)
-- Name: planillaari; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE planillaari (
    id_planilla_ari integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer NOT NULL,
    remuneraciones double precision DEFAULT 0 NOT NULL,
    desgravamenes double precision DEFAULT 0 NOT NULL,
    total_cargas integer DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    remuneraciones_variacion1 double precision DEFAULT 0 NOT NULL,
    desgravamenes_variacion1 double precision DEFAULT 0 NOT NULL,
    total_cargas_variacion1 integer DEFAULT 0 NOT NULL,
    porcentaje_variacion1 double precision DEFAULT 0 NOT NULL,
    remuneraciones_variacion2 double precision DEFAULT 0 NOT NULL,
    desgravamenes_variacion2 double precision DEFAULT 0 NOT NULL,
    total_cargas_variacion2 integer DEFAULT 0 NOT NULL,
    porcentaje_variacion2 double precision DEFAULT 0 NOT NULL,
    remuneraciones_variacion3 double precision DEFAULT 0 NOT NULL,
    desgravamenes_variacion3 double precision DEFAULT 0 NOT NULL,
    total_cargas_variacion3 integer DEFAULT 0 NOT NULL,
    porcentaje_variacion3 double precision DEFAULT 0 NOT NULL,
    remuneraciones_variacion4 double precision DEFAULT 0 NOT NULL,
    desgravamenes_variacion4 double precision DEFAULT 0 NOT NULL,
    total_cargas_variacion4 integer DEFAULT 0 NOT NULL,
    porcentaje_variacion4 double precision DEFAULT 0 NOT NULL
);


ALTER TABLE planillaari OWNER TO postgres;

--
-- TOC entry 422 (class 1259 OID 186195)
-- Name: planpersonal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE planpersonal (
    id_plan_personal integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    version integer DEFAULT 1 NOT NULL,
    fecha_preparacion date NOT NULL,
    fecha_vigencia date NOT NULL,
    estatus character varying(1) DEFAULT '0'::character varying NOT NULL,
    aprobo_rrhh character varying(1) DEFAULT 'N'::character varying NOT NULL,
    aprobo_planificacion character varying(1) DEFAULT 'N'::character varying NOT NULL,
    aprobo_presupuesto character varying(1) DEFAULT 'N'::character varying NOT NULL,
    fecha_finalizacion date NOT NULL,
    id_organismo integer NOT NULL,
    CONSTRAINT planpersonal_aprobo_planificacion CHECK ((((aprobo_planificacion)::text = 'S'::text) OR ((aprobo_planificacion)::text = 'N'::text))),
    CONSTRAINT planpersonal_aprobo_presupuesto CHECK ((((aprobo_presupuesto)::text = 'S'::text) OR ((aprobo_presupuesto)::text = 'N'::text))),
    CONSTRAINT planpersonal_aprobo_rrhh CHECK ((((aprobo_rrhh)::text = 'S'::text) OR ((aprobo_rrhh)::text = 'N'::text))),
    CONSTRAINT planpersonal_estatus CHECK (((((((estatus)::text = '0'::text) OR ((estatus)::text = '0'::text)) OR ((estatus)::text = '2'::text)) OR ((estatus)::text = '3'::text)) OR ((estatus)::text = '4'::text)))
);


ALTER TABLE planpersonal OWNER TO postgres;

--
-- TOC entry 423 (class 1259 OID 186208)
-- Name: planpoliza; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE planpoliza (
    id_plan_poliza integer NOT NULL,
    cod_plan_poliza character varying(6) NOT NULL,
    nombre character varying(60) NOT NULL,
    beneficiarios character varying(1) DEFAULT 'S'::character varying NOT NULL,
    prima_unica character varying(1) DEFAULT 'N'::character varying NOT NULL,
    monto_prima_unica double precision DEFAULT 0 NOT NULL,
    cobertura_unica double precision DEFAULT 0 NOT NULL,
    exceso character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_poliza integer NOT NULL,
    CONSTRAINT planpoliza_beneficiarios CHECK ((((beneficiarios)::text = 'S'::text) OR ((beneficiarios)::text = 'N'::text))),
    CONSTRAINT planpoliza_exceso CHECK ((((exceso)::text = 'S'::text) OR ((exceso)::text = 'N'::text))),
    CONSTRAINT planpoliza_prima_unica CHECK ((((prima_unica)::text = 'S'::text) OR ((prima_unica)::text = 'N'::text)))
);


ALTER TABLE planpoliza OWNER TO postgres;

--
-- TOC entry 424 (class 1259 OID 186219)
-- Name: poliza; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE poliza (
    id_poliza integer NOT NULL,
    cod_poliza character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL,
    tipo character varying(1) DEFAULT 'H'::character varying NOT NULL,
    numero_poliza character varying(30) NOT NULL,
    aseguradora character varying(60) NOT NULL,
    fecha_inicio date,
    fecha_fin date,
    permite_exceso character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_organismo integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    vigente character varying(1) DEFAULT 'S'::character varying,
    CONSTRAINT poliza_permite_exceso CHECK ((((permite_exceso)::text = 'S'::text) OR ((permite_exceso)::text = 'N'::text))),
    CONSTRAINT poliza_tipo CHECK ((((((((tipo)::text = 'H'::text) OR ((tipo)::text = 'V'::text)) OR ((tipo)::text = 'A'::text)) OR ((tipo)::text = 'C'::text)) OR ((tipo)::text = 'F'::text)) OR ((tipo)::text = 'O'::text)))
);


ALTER TABLE poliza OWNER TO postgres;

--
-- TOC entry 425 (class 1259 OID 186228)
-- Name: postuladoconcurso; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE postuladoconcurso (
    id_postulado_concurso integer NOT NULL,
    id_concurso_cargo integer NOT NULL,
    id_personal integer,
    id_elegible integer,
    id_postulado_externo integer,
    cedula integer NOT NULL,
    estatus character varying(1) DEFAULT 'P'::character varying NOT NULL,
    origen character varying(1) DEFAULT 'I'::character varying NOT NULL,
    resultado integer NOT NULL,
    observacion text
);


ALTER TABLE postuladoconcurso OWNER TO postgres;

--
-- TOC entry 426 (class 1259 OID 186236)
-- Name: postuladoexterno; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE postuladoexterno (
    id_postulado_externo integer NOT NULL,
    cedula integer NOT NULL,
    primer_apellido character varying(20) NOT NULL,
    primer_nombre character varying(20) NOT NULL,
    segundo_apellido character varying(20),
    segundo_nombre character varying(20),
    sexo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    nacionalidad character varying(1) DEFAULT 'V'::character varying NOT NULL,
    estado_civil character varying(1) DEFAULT 'S'::character varying NOT NULL,
    fecha_nacimiento date
);


ALTER TABLE postuladoexterno OWNER TO postgres;

--
-- TOC entry 427 (class 1259 OID 186242)
-- Name: prestacionesmensuales; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE prestacionesmensuales (
    id_prestaciones_mensuales integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer NOT NULL,
    mes integer NOT NULL,
    dias_mensuales integer DEFAULT 5 NOT NULL,
    dias_adicionales integer NOT NULL,
    base_mensual double precision DEFAULT 0,
    base_adicional double precision DEFAULT 0,
    monto_prestaciones double precision DEFAULT 0,
    monto_adicional double precision DEFAULT 0,
    fideicomiso character varying(1) DEFAULT 'N'::character varying,
    dias_cancelados character varying(1) DEFAULT 'N'::character varying,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    id_personal integer
);


ALTER TABLE prestacionesmensuales OWNER TO postgres;

--
-- TOC entry 428 (class 1259 OID 186253)
-- Name: prestacionesonapre; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE prestacionesonapre (
    id_prestaciones_onapre integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer NOT NULL,
    mes integer NOT NULL,
    fecha_prestaciones date,
    sueldo_basico double precision DEFAULT 0,
    compensacion double precision DEFAULT 0,
    primas double precision DEFAULT 0,
    bono_fin_anio double precision DEFAULT 0,
    bono_vacacional double precision DEFAULT 0,
    otros double precision DEFAULT 0,
    sueldo_integral double precision DEFAULT 0,
    dias_mensuales integer DEFAULT 5 NOT NULL,
    dias_adicionales integer NOT NULL,
    abono_mensual double precision DEFAULT 0,
    base_adicional double precision DEFAULT 0,
    abono_adicional double precision DEFAULT 0
);


ALTER TABLE prestacionesonapre OWNER TO postgres;

--
-- TOC entry 429 (class 1259 OID 186267)
-- Name: prestamo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE prestamo (
    id_prestamo integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    monto_prestamo double precision DEFAULT 0 NOT NULL,
    monto_cuota double precision DEFAULT 0 NOT NULL,
    monto_pagado double precision DEFAULT 0 NOT NULL,
    numero_cuotas integer DEFAULT 0 NOT NULL,
    cuotas_pagadas integer DEFAULT 0 NOT NULL,
    fecha_otorgo date,
    fecha_comienzo_pago date,
    fecha_registro date,
    documento_soporte character varying(10),
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL
);


ALTER TABLE prestamo OWNER TO postgres;

--
-- TOC entry 430 (class 1259 OID 186276)
-- Name: presupuestoespecifica; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE presupuestoespecifica (
    id_presupuesto_especifica integer NOT NULL,
    id_uel_especifica integer NOT NULL,
    id_cuenta_presupuesto integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    monto_presupuestado double precision DEFAULT 0,
    monto_ejecutado double precision DEFAULT 0
);


ALTER TABLE presupuestoespecifica OWNER TO postgres;

--
-- TOC entry 431 (class 1259 OID 186282)
-- Name: primaantiguedad; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE primaantiguedad (
    id_prima_antiguedad integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    anios_servicio integer DEFAULT 99,
    tipo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    operacion character varying(1) DEFAULT 'M'::character varying NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT primaantiguedad_operacion CHECK (((((operacion)::text = 'I'::text) OR ((operacion)::text = 'M'::text)) OR ((operacion)::text = 'F'::text))),
    CONSTRAINT primaantiguedad_tipo CHECK ((((tipo)::text = 'P'::text) OR ((tipo)::text = 'F'::text)))
);


ALTER TABLE primaantiguedad OWNER TO postgres;

--
-- TOC entry 432 (class 1259 OID 186293)
-- Name: primahijo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE primahijo (
    id_prima_hijo integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    edad_minima integer DEFAULT 0,
    edad_maxima integer DEFAULT 18,
    edad_excepcional integer DEFAULT 99,
    monto double precision DEFAULT 0 NOT NULL,
    edad_estudiante integer DEFAULT 25,
    numero_maximo_hijos integer DEFAULT 0,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE primahijo OWNER TO postgres;

--
-- TOC entry 433 (class 1259 OID 186303)
-- Name: primascargo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE primascargo (
    id_primas_cargo integer NOT NULL,
    porcentaje_patron double precision DEFAULT 0 NOT NULL,
    porcentaje_trabajador double precision DEFAULT 0 NOT NULL,
    id_cargo integer NOT NULL,
    id_primas_plan integer NOT NULL
);


ALTER TABLE primascargo OWNER TO postgres;

--
-- TOC entry 434 (class 1259 OID 186308)
-- Name: primasplan; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE primasplan (
    id_primas_plan integer NOT NULL,
    parentesco character varying(1) DEFAULT 'T'::character varying NOT NULL,
    edad_minima integer DEFAULT 0 NOT NULL,
    edad_maxima integer DEFAULT 0 NOT NULL,
    prima_femenino double precision DEFAULT 0 NOT NULL,
    prima_masculino double precision DEFAULT 0 NOT NULL,
    porcentaje_patron double precision DEFAULT 0 NOT NULL,
    porcentaje_trabajador double precision DEFAULT 0 NOT NULL,
    cobertura_parentesco double precision DEFAULT 0 NOT NULL,
    maximo_beneficiarios integer DEFAULT 0 NOT NULL,
    id_plan_poliza integer NOT NULL,
    CONSTRAINT primasplan_parentesco CHECK (((((((((((((parentesco)::text = 'C'::text) OR ((parentesco)::text = 'M'::text)) OR ((parentesco)::text = 'P'::text)) OR ((parentesco)::text = 'H'::text)) OR ((parentesco)::text = 'S'::text)) OR ((parentesco)::text = 'E'::text)) OR ((parentesco)::text = 'A'::text)) OR ((parentesco)::text = 'B'::text)) OR ((parentesco)::text = 'I'::text)) OR ((parentesco)::text = 'T'::text)) OR ((parentesco)::text = 'O'::text)))
);


ALTER TABLE primasplan OWNER TO postgres;

--
-- TOC entry 435 (class 1259 OID 186321)
-- Name: profesion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE profesion (
    id_profesion integer NOT NULL,
    cod_profesion character varying(6) NOT NULL,
    nombre character varying(90) NOT NULL,
    id_subgrupo_profesion integer NOT NULL
);


ALTER TABLE profesion OWNER TO postgres;

--
-- TOC entry 436 (class 1259 OID 186324)
-- Name: profesioncargo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE profesioncargo (
    id_profesion_cargo integer NOT NULL,
    id_cargo integer NOT NULL,
    id_profesion integer NOT NULL,
    anios_graduado integer DEFAULT 0 NOT NULL,
    peso double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE profesioncargo OWNER TO postgres;

--
-- TOC entry 437 (class 1259 OID 186330)
-- Name: profesiontrabajador; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE profesiontrabajador (
    id_profesion_trabajador integer NOT NULL,
    id_profesion integer NOT NULL,
    id_personal integer NOT NULL,
    actualmente character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT profesiontrabajador_actualmente CHECK ((((actualmente)::text = 'S'::text) OR ((actualmente)::text = 'N'::text)))
);


ALTER TABLE profesiontrabajador OWNER TO postgres;

--
-- TOC entry 438 (class 1259 OID 186336)
-- Name: programa; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE programa (
    id_programa integer NOT NULL,
    id_organismo integer NOT NULL,
    cod_programa character varying(2) NOT NULL,
    nombre character varying(90),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    id_unidad_administradora integer
);


ALTER TABLE programa OWNER TO postgres;

--
-- TOC entry 439 (class 1259 OID 186340)
-- Name: proveedorregion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE proveedorregion (
    id_proveedor_region integer NOT NULL,
    id_proveedor_ticket integer DEFAULT 0 NOT NULL,
    id_region integer DEFAULT 0 NOT NULL,
    cod_ticket character varying(6) NOT NULL
);


ALTER TABLE proveedorregion OWNER TO postgres;

--
-- TOC entry 440 (class 1259 OID 186345)
-- Name: proveedorticket; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE proveedorticket (
    id_proveedor_ticket integer NOT NULL,
    cod_proveedor_ticket character varying(2) NOT NULL,
    nombre character varying(60) NOT NULL,
    direccion text
);


ALTER TABLE proveedorticket OWNER TO postgres;

--
-- TOC entry 441 (class 1259 OID 186351)
-- Name: proveedorubicacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE proveedorubicacion (
    id_proveedor_ubicacion integer NOT NULL,
    id_proveedor_ticket integer NOT NULL,
    codigo_ubicacion character varying(15) NOT NULL,
    observaciones text
);


ALTER TABLE proveedorubicacion OWNER TO postgres;

--
-- TOC entry 442 (class 1259 OID 186357)
-- Name: proyeccion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE proyeccion (
    id_aplicar_tabulador integer,
    fecha_proceso date,
    grado_actual integer,
    paso_actual integer,
    sueldo_actual double precision,
    ajuste_actual double precision,
    compensacion_actual double precision,
    paso_nuevo integer,
    sueldo_nuevo double precision,
    ajuste_nuevo double precision,
    compensacion_nueva double precision,
    id_trabajador integer,
    monto_retroactivo double precision,
    dias_retroactivo integer,
    base_aumento double precision,
    prima_profesional_actual double precision DEFAULT 0,
    prima_profesional_nueva double precision DEFAULT 0,
    prima_razones_servicio_actual double precision DEFAULT 0,
    prima_razones_servicio_nueva double precision DEFAULT 0,
    bono_comp_jext1_actual double precision DEFAULT 0,
    bono_comp_jext1_nueva double precision DEFAULT 0,
    bono_comp_jext2_actual double precision DEFAULT 0,
    bono_comp_jext2_nueva double precision DEFAULT 0,
    bono_comp_jext3_actual double precision DEFAULT 0,
    bono_comp_jext3_nueva double precision DEFAULT 0,
    retroactivo_sueldo double precision DEFAULT 0,
    retroactivo_compensacion double precision DEFAULT 0,
    cedula integer,
    primer_apellido character varying(25),
    primer_nombre character varying(50),
    coduel character varying(6)
);


ALTER TABLE proyeccion OWNER TO postgres;

--
-- TOC entry 443 (class 1259 OID 186372)
-- Name: proyecto; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE proyecto (
    id_proyecto integer NOT NULL,
    anio integer NOT NULL,
    cod_proyecto character varying(4) NOT NULL,
    enunciado character varying(80),
    descripcion text,
    objetivo_estrategico text,
    objetivos_especificos text,
    resultado text,
    meta double precision DEFAULT 0 NOT NULL,
    estatus character varying(1) DEFAULT 'I'::character varying NOT NULL,
    fecha_inicio date,
    fecha_fin date,
    fecha_suspension date,
    id_ciudad integer,
    id_municipio integer,
    id_organismo integer NOT NULL,
    CONSTRAINT proyecto_estatus CHECK (((((estatus)::text = 'I'::text) OR ((estatus)::text = 'R'::text)) OR ((estatus)::text = 'E'::text)))
);


ALTER TABLE proyecto OWNER TO postgres;

--
-- TOC entry 444 (class 1259 OID 186381)
-- Name: pruebapreseleccionado; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE pruebapreseleccionado (
    id_prueba_preseleccionado integer NOT NULL,
    id_postulado_concurso integer NOT NULL,
    id_prueba_seleccion integer NOT NULL,
    resultado double precision DEFAULT 0 NOT NULL,
    entrevistador character varying(60),
    fecha date,
    observaciones text
);


ALTER TABLE pruebapreseleccionado OWNER TO postgres;

--
-- TOC entry 445 (class 1259 OID 186388)
-- Name: pruebaseleccion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE pruebaseleccion (
    id_prueba_seleccion integer NOT NULL,
    cod_prueba character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL
);


ALTER TABLE pruebaseleccion OWNER TO postgres;

--
-- TOC entry 446 (class 1259 OID 186391)
-- Name: publicacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE publicacion (
    id_publicacion integer DEFAULT 0 NOT NULL,
    anio_publicacion integer NOT NULL,
    editorial character varying(60),
    propiedad_intelectual character varying(25),
    titulo text,
    id_personal integer NOT NULL,
    observaciones text,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE publicacion OWNER TO postgres;

--
-- TOC entry 447 (class 1259 OID 186399)
-- Name: puebloindigena; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE puebloindigena (
    id_pueblo_indigena integer NOT NULL,
    cod_pueblo_indigena character varying(6) NOT NULL,
    descripcion character varying(100) NOT NULL
);


ALTER TABLE puebloindigena OWNER TO postgres;

--
-- TOC entry 448 (class 1259 OID 186402)
-- Name: ramoocupacional; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ramoocupacional (
    id_ramo_ocupacional integer NOT NULL,
    cod_ramo_ocupacional character varying(1) NOT NULL,
    nombre character varying(60) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE ramoocupacional OWNER TO postgres;

--
-- TOC entry 449 (class 1259 OID 186406)
-- Name: reconocimiento; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE reconocimiento (
    id_reconocimiento integer NOT NULL,
    observaciones character varying(254),
    fecha date NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_reconocimiento integer NOT NULL,
    id_organismo integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE reconocimiento OWNER TO postgres;

--
-- TOC entry 450 (class 1259 OID 186410)
-- Name: region; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE region (
    id_region integer NOT NULL,
    cod_region character varying(2) NOT NULL,
    id_organismo integer NOT NULL,
    nombre character varying(60) NOT NULL
);


ALTER TABLE region OWNER TO postgres;

--
-- TOC entry 451 (class 1259 OID 186413)
-- Name: regioncontinente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE regioncontinente (
    id_region_continente integer NOT NULL,
    abreviatura character varying(3),
    cod_region_continente character varying(2) NOT NULL,
    nombre character varying(40) NOT NULL,
    id_continente integer NOT NULL
);


ALTER TABLE regioncontinente OWNER TO postgres;

--
-- TOC entry 452 (class 1259 OID 186416)
-- Name: registro; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE registro (
    id_registro integer NOT NULL,
    numero_registro integer NOT NULL,
    nombre character varying(60) NOT NULL,
    aprobacion_mpd character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_grupo_organismo integer,
    id_organismo integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    anio integer DEFAULT 0,
    fecha_vigencia date NOT NULL,
    CONSTRAINT registro_aprobacion_mpd CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text)))
);


ALTER TABLE registro OWNER TO postgres;

--
-- TOC entry 453 (class 1259 OID 186423)
-- Name: registrocargos; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE registrocargos (
    id_registro_cargos integer NOT NULL,
    id_registro integer NOT NULL,
    codigo_nomina integer NOT NULL,
    situacion character varying(1) DEFAULT 'O'::character varying NOT NULL,
    estatus character varying(1) DEFAULT '4'::character varying NOT NULL,
    condicion character varying(1) DEFAULT '1'::character varying NOT NULL,
    fecha_creacion date,
    horas double precision DEFAULT 8 NOT NULL,
    reporta_rac integer DEFAULT 1 NOT NULL,
    id_trabajador integer,
    convenio_gremial character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_gremio integer,
    id_cargo integer NOT NULL,
    id_dependencia integer NOT NULL,
    id_sede integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    sueldo_basico double precision DEFAULT 0,
    compensacion double precision DEFAULT 0,
    primas_cargo double precision DEFAULT 0,
    primas_trabajador double precision DEFAULT 0,
    aprobado_mpd character varying(1) DEFAULT 'S'::character varying,
    CONSTRAINT registrocargos_condicion CHECK ((((((((condicion)::text = '1'::text) OR ((condicion)::text = '2'::text)) OR ((condicion)::text = '3'::text)) OR ((condicion)::text = '4'::text)) OR ((condicion)::text = '5'::text)) OR ((condicion)::text = '6'::text))),
    CONSTRAINT registrocargos_convenio_gremial CHECK ((((convenio_gremial)::text = 'S'::text) OR ((convenio_gremial)::text = 'N'::text))),
    CONSTRAINT registrocargos_estatus CHECK (((((((estatus)::text = '0'::text) OR ((estatus)::text = '1'::text)) OR ((estatus)::text = '2'::text)) OR ((estatus)::text = '3'::text)) OR ((estatus)::text = '4'::text))),
    CONSTRAINT registrocargos_situacion CHECK ((((situacion)::text = 'O'::text) OR ((situacion)::text = 'V'::text)))
);


ALTER TABLE registrocargos OWNER TO postgres;

--
-- TOC entry 454 (class 1259 OID 186442)
-- Name: registrocargosaprobado; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE registrocargosaprobado (
    id_registro_cargos_aprobado integer NOT NULL,
    id_registro integer NOT NULL,
    id_plan_personal integer NOT NULL,
    codigo_nomina integer NOT NULL,
    accion character varying(1) DEFAULT '1'::character varying NOT NULL,
    estatus character varying(1) DEFAULT 'N'::character varying NOT NULL,
    fecha_accion date,
    horas double precision DEFAULT 8 NOT NULL,
    id_cargo integer NOT NULL,
    id_dependencia integer NOT NULL,
    id_region integer NOT NULL
);


ALTER TABLE registrocargosaprobado OWNER TO postgres;

--
-- TOC entry 455 (class 1259 OID 186448)
-- Name: registrodocente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE registrodocente (
    id_registro_docente integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_cargo integer NOT NULL,
    id_dependencia integer NOT NULL,
    id_apertura_escolar integer,
    situacion character varying(1) NOT NULL,
    origen character varying(1) NOT NULL,
    horas_administrativas double precision DEFAULT 0,
    horas_docente double precision DEFAULT 0,
    total_horas double precision DEFAULT 0,
    horas_restante double precision DEFAULT 0
);


ALTER TABLE registrodocente OWNER TO postgres;

--
-- TOC entry 456 (class 1259 OID 186455)
-- Name: registropersonal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE registropersonal (
    id_registro_personal integer NOT NULL,
    id_registro integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE registropersonal OWNER TO postgres;

--
-- TOC entry 457 (class 1259 OID 186459)
-- Name: registrositp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE registrositp (
    id_registro_sitp integer NOT NULL,
    fecha_registro date,
    fecha_movimiento date NOT NULL,
    codigo_nomina integer DEFAULT 0 NOT NULL,
    sueldo double precision DEFAULT 0 NOT NULL,
    compensacion double precision DEFAULT 0 NOT NULL,
    primas_cargo double precision DEFAULT 0 NOT NULL,
    primas_trabajador double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    paso integer DEFAULT 1 NOT NULL,
    cod_dependencia character varying(12),
    cod_sede character varying(6),
    tipo_personal character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_tipo_personal character varying(60),
    id_clasificacion_personal integer,
    id_causa_movimiento integer,
    cod_causa_movimiento character varying(3),
    cod_manual_cargo integer,
    cod_cargo character varying(8),
    descripcion_cargo character varying(60) NOT NULL,
    cod_tabulador character varying(6),
    afecta_sueldo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    documento_soporte character varying(25),
    localidad character varying(1) DEFAULT 'C'::character varying NOT NULL,
    numero_movimiento integer DEFAULT 0 NOT NULL,
    cedula integer NOT NULL,
    apellidos_nombres character varying(60),
    id_personal integer NOT NULL,
    id_remesa integer,
    estatus character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_dependencia character varying(90),
    nombre_sede character varying(90),
    id_organismo integer NOT NULL,
    cod_organismo character varying(4),
    cod_organismo_mpd character varying(10),
    nombre_organismo character varying(90),
    observaciones text,
    id_usuario integer NOT NULL,
    estatus_mpd character varying(1),
    codigo_devolucion character varying(3),
    analista_mpd character varying(25),
    id_analista_mpd integer,
    fecha_inicio_mpd date,
    fecha_fin_mpd date,
    observaciones_mpd text,
    cod_region character varying(2),
    nombre_region character varying(90),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    fecha_punto_cuenta date,
    punto_cuenta character varying(15),
    anio integer DEFAULT 0 NOT NULL,
    anterior_cod_manual_cargo integer,
    anterior_cod_cargo character varying(6),
    anterior_descripcion_cargo character varying(60),
    anterior_codigo_nomina integer DEFAULT 0,
    anterior_cod_sede character varying(6),
    anterior_nombre_sede character varying(90),
    anterior_cod_dependencia character varying(12),
    anterior_nombre_dependencia character varying(90),
    anterior_sueldo double precision DEFAULT 0,
    anterior_compensacion double precision DEFAULT 0,
    anterior_primas_cargo double precision DEFAULT 0,
    anterior_primas_trabajador double precision DEFAULT 0,
    anterior_grado integer DEFAULT 0,
    anterior_paso integer DEFAULT 1,
    anterior_cod_region character varying(2),
    anterior_nombre_region character varying(90),
    cod_concurso character varying(15),
    fecha_ingreso date,
    id_turno integer,
    fecha_culminacion date,
    CONSTRAINT registrositp_afecta_sueld CHECK ((((afecta_sueldo)::text = 'S'::text) OR ((afecta_sueldo)::text = 'N'::text))),
    CONSTRAINT registrositp_localidad CHECK ((((localidad)::text = 'C'::text) OR ((localidad)::text = 'R'::text)))
);


ALTER TABLE registrositp OWNER TO postgres;

--
-- TOC entry 458 (class 1259 OID 186488)
-- Name: relacionpersonal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE relacionpersonal (
    id_relacion_personal integer NOT NULL,
    cod_relacion character varying(1) NOT NULL,
    desc_relacion character varying(20) NOT NULL
);


ALTER TABLE relacionpersonal OWNER TO postgres;

--
-- TOC entry 459 (class 1259 OID 186491)
-- Name: remesa; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE remesa (
    id_remesa integer NOT NULL,
    anio integer NOT NULL,
    numero integer NOT NULL,
    fecha_creacion date,
    fecha_cierre date,
    fecha_envio date,
    estatus character varying(1),
    observaciones text,
    id_organismo integer NOT NULL,
    id_usuario integer NOT NULL,
    id_sitp integer,
    tiempo_sitp date
);


ALTER TABLE remesa OWNER TO postgres;

--
-- TOC entry 460 (class 1259 OID 186497)
-- Name: rendicionmensual; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE rendicionmensual (
    id_rendicion_mensual integer NOT NULL,
    id_unidad_administradora integer NOT NULL,
    id_encabezado_rendicion_mensual integer NOT NULL,
    id_uel_especifica integer NOT NULL,
    id_cuenta_presupuesto integer NOT NULL,
    id_unidad_ejecutora integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    quincena integer DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    categoria_presupuesto character varying(15) NOT NULL,
    cod_concepto character varying(4) NOT NULL,
    cod_unidad_ejecutora character varying(6) NOT NULL,
    cod_presupuesto character varying(20) NOT NULL
);


ALTER TABLE rendicionmensual OWNER TO postgres;

--
-- TOC entry 461 (class 1259 OID 186503)
-- Name: restringido; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE restringido (
    id_restringido integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_personal_restringido integer NOT NULL
);


ALTER TABLE restringido OWNER TO postgres;

--
-- TOC entry 462 (class 1259 OID 186506)
-- Name: resultadoevaluacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE resultadoevaluacion (
    id_resultado_evaluacion integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    cod_resultado_evaluacion character varying(2) NOT NULL,
    descripcion character varying(80) NOT NULL,
    rango_minimo double precision DEFAULT 0 NOT NULL,
    rango_maximo double precision DEFAULT 0 NOT NULL,
    porcentaje_aumento double precision DEFAULT 0 NOT NULL,
    numero_pasos integer DEFAULT 0 NOT NULL,
    monto_aumentar double precision DEFAULT 0 NOT NULL,
    monto_unico double precision DEFAULT 0 NOT NULL
);


ALTER TABLE resultadoevaluacion OWNER TO postgres;

--
-- TOC entry 463 (class 1259 OID 186516)
-- Name: resumenmensual; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE resumenmensual (
    id_resumen_mensual integer NOT NULL,
    id_unidad_administradora integer NOT NULL,
    id_encabezado_resumen_mensual integer NOT NULL,
    id_uel_especifica integer NOT NULL,
    id_cuenta_presupuesto integer NOT NULL,
    id_unidad_ejecutora integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    quincena integer DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    categoria_presupuesto character varying(15) NOT NULL,
    cod_concepto character varying(4) NOT NULL,
    cod_unidad_ejecutora character varying(6) NOT NULL,
    cod_presupuesto character varying(20) NOT NULL
);


ALTER TABLE resumenmensual OWNER TO postgres;

--
-- TOC entry 464 (class 1259 OID 186522)
-- Name: resumennuevoregimen; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE resumennuevoregimen (
    id_resumen_nuevo_regimen integer NOT NULL,
    id_trabajador integer NOT NULL,
    monto_prestaciones_acumuladas double precision DEFAULT 0 NOT NULL,
    monto_interes_acumulado double precision DEFAULT 0 NOT NULL,
    monto_anticipo_acumulado double precision DEFAULT 0 NOT NULL,
    monto_fideicomiso_acumulado double precision DEFAULT 0 NOT NULL,
    dias_mensuales integer DEFAULT 0 NOT NULL,
    dias_adicionales integer DEFAULT 0 NOT NULL
);


ALTER TABLE resumennuevoregimen OWNER TO postgres;

--
-- TOC entry 465 (class 1259 OID 186531)
-- Name: resumenviejoregimen; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE resumenviejoregimen (
    id_resumen_viejo_regimen integer NOT NULL,
    id_trabajador integer NOT NULL,
    sueldo_transferencia double precision DEFAULT 0 NOT NULL,
    aniosservicios integer DEFAULT 0 NOT NULL,
    monto_prestaciones double precision DEFAULT 0 NOT NULL,
    monto_interes_acumulado double precision DEFAULT 0 NOT NULL,
    monto_anticipo_acumulado double precision DEFAULT 0 NOT NULL,
    monto_transferencia double precision DEFAULT 0 NOT NULL,
    saldo_al_18061997 double precision DEFAULT 0 NOT NULL
);


ALTER TABLE resumenviejoregimen OWNER TO postgres;

--
-- TOC entry 466 (class 1259 OID 186541)
-- Name: retroactivoticket; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE retroactivoticket (
    id_retroactivo_ticket integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    anio_proceso integer DEFAULT 0 NOT NULL,
    mes_proceso integer DEFAULT 0 NOT NULL,
    numero_tickets integer DEFAULT 0 NOT NULL,
    observaciones character varying(80) NOT NULL,
    id_trabajador integer DEFAULT 0 NOT NULL,
    id_denominacion_ticket integer DEFAULT 0 NOT NULL,
    pagado character varying(1) DEFAULT 'N'::character varying
);


ALTER TABLE retroactivoticket OWNER TO postgres;

--
-- TOC entry 467 (class 1259 OID 186552)
-- Name: rol; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE rol (
    id_rol integer NOT NULL,
    codigo_rol character varying(4) NOT NULL,
    nombre character varying(60) NOT NULL
);


ALTER TABLE rol OWNER TO postgres;

--
-- TOC entry 468 (class 1259 OID 186555)
-- Name: rolopcion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE rolopcion (
    id_rol_opcion integer NOT NULL,
    id_rol integer NOT NULL,
    id_opcion integer NOT NULL,
    consultar character varying(1),
    agregar character varying(1),
    modificar character varying(1),
    eliminar character varying(1),
    ejecutar character varying(1),
    CONSTRAINT rolopcion_agregar CHECK ((((agregar)::text = 'S'::text) OR ((agregar)::text = 'N'::text))),
    CONSTRAINT rolopcion_consultar CHECK ((((consultar)::text = 'S'::text) OR ((consultar)::text = 'N'::text))),
    CONSTRAINT rolopcion_ejecutar CHECK ((((ejecutar)::text = 'S'::text) OR ((ejecutar)::text = 'N'::text))),
    CONSTRAINT rolopcion_eliminar CHECK ((((eliminar)::text = 'S'::text) OR ((eliminar)::text = 'N'::text))),
    CONSTRAINT rolopcion_modificar CHECK ((((modificar)::text = 'S'::text) OR ((modificar)::text = 'N'::text)))
);


ALTER TABLE rolopcion OWNER TO postgres;

--
-- TOC entry 469 (class 1259 OID 186563)
-- Name: sancion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE sancion (
    id_sancion integer NOT NULL,
    acta character varying(20),
    fecha date NOT NULL,
    observaciones text,
    id_personal integer NOT NULL,
    id_tipo_amonestacion integer NOT NULL,
    nombre_supervisor character varying(50),
    cargo_supervisor character varying(60),
    cargo_trabajador character varying(60),
    nombre_dependencia character varying(100),
    id_organismo integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE sancion OWNER TO postgres;

--
-- TOC entry 470 (class 1259 OID 186570)
-- Name: sede; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE sede (
    id_sede integer NOT NULL,
    id_ciudad integer NOT NULL,
    cod_cesta character varying(10),
    cod_sede character varying(6) NOT NULL,
    direccion character varying(100) NOT NULL,
    id_organismo integer NOT NULL,
    nombre character varying(90),
    id_region integer,
    id_lugar_pago integer,
    id_turno integer,
    riesgo character varying(1) DEFAULT '1'::character varying,
    regimen character varying(1) DEFAULT 'I'::character varying,
    codigo_patronal character varying(10)
);


ALTER TABLE sede OWNER TO postgres;

--
-- TOC entry 471 (class 1259 OID 186575)
-- Name: sedediplomatica; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE sedediplomatica (
    id_sede_diplomatica integer NOT NULL,
    id_ciudad integer NOT NULL,
    cod_sede character varying(3) NOT NULL,
    nombre character varying(90) NOT NULL,
    id_tipo_sede integer NOT NULL,
    cod_viejo character varying(10),
    cod_biblio character varying(15),
    direccion text,
    telefono1 character varying(15),
    telefono2 character varying(15),
    fax character varying(15),
    email character varying(60),
    observacion text
);


ALTER TABLE sedediplomatica OWNER TO postgres;

--
-- TOC entry 472 (class 1259 OID 186581)
-- Name: seguridadaniversario; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE seguridadaniversario (
    id_seguridad_aniversario integer NOT NULL,
    fecha_ultimo date,
    fecha_proceso date,
    usuario character varying(25) NOT NULL,
    id_tipo_personal integer DEFAULT 0 NOT NULL,
    id_concepto integer DEFAULT 0 NOT NULL
);


ALTER TABLE seguridadaniversario OWNER TO postgres;

--
-- TOC entry 473 (class 1259 OID 186586)
-- Name: seguridadausencia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE seguridadausencia (
    id_seguridad_ausencia integer NOT NULL,
    id_grupo_ticket integer,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL
);


ALTER TABLE seguridadausencia OWNER TO postgres;

--
-- TOC entry 474 (class 1259 OID 186591)
-- Name: seguridaddocente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE seguridaddocente (
    id_seguridad_docente integer NOT NULL,
    mes integer NOT NULL,
    anio integer NOT NULL,
    cerrado character varying(1) DEFAULT 'N'::character varying,
    fecha_cierre date
);


ALTER TABLE seguridaddocente OWNER TO postgres;

--
-- TOC entry 475 (class 1259 OID 186595)
-- Name: seguridadespecial; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE seguridadespecial (
    id_seguridad_especial integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    fecha_inicio date,
    fecha_fin date,
    semana_quincena integer DEFAULT 0 NOT NULL,
    fecha_proceso date,
    usuario character varying(25) NOT NULL,
    id_nomina_especial integer DEFAULT 0 NOT NULL,
    id_grupo_nomina integer DEFAULT 0 NOT NULL
);


ALTER TABLE seguridadespecial OWNER TO postgres;

--
-- TOC entry 476 (class 1259 OID 186603)
-- Name: seguridadguarderia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE seguridadguarderia (
    id_seguridad_guarderia integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    fecha_proceso date,
    usuario character varying(25) NOT NULL,
    id_tipo_personal integer DEFAULT 0 NOT NULL
);


ALTER TABLE seguridadguarderia OWNER TO postgres;

--
-- TOC entry 477 (class 1259 OID 186609)
-- Name: seguridadinteresadicional; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE seguridadinteresadicional (
    id_seguridad_interes_adicional integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    tasa_aplicada double precision,
    fecha_proceso date,
    usuario character varying(25) NOT NULL
);


ALTER TABLE seguridadinteresadicional OWNER TO postgres;

--
-- TOC entry 478 (class 1259 OID 186614)
-- Name: seguridadnuevoregimen; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE seguridadnuevoregimen (
    id_seguridad_nuevo_regimen integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    tasa_aplicada double precision,
    fecha_proceso date,
    usuario character varying(25) NOT NULL
);


ALTER TABLE seguridadnuevoregimen OWNER TO postgres;

--
-- TOC entry 479 (class 1259 OID 186619)
-- Name: seguridadordinaria; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE seguridadordinaria (
    id_seguridad_ordinaria integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    fecha_inicio date,
    fecha_fin date,
    semana_quincena integer DEFAULT 0 NOT NULL,
    fecha_proceso date,
    usuario character varying(25) NOT NULL,
    id_grupo_nomina integer DEFAULT 0 NOT NULL,
    cierre_diplomatico character varying(1) DEFAULT 'N'::character varying NOT NULL
);


ALTER TABLE seguridadordinaria OWNER TO postgres;

--
-- TOC entry 480 (class 1259 OID 186627)
-- Name: seguridadprestaciones; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE seguridadprestaciones (
    id_seguridad_prestaciones integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    fecha_proceso date,
    usuario character varying(25) NOT NULL,
    id_tipo_personal integer DEFAULT 0 NOT NULL
);


ALTER TABLE seguridadprestaciones OWNER TO postgres;

--
-- TOC entry 481 (class 1259 OID 186633)
-- Name: seguridadpresupuesto; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE seguridadpresupuesto (
    id_seguridad_presupuesto integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    fecha_cierre date,
    usuario character varying(25) NOT NULL,
    id_categoria_presupuesto integer DEFAULT 0 NOT NULL
);


ALTER TABLE seguridadpresupuesto OWNER TO postgres;

--
-- TOC entry 482 (class 1259 OID 186639)
-- Name: seguridadticket; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE seguridadticket (
    id_seguridad_ticket integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    especial character varying(1) DEFAULT 'N'::character varying NOT NULL,
    fecha_proceso date,
    usuario character varying(25) NOT NULL,
    id_grupo_ticket integer,
    CONSTRAINT seguridadticket_especial CHECK ((((especial)::text = 'S'::text) OR ((especial)::text = 'N'::text)))
);


ALTER TABLE seguridadticket OWNER TO postgres;

--
-- TOC entry 483 (class 1259 OID 186646)
-- Name: seguridadvacacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE seguridadvacacion (
    id_seguridad_vacacion integer NOT NULL,
    fecha_ultimo date,
    fecha_proceso date,
    usuario character varying(25) NOT NULL,
    id_tipo_personal integer DEFAULT 0 NOT NULL
);


ALTER TABLE seguridadvacacion OWNER TO postgres;

--
-- TOC entry 484 (class 1259 OID 186650)
-- Name: semana; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE semana (
    id_semana integer NOT NULL,
    anio integer NOT NULL,
    semana_anio integer NOT NULL,
    semana_mes integer NOT NULL,
    mes character varying(2) DEFAULT '1'::character varying NOT NULL,
    fecha_inicio date NOT NULL,
    fecha_fin date NOT NULL,
    id_grupo_nomina integer NOT NULL,
    CONSTRAINT semana_mes CHECK ((((((((((((((mes)::text = '1'::text) OR ((mes)::text = '2'::text)) OR ((mes)::text = '3'::text)) OR ((mes)::text = '4'::text)) OR ((mes)::text = '5'::text)) OR ((mes)::text = '6'::text)) OR ((mes)::text = '7'::text)) OR ((mes)::text = '8'::text)) OR ((mes)::text = '9'::text)) OR ((mes)::text = '10'::text)) OR ((mes)::text = '11'::text)) OR ((mes)::text = '12'::text)))
);


ALTER TABLE semana OWNER TO postgres;

--
-- TOC entry 485 (class 1259 OID 186655)
-- Name: seriecargo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE seriecargo (
    id_serie_cargo integer NOT NULL,
    cod_serie_cargo character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL,
    id_grupo_ocupacional integer DEFAULT 0,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE seriecargo OWNER TO postgres;

--
-- TOC entry 486 (class 1259 OID 186660)
-- Name: servicioexterior; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE servicioexterior (
    id_servicio_exterior integer NOT NULL,
    id_cargo integer,
    fecha_fin date,
    fecha_inicio date NOT NULL,
    id_personal integer NOT NULL,
    id_sede_diplomatica integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


ALTER TABLE servicioexterior OWNER TO postgres;

--
-- TOC entry 487 (class 1259 OID 186664)
-- Name: sindicato; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE sindicato (
    id_sindicato integer NOT NULL,
    cod_sindicato character varying(10) NOT NULL,
    nombre character varying(80) NOT NULL,
    id_concepto integer DEFAULT 0 NOT NULL
);


ALTER TABLE sindicato OWNER TO postgres;

--
-- TOC entry 488 (class 1259 OID 186668)
-- Name: siniestro; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE siniestro (
    id_siniestro integer NOT NULL,
    fecha_siniestro date NOT NULL,
    fecha_reporte date,
    fecha_recepcion date,
    fecha_cierre date,
    estatus character varying(1) NOT NULL,
    monto_reclamo double precision DEFAULT 0,
    monto_pagado double precision DEFAULT 0,
    observaciones text,
    id_plan_poliza integer NOT NULL,
    id_beneficiario integer,
    id_titular integer,
    id_personal integer NOT NULL,
    id_establecimiento_salud integer
);


ALTER TABLE siniestro OWNER TO postgres;

--
-- TOC entry 489 (class 1259 OID 186676)
-- Name: sobreviviente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE sobreviviente (
    id_sobreviviente integer NOT NULL,
    id_personal integer NOT NULL,
    id_familiar integer NOT NULL,
    fecha_pension date NOT NULL,
    porcentaje_pension_original double precision DEFAULT 0,
    monto_pension_original double precision DEFAULT 0,
    monto_pension_actual double precision DEFAULT 0,
    situacion character varying(1),
    observacion character varying(400)
);


ALTER TABLE sobreviviente OWNER TO postgres;

--
-- TOC entry 490 (class 1259 OID 186682)
-- Name: subgrupoprofesion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE subgrupoprofesion (
    id_subgrupo_profesion integer NOT NULL,
    id_grupo_profesion integer NOT NULL,
    cod_subgrupo_profesion character varying(2) NOT NULL,
    nombre character varying(60) NOT NULL,
    descripcion character varying(400) NOT NULL
);


ALTER TABLE subgrupoprofesion OWNER TO postgres;

--
-- TOC entry 491 (class 1259 OID 186685)
-- Name: subsistema; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE subsistema (
    id_subsistema integer NOT NULL,
    cod_subsistema character varying(3) NOT NULL,
    descripcion character varying(80) NOT NULL
);


ALTER TABLE subsistema OWNER TO postgres;

--
-- TOC entry 492 (class 1259 OID 186688)
-- Name: subtipocredencial; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE subtipocredencial (
    id_subtipo_credencial integer NOT NULL,
    id_tipo_credencial integer NOT NULL,
    cod_subtipo character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL
);


ALTER TABLE subtipocredencial OWNER TO postgres;

--
-- TOC entry 493 (class 1259 OID 186691)
-- Name: subtipodotacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE subtipodotacion (
    id_subtipo_dotacion integer NOT NULL,
    id_tipo_dotacion integer NOT NULL,
    cod_subtipo character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL,
    sexo character varying(1) DEFAULT 'M'::character varying NOT NULL,
    costo double precision DEFAULT 0 NOT NULL,
    color character varying(20),
    CONSTRAINT subtipodotacion_sexo CHECK (((((sexo)::text = 'F'::text) OR ((sexo)::text = 'M'::text)) OR ((sexo)::text = 'A'::text)))
);


ALTER TABLE subtipodotacion OWNER TO postgres;

--
-- TOC entry 494 (class 1259 OID 186697)
-- Name: sueldopromedio; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE sueldopromedio (
    id_sueldo_promedio integer NOT NULL,
    id_trabajador integer NOT NULL,
    promedio_integral double precision DEFAULT 0 NOT NULL,
    promedio_sueldo double precision DEFAULT 0 NOT NULL,
    sueldo_anual double precision DEFAULT 0 NOT NULL,
    promedio_sso double precision DEFAULT 0 NOT NULL,
    retencion_sso double precision DEFAULT 0 NOT NULL,
    retencion_spf double precision DEFAULT 0 NOT NULL,
    promedio_lph double precision DEFAULT 0 NOT NULL,
    retencion_lph double precision DEFAULT 0 NOT NULL,
    retencion_fju double precision DEFAULT 0 NOT NULL,
    promedio_fju double precision DEFAULT 0 NOT NULL,
    promedio_vacaciones double precision DEFAULT 0 NOT NULL,
    promedio_utilidad double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    aporte_sso double precision DEFAULT 0,
    aporte_spf double precision DEFAULT 0,
    aporte_lph double precision DEFAULT 0,
    aporte_fju double precision DEFAULT 0,
    promedio_ajustes double precision DEFAULT 0,
    promedio_compensacion double precision DEFAULT 0,
    promedio_primasc double precision DEFAULT 0,
    promedio_primast double precision DEFAULT 0,
    promedio_spf double precision,
    monto_variable_sso double precision DEFAULT 0 NOT NULL,
    monto_variable_lph double precision DEFAULT 0 NOT NULL,
    monto_variable_fju double precision DEFAULT 0 NOT NULL,
    id_tipo_personal integer DEFAULT 0,
    id_grupo_nomina integer DEFAULT 0
);


ALTER TABLE sueldopromedio OWNER TO postgres;

--
-- TOC entry 495 (class 1259 OID 186726)
-- Name: suplencia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE suplencia (
    id_suplencia integer DEFAULT 0 NOT NULL,
    fecha_inicio date NOT NULL,
    fecha_fin date,
    persona_suplencia character varying(40),
    motivo_suplencia character varying(40),
    cargo character varying(60) NOT NULL,
    dependencia character varying(90),
    id_personal integer NOT NULL,
    observaciones text,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    organismo character varying(90)
);


ALTER TABLE suplencia OWNER TO postgres;

--
-- TOC entry 496 (class 1259 OID 186734)
-- Name: tabulador; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tabulador (
    id_tabulador integer NOT NULL,
    cod_tabulador character varying(6) NOT NULL,
    descripcion character varying(60) NOT NULL,
    fecha_vigencia date,
    indicador_paso character varying(1) DEFAULT 'S'::character varying NOT NULL,
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying NOT NULL,
    id_organismo integer DEFAULT 0 NOT NULL,
    tipo_tabulador character varying(1) DEFAULT '1'::character varying,
    nombre_moneda character varying(30),
    vigente character varying(1) DEFAULT 'S'::character varying,
    CONSTRAINT tabulador_aprobacion_mpd CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text))),
    CONSTRAINT tabulador_indicador_paso CHECK ((((indicador_paso)::text = 'S'::text) OR ((indicador_paso)::text = 'N'::text)))
);


ALTER TABLE tabulador OWNER TO postgres;

--
-- TOC entry 497 (class 1259 OID 186744)
-- Name: tarifaari; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tarifaari (
    id_tarifa_ari integer NOT NULL,
    tarifa double precision DEFAULT 0 NOT NULL,
    sustraendo double precision DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL
);


ALTER TABLE tarifaari OWNER TO postgres;

--
-- TOC entry 498 (class 1259 OID 186750)
-- Name: tasabcv; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tasabcv (
    id_tasa_bcv integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    tasa_promedio double precision DEFAULT 0 NOT NULL,
    tasa_activa double precision DEFAULT 0 NOT NULL,
    tasa_fideicomiso double precision DEFAULT 0 NOT NULL
);


ALTER TABLE tasabcv OWNER TO postgres;

--
-- TOC entry 499 (class 1259 OID 186758)
-- Name: tesomercantil; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tesomercantil (
    cuenta character varying(20),
    cedula integer
);


ALTER TABLE tesomercantil OWNER TO postgres;

--
-- TOC entry 500 (class 1259 OID 186761)
-- Name: tipoacreencia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tipoacreencia (
    id_tipo_acreencia integer NOT NULL,
    cod_tipo_acreencia character varying(2) NOT NULL,
    descripcion character varying(60) NOT NULL
);


ALTER TABLE tipoacreencia OWNER TO postgres;

--
-- TOC entry 501 (class 1259 OID 186764)
-- Name: tipoamonestacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tipoamonestacion (
    id_tipo_amonestacion integer NOT NULL,
    cod_tipo_amonestacion character varying(3) NOT NULL,
    descripcion character varying(90)
);


ALTER TABLE tipoamonestacion OWNER TO postgres;

--
-- TOC entry 502 (class 1259 OID 186767)
-- Name: tipoausencia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tipoausencia (
    id_tipo_ausencia integer NOT NULL,
    cod_tipo_ausencia character varying(2) NOT NULL,
    clase character varying(1) DEFAULT 'I'::character varying NOT NULL,
    descripcion character varying(60) NOT NULL,
    CONSTRAINT tipoausencia_clase CHECK ((((((clase)::text = 'J'::text) OR ((clase)::text = 'I'::text)) OR ((clase)::text = 'P'::text)) OR ((clase)::text = 'R'::text)))
);


ALTER TABLE tipoausencia OWNER TO postgres;

--
-- TOC entry 503 (class 1259 OID 186772)
-- Name: tipocaracteristica; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tipocaracteristica (
    id_tipo_caracteristica integer NOT NULL,
    cod_tipo_caracteristica character varying(2) NOT NULL,
    nombre character varying(60)
);


ALTER TABLE tipocaracteristica OWNER TO postgres;

--
-- TOC entry 504 (class 1259 OID 186775)
-- Name: tipocargo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tipocargo (
    tipo_cargo character varying(2) NOT NULL,
    descripcion character varying(60) NOT NULL
);


ALTER TABLE tipocargo OWNER TO postgres;

--
-- TOC entry 505 (class 1259 OID 186778)
-- Name: tipocontrato; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tipocontrato (
    id_tipo_contrato integer NOT NULL,
    cod_tipo_contrato character varying(6) NOT NULL,
    descripcion character varying(90) NOT NULL
);


ALTER TABLE tipocontrato OWNER TO postgres;

--
-- TOC entry 506 (class 1259 OID 186781)
-- Name: tipocredencial; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tipocredencial (
    id_tipo_credencial integer NOT NULL,
    cod_tipo_credencial character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL
);


ALTER TABLE tipocredencial OWNER TO postgres;

--
-- TOC entry 507 (class 1259 OID 186784)
-- Name: tipocurso; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tipocurso (
    id_tipo_curso integer NOT NULL,
    cod_tipo_curso character varying(1) NOT NULL,
    descripcion character varying(60) NOT NULL
);


ALTER TABLE tipocurso OWNER TO postgres;

--
-- TOC entry 508 (class 1259 OID 186787)
-- Name: tipodependencia; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tipodependencia (
    id_tipo_dependencia integer NOT NULL,
    cod_tipo_dependencia character varying(2) NOT NULL,
    nombre character varying(60) NOT NULL
);


ALTER TABLE tipodependencia OWNER TO postgres;

--
-- TOC entry 509 (class 1259 OID 186790)
-- Name: tipodotacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tipodotacion (
    id_tipo_dotacion integer NOT NULL,
    cod_tipo_dotacion character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL
);


ALTER TABLE tipodotacion OWNER TO postgres;

--
-- TOC entry 510 (class 1259 OID 186793)
-- Name: tipoentidad; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tipoentidad (
    id_tipo_entidad integer NOT NULL,
    cod_tipo_entidad character varying(2) NOT NULL,
    descripcion character varying(60) NOT NULL
);


ALTER TABLE tipoentidad OWNER TO postgres;

--
-- TOC entry 511 (class 1259 OID 186796)
-- Name: tipohabilidad; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tipohabilidad (
    id_tipo_habilidad integer NOT NULL,
    cod_tipo_habilidad character varying(3) NOT NULL,
    detalle text,
    descripcion character varying(90)
);


ALTER TABLE tipohabilidad OWNER TO postgres;

--
-- TOC entry 512 (class 1259 OID 186802)
-- Name: tipoidioma; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tipoidioma (
    id_tipo_idioma integer NOT NULL,
    cod_tipo_idioma character varying(3) NOT NULL,
    descripcion character varying(40) NOT NULL
);


ALTER TABLE tipoidioma OWNER TO postgres;

--
-- TOC entry 513 (class 1259 OID 186805)
-- Name: tipomanual; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tipomanual (
    id_tipo_manual integer NOT NULL,
    cod_tipo_manual character varying(1) NOT NULL,
    descripcion character varying(60) NOT NULL
);


ALTER TABLE tipomanual OWNER TO postgres;

--
-- TOC entry 514 (class 1259 OID 186808)
-- Name: tipootraactividad; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tipootraactividad (
    id_tipo_otra_actividad integer NOT NULL,
    cod_otra_actividad character varying(3) NOT NULL,
    descripcion character varying(60) NOT NULL,
    tipo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    CONSTRAINT tipo CHECK (((((((tipo)::text = 'D'::text) OR ((tipo)::text = 'C'::text)) OR ((tipo)::text = 'H'::text)) OR ((tipo)::text = 'S'::text)) OR ((tipo)::text = 'O'::text)))
);


ALTER TABLE tipootraactividad OWNER TO postgres;

--
-- TOC entry 515 (class 1259 OID 186813)
-- Name: tipopersonal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tipopersonal (
    id_tipo_personal integer NOT NULL,
    cod_tipo_personal character varying(2) NOT NULL,
    nombre character varying(60) NOT NULL,
    multiple_registro character varying(1) DEFAULT 'N'::character varying NOT NULL,
    aprobacion_mpd character varying(1) DEFAULT 'N'::character varying NOT NULL,
    maneja_rac character varying(1) DEFAULT 'N'::character varying NOT NULL,
    calcula_prestaciones character varying(1) DEFAULT 'S'::character varying NOT NULL,
    formula_integral character varying(1) DEFAULT 'N'::character varying NOT NULL,
    formula_semanal character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_organismo integer NOT NULL,
    id_grupo_organismo integer,
    id_grupo_nomina integer NOT NULL,
    id_clasificacion_personal integer NOT NULL,
    id_turno integer NOT NULL,
    cotiza_sso character varying(1) DEFAULT 'S'::character varying NOT NULL,
    cotiza_spf character varying(1) DEFAULT 'S'::character varying NOT NULL,
    cotiza_lph character varying(1) DEFAULT 'S'::character varying NOT NULL,
    cotiza_fju character varying(1) DEFAULT 'S'::character varying NOT NULL,
    disfruta_vacaciones character varying(1) DEFAULT 'S'::character varying NOT NULL,
    asignan_dotaciones character varying(1) DEFAULT 'N'::character varying NOT NULL,
    aumento_evaluacion character varying(1) DEFAULT 'N'::character varying NOT NULL,
    deuda_regimen_derogado character varying(1) DEFAULT 'S'::character varying,
    id_banco_nomina integer,
    forma_pago_nomina character varying(1) DEFAULT '1'::character varying,
    id_banco_lph integer,
    id_banco_fid integer,
    beneficio_cesta_ticket character varying(1) DEFAULT 'N'::character varying,
    id_grupo_ticket integer,
    CONSTRAINT tipopersonal_aprobacion_mpd CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text))),
    CONSTRAINT tipopersonal_calcula_prestacion CHECK ((((calcula_prestaciones)::text = 'S'::text) OR ((calcula_prestaciones)::text = 'N'::text))),
    CONSTRAINT tipopersonal_formula_integral CHECK (((((((formula_integral)::text = '0'::text) OR ((formula_integral)::text = '1'::text)) OR ((formula_integral)::text = '2'::text)) OR ((formula_integral)::text = '3'::text)) OR ((formula_integral)::text = '4'::text))),
    CONSTRAINT tipopersonal_formula_semanal CHECK ((((((formula_semanal)::text = '0'::text) OR ((formula_semanal)::text = '1'::text)) OR ((formula_semanal)::text = '2'::text)) OR ((formula_semanal)::text = '3'::text))),
    CONSTRAINT tipopersonal_maneja_rac CHECK ((((maneja_rac)::text = 'S'::text) OR ((maneja_rac)::text = 'N'::text))),
    CONSTRAINT tipopersonal_multiple_registro CHECK ((((multiple_registro)::text = 'S'::text) OR ((multiple_registro)::text = 'N'::text)))
);


ALTER TABLE tipopersonal OWNER TO postgres;

--
-- TOC entry 516 (class 1259 OID 186838)
-- Name: tiporeconocimiento; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tiporeconocimiento (
    id_tipo_reconocimiento integer NOT NULL,
    cod_tipo_reconocimiento character varying(3) NOT NULL,
    descripcion character varying(90)
);


ALTER TABLE tiporeconocimiento OWNER TO postgres;

--
-- TOC entry 517 (class 1259 OID 186841)
-- Name: tiposede; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tiposede (
    id_tipo_sede integer NOT NULL,
    cod_tipo_sede character varying(2) NOT NULL,
    descripcion character varying(60) NOT NULL
);


ALTER TABLE tiposede OWNER TO postgres;

--
-- TOC entry 518 (class 1259 OID 186844)
-- Name: tiposiniestro; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tiposiniestro (
    id_tipo_siniestro integer NOT NULL,
    cod_tipo_siniestro character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL
);


ALTER TABLE tiposiniestro OWNER TO postgres;

--
-- TOC entry 519 (class 1259 OID 186847)
-- Name: titular; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE titular (
    id_titular integer NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_plan_poliza integer NOT NULL,
    id_primas_plan integer NOT NULL,
    monto_prima double precision DEFAULT 0 NOT NULL,
    monto_patron double precision DEFAULT 0 NOT NULL,
    monto_trabajador double precision DEFAULT 0 NOT NULL,
    cobertura double precision DEFAULT 0 NOT NULL,
    cobertura_extra double precision DEFAULT 0 NOT NULL,
    prima_extra double precision DEFAULT 0 NOT NULL,
    fecha_inclusion date,
    fecha_exclusion date,
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL
);


ALTER TABLE titular OWNER TO postgres;

--
-- TOC entry 520 (class 1259 OID 186857)
-- Name: titulo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE titulo (
    id_titulo integer NOT NULL,
    cod_titulo character varying(6),
    id_nivel_educativo integer NOT NULL,
    id_grupo_profesion integer NOT NULL,
    descripcion character varying(90)
);


ALTER TABLE titulo OWNER TO postgres;

--
-- TOC entry 521 (class 1259 OID 186860)
-- Name: trabajador; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE trabajador (
    id_trabajador integer NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    cedula integer DEFAULT 0,
    cod_tipo_personal character varying(2),
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    movimiento character varying(1) DEFAULT 'A'::character varying NOT NULL,
    situacion character varying(2) DEFAULT '1'::character varying NOT NULL,
    id_registro_cargos integer,
    id_cargo integer NOT NULL,
    id_detalle_tabulador_med integer,
    id_dependencia integer NOT NULL,
    id_lugar_pago integer,
    codigo_nomina integer DEFAULT 1,
    cod_cargo character varying(8),
    sueldo_basico double precision DEFAULT 0,
    paso integer DEFAULT 1,
    id_turno integer,
    riesgo character varying(1) DEFAULT '1'::character varying,
    regimen character varying(1) DEFAULT 'I'::character varying,
    fecha_ingreso date,
    fecha_ingreso_apn date,
    fecha_vacaciones date,
    fecha_prestaciones date,
    fecha_antiguedad date,
    fecha_egreso date,
    fecha_jubilacion date,
    forma_pago character varying(1) DEFAULT '1'::character varying,
    id_banco_nomina integer,
    tipo_cta_nomina character varying(1),
    cuenta_nomina character varying(20),
    id_banco_lph integer,
    cuenta_lph character varying(20),
    id_banco_fid integer,
    cuenta_fid character varying(20),
    porcentaje_islr double precision DEFAULT 0 NOT NULL,
    cotiza_sso character varying(1) DEFAULT 'S'::character varying NOT NULL,
    cotiza_spf character varying(1) DEFAULT 'S'::character varying NOT NULL,
    cotiza_lph character varying(1) DEFAULT 'S'::character varying NOT NULL,
    cotiza_fju character varying(1) DEFAULT 'S'::character varying NOT NULL,
    ded_prox_nomina character varying(1) DEFAULT 'S'::character varying NOT NULL,
    par_prox_nomina character varying(1) DEFAULT 'N'::character varying NOT NULL,
    porcentaje_jubilacion double precision DEFAULT 0,
    base_jubilacion double precision DEFAULT 0,
    fe_vida character varying(1) DEFAULT 'S'::character varying NOT NULL,
    id_causa_movimiento integer,
    id_dependencia_real integer,
    id_cargo_real integer,
    id_organismo integer NOT NULL,
    mes_ingreso integer,
    dia_ingreso integer,
    anio_ingreso integer,
    mes_ingreso_apn integer,
    dia_ingreso_apn integer,
    anio_ingreso_apn integer,
    mes_vacaciones integer,
    dia_vacaciones integer,
    anio_vacaciones integer,
    mes_prestaciones integer,
    dia_prestaciones integer,
    anio_prestaciones integer,
    mes_antiguedad integer,
    dia_antiguedad integer,
    anio_antiguedad integer,
    mes_jubilacion integer,
    dia_jubilacion integer,
    anio_jubilacion integer,
    mes_egreso integer,
    dia_egreso integer,
    anio_egreso integer,
    fecha_entrada_sig date,
    fecha_salida_sig date,
    codigo_nomina_real integer DEFAULT 0,
    cod_organismo_adscrito character varying(10),
    lunes_primera integer DEFAULT 0,
    lunes_segunda integer DEFAULT 0,
    lunes_retroactivo integer DEFAULT 0,
    hay_retroactivo character varying(1) DEFAULT 'N'::character varying,
    dias_trabajados integer DEFAULT 0,
    mes_entrada integer DEFAULT 0,
    dia_entrada integer DEFAULT 0,
    anio_entrada integer DEFAULT 0,
    mes_salida integer DEFAULT 0,
    dia_salida integer DEFAULT 0,
    anio_salida integer DEFAULT 0,
    horas_semanales double precision DEFAULT 0,
    fecha_ingreso_cargo date,
    mes_ingreso_cargo integer DEFAULT 0,
    dia_ingreso_cargo integer DEFAULT 0,
    anio_ingreso_cargo integer DEFAULT 0,
    fecha_fe_vida date,
    fecha_encargaduria date,
    fecha_comision_servicio date,
    organismo_comision_servicio character varying(60),
    fecha_tipo_personal date,
    fecha_ultimo_movimiento date,
    codigo_patronal character varying(10),
    jubilacion_planificada character varying(1) DEFAULT 'N'::character varying NOT NULL,
    CONSTRAINT trabajador_cotiza_fju CHECK ((((cotiza_fju)::text = 'S'::text) OR ((cotiza_fju)::text = 'N'::text))),
    CONSTRAINT trabajador_cotiza_lph CHECK ((((cotiza_lph)::text = 'S'::text) OR ((cotiza_lph)::text = 'N'::text))),
    CONSTRAINT trabajador_cotiza_spf CHECK ((((cotiza_spf)::text = 'S'::text) OR ((cotiza_spf)::text = 'N'::text))),
    CONSTRAINT trabajador_cotiza_sso CHECK ((((cotiza_sso)::text = 'S'::text) OR ((cotiza_sso)::text = 'N'::text))),
    CONSTRAINT trabajador_ded_prox_nomina CHECK ((((ded_prox_nomina)::text = 'S'::text) OR ((ded_prox_nomina)::text = 'N'::text))),
    CONSTRAINT trabajador_fe_vida CHECK ((((fe_vida)::text = 'S'::text) OR ((fe_vida)::text = 'N'::text))),
    CONSTRAINT trabajador_forma_pago CHECK (((((forma_pago)::text = '1'::text) OR ((forma_pago)::text = '2'::text)) OR ((forma_pago)::text = '3'::text))),
    CONSTRAINT trabajador_movimiento CHECK ((((movimiento)::text = 'A'::text) OR ((movimiento)::text = 'T'::text))),
    CONSTRAINT trabajador_par_prox_nomina CHECK ((((par_prox_nomina)::text = 'S'::text) OR ((par_prox_nomina)::text = 'N'::text))),
    CONSTRAINT trabajador_regimen CHECK ((((regimen)::text = 'I'::text) OR ((regimen)::text = 'P'::text))),
    CONSTRAINT trabajador_riesgo CHECK ((((((riesgo)::text = '1'::text) OR ((riesgo)::text = '2'::text)) OR ((riesgo)::text = '3'::text)) OR ((riesgo)::text = '0'::text))),
    CONSTRAINT trabajador_tipo_cta_nomina CHECK ((((((tipo_cta_nomina)::text = 'A'::text) OR ((tipo_cta_nomina)::text = 'C'::text)) OR ((tipo_cta_nomina)::text = 'O'::text)) OR ((tipo_cta_nomina)::text = 'N'::text)))
);


ALTER TABLE trabajador OWNER TO postgres;

--
-- TOC entry 522 (class 1259 OID 186912)
-- Name: trabajadorasignatura; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE trabajadorasignatura (
    id_trabajador_asignatura integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_asignatura integer NOT NULL,
    horas double precision DEFAULT 0 NOT NULL
);


ALTER TABLE trabajadorasignatura OWNER TO postgres;

--
-- TOC entry 523 (class 1259 OID 186916)
-- Name: trabajadorespecifica; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE trabajadorespecifica (
    id_trabajador_especifica integer NOT NULL,
    id_uel_especifica integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 100 NOT NULL
);


ALTER TABLE trabajadorespecifica OWNER TO postgres;

--
-- TOC entry 524 (class 1259 OID 186921)
-- Name: trabajadortemporal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE trabajadortemporal (
    id_trabajador integer NOT NULL,
    lunes_primera boolean DEFAULT false,
    lunes_segunda boolean DEFAULT false,
    lunes_retroactivo boolean DEFAULT false,
    hay_retroactivo boolean DEFAULT false,
    id_grupo_nomina integer NOT NULL
);


ALTER TABLE trabajadortemporal OWNER TO postgres;

--
-- TOC entry 525 (class 1259 OID 186928)
-- Name: trayectoria; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE trayectoria (
    id_trayectoria integer NOT NULL,
    cedula integer NOT NULL,
    primer_apellido character varying(20),
    segundo_apellido character varying(20),
    primer_nombre character varying(20),
    segundo_nombre character varying(20),
    anio_preparacion integer DEFAULT 0,
    fecha_preparacion date,
    codigo_anterior_mpd character varying(10),
    numero_remesa character varying(6),
    numero_movimiento integer DEFAULT 0,
    correlativo_mpd integer DEFAULT 0,
    nombre_corto character varying(20),
    nombre_organismo character varying(90),
    estatus character varying(1),
    fecha_estatus date,
    fecha_vigencia date,
    cod_ubi_geografico character varying(6),
    estado character varying(40),
    ciudad character varying(40),
    municipio character varying(40),
    cod_region character varying(2),
    nombre_region character varying(60),
    cod_dependencia character varying(12),
    nombre_dependencia character varying(100),
    cod_causa_movimiento character varying(3),
    descripcion_movimiento character varying(60),
    nombre_corto_grupo character varying(20),
    nombre_largo_grupo character varying(90),
    caucion character varying(1),
    cod_manual_cargo character varying(8),
    cod_cargo character varying(8),
    descripcion_cargo character varying(60),
    cod_relacion character varying(1),
    desc_relacion character varying(20),
    cod_categoria character varying(1),
    desc_categoria character varying(20),
    nombramiento character varying(1),
    grado integer DEFAULT 0,
    paso integer DEFAULT 1,
    codigo_nomina integer DEFAULT 0,
    monto_jubilacion double precision DEFAULT 0,
    porc_jubilacion double precision DEFAULT 0,
    sueldo_promedio double precision DEFAULT 0,
    monto_jubilacion_sobrev double precision DEFAULT 0,
    porc_pension_sobrev double precision DEFAULT 0,
    monto_pension_sobrev double precision DEFAULT 0,
    monto_pension_invalid double precision DEFAULT 0,
    porc_pension_invalid double precision DEFAULT 0,
    invalidez_sact double precision DEFAULT 0,
    sueldo_basico double precision DEFAULT 0,
    compensacion double precision DEFAULT 0,
    prima_jerarquia double precision DEFAULT 0,
    prima_servicio double precision DEFAULT 0,
    ajuste_sueldo double precision DEFAULT 0,
    otros_pagos double precision DEFAULT 0,
    otros_no_vicepladin double precision DEFAULT 0,
    primas_cargo double precision DEFAULT 0,
    primas_trabajador double precision DEFAULT 0,
    id_personal integer DEFAULT 0,
    horas double precision DEFAULT 0,
    cod_concurso character varying(6),
    fecha_punto_cuenta date,
    observaciones text,
    origen character varying(1) DEFAULT 'S'::character varying,
    punto_cuenta character varying(15),
    usuario character varying(25),
    cod_grupo_organismo character varying(4) DEFAULT 1,
    cod_organismo character varying(4),
    fecha_culminacion date
);


ALTER TABLE trayectoria OWNER TO postgres;

--
-- TOC entry 526 (class 1259 OID 186962)
-- Name: turno; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE turno (
    id_turno integer NOT NULL,
    cod_turno character varying(1) NOT NULL,
    nombre character varying(25) NOT NULL,
    jornada_semanal double precision DEFAULT 0 NOT NULL,
    jornada_diaria double precision DEFAULT 0 NOT NULL,
    entrada_am double precision DEFAULT 0 NOT NULL,
    salida_am double precision DEFAULT 0 NOT NULL,
    entrada_pm double precision DEFAULT 0 NOT NULL,
    salida_pm double precision DEFAULT 0 NOT NULL,
    id_organismo integer NOT NULL,
    tipo_turno character varying(1) DEFAULT 'D'::character varying NOT NULL,
    jornada character varying(1),
    CONSTRAINT turno_tipo_turno CHECK (((((tipo_turno)::text = 'D'::text) OR ((tipo_turno)::text = 'N'::text)) OR ((tipo_turno)::text = 'M'::text)))
);


ALTER TABLE turno OWNER TO postgres;

--
-- TOC entry 527 (class 1259 OID 186973)
-- Name: turnodocente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE turnodocente (
    id_turno_docente integer NOT NULL,
    digito_turno character varying(1) NOT NULL,
    nombre character varying(60) NOT NULL
);


ALTER TABLE turnodocente OWNER TO postgres;

--
-- TOC entry 528 (class 1259 OID 186976)
-- Name: uelespecifica; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE uelespecifica (
    id_uel_especifica integer NOT NULL,
    id_accion_especifica integer NOT NULL,
    id_unidad_ejecutora integer NOT NULL,
    categoria_presupuesto character varying(15) NOT NULL,
    anio integer DEFAULT 0 NOT NULL
);


ALTER TABLE uelespecifica OWNER TO postgres;

--
-- TOC entry 529 (class 1259 OID 186980)
-- Name: ultimanomina; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ultimanomina (
    id_ultima_nomina integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    numero_nomina integer DEFAULT 1 NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    monto_asigna double precision DEFAULT 0 NOT NULL,
    monto_deduce double precision DEFAULT 0 NOT NULL,
    origen character varying(1) DEFAULT 'F'::character varying NOT NULL,
    documento_soporte character varying(10),
    id_tipo_personal integer NOT NULL,
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer,
    id_concepto integer,
    monto_aporte double precision DEFAULT 0,
    id_concepto_aporte integer,
    mes_sobretiempo integer DEFAULT 0 NOT NULL,
    anio_sobretiempo integer DEFAULT 0 NOT NULL,
    restituir character varying(1),
    unidades_restituir double precision DEFAULT 0 NOT NULL,
    monto_restituir double precision DEFAULT 0 NOT NULL,
    CONSTRAINT ultimanomina_origen CHECK ((((((origen)::text = 'F'::text) OR ((origen)::text = 'V'::text)) OR ((origen)::text = 'P'::text)) OR ((origen)::text = 'C'::text)))
);


ALTER TABLE ultimanomina OWNER TO postgres;

--
-- TOC entry 530 (class 1259 OID 186994)
-- Name: ultimaprenomina; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ultimaprenomina (
    id_ultima_prenomina integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    numero_nomina integer DEFAULT 1 NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    monto_asigna double precision DEFAULT 0 NOT NULL,
    monto_deduce double precision DEFAULT 0 NOT NULL,
    origen character varying(1) DEFAULT 'F'::character varying NOT NULL,
    documento_soporte character varying(10),
    id_tipo_personal integer NOT NULL,
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer,
    CONSTRAINT ultimaprenomina_origen CHECK ((((((origen)::text = 'F'::text) OR ((origen)::text = 'V'::text)) OR ((origen)::text = 'P'::text)) OR ((origen)::text = 'C'::text)))
);


ALTER TABLE ultimaprenomina OWNER TO postgres;

--
-- TOC entry 531 (class 1259 OID 187003)
-- Name: unidadadministradora; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE unidadadministradora (
    id_unidad_administradora integer NOT NULL,
    cod_unidad_administ character varying(6) NOT NULL,
    id_organismo integer NOT NULL,
    nombre character varying(90) NOT NULL,
    tipo_unidad character varying(1) DEFAULT 'O'::character varying,
    vigente character varying(1) DEFAULT 'S'::character varying,
    CONSTRAINT unidadadministradora_tipo CHECK (((((tipo_unidad)::text = 'O'::text) OR ((tipo_unidad)::text = 'S'::text)) OR ((tipo_unidad)::text = 'A'::text)))
);


ALTER TABLE unidadadministradora OWNER TO postgres;

--
-- TOC entry 532 (class 1259 OID 187009)
-- Name: unidadejecutora; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE unidadejecutora (
    id_unidad_ejecutora integer NOT NULL,
    cod_unidad_ejecutora character varying(6) NOT NULL,
    id_programa integer NOT NULL,
    nombre character varying(90) NOT NULL,
    vigente character varying(1) DEFAULT 'S'::character varying
);


ALTER TABLE unidadejecutora OWNER TO postgres;

--
-- TOC entry 533 (class 1259 OID 187013)
-- Name: unidadfuncional; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE unidadfuncional (
    id_unidad_funcional integer NOT NULL,
    cod_unidad_funcional character varying(6) NOT NULL,
    id_organismo integer NOT NULL,
    nombre character varying(90)
);


ALTER TABLE unidadfuncional OWNER TO postgres;

--
-- TOC entry 534 (class 1259 OID 187016)
-- Name: usuario; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE usuario (
    id_usuario integer NOT NULL,
    usuario character varying(25) NOT NULL,
    password character varying(250) NOT NULL,
    administrador character varying(1) DEFAULT 'N'::character varying NOT NULL,
    apellidos character varying(25) NOT NULL,
    nombres character varying(25) NOT NULL,
    cedula integer NOT NULL,
    activo character varying(1),
    id_region integer,
    telefono character varying(25),
    id_organismo integer DEFAULT 0 NOT NULL,
    cambio_password date DEFAULT now(),
    CONSTRAINT usuario_administrador CHECK ((((administrador)::text = 'S'::text) OR ((administrador)::text = 'N'::text)))
);


ALTER TABLE usuario OWNER TO postgres;

--
-- TOC entry 535 (class 1259 OID 187023)
-- Name: usuarioorganismo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE usuarioorganismo (
    id_usuario_organismo integer NOT NULL,
    id_usuario integer DEFAULT 0 NOT NULL,
    id_organismo integer DEFAULT 0 NOT NULL
);


ALTER TABLE usuarioorganismo OWNER TO postgres;

--
-- TOC entry 536 (class 1259 OID 187028)
-- Name: usuariorol; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE usuariorol (
    id_usuario_rol integer NOT NULL,
    id_usuario integer DEFAULT 0 NOT NULL,
    id_rol integer DEFAULT 0 NOT NULL
);


ALTER TABLE usuariorol OWNER TO postgres;

--
-- TOC entry 537 (class 1259 OID 187033)
-- Name: usuariotipopersonal; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE usuariotipopersonal (
    id_usuario_tipo_personal integer NOT NULL,
    id_usuario integer DEFAULT 0 NOT NULL,
    id_tipo_personal integer DEFAULT 0 NOT NULL
);


ALTER TABLE usuariotipopersonal OWNER TO postgres;

--
-- TOC entry 538 (class 1259 OID 187038)
-- Name: usuariounidadfuncional; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE usuariounidadfuncional (
    id_usuario_unidad_funcional integer NOT NULL,
    id_usuario integer DEFAULT 0 NOT NULL,
    id_unidad_funcional integer DEFAULT 0 NOT NULL
);


ALTER TABLE usuariounidadfuncional OWNER TO postgres;

--
-- TOC entry 539 (class 1259 OID 187043)
-- Name: utiles; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE utiles (
    id_utiles integer NOT NULL,
    id_personal integer NOT NULL,
    id_familiar integer NOT NULL,
    nivel_educativo character varying(1) NOT NULL,
    fecha_nacimiento date NOT NULL,
    grado character varying(2),
    monto double precision DEFAULT 0 NOT NULL,
    sexo character varying(1) NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_trabajador integer NOT NULL
);


ALTER TABLE utiles OWNER TO postgres;

--
-- TOC entry 540 (class 1259 OID 187047)
-- Name: utilidadesporanio; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE utilidadesporanio (
    id_utilidades_por_anio integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    anios_servicio integer DEFAULT 99,
    meses_servicios integer DEFAULT 99,
    dias_bono integer DEFAULT 40,
    dias_extra integer DEFAULT 0
);


ALTER TABLE utilidadesporanio OWNER TO postgres;

--
-- TOC entry 541 (class 1259 OID 187054)
-- Name: v_datos_personales; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_datos_personales AS
 SELECT p.cedula,
    p.primer_nombre,
    p.segundo_nombre,
    p.primer_apellido,
    p.segundo_apellido,
    c.descripcion_cargo,
    t.estatus,
    p.telefono_oficina,
    p.telefono_celular,
    p.telefono_residencia,
    p.email,
    t.codigo_nomina,
    d.nombre AS dependencia,
    t.fecha_ingreso,
    tp.nombre,
    gn.periodicidad,
    uad.nombre AS unidad_administradora
   FROM trabajador t,
    personal p,
    cargo c,
    tipopersonal tp,
    gruponomina gn,
    dependencia d,
    administradorauel aue,
    unidadadministradora uad
  WHERE ((((((((t.id_personal = p.id_personal) AND ((t.id_cargo)::text = (c.id_cargo)::text)) AND (t.id_tipo_personal = tp.id_tipo_personal)) AND (tp.id_grupo_nomina = gn.id_grupo_nomina)) AND (t.id_dependencia = d.id_dependencia)) AND (aue.id_administradora_uel = d.id_administradora_uel)) AND (uad.id_unidad_administradora = aue.id_unidad_administradora)) AND ((t.estatus)::text = 'A'::text));


ALTER TABLE v_datos_personales OWNER TO postgres;

--
-- TOC entry 542 (class 1259 OID 187059)
-- Name: v_historico; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_historico AS
 SELECT historicoquincena.id_historico_quincena,
    historicoquincena.id_trabajador,
    historicoquincena.id_concepto_tipo_personal,
    historicoquincena.id_frecuencia_tipo_personal,
    historicoquincena.numero_nomina,
    historicoquincena.anio,
    historicoquincena.mes,
    historicoquincena.semana_quincena,
    historicoquincena.fecha,
    historicoquincena.unidades,
    historicoquincena.monto_asigna,
    historicoquincena.monto_deduce,
    historicoquincena.origen,
    historicoquincena.documento_soporte,
    historicoquincena.id_tipo_personal,
    historicoquincena.id_grupo_nomina,
    historicoquincena.id_nomina_especial,
    historicoquincena.id_historico_nomina,
    historicoquincena.id_concepto,
    historicoquincena.monto_aporte,
    historicoquincena.id_concepto_aporte,
    historicoquincena.mes_sobretiempo,
    historicoquincena.anio_sobretiempo
   FROM historicoquincena
UNION
 SELECT historicosemana.id_historico_semana AS id_historico_quincena,
    historicosemana.id_trabajador,
    historicosemana.id_concepto_tipo_personal,
    historicosemana.id_frecuencia_tipo_personal,
    historicosemana.numero_nomina,
    historicosemana.anio,
    historicosemana.mes,
    historicosemana.semana_quincena,
    historicosemana.fecha,
    historicosemana.unidades,
    historicosemana.monto_asigna,
    historicosemana.monto_deduce,
    historicosemana.origen,
    historicosemana.documento_soporte,
    historicosemana.id_tipo_personal,
    historicosemana.id_grupo_nomina,
    historicosemana.id_nomina_especial,
    historicosemana.id_historico_nomina,
    historicosemana.id_concepto,
    historicosemana.monto_aporte,
    historicosemana.id_concepto_aporte,
    historicosemana.mes_sobretiempo,
    historicosemana.anio_sobretiempo
   FROM historicosemana;


ALTER TABLE v_historico OWNER TO postgres;

--
-- TOC entry 543 (class 1259 OID 187064)
-- Name: v_recibos; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_recibos AS
 SELECT so.anio,
    so.mes,
    so.semana_quincena,
    so.fecha_inicio,
    so.fecha_fin,
    g.cod_grupo_nomina AS codgno,
    g.nombre AS gruponomina,
    g.periodicidad,
    d.nombre AS tipopersonal,
    d.cod_tipo_personal AS codtno,
    b.fecha_ingreso AS ingresoorganismo,
    b.codigo_nomina AS codrac,
    b.estatus,
    b.forma_pago AS formapago,
    b.cuenta_nomina,
    b.sueldo_basico AS suebas,
    e.cedula AS codtra,
    b.cedula,
    e.primer_nombre,
    e.segundo_nombre,
    e.primer_apellido,
    e.segundo_apellido,
    k.cod_cargo AS codigocargo,
    k.descripcion_cargo AS cargo,
    k.grado AS gradocargo,
    j.cod_dependencia AS codcen,
    j.nombre AS nombreunidad,
    b.id_trabajador,
    au.id_unidad_administradora AS uniadm,
    c.cod_concepto AS codcon,
    c.descripcion AS descon,
    a.unidades,
    a.monto_asigna AS asigna,
    a.monto_deduce AS deduce
   FROM ultimanomina a,
    trabajador b,
    tipopersonal d,
    personal e,
    gruponomina g,
    dependencia j,
    cargo k,
    administradorauel au,
    concepto c,
    conceptotipopersonal f,
    frecuenciatipopersonal ftp,
    seguridadordinaria so
  WHERE ((((((((((((((g.id_grupo_nomina = a.id_grupo_nomina) AND (d.id_tipo_personal = a.id_tipo_personal)) AND (b.id_tipo_personal = d.id_tipo_personal)) AND (b.id_trabajador = a.id_trabajador)) AND (e.id_personal = b.id_personal)) AND (j.id_dependencia = b.id_dependencia)) AND (k.id_cargo = b.id_cargo)) AND (j.id_administradora_uel = au.id_administradora_uel)) AND (a.id_concepto_tipo_personal = f.id_concepto_tipo_personal)) AND (a.numero_nomina = 0)) AND (c.id_concepto = f.id_concepto)) AND (a.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal)) AND (so.fecha_proceso = ( SELECT max(seguridadordinaria.fecha_proceso) AS max
           FROM seguridadordinaria
          WHERE (seguridadordinaria.id_grupo_nomina = a.id_grupo_nomina)))) AND (so.id_grupo_nomina = a.id_grupo_nomina));


ALTER TABLE v_recibos OWNER TO postgres;

--
-- TOC entry 544 (class 1259 OID 187069)
-- Name: v_recibos_quincena; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_recibos_quincena AS
 SELECT a.numero_nomina,
    a.anio,
    a.mes,
    a.semana_quincena,
    g.cod_grupo_nomina AS codgno,
    g.nombre AS gruponomina,
    g.periodicidad,
    d.nombre AS tipopersonal,
    d.cod_tipo_personal AS codtno,
    tr.fecha_ingreso AS ingresoorganismo,
    b.codigo_nomina AS codrac,
    b.estatus,
    b.forma_pago AS formapago,
    b.cuenta_nomina,
    e.cedula AS codtra,
    tr.cedula,
    e.primer_nombre,
    e.segundo_nombre,
    e.primer_apellido,
    e.segundo_apellido,
    k.cod_cargo AS codigocargo,
    k.descripcion_cargo AS cargo,
    k.grado AS gradocargo,
    j.cod_dependencia AS codcen,
    j.nombre AS nombreunidad,
    b.id_trabajador,
    c.cod_concepto AS codcon,
    c.descripcion AS descon,
    fp.cod_frecuencia_pago AS id_contador,
    a.unidades,
    a.monto_asigna AS asigna,
    a.monto_deduce AS deduce,
    a.documento_soporte AS documento,
    fp.cod_frecuencia_pago AS frecon,
    tr.sueldo_basico AS suebas,
    so.fecha_inicio,
    so.fecha_fin
   FROM historicoquincena a,
    historiconomina b,
    tipopersonal d,
    personal e,
    gruponomina g,
    dependencia j,
    cargo k,
    trabajador tr,
    conceptotipopersonal ctp,
    concepto c,
    frecuenciatipopersonal ftp,
    frecuenciapago fp,
    seguridadordinaria so
  WHERE ((((((((((((((((((((((a.id_grupo_nomina = b.id_grupo_nomina) AND (a.numero_nomina = b.numero_nomina)) AND (a.anio = b.anio)) AND (a.mes = b.mes)) AND (a.semana_quincena = b.semana_quincena)) AND (a.id_trabajador = b.id_trabajador)) AND (a.id_trabajador = tr.id_trabajador)) AND (b.anio = so.anio)) AND (b.mes = so.mes)) AND (b.semana_quincena = so.semana_quincena)) AND (b.id_grupo_nomina = so.id_grupo_nomina)) AND (g.id_grupo_nomina = a.id_grupo_nomina)) AND (d.id_tipo_personal = a.id_tipo_personal)) AND (b.id_tipo_personal = d.id_tipo_personal)) AND (e.id_personal = tr.id_personal)) AND (j.id_dependencia = b.id_dependencia)) AND (k.id_cargo = b.id_cargo)) AND (a.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal)) AND (ctp.id_concepto = c.id_concepto)) AND ((c.cod_concepto)::text <> '5000'::text)) AND (a.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal)) AND (ftp.id_frecuencia_pago = fp.id_frecuencia_pago));


ALTER TABLE v_recibos_quincena OWNER TO postgres;

--
-- TOC entry 545 (class 1259 OID 187074)
-- Name: v_recibos_semana; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_recibos_semana AS
 SELECT a.numero_nomina,
    a.anio,
    a.mes,
    a.semana_quincena,
    g.cod_grupo_nomina AS codgno,
    g.nombre AS gruponomina,
    g.periodicidad,
    d.nombre AS tipopersonal,
    d.cod_tipo_personal AS codtno,
    tr.fecha_ingreso AS ingresoorganismo,
    b.codigo_nomina AS codrac,
    b.estatus,
    b.forma_pago AS formapago,
    b.cuenta_nomina,
    e.cedula AS codtra,
    tr.cedula,
    e.primer_nombre,
    e.segundo_nombre,
    e.primer_apellido,
    e.segundo_apellido,
    k.cod_cargo AS codigocargo,
    k.descripcion_cargo AS cargo,
    k.grado AS gradocargo,
    j.cod_dependencia AS codcen,
    j.nombre AS nombreunidad,
    b.id_trabajador,
    c.cod_concepto AS codcon,
    c.descripcion AS descon,
    fp.cod_frecuencia_pago AS id_contador,
    a.unidades,
    a.monto_asigna AS asigna,
    a.monto_deduce AS deduce,
    a.documento_soporte AS documento,
    fp.cod_frecuencia_pago AS frecon,
    tr.sueldo_basico AS suebas,
    so.fecha_inicio,
    so.fecha_fin
   FROM historicosemana a,
    historiconomina b,
    tipopersonal d,
    personal e,
    gruponomina g,
    dependencia j,
    cargo k,
    trabajador tr,
    conceptotipopersonal ctp,
    concepto c,
    frecuenciatipopersonal ftp,
    frecuenciapago fp,
    seguridadordinaria so
  WHERE (((((((((((((((((((((((a.id_grupo_nomina = b.id_grupo_nomina) AND (a.numero_nomina = b.numero_nomina)) AND (a.anio = b.anio)) AND (a.mes = b.mes)) AND (a.semana_quincena = b.semana_quincena)) AND (a.id_trabajador = b.id_trabajador)) AND (a.id_trabajador = tr.id_trabajador)) AND (a.numero_nomina = 0)) AND (b.anio = so.anio)) AND (b.mes = so.mes)) AND (b.semana_quincena = so.semana_quincena)) AND (b.id_grupo_nomina = so.id_grupo_nomina)) AND (g.id_grupo_nomina = a.id_grupo_nomina)) AND (d.id_tipo_personal = a.id_tipo_personal)) AND (b.id_tipo_personal = d.id_tipo_personal)) AND (e.id_personal = tr.id_personal)) AND (j.id_dependencia = b.id_dependencia)) AND (k.id_cargo = b.id_cargo)) AND (a.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal)) AND (ctp.id_concepto = c.id_concepto)) AND ((c.cod_concepto)::text <> '5000'::text)) AND (a.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal)) AND (ftp.id_frecuencia_pago = fp.id_frecuencia_pago))
UNION
 SELECT a.numero_nomina,
    a.anio,
    a.mes,
    a.semana_quincena,
    g.cod_grupo_nomina AS codgno,
    g.nombre AS gruponomina,
    g.periodicidad,
    d.nombre AS tipopersonal,
    d.cod_tipo_personal AS codtno,
    tr.fecha_ingreso AS ingresoorganismo,
    b.codigo_nomina AS codrac,
    b.estatus,
    b.forma_pago AS formapago,
    b.cuenta_nomina,
    e.cedula AS codtra,
    tr.cedula,
    e.primer_nombre,
    e.segundo_nombre,
    e.primer_apellido,
    e.segundo_apellido,
    k.cod_cargo AS codigocargo,
    k.descripcion_cargo AS cargo,
    k.grado AS gradocargo,
    j.cod_dependencia AS codcen,
    j.nombre AS nombreunidad,
    b.id_trabajador,
    c.cod_concepto AS codcon,
    c.descripcion AS descon,
    fp.cod_frecuencia_pago AS id_contador,
    a.unidades,
    a.monto_asigna AS asigna,
    a.monto_deduce AS deduce,
    a.documento_soporte AS documento,
    fp.cod_frecuencia_pago AS frecon,
    tr.sueldo_basico AS suebas,
    a.fecha AS fecha_inicio,
    a.fecha AS fecha_fin
   FROM historicosemana a,
    historiconomina b,
    tipopersonal d,
    personal e,
    gruponomina g,
    dependencia j,
    cargo k,
    trabajador tr,
    conceptotipopersonal ctp,
    concepto c,
    frecuenciatipopersonal ftp,
    frecuenciapago fp
  WHERE (((((((((((((((((((a.id_grupo_nomina = b.id_grupo_nomina) AND (a.numero_nomina = b.numero_nomina)) AND (a.anio = b.anio)) AND (a.mes = b.mes)) AND (a.semana_quincena = b.semana_quincena)) AND (a.id_trabajador = b.id_trabajador)) AND (a.id_trabajador = tr.id_trabajador)) AND (a.numero_nomina <> 0)) AND (g.id_grupo_nomina = a.id_grupo_nomina)) AND (d.id_tipo_personal = a.id_tipo_personal)) AND (b.id_tipo_personal = d.id_tipo_personal)) AND (e.id_personal = tr.id_personal)) AND (j.id_dependencia = b.id_dependencia)) AND (k.id_cargo = b.id_cargo)) AND (a.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal)) AND (ctp.id_concepto = c.id_concepto)) AND ((c.cod_concepto)::text <> '5000'::text)) AND (a.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal)) AND (ftp.id_frecuencia_pago = fp.id_frecuencia_pago));


ALTER TABLE v_recibos_semana OWNER TO postgres;

--
-- TOC entry 546 (class 1259 OID 187079)
-- Name: v_seguridad; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_seguridad AS
 SELECT a.cedula,
    (((b.primer_nombre)::text || '  '::text) || (b.segundo_nombre)::text) AS nombres,
    (((b.primer_apellido)::text || '  '::text) || (b.segundo_apellido)::text) AS apellidos,
        CASE
            WHEN (a.id_tipo_personal = 1) THEN 'EMPLEADO'::text
            WHEN (a.id_tipo_personal = 5) THEN '0BRERO'::text
            WHEN (a.id_tipo_personal = 10) THEN 'CONTRATADO'::text
            WHEN (a.id_tipo_personal = 20) THEN 'J'::text
            WHEN (a.id_tipo_personal = 25) THEN 'U'::text
            ELSE NULL::text
        END AS tipo_personal,
    c.nombre AS dependecia
   FROM trabajador a,
    personal b,
    dependencia c,
    conceptofijo cf
  WHERE ((((((a.id_personal = b.id_personal) AND ((a.estatus)::text = 'A'::text)) AND (a.id_dependencia = c.id_dependencia)) AND (((a.id_tipo_personal = 1) OR (a.id_tipo_personal = 5)) OR (a.id_tipo_personal = 10))) AND (a.id_trabajador = cf.id_trabajador)) AND ((((((cf.id_concepto_tipo_personal = 11) OR (cf.id_concepto_tipo_personal = 20)) OR (cf.id_concepto_tipo_personal = 21)) OR (cf.id_concepto_tipo_personal = 22)) OR (cf.id_concepto_tipo_personal = 47)) OR (cf.id_concepto_tipo_personal = 2175)));


ALTER TABLE v_seguridad OWNER TO postgres;

--
-- TOC entry 547 (class 1259 OID 187084)
-- Name: v_web_carga_familiar; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_web_carga_familiar AS
 SELECT a.id_familiar AS indicador_unico,
    b.cedula AS cedula_funcionario,
    a.primer_nombre AS nombre,
    a.primer_apellido AS apellido,
    a.cedula_familiar,
        CASE
            WHEN ((a.parentesco)::text = 'H'::text) THEN 'HIJO'::text
            WHEN ((a.parentesco)::text = 'M'::text) THEN 'MADRE'::text
            WHEN ((a.parentesco)::text = 'P'::text) THEN 'PADRE'::text
            WHEN ((a.parentesco)::text = 'C'::text) THEN 'CONYUGUE'::text
            WHEN ((a.parentesco)::text = 'E'::text) THEN 'HERMANO'::text
            WHEN ((a.parentesco)::text = 'O'::text) THEN 'OTRO'::text
            ELSE NULL::text
        END AS parentesco,
    a.fecha_nacimiento
   FROM familiar a,
    personal b,
    trabajador c
  WHERE ((((a.id_personal = b.id_personal) AND (b.id_personal = c.id_personal)) AND ((c.estatus)::text = 'A'::text)) AND (((((c.id_tipo_personal = 1) OR (c.id_tipo_personal = 5)) OR (c.id_tipo_personal = 10)) OR (c.id_tipo_personal = 20)) OR (c.id_tipo_personal = 25)));


ALTER TABLE v_web_carga_familiar OWNER TO postgres;

--
-- TOC entry 548 (class 1259 OID 187089)
-- Name: v_web_funcionarios; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_web_funcionarios AS
 SELECT a.cedula,
    (((b.primer_nombre)::text || '  '::text) || (b.segundo_nombre)::text) AS nombres,
    (((b.primer_apellido)::text || '  '::text) || (b.segundo_apellido)::text) AS apellidos,
    b.telefono_oficina AS telefono,
    a.fecha_ingreso,
    a.codigo_nomina,
        CASE
            WHEN (a.id_tipo_personal = 1) THEN 'E'::text
            WHEN (a.id_tipo_personal = 5) THEN '0'::text
            WHEN (a.id_tipo_personal = 10) THEN 'C'::text
            WHEN (a.id_tipo_personal = 20) THEN 'J'::text
            WHEN (a.id_tipo_personal = 25) THEN 'U'::text
            ELSE NULL::text
        END AS tipo_personal,
    substr((e.descripcion_cargo)::text, 1, 30) AS cargo_funcionarios,
    c.nombre AS dependecia,
    d.nombre AS direccion,
    d.nombre AS division,
    d.nombre AS departamento
   FROM trabajador a,
    personal b,
    dependencia c,
    lugarpago d,
    cargo e
  WHERE ((((((a.id_personal = b.id_personal) AND ((a.estatus)::text = 'A'::text)) AND (a.id_dependencia = c.id_dependencia)) AND (a.id_lugar_pago = d.id_lugar_pago)) AND (((((a.id_tipo_personal = 1) OR (a.id_tipo_personal = 5)) OR (a.id_tipo_personal = 10)) OR (a.id_tipo_personal = 20)) OR (a.id_tipo_personal = 25))) AND (a.id_cargo = e.id_cargo));


ALTER TABLE v_web_funcionarios OWNER TO postgres;

--
-- TOC entry 549 (class 1259 OID 187094)
-- Name: v_web_hijos; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW v_web_hijos AS
 SELECT a.id_familiar AS ipk_id_hijos,
    c.cedula AS ifk_cedula_funcionarios,
    a.cedula_familiar AS c_cedula_hijos,
    a.primer_nombre AS c_nombre_hijos,
    a.primer_apellido AS c_apell_hijos,
    a.fecha_nacimiento AS c_fecha_nac_hijos,
        CASE
            WHEN ((b.estatus_beca)::text = 'A'::text) THEN 'S'::text
            WHEN ((b.estatus_beca)::text = 'R'::text) THEN 'N'::text
            WHEN ((b.estatus_beca)::text = 'S'::text) THEN 'N'::text
            ELSE NULL::text
        END AS c_estatu_becado_hijos,
    b.estatus_beca AS c_estatu_solici_hijos,
    'N'::text AS c_tipo_solici_hijos,
    b.fecha AS c_fecha_solici_hijos
   FROM familiar a,
    becafamiliar b,
    trabajador c
  WHERE (((a.id_familiar = b.id_familiar) AND ((a.parentesco)::text = 'H'::text)) AND (a.id_personal = c.id_personal))
UNION
 SELECT a.id_familiar AS ipk_id_hijos,
    c.cedula AS ifk_cedula_funcionarios,
    a.cedula_familiar AS c_cedula_hijos,
    a.primer_nombre AS c_nombre_hijos,
    a.primer_apellido AS c_apell_hijos,
    a.fecha_nacimiento AS c_fecha_nac_hijos,
    'N'::text AS c_estatu_becado_hijos,
    ' '::character varying AS c_estatu_solici_hijos,
    'N'::text AS c_tipo_solici_hijos,
    a.fecha_nacimiento AS c_fecha_solici_hijos
   FROM familiar a,
    trabajador c
  WHERE ((((a.parentesco)::text = 'H'::text) AND (a.id_personal = c.id_personal)) AND (NOT (a.id_familiar IN ( SELECT becafamiliar.id_familiar
           FROM becafamiliar))));


ALTER TABLE v_web_hijos OWNER TO postgres;

--
-- TOC entry 550 (class 1259 OID 187099)
-- Name: vacacion; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE vacacion (
    id_vacacion integer NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_personal integer,
    tipo_vacacion character varying(1) DEFAULT 'P'::character varying NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    dias_disfrute integer DEFAULT 0 NOT NULL,
    dias_pendientes integer DEFAULT 0 NOT NULL,
    fecha_fin date,
    fecha_inicio date,
    fecha_reintegro date,
    fecha_suspension date,
    suspendida character varying(1) DEFAULT 'N'::character varying NOT NULL,
    observaciones text
);


ALTER TABLE vacacion OWNER TO postgres;

--
-- TOC entry 551 (class 1259 OID 187110)
-- Name: vacaciondisfrutada; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE vacaciondisfrutada (
    id_vacacion_disfrutada integer NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_personal integer,
    anio integer DEFAULT 0 NOT NULL,
    dias_disfrute integer DEFAULT 0 NOT NULL,
    semana_anio integer DEFAULT 0 NOT NULL,
    fecha_fin date,
    fecha_inicio date,
    fecha_reintegro date,
    observaciones text,
    id_vacacion integer
);


ALTER TABLE vacaciondisfrutada OWNER TO postgres;

--
-- TOC entry 552 (class 1259 OID 187119)
-- Name: vacacionesporanio; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE vacacionesporanio (
    id_vacaciones_por_anio integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    anios_servicio integer DEFAULT 99,
    dias_disfrutar integer DEFAULT 15,
    dias_bono integer DEFAULT 40,
    dias_extra integer DEFAULT 0
);


ALTER TABLE vacacionesporanio OWNER TO postgres;

--
-- TOC entry 553 (class 1259 OID 187126)
-- Name: vacacionprogramada; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE vacacionprogramada (
    id_vacacion_programada integer NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_personal integer,
    anio integer DEFAULT 0 NOT NULL,
    dias_disfrute integer DEFAULT 0 NOT NULL,
    semana_anio integer DEFAULT 0 NOT NULL,
    fecha_fin date,
    fecha_inicio date,
    fecha_reintegro date,
    observaciones text
);


ALTER TABLE vacacionprogramada OWNER TO postgres;

--
-- TOC entry 554 (class 1259 OID 187135)
-- Name: varemos; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE varemos (
    id_varemos integer NOT NULL,
    cod_varemos character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL,
    porcentaje integer NOT NULL
);


ALTER TABLE varemos OWNER TO postgres;

--
-- TOC entry 4565 (class 2604 OID 187138)
-- Name: id_historico_base_islr; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historicobaseislr ALTER COLUMN id_historico_base_islr SET DEFAULT nextval('historicobaseislr_id_historico_base_islr_seq'::regclass);


--
-- TOC entry 7386 (class 0 OID 183836)
-- Dependencies: 173
-- Data for Name: accioncentralizada; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY accioncentralizada (id_accion_centralizada, cod_accion_centralizada, anio, denominacion, id_organismo) FROM stdin;
11	0102	2011	OFICINA DE GESTION ADMINISTRATIVA	11
\.


--
-- TOC entry 7387 (class 0 OID 183840)
-- Dependencies: 174
-- Data for Name: accionespecifica; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY accionespecifica (id_accion_especifica, cod_accion_especifica, tipo, denominacion, anio, id_proyecto, id_accion_centralizada) FROM stdin;
12	001	A	DISEÑO DEL SISTEMA DE INFORMACIÓN ESTADISTICA DEL MINMUJER Y SUS ENTES ADSCRITOS	2011	\N	11
13	001	A	CONSOLIDACION DE LA RED NACIONAL,ESTADAL,MUNICIPAL,PARROQUIAL,COMUNAL DEL OBG	2011	\N	11
14	001	A	FORMACION SOCIALISTA, IDEOLOGICA Y POLITICA EN SOCIALISMO, FEMINISMO Y GENERO A MUJERES	2011	\N	11
15	002	A	COORDINACION CON LOS MINISTERIOS DEL PODER POPULAR	2011	\N	11
16	007	A	COORDINACION CON LAS COMUNIDADES ORGANIZADAS Y ENTES ADSCRITOS PARA LA CONFORMACION	2011	\N	11
17	006	A	DISEÑO DE LINEAMIENTOS Y DIRECTRICES PARA LA PROMOCION DE LA CALIDAD DE VIDA DE LAS MUJERE	2011	\N	11
18	011	A	DISEÑO DE POLITICAS PARA ERRADICAR LA DISCRIMINACION ETNICA DE GENERO Y CLASE 	2011	\N	11
19	013	A	SEGUIMIENTO Y CONTROL A LA GESTION DE LAS DIRECCIONES DE ESTADOS 	2011	\N	11
11	001	A	ASIGNACION Y CONTROL DE LOS RECURSOS PARA GASTOS DE LOS TRABAJADORES	2011	\N	11
\.


--
-- TOC entry 7388 (class 0 OID 183844)
-- Dependencies: 175
-- Data for Name: accionevaluacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY accionevaluacion (id_accion_evaluacion, cod_accion_evaluacion, descripcion, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7389 (class 0 OID 183848)
-- Dependencies: 176
-- Data for Name: acreencia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY acreencia (id_acreencia, id_tipo_acreencia, monto_acreencia, estatus, fecha_registro, observaciones, id_personal) FROM stdin;
\.


--
-- TOC entry 7390 (class 0 OID 183856)
-- Dependencies: 177
-- Data for Name: actividaddocente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY actividaddocente (id_actividad_docente, nivel_educativo, anio_inicio, anio_fin, estatus, id_carrera, id_personal, sector, relacion_laboral, nombre_entidad, asignatura, observaciones, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7391 (class 0 OID 183870)
-- Dependencies: 178
-- Data for Name: adiestramientocargo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY adiestramientocargo (id_adiestramiento_cargo, id_cargo, id_area_conocimiento, nivel, peso, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7392 (class 0 OID 183877)
-- Dependencies: 179
-- Data for Name: administradorauel; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY administradorauel (id_administradora_uel, id_unidad_ejecutora, id_unidad_administradora) FROM stdin;
13	11	30
14	12	30
15	13	30
16	14	30
17	15	30
18	16	30
19	17	30
21	21	30
\.


--
-- TOC entry 7393 (class 0 OID 183880)
-- Dependencies: 180
-- Data for Name: afiliacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY afiliacion (id_afiliacion, fecha, id_gremio, numero_afiliacion, id_personal, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7394 (class 0 OID 183884)
-- Dependencies: 181
-- Data for Name: ajustetabuladoronu; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ajustetabuladoronu (id_ajuste_tabulador_onu, id_tabulador, nivel, estado_civil, anios_servicio, ajuste_anual) FROM stdin;
\.


--
-- TOC entry 7395 (class 0 OID 183891)
-- Dependencies: 182
-- Data for Name: antecedente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY antecedente (id_antecedente, fecha_ingreso, personal_ingreso, cargo_ingreso, descargo_ingreso, codrac_ingreso, sueldo_ingreso, compensacion_ingreso, primas_ingreso, fecha_egreso, personal_egreso, cargo_egreso, descargo_egreso, causa_egreso, codrac_egreso, sueldo_egreso, compensacion_egreso, primas_egreso, prestaciones_pendientes, vacaciones_pendientes, dias_vacaciones, observaciones, id_personal, nombre_institucion, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7396 (class 0 OID 183911)
-- Dependencies: 183
-- Data for Name: anticipo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY anticipo (id_anticipo, anio, mes, fecha_anticipo, monto_anticipo, tipo_anticipo, forma_anticipo, estatus, id_personal, id_tipo_personal, observaciones, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7397 (class 0 OID 183923)
-- Dependencies: 184
-- Data for Name: apelacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY apelacion (id_apelacion, anio, mes, fecha, resultado, cedula_supervisor, nombre_supervisor, observaciones, id_personal) FROM stdin;
\.


--
-- TOC entry 7398 (class 0 OID 183933)
-- Dependencies: 185
-- Data for Name: aperturaescolar; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY aperturaescolar (id_apertura_escolar, id_dependencia, cod_cargo, cargos_apertura, cargos_restante, horas_apertura, horas_restante) FROM stdin;
\.


--
-- TOC entry 7399 (class 0 OID 183940)
-- Dependencies: 186
-- Data for Name: aplicartabulador; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY aplicartabulador (id_aplicar_tabulador, fecha_proceso, grado_actual, paso_actual, sueldo_actual, ajuste_actual, compensacion_actual, paso_nuevo, sueldo_nuevo, ajuste_nuevo, compensacion_nueva, id_trabajador, monto_retroactivo, dias_retroactivo, base_aumento) FROM stdin;
\.


--
-- TOC entry 7400 (class 0 OID 183955)
-- Dependencies: 187
-- Data for Name: areacarrera; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY areacarrera (id_area_carrera, cod_area_carrera, descripcion) FROM stdin;
1	001	ADMINISTRATIVA
2	002	AERONAUTICA
3	003	AGRICOLA
4	004	ACUATICA
5	005	ALIMENTARIA
6	006	AMBIENTAL
7	007	ARQUITECTONICA
8	008	ARTES PLASTICAS
9	009	ARTES ESCENICAS
10	010	AUDIOVISUAL
11	011	BIOLOGICA
12	012	CIENTIFICO SOCIAL
13	013	COMERCIO EXTERIOR
14	014	COMPUTACIONAL
15	015	COMUNICACION SOCIAL
16	016	CONSTRUCCION
17	017	CONTABLE
18	018	DEPORTIVA
19	019	DISEÑO
20	020	DOCUMENTAL
21	021	ECONOMICA
22	022	EDUCACION
23	023	EDUCACION ESPECIAL
24	024	ELECTRICA
25	025	ELECTRONICA
26	026	FILOSOFICA
27	027	FINANCIERA
28	028	FISICA
29	029	FORESTAL
30	030	GEOLOGICA
31	031	SEGURIDAD
32	032	IDIOMAS
33	033	INDUSTRIAL
34	034	JURIDICA Y POLITICA
35	035	LITERARIA
36	036	MANTENIMIENTO
37	037	MATEMATICA
38	038	MECANICA
39	039	MERCADEO
40	040	METALURGIA
41	041	MILITAR
42	042	MUSICAL
43	043	PECUARIA
44	044	PETROLERA
45	045	POLICIAL
46	046	PSICOLOGICA
47	047	PUBLICITARIA
48	048	QUIMICA
49	049	RECURSOS HUMANOS
50	050	RELIGIOSA
51	051	SALUD
52	052	SEGUROS
53	053	SERVICIO SOCIAL
54	054	TRANSPORTE
55	055	TRIBUTARIA
56	056	TURISTICA
57	057	NEGOCIOS
\.


--
-- TOC entry 7401 (class 0 OID 183958)
-- Dependencies: 188
-- Data for Name: areaconocimiento; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY areaconocimiento (id_area_conocimiento, cod_area_conocimiento, descripcion) FROM stdin;
1	001	ADMINISTRATIVA
2	002	AERONAUTICA
3	003	AGRICOLA
4	004	ACUATICA
5	005	ALIMENTARIA
6	006	AMBIENTAL
7	007	ARQUITECTONICA
8	008	ARTES PLASTICAS
9	009	ARTES ESCENICAS
10	010	AUDIOVISUAL
11	011	BIOLOGICA
12	012	CIENTIFICO SOCIAL
13	013	COMERCIO EXTERIOR
14	014	COMPUTACIONAL
15	015	COMUNICACION SOCIAL
16	016	CONSTRUCCION
17	017	CONTABLE
18	018	DEPORTIVA
19	019	DISEÑO
20	020	DOCUMENTAL
21	021	ECONOMICA
22	022	EDUCACION
23	023	EDUCACION ESPECIAL
24	024	ELECTRICA
25	025	ELECTRONICA
26	026	FILOSOFICA
27	027	FINANCIERA
28	028	FISICA
29	029	FORESTAL
30	030	GEOLOGICA
31	031	SEGURIDAD
32	032	IDIOMAS
33	033	INDUSTRIAL
34	034	JURIDICA Y POLITICA
35	035	LITERARIA
36	036	MANTENIMIENTO
37	037	MATEMATICA
38	038	MECANICA
39	039	MERCADEO
40	040	METALURGIA
41	041	MILITAR
42	042	MUSICAL
43	043	PECUARIA
44	044	PETROLERA
45	045	POLICIAL
46	046	PSICOLOGICA
47	047	PUBLICITARIA
48	048	QUIMICA
49	049	RECURSOS HUMANOS
50	050	RELIGIOSA
51	051	SALUD
52	052	SEGUROS
53	053	SERVICIO SOCIAL
54	054	TRANSPORTE
55	055	TRIBUTARIA
56	056	TURISTICA
57	057	NEGOCIOS
\.


--
-- TOC entry 7402 (class 0 OID 183961)
-- Dependencies: 189
-- Data for Name: asignatura; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY asignatura (id_asignatura, cod_asignatura, nombre, tope_horas) FROM stdin;
\.


--
-- TOC entry 7403 (class 0 OID 183965)
-- Dependencies: 190
-- Data for Name: auditoria; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY auditoria (id_usuario, id_organismo, hora, fecha, usuario, ruta, accion, registro, cedula_trabajador, concepto, monto, frecuencia_pago) FROM stdin;
\.


--
-- TOC entry 7404 (class 0 OID 183976)
-- Dependencies: 191
-- Data for Name: aumentoevaluacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY aumentoevaluacion (id_aumento_evaluacion, anio, mes, fecha_proceso, resultado, grado, paso_anterior, sueldo_anterior, ajuste_anterior, compensacion_anterior, otros_anterior, base_aumento, sueldo_nuevo, compensacion_nueva, monto_aumentar, aumento_definitivo, paso_nuevo, porcentaje_aumentar, monto_unico, ajuste_escala, dias_retroactivo, monto_retroactivo, id_trabajador, id_resultado_evaluacion, id_tipo_personal, estatus) FROM stdin;
\.


--
-- TOC entry 7405 (class 0 OID 183999)
-- Dependencies: 192
-- Data for Name: ausencia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ausencia (id_ausencia, anio, cesta_ticket, dias_continuos, dias_habiles, cedula_director, estatus, clase, fecha_fin, fecha_inicio, horas_dias, cedula_jefe, mes, nombre_director, nombre_jefe, nombre_supervisor, observaciones, id_personal, cedula_supervisor, id_tipo_ausencia, remunerado) FROM stdin;
\.


--
-- TOC entry 7406 (class 0 OID 184016)
-- Dependencies: 193
-- Data for Name: averiguacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY averiguacion (id_averiguacion, estatus, fecha_proceso, fecha_fin_proceso, fecha_fin, fecha_inicio, inhabilitado, observaciones, origen, id_personal, resolucion, suspension_sueldo, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7407 (class 0 OID 184031)
-- Dependencies: 194
-- Data for Name: banco; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY banco (id_banco, cod_banco, identificador_ahorro, identificador_corriente, nombre, correlativo) FROM stdin;
20	137	\N	\N	BANCO SOFITASA BANCO UNIVERASAL, C.A.	0
21	138	\N	\N	BANCO PLAZA, C.A.	0
22	140	\N	\N	BANCO CANARIAS DE VENEZUELA, C.A.	0
315	815	\N	\N	BANCO CANARIAS DE VENEZUELA, BANCO UNIVERSAL - ADUANA GUAMACHE	0
23	141	\N	\N	CONFEDERADO, S.A. BANCO COMERCIAL REGIONAL	0
25	143	\N	\N	BANCO MONAGAS, C.A.	0
26	144	\N	\N	INVERUNIÃN, BANCO COMERCIAL C.A.	0
27	145	\N	\N	BANCO DE COMERCIO EXTERIOR, C.A. BANCOEX	0
28	146	\N	\N	BANCO DE LA GENTE EMPRENDEDORA (BANGENTE) C.A.	0
29	147	\N	\N	BANCO NUEVO MUNDO, C.A.	0
30	148	\N	\N	TOTALBANK, C.A., BANCO COMERCIAL	0
31	149	\N	\N	BANCO DEL PUEBLO SOBERANO, C.A.	0
32	150	\N	\N	BANCO BOLIVAR, C.A. BANCO UNIVERSAL	0
316	816	\N	\N	BANCO CANARIAS DE VENEZUELA, BANCO UNIVERSAL  - REGION INSULAR	0
35	157	\N	\N	DEL SUR BANCO UNIVERSAL C.A.	0
36	158	\N	\N	CENTRAL, BANCO UNIVERSAL	0
37	159	\N	\N	BANCO DE DESARROLLO DE LA MUJER C.A.	0
38	160	\N	\N	BANCO GALICIA DE VENEZUELA C.A. BANCO COMERCIAL	0
293	161	\N	\N	BANCO PROVIVIENDA, C.A. BANCO UNIVERSAL (BANPRO)	0
289	162	\N	\N	BANVALOR BANCO COMERCIAL	0
39	190	\N	\N	CITIBANK, N.A., BANCO UNIVERSAL	0
169	191	\N	\N	BANCO NACIONAL DE CRÉDITO C.A.	0
42	196	\N	\N	ABNAMRO BANK, N.V. 	0
46	204	\N	\N	BANCO HIPOTECARIO UNIDO, S.A.	0
47	215	\N	\N	BANCO HIPOTECARIO LATINOAMERICANA C.A.	0
48	217	\N	\N	BANESCO  BANCO HIPOTECARIO, C.A.	0
50	305	\N	\N	FINANCORP BANCO DE INVERSIÓN, C.A.	0
51	314	\N	\N	BANVALOR, BANCO DE INVERSIÓN C.A.	0
13	114	\N	\N	BANCO DEL CARIBE, C.A. BANCO UNIVERSAL	101
53	323	\N	\N	BANINVEST BANCO DE INVERSIÓN, C.A.	0
54	354	\N	\N	FEDERAL BANCO DE INVERSIÓN	0
55	356	\N	\N	SOFICREDITO BANCO DE INVERSIÓN, C.A.	0
56	363	\N	\N	SOFIOCCIDENTE BANCO DE INVERSIÓN, C.A.	0
57	372	\N	\N	BANPLUS  BANCO DE INVERSIÓN, C.A.	0
11	105	\N	\N	BANCO MERCANTIL, C.A.S.A.C.A.,BANCO UNIVERSAL	206
58	405	\N	\N	CAJA FAMILIA, ENTIDAD DE AHORRO Y PRESTAMO, C.A.	0
59	408	\N	\N	PROVIVIENDA BANCO UNIVERSAL	0
60	410	\N	\N	E.A.P. CASA PROPIA, C.A.	0
62	425	\N	\N	E.A.P. MI CASA, C.A.	0
294	428	\N	\N	BANPLUS ENTIDAD DE AHORRO Y PRÉSTAMO, C.A	0
64	501	\N	\N	BANCO DE DESARROLLO ECONÓMICO Y SOCIAL (BANDES)	0
71	702	\N	\N	BANCO CAPITAL, C.A.	0
76	709	\N	\N	BANCO DE FOMENTO REGIONAL CORO, C.A.	0
78	713	\N	\N	FONDO DE ACTIVOS LIQUIDOS DEL BANCO OCCIDENTAL DE DESCUENTO, C.A.	0
79	714	\N	\N	BANCO POPULAR Y DE LOS ANDES, C.A.	0
85	723	\N	\N	BANCO HIPOTECARIO VENEZOLANO, C.A.	0
2	003	\N	\N	BANCO INDUSTRIAL DE VENEZUELA, C.A.	681
308	808	\N	\N	BANESCO - LAS PIEDRAS	18
307	807	\N	\N	CASA PROPIA E.A.P. ADUANA C.O.	0
320	820			DEL SUR - ADUANA GUANTA	0
12	108	\N	\N	BANCO PROVINCIAL, S.A.C.A., BANCO UNIVERSAL	1
310	810	\N	\N	BANESCO - REGION NOR ORIENTAL	8
312	812	\N	\N	BANESCO - REGION ZULIANA	9
309	809	\N	\N	BANESCO - REGION LOS LLANOS	10
311	811	\N	\N	BANESCO - ADUANA MARACAIBO	8
34	151	\N	\N	FONDO COMUN, C.A. BANCO UNIVERSAL, C.A.	46
313	813	\N	\N	PRO VIVIENDA - REGION LOS ANDES	0
314	814	\N	\N	PRO VIVIENDA - ADUANA SAN ANTONIO	0
52	315	\N	\N	BANCO DE INVERSION INDUSTRIAL DE VENEZUELA C.A FIVCA	1
324	824	\N	\N	BANCO MERCANTIL . ADUANA MATURIN	0
317	817	\N	\N	MI CASA E.A.P- ADUANA CARUPANO	0
318	818	\N	\N	MI CASA E.A.P- ADUANA GUIRIA	0
319	819	\N	\N	DEL SUR - REGION GUAYANA	0
321	821	\N	\N	MI CASA E.A.P. - ADUANA PTO. SUCRE	0
322	822	\N	\N	CASA PROPIA E.A.P. REGION  C.O.	0
323	823	\N	\N	B.O.D. ADUANA PUERTO CABELLO	0
325	825	\N	\N	B.O.D. REGION CENTRAL	0
148	001	\N	\N	BANCO CENTRAL DE VENEZUELA	0
1	002	\N	\N	BANCO NACIONAL DE AHORRO Y PRÉSTAMO (BANAP)	0
296	005	\N	\N	BANCO DE FOMENTO COMERCIAL DE VENEZUELA C.A.	0
3	006	\N	\N	BANCO DE CORO C.A.	0
4	007	\N	\N	BANCO DE FOMENTO REGIONAL DE LOS ANDES, C.A.	0
5	008	\N	\N	BANCO GUAYANA, C.A.	0
9	103	\N	\N	BANCO CARACAS, S.A.C.A., BANCO UNIVERSAL	0
10	104	\N	\N	BANCO VENEZOLANO DE CRÉDITO, S.A.C.A.	0
299	107	\N	\N	BANCO LATINO C.A.	0
14	115	\N	\N	BANCO EXTERIOR, C.A., BANCO UNIVERSAL	0
15	116	\N	\N	BANCO OCCIDENTAL DE DESCUENTO, C.A.S.A.C.A.	0
16	121	\N	\N	CORPBANCA, C.A. BANCO UNIVERSAL	0
303	124	\N	\N	BANCOR, C.A.	0
255	126	\N	\N	DEL ORINOCO,S.A.C.A. BANCO UNIVERSAL	0
256	127	\N	\N	BANCO CAPITAL, C.A.	0
17	128	\N	\N	BANCO CARONI, C.A., BANCO UNIVERSAL	0
305	132	\N	\N	BANCO BARINAS C.A.	0
18	133	\N	\N	BANCO FEDERAL, C.A.	0
19	134	\N	\N	BANESCO, BANCO UNIVERSAL, S.A.C.A.	0
306	135	\N	\N	BANCO COMERCIAL AMAZONAS C.A.	0
63	430	\N	\N	E.A.P. PROSPERAR	0
332	900			BANCO NACIONAL DE VIVIENDA Y HABITAT	0
341	200			BANAVIH	0
8	102	1	0	BANCO DE VENEZUELA, S.A.C.A., BANCO UNIVERSAL	657
\.


--
-- TOC entry 7408 (class 0 OID 184035)
-- Dependencies: 195
-- Data for Name: baremopreseleccionado; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY baremopreseleccionado (id_baremo_preseleccionado, id_postulado_concurso, id_varemos, resultado, entrevistador, fecha, observaciones) FROM stdin;
\.


--
-- TOC entry 7409 (class 0 OID 184042)
-- Dependencies: 196
-- Data for Name: becafamiliar; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY becafamiliar (id_beca_familiar, id_personal, id_familiar, id_concepto_tipo_personal, fecha, tramite_beca, nivel_educativo, monto_beca, grado, promedio_notas, estatus_beca, instituto, instituto_otra_beca, carrera_especialidad, otra_beca, pagada, monto_otra_beca, trajo_recaudos, fecha_ultimo_pago) FROM stdin;
\.


--
-- TOC entry 7410 (class 0 OID 184055)
-- Dependencies: 197
-- Data for Name: becatrabajador; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY becatrabajador (id_beca_trabajador, id_personal, tramite_beca, nivel_educativo, monto_beca, fecha_inicio, fecha_fin, unidad, periodo_cursando, promedio_notas, estatus_beca, instituto, instituto_otra_beca, carrera_especialidad, id_pais, otra_beca, pagada, monto_otra_beca, trajo_recaudos, fecha_ultimo_pago) FROM stdin;
\.


--
-- TOC entry 7411 (class 0 OID 184067)
-- Dependencies: 198
-- Data for Name: beneficiario; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY beneficiario (id_beneficiario, id_personal, id_tipo_personal, id_plan_poliza, id_primas_plan, id_familiar, monto_prima, monto_patron, monto_trabajador, cobertura, cobertura_extra, prima_extra, fecha_inclusion, fecha_exclusion, estatus) FROM stdin;
\.


--
-- TOC entry 7412 (class 0 OID 184077)
-- Dependencies: 199
-- Data for Name: cajaahorro; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cajaahorro (id_caja_ahorro, id_trabajador, id_concepto_tipo_personal, porcentaje_trabajador, porcentaje_patron, aporte_trabajador, aporte_patron, acumulado_trabajador, acumulado_patron, acumulado_retiros, acumulado_haberes) FROM stdin;
\.


--
-- TOC entry 7413 (class 0 OID 184088)
-- Dependencies: 200
-- Data for Name: calculoantiguedad; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY calculoantiguedad (id_calculo_antiguedad, id_trabajador, id_tipo_personal, anios_servicio, mes, monto, monto_anterior) FROM stdin;
\.


--
-- TOC entry 7414 (class 0 OID 184095)
-- Dependencies: 201
-- Data for Name: calculobonofinanio; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY calculobonofinanio (id_calculo_bono_fin_anio, id_trabajador, id_tipo_personal, total_bono, monto_alicuota, bono_sin_alicuota, dias, base_fijo, base_promedio, base_devengado, base_mensual, base_variable, base_proyectado, bono_vacacional, anios_servicio) FROM stdin;
\.


--
-- TOC entry 7415 (class 0 OID 184110)
-- Dependencies: 202
-- Data for Name: calculoticket; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY calculoticket (id_calculo_ticket, anio, mes, cantidad_ticket, denominacion_ticket, monto_cobrar, total_descuentos_ticket, neto_cantidad_ticket, neto_monto_cobrar, especial, fecha_proceso, anio_proceso, mes_proceso, cod_ticket, id_trabajador, id_concepto_tipo_personal, id_proveedor_ticket, id_tipo_personal, cod_dependencia, nombre_dependencia) FROM stdin;
\.


--
-- TOC entry 7416 (class 0 OID 184126)
-- Dependencies: 203
-- Data for Name: calculovacacional; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY calculovacacional (id_calculo_vacacional, id_trabajador, id_tipo_personal, anios_servicio, mes, bono_sin_alicuota, monto_alicuota, monto_petrolero, bono_extra, total_bono, dias, base_fijo, base_promedio, base_devengado, base_proyectado, momento_pago, base_alicuota) FROM stdin;
\.


--
-- TOC entry 7417 (class 0 OID 184144)
-- Dependencies: 204
-- Data for Name: caracteristicadependencia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY caracteristicadependencia (id_caracteristica_dependencia, nombre, codigo, id_tipo_caracteristica) FROM stdin;
\.


--
-- TOC entry 7418 (class 0 OID 184147)
-- Dependencies: 205
-- Data for Name: cargamasivatrabajador; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cargamasivatrabajador (id_tipo_personal, cedula, id_cargo, codigo_nomina, id_dependencia, fecha_ingreso, fecha_ingreso_apn, fecha_vacaciones, fecha_prestaciones, fecha_antiguedad, id_banco_nomina, tipo_cta_nomina, cuenta_nomina, id_banco_lph, cuenta_lph, id_banco_fid, cuenta_fid, porcentaje_islr, cotiza_sso, cotiza_spf, cotiza_lph, cotiza_fju, id_causa_movimiento, id_registro) FROM stdin;
\.


--
-- TOC entry 7419 (class 0 OID 184151)
-- Dependencies: 206
-- Data for Name: cargo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cargo (id_cargo, cod_cargo, id_manual_cargo, tipo_cargo, grado, sub_grado, caucion, id_serie_cargo, descripcion_cargo, id_sitp, tiempo_sitp) FROM stdin;
20	01	22	1	1	1	0	12	BACHILLER I	0	\N
21	02	22	1	2	1	0	12	BACHILLER II	0	\N
22	03	22	1	3	1	0	12	BACHILLER III	0	\N
23	04	22	2	4	1	0	12	TECNICO I	0	\N
24	05	22	2	5	1	0	12	TECNICO II	0	\N
25	06	22	2	6	1	0	12	PROFESIONAL I	0	\N
1001	EMP751	22	1	1	1	0	\N	PROMOTOR	0	\N
27	08	22	2	8	1	0	12	PROFESIONAL III	0	\N
15	2	12	0	99	3	2	\N	VICEMINISTRA DE DESARROLLO PRODUCTIVO DE LA MUJER (E)	0	\N
16	3	12	0	99	3	2	\N	AUDITORA(O) INTERNA(O)	0	\N
17	4	12	0	99	3	2	\N	CONSULTORA O CONSULTOR JURIDICO	0	\N
51	01	31	4	1	1	2	\N	TRABAJADOR 1	0	\N
60	10	31	4	10	1	2	\N	TRABAJADOR 10	0	\N
52	02	31	4	2	1	2	\N	TRABAJADOR 2	0	\N
53	03	31	4	3	1	2	\N	TRABAJADOR 3	0	\N
54	04	31	4	4	1	2	\N	TRABAJADOR 4	0	\N
55	05	31	4	5	1	2	\N	TRABAJADOR 5	0	\N
56	06	31	4	6	1	2	\N	TRABAJADOR 6	0	\N
57	07	31	4	7	1	2	\N	TRABAJADOR 7	0	\N
58	08	31	4	8	1	2	\N	TRABAJADOR 8	0	\N
59	09	31	4	9	1	2	\N	TRABAJADOR 9	0	\N
108	EMP001	22	1	1	1	0	12	SECRETARIA	0	\N
109	EMP002	22	1	1	1	0	12	ASISTENTE (A)	0	\N
110	EMP003	22	1	1	1	0	12	ASISTENTA AL DESPACHO (COMISION DE SERVICIOS)	0	\N
111	EMP004	22	1	1	1	0	12	TRASLADO FISICO	0	\N
112	EMP005	22	1	1	1	0	\N	ASISTENTE (A)	0	\N
113	EMP006	22	1	1	1	0	12	ANALISTA	0	\N
114	EMP007	22	1	1	1	0	12	MENSAJERO MOTORIZADO	0	\N
115	EMP008	22	1	1	1	0	12	ASISTENTA ADMINISTRATIVA	0	\N
116	EMP009	22	1	1	1	0	12	ASISTENTE ADMINISTRATIVO	0	\N
117	EMP010	22	1	1	1	0	12	ASISTENTA ADMINISTRATIVA 	0	\N
118	EMP011	22	1	1	1	0	\N	ASISTENTE ADMINISTRATIVA	0	\N
121	EMP014	22	1	1	1	0	12	INSTRUCTORA DE FORMACIÓN	0	\N
122	EMP015	22	1	2	1	0	12	PROMOTOR	0	\N
123	EMP016	22	1	1	1	0	12	TRABAJADORA (O) SOCIAL	0	\N
124	EMP017	22	1	1	1	0	12	ANALISTA DE INFORMACION	0	\N
125	EMP018	22	1	2	1	0	12	PROMOTORA	0	\N
126	EMP019	22	1	3	1	0	12	PROMOTORA	0	\N
127	EMP020	22	1	2	1	0	\N	ASISTENTA ADMINISTRATIVA	0	\N
128	EMP021	22	1	2	1	0	12	ASISTENTE ADMINISTRATIVA	0	\N
129	EMP022	22	1	2	1	0	12	ASISTENTE ADMINISTRATIVO	0	\N
132	EMP025	22	1	2	1	0	\N	ASISTENTE	0	\N
133	EMP026	22	1	2	1	0	12	INSTRUCTORA DE FORMACIÓN	0	\N
135	EMP028	22	1	2	1	0	12	FORMADOR	0	\N
136	EMP029	22	1	2	1	0	12	ASISTENTA	0	\N
138	EMP031	22	1	3	1	0	12	SECRETARIA	0	\N
139	EMP032	22	1	3	1	0	12	ASISTENTE (A)	0	\N
140	EMP033	22	1	3	1	0	12	ASISTENTA	0	\N
141	EMP034	22	1	1	1	0	12	PROMOTOR (A)	0	\N
142	EMP035	22	1	3	1	0	12	FORMADORA (O)	0	\N
143	EMP036	22	1	3	1	0	12	ASISTENTA ADMINISTRATIVA	0	\N
221	EMP038	22	2	4	1	0	12	ASISTENTE ADMINISTRATIVO	0	\N
224	EMP041	22	2	4	1	0	12	JEFE DE ALMACEN	0	\N
225	EMP042	22	2	4	1	0	12	ANALISTA DE RECURSOS HUMANOS	0	\N
226	EMP043	22	1	4	1	0	\N	TECNICO EN SOPORTES 	0	\N
227	EMP044	22	1	4	1	0	12	TRABAJADORA SOCIAL	0	\N
228	EMP045	22	2	4	1	0	12	INSTRUCTORA DE FORMACIÓN	0	\N
229	EMP046	22	2	4	1	0	12	ASISTENTA	0	\N
230	EMP047	22	2	4	1	0	12	FACILITADORA	0	\N
231	EMP048	22	2	4	1	0	12	ADMINISTRADOR	0	\N
232	EMP049	22	2	4	1	0	12	INSTRUCTORA DE FORMACIÓN 	0	\N
233	EMP050	22	2	4	1	0	12	INSTRUCTORA DE FORMACIÓN 	0	\N
234	EMP051	22	1	4	1	0	\N	FORMADORA	0	\N
235	EMP052	22	2	4	1	0	12	ADMINISTRADORA	0	\N
236	EMP053	22	2	4	1	0	12	PROMOTOR (A)	0	\N
237	EMP054	22	2	4	1	0	12	INSTRUCTOR DE FORMACIÓN	0	\N
239	EMP056	22	2	5	1	0	12	PARQUERO DE ARMAS	0	\N
183	EMP057	22	1	6	1	0	\N	INGENIERA AGRONOMA	0	\N
184	EMP058	22	2	6	1	0	12	ASISTENTE (A)	0	\N
186	EMP060	22	2	6	1	0	\N	AUDITOR	0	\N
189	EMP063	22	2	6	1	0	12	ANALISTA	0	\N
190	EMP064	22	2	6	1	0	12	ASISTENTA TECNICA	0	\N
191	EMP065	22	2	6	1	0	12	ASESORA TECNICA	0	\N
192	EMP066	22	1	6	1	0	\N	ANALISTA DE APLICACIONES Y REDES	0	\N
193	EMP067	22	1	6	1	0	12	ANALISTA DE REDES 	0	\N
194	EMP068	22	2	6	1	0	12	INTERNACIONALISTA	0	\N
195	EMP069	22	2	6	1	0	12	TRABAJADORA SOCIAL	0	\N
196	EMP070	22	2	6	1	0	12	SOCIOLOGA	0	\N
197	EMP071	22	2	6	1	0	12	INSTRUCTORA DE FORMACIÓN	0	\N
198	EMP072	22	2	6	1	0	12	ADMINISTRADORA	0	\N
28	09	12	0	99	3	0	\N	DIRECTORA GENERAL DE LA OFICINA DE COMUNICACIÓN Y RELACIONES	0	\N
199	EMP073	22	2	6	1	0	12	TRABAJADOR SOCIAL	0	\N
81	HPCS2	32	1	2	1	0	12	COMISION DE SERVICIO	0	\N
188	EMP062	22	2	6	1	0	12	ABOGADO (A)	0	\N
187	EMP061	22	2	7	1	0	12	PERIODISTA	0	\N
202	EMP076	22	2	6	1	0	12	INSTRUCTORA DE FORMACIÓN	0	\N
204	EMP078	22	2	6	1	0	12	INSTRUCTORA DE FORMACIÓN 	0	\N
205	EMP079	22	2	6	1	0	12	ADMINISTRADOR	0	\N
208	EMP082	22	2	6	1	0	12	INSTRUCTORA  DE FORMACIÓN 	0	\N
209	EMP083	22	2	6	1	0	12	INSTRUCTOR DE FORMACIÓN	0	\N
210	EMP084	22	2	7	1	0	12	ADMINISTRADORA	0	\N
211	EMP085	22	2	7	1	0	12	TRABAJADOR SOCIAL	0	\N
212	EMP086	22	2	8	1	0	12	PERIODISTA	0	\N
213	EMP087	22	1	8	1	0	\N	FOTOGRAFA (COMISION DE SERVICIOS)	0	\N
214	EMP088	22	2	8	1	0	12	ARQUITECTA	0	\N
215	EMP089	22	1	8	1	0	\N	INGENIERA	0	\N
216	EMP090	22	1	8	1	0	12	ANALISTA	0	\N
218	EMP092	22	2	8	1	0	12	TRABAJADORA SOCIAL	0	\N
219	EMP093	22	2	8	1	0	12	ASISTENTA	0	\N
240	OBR001	31	4	1	1	0	\N	ENTRENADOR DEPORTIVO	0	\N
241	OBR002	31	4	1	1	0	\N	ASEADORA	0	\N
242	OBR-003	31	4	3	1	0	12	AYUDANTE DE SERVICIOS GENERALES	0	\N
243	OBR004	31	4	1	1	0	\N	ASEADOR	0	\N
244	OBR005	31	4	2	1	0	\N	MENSAJERO	0	\N
245	OBR006	31	4	2	1	0	\N	MENSAJERO 	0	\N
246	OBR007	31	4	3	1	0	\N	MENSAJERO MOTORIZADO	0	\N
247	OBR008	31	4	3	1	0	\N	AYUDANTE DE SERVICIOS GENERALES	0	\N
248	OBR009	31	4	4	1	0	12	CHOFER	0	\N
249	OBR010	31	4	5	1	0	\N	SEGURIDAD	0	\N
250	OBR011	31	4	7	1	0	\N	ESCOLTA	0	\N
32	12	22	2	9	1	0	12	COORDINADOR (A)	0	\N
80	HPCS1	32	3	1	0	0	12	HONORARIOS PROFESIONALES	0	\N
271	EMP095	31	1	1	1	0	12	RECEPCIONISTA	0	\N
272	EMP097	22	2	7	1	0	\N	AUDITORA	0	\N
281	EMP098	41	0	0	1	0	\N	JUBILADA	0	\N
378	EMP132	22	1	1	1	0	12	CAMAROGRAFO	0	\N
354	14	12	0	99	3	0	12	DIRECTORA GENERAL	0	\N
291	EMP099	22	2	9	1	0	12	ADJUNTA A LA CONSULTORIA JURIDICA	0	\N
356	EMP121	22	2	6	1	0	12	ASISTENTE TECNICO	0	\N
357	EMP122	22	1	1	1	0	12	ASISTENTE (A)	0	\N
292	12	12	0	99	1	0	12	DIRECTORA ESTADAL	0	\N
362	EMP123	22	1	4	1	0	12	ELECTRICISTA	0	\N
217	EMP091	22	2	6	1	0	12	ASESOR EN ASUNTOS INTERNACIONALES	0	\N
294	EMP100	22	2	6	1	0	12	ABOGADA	0	\N
293	EMP101	22	2	4	1	0	\N	ASISTENTE ADMINISTRATIVO (COMISION DE SERVICIO)	0	\N
295	EMP102	22	2	6	1	0	\N	FORMADORA 6 (COMISION DE SERVICIO)	0	\N
379	EMP133	22	1	1	1	0	\N	FOTOGRAFO	0	\N
296	13	12	0	99	1	0	\N	DIRECTORA ESTADAL	0	\N
298	EMP104	22	1	6	1	0	\N	FORMADORA 6	0	\N
299	EMP105	22	1	1	1	0	12	FORMADORA (O)	0	\N
300	EMP106	22	2	6	1	0	12	FORMADORA	0	\N
430	EMP134	22	2	9	1	0	12	COORDINADORA (E)	0	\N
313	EMP095	22	2	6	1	0	12	ENTRENADOR	0	\N
321	EMP107	22	2	6	1	0	12	ANALISTA DE SISTEMAS 	0	\N
323	EMP108	22	1	1	1	0	12	ANALISTA DE APLICACIONES Y REDES	0	\N
324	EMP109	22	2	4	1	0	12	TECNICO DE SISTEMAS	0	\N
431	EMP135	22	2	1	1	0	12	DISEÑADOR GRAFICO	0	\N
328	6	12	1	99	3	0	12	CONSULTORA JURIDICA (E)	0	\N
330	EMP110	22	2	8	1	0	12	ESPECIALISTA DE SEGURIDAD INFORMATICA	0	\N
331	EMP111	22	2	9	1	0	12	COORDINADORA DE DESARROLLO Y MANTENIMIENTO DE SISTEMAS	0	\N
332	EMP112	22	2	9	1	0	12	COORDINADOR ACADEMICO	0	\N
333	EMP113	22	2	7	1	0	12	ANALISTA	0	\N
335	EMP114	22	2	9	1	0	12	COORDINADOR ACADEMICO EFOSIG	0	\N
337	EMP115	22	2	9	1	0	12	ADJUNTA A LA DIRECCION DEL DESPACHO	0	\N
338	EMP116	22	2	6	1	0	12	FORMADOR	0	\N
363	3	31	4	7	1	0	12	ELECTRICISTA	0	\N
341	EMP117	22	2	4	1	0	12	EDITOR	0	\N
364	EMP124	22	1	3	1	0	12	ANALISTA	0	\N
346	EMP119	22	1	1	1	0	12	PROMOTOR (A)	0	\N
345	EMP118	22	1	1	1	0	12	TRAJADORA SOCIAL	0	\N
352	EMP120	22	2	4	1	0	12	ASISTENTE	0	\N
365	EMP125	22	2	9	1	0	12	COODINADOR (A) DE COMPRAS	0	\N
366	EMP126	22	2	9	1	0	12	COORDINADOR DE NOMINA	0	\N
367	EMP127	22	2	6	1	0	12	PERIODISTA	0	\N
368	EMP128	22	2	8	1	0	12	PERIODISTA	0	\N
369	EMP129	22	1	4	1	0	\N	ANALISTA	0	\N
441	133	22	2	6	1	0	12	POLITOLOGO	0	\N
371	690	32	1	1	0	0	12	ASESOR (A)	0	\N
376	EMP1230	22	1	1	1	0	12	PERIODISTA	0	\N
377	EMP131	22	1	1	1	0	\N	EDITOR	0	\N
442	15	12	0	99	2	0	\N	DIRECTORA DE LINEA DE EMPRESAS SOCIALISTAS-FEMINISTAS	0	\N
443	533	22	1	1	0	0	12	CAMAROGRÁFO	0	\N
981	EMP746	22	1	3	1	0	\N	REGISTRADOR DE BIENES 	0	\N
451	731	12	0	99	1	0	\N	DIRECTORA ESTADAL (E)	0	\N
461	739	32	4	4	4	0	12	ESCOLTA	0	\N
982	EMP747	22	1	1	1	0	\N	REGISTRADOR DE BIENES	0	\N
472	21	12	0	99	3	0	12	AUDITOR INTERNO (E)	0	\N
991	EMP748	22	1	1	1	0	\N	SOPORTE TECNICO	0	\N
992	EMP749	22	1	6	1	0	\N	FOTÓGRAFA	0	\N
481	755	22	2	7	1	0	12	ASISTENTE(A) EJECUTIVA DEL DESPACHO DE LA MINISTRA (E)	0	\N
995	EMP-750	22	2	6	1	0	\N	PRODUCTOR (A) AUDIOVISUAL	0	\N
14	1	12	0	99	4	2	\N	MINISTRA	0	\N
18	5	12	0	99	3	2	\N	DIRECTORA O DIRECTOR GENERAL	0	\N
446	674	22	1	1	0	0	12	POLITOLOGO	0	\N
482	756	31	4	9	1	0	12	SUPERVISOR DE ALMACEN	0	\N
484	EMP136	22	2	9	1	0	12	COORDINADOR DE SERVICIOS GENERALES	0	\N
722	EMP717	22	1	2	1	0	12	ARCHIVISTA	0	\N
723	EMP718	22	2	9	1	0	12	COORDINADOR (A) DEL AREA DE INVESTIGACION	0	\N
486	EMP137	22	2	9	1	0	12	TESORERO(A)	0	\N
487	OBR012	31	4	4	0	0	12	CHOFER	0	\N
1012	OBR014	31	1	7	1	0	\N	CHOFER	0	\N
493	EMP138	22	1	1	1	0	12	RECEPTORA DE CORRESPONDENCIA	0	\N
502	EMP037	22	2	9	1	0	12	COORDINADOR (A) DE CONTABILIDAD	0	\N
732	23	12	0	99	1	0	\N	DIR. GRAL. FORMACION SOCIALISTA Y LA IGUALDAD DE GENERO	0	\N
512	EMP139	22	2	9	1	0	12	COORDINADOR DE SEGURIDAD	0	\N
741	24	12	0	99	1	0	12	DIR. GRAL. PARTICIPACION PROTAGONICA Y PODER POPULAR	0	\N
513	EMP140	22	2	9	1	0	12	COORDINADOR(A) DE COMPRA	0	\N
751	EMP719	22	1	1	1	0	12	ASISTENTE (A) EJECUTIVO (A) (E)	0	\N
522	EMP141	12	1	99	1	0	12	DIRECTORA GENERAL	0	\N
1021	EMP752	22	1	1	1	0	\N	ASISTENTE DE PROTOCOLO	0	\N
524	354	12	1	99	1	0	12	DIRECTORA GENERAL	0	\N
531	EMP141	22	2	9	1	0	12	COORDINADOR (A) DE ORGANIZACION Y METODOS	0	\N
761	25	12	0	99	1	0	12	DIRECTOR (A) GENERAL DEL DESPACHO	0	\N
541	EMP142	22	2	9	1	0	12	COORDINADORA DE RELACIONES INSTITUCIONALES	0	\N
562	17	12	0	99	2	0	12	DIRECTORA DE LINEA DE SEGUIMIENTO Y CONTROL	0	\N
572	18	12	0	99	2	0	12	DIRECTORA DE LINEA DE DETERMINACIÓN	0	\N
573	19	12	0	99	2	0	12	DIRECTORA DE LINEA DE CONTROL POSTERIOR	0	\N
581	14	22	2	9	1	0	12	COORDINADOR(A) DE PRENSA	0	\N
591	OB002	31	4	2	1	0	12	AYUDANTE DE SERVICIOS GENERALES	0	\N
592	OBR-002	31	4	2	1	0	12	AYUDANTE DE SERVICIOS GENERALES	0	\N
602	EMP143	22	2	4	1	0	12	DISEÑADOR GRAFICO	0	\N
611	EMP144	22	2	9	1	0	12	COORDINADORA DE BIENES Y SERVICIOS	0	\N
763	EMP720	22	1	4	1	0	12	ASISTENTE (A) DE PROTOCOLO	0	\N
621	22	12	0	99	1	0	12	DIRECTORA(O) GENERAL (E) DE POLITICAS PUBLICAS	0	\N
622	EMP145	22	2	9	1	0	12	ASISTENTE(A) EJECUTIVA DEL DESPACHO DE LA MINISTRA	0	\N
631	EMP146	22	2	9	1	0	12	ASISTENTE(A) EJECUTIVO(A) DE LA VICEMINISTRA	0	\N
134	EMP027	22	1	2	1	0	12	INSTRUCTORA DE FORMACIÓN 	0	\N
238	EMP055	22	2	5	1	0	12	ANALISTA	0	\N
223	EMP040	22	2	4	1	0	12	ANALISTA	0	\N
137	EMP030	22	1	3	1	0	12	ASISTENTE ADMINISTRATIVA	0	\N
764	EMP721	22	1	1	1	0	12	PRODUCTORA AUDIOVISUAL	0	\N
119	EMP012	22	1	1	1	0	12	FORMADORA	0	\N
765	EMP722	22	0	9	1	0	12	COORDINADOR DE EVALUACION	0	\N
26	07	22	2	7	1	0	12	PROFESIONAL II	0	\N
130	EMP023	22	1	2	1	0	12	TECNICO EN SOPORTES 	0	\N
641	EMP48	22	1	4	1	0	12	ADMINISTRADOR(A)	0	\N
642	EMP084	22	1	7	1	0	12	ADMINISTRADOR(A)	0	\N
643	EMP064	22	1	5	1	0	12	ANALISTA	0	\N
661	EMP147	22	1	4	1	0	12	PERIODISTA	0	\N
670	EMP715	22	1	2	1	0	12	ASISTENTE	0	\N
681	OB005	31	4	5	1	0	12	AYUDANTE DE SERVICIOS GENERALES	0	\N
692	EMP716	22	1	1	1	0	12	SOCIOLOGO (A)	0	\N
702	EMP149	22	1	9	1	0	12	COORDINADOR DE TRANSPORTE	0	\N
711	EMP188	22	2	9	1	0	12	COORDINADOR (A) DEL DESPACHO	0	\N
771	EMP723	22	2	9	1	0	12	COORDINADOR (A) DE TRANSVERSALIDAD POLITICA	0	\N
772	EMP724	22	1	1	1	0	\N	ANALISTA (JEFA DE SALA)	0	\N
891	EMP736	22	1	9	1	0	12	COORDINADOR (A) DE ASUNTOS MULTILATERALES	0	\N
781	EMP725	22	1	9	1	0	\N	COORDINADORA DE ORGANIZACION Y PODER POPULAR	0	\N
790	EMP726	22	1	9	1	0	\N	COORDINADORA DE FORMACION	0	\N
791	EMP727	22	1	9	1	0	\N	COORDINADOR (A) DE PROCEDIMIENTOS	0	\N
793	EMP728	22	1	9	1	0	\N	COORDINADORA DE TRANSVERSALIDAD POLITICA	0	\N
801	EMP729	22	1	9	1	0	\N	COORDINADOR DE REGIONES	0	\N
820	26	12	0	99	1	0	12	DIRECTORA DE ORGANIZACIÓN SOCIO-PRODUCTIVA	0	\N
832	EMP730	22	0	9	1	0	12	COORDINADORA DE ESTADO CARABOBO	0	\N
842	EMP731	22	1	1	1	0	\N	RECEPCIONISTA	0	\N
860	27	12	0	99	1	0	\N	ADJUNTA A LA DIRECCIÓN DEL DESPACHO (E)	0	\N
861	EMP732	22	1	9	1	0	12	COORDINADORA ADMINISTRATIVA EFOSIG	0	\N
862	EMP733	22	1	6	1	0	12	FACILITADORA	0	\N
863	EMP734	22	1	1	1	0	\N	FACILITADOR (A)	0	\N
871	OBR013	31	4	5	1	0	12	COCINERO	0	\N
881	EMP735	22	1	5	1	0	12	ASISTENTE(A) ADMINISTRATIVO(A)	0	\N
901	EMP737	22	1	9	1	0	\N	COORDINADOR (A) DE ORDENACIÓN DE PAGOS	0	\N
902	EMP738	22	1	6	1	0	12	PROMOTORA	0	\N
914	EMP740	22	1	9	1	0	12	COORDINADOR DE DESARROLLO Y MANTENIMIENTO DE SISTEMAS (E)	0	\N
915	EMP741	22	1	9	1	0	12	COORDINADOR(A) DE PROCEDIMIENTOS (E)	0	\N
917	EMP742	22	1	9	1	0	12	ADJUNTO (A) A LA CONSULTORÍA JURÍDICA (E)	0	\N
921	EMP743	22	1	6	0	0	\N	ABOGADO (A)	0	\N
932	EMP744	22	1	6	1	0	\N	RECEPCIONISTA	0	\N
971	EMP143	12	1	99	1	0	\N	VICEMINISTRA PARA PROTECCIÓN DE LOS DERECHOS DE LA MUJER	0	\N
941	EMP745	22	1	1	1	0	\N	COORDINADOR (E) DEL ÁREA DE PRENSA	0	\N
951	EMP142	12	0	99	1	0	\N	DIRECTORA (E)	0	\N
961	EMP746	22	1	1	1	0	\N	ARCHIVOLOGA	0	\N
1291	EMP774	12	1	99	1	0	\N	DIRECTORA ESTADAL DE NUEVA ESPARTA	0	\N
1292	EMP775	12	1	99	1	0	\N	DIRECTORA ESTADAL DE SUCRE (E)	0	\N
1293	EMP829	22	1	9	1	0	\N	COORDINADORA DE BIENES PUBLICOS (E)	0	\N
1294	EMP776	12	1	99	1	0	\N	DIRECTORA ESTADAL GUARICO (E)	0	\N
1300	EMP777	12	1	99	1	0	\N	DIRECTORA ESTADAL MERIDA (E)	0	\N
1301	EMP778	12	1	99	1	0	\N	DIRECTORA GENERAL DE PARTICIPACION POPULAR PARA LA IGUAL (E)	0	\N
1252	EMP825	22	1	9	1	0	\N	COORDINADOR (E)	0	\N
1303	EMP830	22	1	9	1	0	\N	COORDINADORA DE SOPORTE TECNICO	0	\N
1033	EMP753	22	2	6	1	0	12	ASISTENTE (A) DE PROTOCOLO 	0	\N
1311	OBR017	31	1	1	1	0	\N	SEGURIDAD	0	\N
1035	EMP754	22	1	9	1	0	\N	COORDINADOR DE COMPRAS (E)	0	\N
1041	OBR015	31	4	7	1	0	12	ESCOLTA MOTORIZADO	0	\N
551	16	12	1	99	3	0	12	DIRECTOR GENERAL PLANES Y PROYECTOS PRODUCTIVOS ESPECIALES	0	\N
1312	EMP831	22	1	6	1	0	\N	ANALISTA DE PROYECTOS SOCIOPRODUCTIVOS	0	\N
1051	30	12	0	99	1	0	12	DIRECTORA GENERAL DE ESTRATEGIAS ECONÓMICAS Y FINANCIERAS	0	\N
1313	EMP832	22	1	9	1	0	\N	COORDINADORA DE MUJERES JOVENES	0	\N
1061	EMP755	22	1	9	1	0	12	COORDINADOR DE INFOR. Y PROMISIÓN DE LA PART. CIUDADANA	0	\N
1071	EMP756	22	1	1	1	0	\N	DIRECTOR DE LINEA 	0	\N
1072	EMP757	22	1	9	1	0	12	COORDINADOR (A) DE DESPACHO	0	\N
1281	EMP773	12	1	99	1	0	\N	DIRECTORA GENERAL (E)	0	\N
1073	EMP758	22	1	1	1	0	\N	REGISTRADOR DE BIENES	0	\N
1074	EMP759	22	1	99	1	0	\N	DIRECTORA DE LINEA DE PROGRAMAS DE PROTECCION	0	\N
1075	EMP759	12	1	99	1	0	\N	DIRECTORA DE LINEA DE PROGRAMAS DE PROTECCION	0	\N
1081	EMP780	22	1	9	1	0	\N	COORDINADORA DE POLITICA DE DEFENSA DE LOS DERECHOS SEXUAL	0	\N
1091	EMP781	22	1	5	1	0	\N	ASISTENTE (A)	0	\N
1111	EMP783	22	1	9	1	0	\N	COORDINADORA DE BIENESTAR DOCIAL (ENCARGADA)	0	\N
1121	EMP784	22	1	9	1	0	\N	COORDINADORA DE ASUNTOS MULTILATERALES (E)	0	\N
1122	EMP785	22	1	9	1	0	\N	COORDINADORA DE REGIONES	0	\N
1131	EMP786	22	1	5	1	0	\N	ASISTENTE (A) DE PROTOCOLO	0	\N
1132	EMP804	22	1	9	1	0	\N	COORDINADOR DE PLANIFICACIÓN	0	\N
29	10	12	0	99	2	0	\N	DIRECTOR (A) DE LINEA DE SEGUIMIENTO Y EVALUACION DE LA POLI	0	\N
1141	EMP805	22	1	9	1	0	\N	COORDINADORA DE INVESTIGACION	0	\N
33	13	22	2	10	1	0	12	COORDINADOR (A) ESTADAL	0	\N
1151	EMP806	22	1	9	1	0	\N	COORDINADORA DE ORDENACION DE PAGOS	0	\N
1152	EMP807	22	1	3	1	0	\N	CAMARÓGRAFO	0	\N
1153	EMP760	12	1	99	1	0	\N	DIRECTORA GENERAL DE LA OFICINA DE ATENCIÓN A LA CIUDADANÍA	0	\N
1161	EMP808	22	1	9	1	0	\N	COORDINADORA DE LA OFICINA DE ATENCIÓN A LA CIUDADANÍA	0	\N
1162	EMP761	12	1	99	1	0	\N	DIRECTOR GENERAL	0	\N
1171	OBR016	31	1	4	1	0	\N	ESCOLTA	0	\N
1172	EMP762	22	1	9	1	0	\N	COORDINADORA DE CONTABILIDAD (E)	0	\N
1181	EMP762	12	1	99	1	0	\N	DIRECTORA GENERAL DE INNOVACIÓN DE MODELOS PRODUCTIVOS	0	\N
1182	EMP809	22	1	9	1	0	\N	COORDINADORA DEL PROYECTO RED DE POSADAS TURÍSTICAS "MAMÁ RO	0	\N
1183	EMP810	22	1	9	1	0	\N	COORDINADOR DE REDES, TELECOMUNICACIONES Y SOPORTE	0	\N
1184	EMP811	22	1	4	1	0	\N	ANALISTA DE REDES	0	\N
1185	EMP812	22	1	6	1	0	\N	ANALISTA PROGRAMADOR	0	\N
1190	EMP813	22	1	4	1	0	\N	ANALISTA PROGRAMADOR	0	\N
1191	EMP814	22	1	9	1	0	\N	COORDINADORA DE SEGUIMIENTO DE PROYECTOS	0	\N
1200	EMP815	22	1	2	1	0	\N	CAMARÓGRAFO	0	\N
1201	EMP816	22	1	9	1	0	\N	COORDINADOR DE DESARROLLO (E)	0	\N
1202	EMP763	12	1	99	1	0	\N	DIRECTORA ESTADAL DE ZULIA	0	\N
1203	EMP764	12	1	99	1	0	\N	DIRECTORA ESTADAL DE MIRANDA	0	\N
1204	EMP817	22	1	99	1	0	\N	DIRECTOR DE LÍNEA	0	\N
1205	EMP765	12	1	99	1	0	\N	DIRECTOR DE LÍNEA	0	\N
1211	EMP766	12	1	99	1	0	\N	DIRECTORA DE LÍNEA	0	\N
1212	EMP817	22	1	9	1	0	\N	ASISTENTA EJECUTIVA	0	\N
1222	EMP818	22	1	1	1	0	\N	ASISTENTA	0	\N
1223	EMP819	22	1	99	1	0	\N	COORDINADORA DEL OBSERVATORIO DE MEDIOS "CARMEN CLEMENTE TRA	0	\N
1224	EMP820	22	1	9	1	0	\N	COORDINADORA DEL OBSERVATORIO DE MEDIOS "CARMEN CLEMENTE TRA	0	\N
1232	EMP821	22	1	9	1	0	\N	COORDINADORA DE PLANIFICACION Y CONTROL DE DESAROLLO PRODUCT	0	\N
1241	EMP768	12	1	99	1	0	\N	DIRECTORA GENERAL DE LA OFICINA DE PLANIFICACION Y PRESUPUES	0	\N
1242	EMP822	22	1	9	1	0	\N	ASISTENTA EJECUTIVA	0	\N
1243	EMP823	22	1	1	1	0	\N	ARCHIVISTA	0	\N
1250	EMP824	22	1	9	1	0	\N	COORDINADOR DE DESARROLLO	0	\N
1251	EMP769	12	1	99	1	0	\N	VICEMINISTRA DE IGUALDAD DE GENERO Y NO DISCRIMINACION (E)	0	\N
1253	EMP826	22	1	9	1	0	\N	COORDINADORA (E) DE PLANIFICACION Y CONTROL DE DESARRO PRODU	0	\N
1261	EMP769	12	1	99	1	0	\N	DIRECTORA GENERAL (E) DE LA OFICINA DE PLANIFICACION Y PRESU	0	\N
1262	EMP827	22	1	9	1	0	\N	COORDINADORA DE DICTAMENES Y ESTUDIOS	0	\N
1263	EMP828	22	1	9	1	0	\N	COORDINADORA DE SEGUIMIENTO DE PROYECTOS (E)	0	\N
1264	EMP770	12	1	99	1	0	\N	DIRECTORA GENERAL DE PROMOCION Y DESARROLLO PRODUCTIVO	0	\N
1271	EMP771	12	1	9	1	0	\N	ADJUNTO A LA CONSULTORIA JURIDICA	0	\N
1272	EMP772	12	1	99	1	0	\N	ADJUNTO A LA CONSULTORIA JURIDICA	0	\N
1321	OBR018	31	1	1	1	0	\N	ASEADORA	0	\N
1322	OBR019	31	1	3	1	0	\N	AYUDANTE DE SERVICIOS GENERALES	0	\N
1331	EMP779	12	1	99	1	0	\N	DIRECTORA ESTADAL DE YARACUY	0	\N
31	11	12	0	99	1	0	\N	DIRECTORA ESTADAL 	0	\N
1343	HPCS3	32	3	1	0	0	\N	INSPECTOR (A) DE GESTIÓN	0	\N
1351	EMP833	22	1	6	1	0	\N	ANALISTA DE PROYECTOS	0	\N
1352	EMP780	12	1	10	1	0	\N	COORDINADOR (A) ESTADAL	0	\N
1231	EMP767	12	1	99	1	0	\N	DIRECTORA ESTADAL DE COJEDES (E)	0	\N
1364	EMP784	12	1	10	1	0	\N	ASISTENTA EJECUTIVA	0	\N
1371	EMP785	12	1	10	1	0	\N	TESORERO (A)	0	\N
1361	EMP781	12	1	9	1	0	\N	COORDINADOR DE SEGURIDAD	0	\N
1362	EMP782	12	1	9	1	0	\N	COORDINADORA DE REGIONES	0	\N
1363	EMP783	12	1	9	1	0	\N	COORDINADOR (A)	0	\N
1372	EMP786	12	1	9	1	0	\N	COORDINADORA DE POLITICA DE DEFENSA DE LOS DERECHOS SEXUAL	0	\N
1373	EMP788	12	1	9	1	0	\N	COORDINADOR (A) DEL AREA DE INVESTIGACION	0	\N
1374	EMP789	12	1	9	1	0	\N	COORDINADORA DEL PROYECTO RED DE POSADAS TURISTICAS MAMA ROS	0	\N
1375	EMP790	12	1	9	1	0	\N	COORDINADORA ADMINISTRATIVA EFOSIG	0	\N
1376	EMP791	12	1	9	1	0	\N	COORDINADORA DE SEGUIMIENTO DE PROYECTOS (E)	0	\N
1380	EMP792	12	1	9	1	0	\N	COORDINADOR DE SERVICIOS GENERALES	0	\N
1381	EMP793	12	1	9	1	0	\N	COORDINADOR DE PLANIFICACION	0	\N
1383	EMP795	12	1	9	1	0	\N	COORDINADOR DE REDES, TELECOMUNICACIONES Y SOPORTE	0	\N
1604	EMP844	22	1	4	1	0	\N	PROGRAMADOR	0	\N
1385	EMP797	12	1	9	1	0	\N	COORDINADOR (A) DE ASUNTOS MULTILATERALES	0	\N
1386	EMP798	12	1	9	1	0	\N	COORDINADOR (A) DE TRANSVERSALIDAD POLITICA	0	\N
1387	EMP799	12	1	9	1	0	\N	COORDINADORA (E)	0	\N
1388	EMP800	12	1	9	1	0	\N	COORDINADORA DE LA OFICINA DE ATENCION A LA CIUDADANIA	0	\N
1551	EMO815	12	1	99	1	0	\N	ADJUNTA A LA DIRECTORA DE GESTION HUMANA (E)	0	\N
1552	EMP837	22	1	1	1	0	\N	TECNICO DE SOPORTE	0	\N
1440	EMP802	12	1	9	1	0	\N	COORDINADORA DE DICTAMENES Y ESTUDIOS	0	\N
1441	EMP803	12	1	9	1	0	\N	COORDINADOR (A) DE DESPACHO	0	\N
1442	EMP804	12	1	9	1	0	\N	COORDINADORA DEL OBSERVATORIO DE MEDIOS CARMEN CLEMENTE TRA 	0	\N
1443	EMP805	12	1	9	1	0	\N	COORDINADORA DE MUJERES JOVENES	0	\N
1382	EMP794	12	1	9	1	0	\N	COORDINADORA DE RELACIONES INSTITUCIONALES	0	\N
1553	EMP838	22	1	6	1	0	\N	PROGRAMADORA	0	\N
1461	EMP834	22	1	5	1	0	\N	ASISTENTA ADMINISTRATIVA	0	\N
1462	EMP807	12	1	99	1	0	\N	DIRECTORA ESTADAL CARABOBO (E)	0	\N
912	OBR020	31	1	1	1	0	\N	PARQUERO DE ARMAS	0	\N
1471	EMP835	22	1	7	1	0	\N	TECNICO DE SOPORTE	0	\N
1482	EMP145	12	1	9	1	0	\N	ASISTENTE(A) EJECUTIVA DEL DESPACHO DE LA MINISTRA	0	\N
1483	EMP139	12	1	9	1	0	\N	COORDINADOR DE SEGURIDAD	0	\N
1491	EMP013	12	1	9	1	0	\N	COORDINADORA DE PRENSA	0	\N
1493	EMO808	12	1	9	1	0	\N	DIRECTOR DE LÍNEA (E)	0	\N
1494	EMP808	12	1	99	1	0	\N	DIRECTOR DE LÍNEA (E)	0	\N
1501	EMP809	12	1	99	1	0	\N	DIRECTORA GENERAL DE LA OFICINA DE GESTIÓN HUMANA	0	\N
1511	EMP810	12	1	9	1	0	\N	COORDINADOR DE COMPRAS	0	\N
1521	EMP811	12	1	99	1	0	\N	DIRECTORA GENERAL DE LA OFICINA DE COORDINACIÓN TERRITORIAL	0	\N
1522	EMP812	12	1	99	1	0	\N	DIRECTORA GENERAL DE LA OFICINA DE TECNOLOGÍA DE LA INFORMAC	0	\N
1531	EMP836	22	1	7	1	0	\N	ABOGADO	0	\N
1532	EMP813	12	1	9	1	0	\N	COORDINADORA DEL PROGRAMA LUISA CACERES DE ARISMENDI PARA MU	0	\N
1389	EMP801	12	1	9	1	0	\N	COORDINADOR (A) DE DESARROLLO	0	\N
1540	EMP814	12	1	9	1	0	\N	COORDINADORA DE PRENSA (E)	0	\N
1451	EMP806	12	1	99	1	0	\N	DIRECTORA DE FORMACION E INVESTIGACION PARA LA IGUALDAD 	0	\N
471	20	12	1	99	1	0	\N	AUDITOR INTERNO (E) 	0	\N
1562	EMP839	22	1	6	1	0	\N	ASISTENTA ADMINISTRATIVA	0	\N
1384	EMP796	12	1	9	1	0	\N	COORDINADOR DE SOPORTE TECNICO	0	\N
1564	EMP815	12	1	9	1	0	\N	COORDINADOR DE TRANSPORTE (E)	0	\N
1565	OBR021	31	1	1	1	0	\N	AUXILIAR DE MANTENIMIENTO	0	\N
1566	OBR022	31	1	4	1	0	\N	CONDUCTOR	0	\N
1567	EMP840	22	1	6	1	0	\N	COMUNICADORA SOCIAL	0	\N
1569	EMP841	22	1	1	1	0	\N	AUXILIAR ADMINISTRATIVA	0	\N
222	EMP039	22	2	4	1	0	12	ASISTENTA ADMINISTRATIVA	0	\N
1605	EMP845	22	1	1	1	0	\N	ANALISTA (E)	0	\N
1572	EMP817	12	1	99	1	0	\N	DIRECTORA ESTADAL DE DELTA AMACURO (E)	0	\N
1574	EMP819	12	1	9	1	0	\N	COORDINADORA (E) DE FORMACIÓN	0	\N
1571	EMP816	12	1	10	1	0	\N	ASISTENTE (A) EJECUTIVO (A) (E)	0	\N
1581	EMP842	22	1	6	1	0	12	AUXILIAR ADMINISTRATIVA	0	\N
1591	EMP820	12	1	99	1	0	\N	DIRECTORA ESTADAL PORTUGUESA	0	\N
1592	EMP821	12	1	99	1	0	\N	DIRECTORA ESTADAL ARAGUA	0	\N
1593	EMP823	12	1	9	1	0	\N	COORDINADOR DE IMPULSO, FORMULACION Y ELABORACION DE PROYECT	0	\N
1594	EMP822	12	0	99	1	0	\N	DIRECTOR GENERAL DE GESTIÓN ADMINISTRATIVA	0	\N
1595	EMP824	12	1	9	1	0	\N	COORDINADOR DE REDES Y SERVIDORES	0	\N
1601	EMP825	12	1	99	1	0	\N	DIRECTORA ESTADAL MONAGAS	0	\N
1602	EMP826	12	1	99	1	0	\N	DIRECTORA ESTADAL APURE	0	\N
1573	EMP818	12	1	9	1	0	\N	COORDINADORA DE ANALISTAS DE REGIONES (E)	0	\N
1603	EMP843	22	1	1	1	0	\N	AUXILIAR EN COMUNICACION SOCIAL	0	\N
1610	EMP827	12	1	99	1	0	\N	DIRECTORA DE LINEA (E)	0	\N
1621	EMP846	22	1	1	1	0	\N	FORMADOR	0	\N
1631	EMP847	22	1	3	1	0	\N	AUXILIAR ADMINISTRATIVO	0	\N
1632	EMP828	12	1	99	1	0	\N	DIRECTORA GENERAL DE LA OFICINA DE INTEGRA Y ASUNTOS INT (E)	0	\N
1641	EMP829	12	1	9	1	0	\N	COORDINADOR DE SEGURIDAD (E)	0	\N
1651	EMP848	22	1	8	1	0	\N	ASISTENTE EN AUDITORIA	0	\N
1661	EMP830	12	1	99	1	0	\N	DIRECTORA ESTADAL TACHIRA (E)	0	\N
1662	EMP831	12	1	99	1	0	\N	DIRECTORA ESTADAL FALCON (E)	0	\N
1663	EMP832	12	1	99	1	0	\N	DIRECTORA ESTADAL COJEDES (E)	0	\N
1672	EMP833	12	1	99	1	0	\N	ADJUNTA AL DESPACHO DE LA MINISTRA	0	\N
1681	EMP834	12	1	99	1	0	\N	DIRECTORA ESTADAL DE BARINAS	0	\N
262	EMP094	22	2	8	1	0	12	ABOGADO (A)	0	\N
\.


--
-- TOC entry 7420 (class 0 OID 184161)
-- Dependencies: 207
-- Data for Name: cargoespecifica; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cargoespecifica (id_cargo_especifica, id_uel_especifica, id_registro_cargos, anio, porcentaje) FROM stdin;
\.


--
-- TOC entry 7421 (class 0 OID 184166)
-- Dependencies: 208
-- Data for Name: cargosplan; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cargosplan (id_cargos_plan, id_plan_personal, id_movimiento_cargo, cantidad_planificados, cantidad_realizados, cantidad_aprobados, cantidad_devueltos) FROM stdin;
\.


--
-- TOC entry 7422 (class 0 OID 184173)
-- Dependencies: 209
-- Data for Name: carrera; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY carrera (id_carrera, cod_carrera, nombre) FROM stdin;
1	001	ADMINISTRACION
2	002	ADMINISTRACION COMERCIAL
3	003	ADMINISTRACION Y GERENCIA
4	004	CIENCIAS ADMINISTRATIVAS Y GERENCIALES
5	005	ADMINISTRACION DE EMPRESAS
6	006	ADMINISTRACION MUNICIPAL
7	007	ADMINISTRACION PUBLICA
8	008	GERENCIA PUBLICA
9	009	GERENCIA DE OFICINAS
10	010	ADMINISTRACION DE COMPRAS
11	011	ADMINISTRACION DE PRESUPUESTO
12	012	PLANIFICACION
13	013	ADMINISTRACION:ORGANIZACION Y SISTEMAS
14	014	SECRETARIA
15	015	ADMINISTRACION:COMERCIO INTERNACIONAL
16	016	EDUCACION:GERENCIA
17	017	EDUCACION COMERCIAL
18	018	EDUCACION TECNICA MERCANTIL
19	019	PROCESOS GERENCIALES
20	020	INGENIERIA  AERONAUTICA
21	021	MANTENIMIENTO AERONAUTICO
22	022	INGENIERIA  MARITIMA
23	023	INGENIERIA MARITIMA: INSTALACIONES MARINAS
24	024	INGENIERIA MARITIMA: OPERACIONES
25	025	INGENIERIA NAVAL
26	026	TECNOLOGIA NAVAL
27	027	MECANICA NAVAL
28	028	CIENCIAS NAUTICAS
29	029	MARINA MERCANTE
30	030	CIENCIAS Y ARTES MILITARES: AERONAUTICA
31	031	ADMINISTRACION: TRANSPORTE MARITIMO
32	032	AERONAUTICA MILITAR: ABASTECIMIENTO
33	033	AERONAUTICA MILITAR: ARMAMENTO
34	034	AERONAUTICA MILITAR: ELECTRONICA
35	035	AERONAUTICA MILITAR: MECANICA AERONAUTICA
36	036	AERONAUTICA MILITAR: METALMECANICA
37	037	AERONAUTICA MILITAR: METEOROLOGIA
38	038	AERONAUTICA MILITAR: TRANSITO AEREO
39	039	CIENCIAS NAVALES: ELECTRICIDAD
40	040	CIENCIAS NAVALES: ELECTROMECANICA
41	041	CIENCIAS NAVALES: ELECTRONICA
42	042	CIENCIAS NAVALES: HIDROGRAFIA
43	043	CIENCIAS NAVALES: LOGISTICA
44	044	CIENCIAS NAVALES: PLANTAS NAVALES
45	045	INGENIERIA AGRONOMICA
46	046	INGENIERIA AGRONOMICA PRODUCCION VEGETAL
47	047	INGENIERIA AGRONOMICA : AGROINDUSTRIA RURAL
48	048	AGROTECNIA
49	049	AGROALIMENTACION
50	050	FILOTECNIA
51	051	ADMINISTRACION DE FINCAS
52	052	INGENIERIA AGROINDUSTRIAL
53	053	TECNOLOGIA AGROINDUSTRIAL
54	054	ADMINISTRACION: MERCADEO AGRICOLA
55	055	ECONOMIA AGRICOLA
56	056	MANTENIMIENTO DE MAQUINARIAS AGRICOLAS
57	057	EDUCACION RURAL
58	058	INGENIERIA DE PRODUCCION AGROPECUARIA
59	059	TECNOLOGIA AGROPECUARIA
60	060	ADMINISTRACION AGROPECUARIA
61	061	EDUCACION AGROPECUARIA
62	062	GERENCIA AGROINDUSTRIAL
63	063	TECNOLOGIA PRODUCCION AGROALIMENTARIA
64	064	ACUACULTURA
65	065	ACUICULTURA Y OCEANOGRAFIA
66	066	BIOLOGIA MARINA
67	067	BIOLOGIA PESQUERA
68	068	INGENIERIA PESQUERA
69	069	TECNOLOGIA PESQUERA
70	070	PESCA CONTINENTAL
71	071	NAVEGACION Y PESCA
73	073	INGENIERIA DE ALIMENTOS
74	074	TECNOLOGIA DE ALIMENTOS
75	075	CIENCIA Y CULTURA DE LA ALIMENTACION
76	076	PROCESAMIENTO Y CONTROL CALIDAD DE ALIMENTOS
77	077	NUTRICION Y DIETETICA
78	078	TECNOLOGIA DE PRODUCCION AGROALIMENTARIA
79	079	CERVECERIA
80	080	GESTION AMBIENTAL
81	081	INGENIERIA AMBIENTAL
82	082	INGENIERIA DEL AMBIENTE Y RECURSOS NATURALES RENOVABLES
83	083	INGENIERIA DEL AMBIENTE  
84	084	INGENIERIA DEL AMBIENTE Y RECURSOS NATURALES
85	085	TECNOLOGIA AMBIENTAL
86	086	INGENIERIA DE RECURSOS NATURALES RENOVABLES
87	087	TECNOLOGIA DE RECURSOS NATURALES RENOVABLES
88	088	ESTUDIOS AMBIENTALES
89	089	ANIMACION AMBIENTAL
90	090	GERENCIA DEL AMBIENTE
91	091	ARQUITECTURA
92	092	URBANISMO
93	093	DISEÑO OBRAS CIVILES
94	094	DISEÑO INTERIOR
95	095	DISEÑO AMBIENTAL: DISEÑO ESPACIOS INTERIORES
96	096	EDUCACION: DIBUJO TECNICO
97	097	ARTES
98	098	ARTES PLASTICAS
99	099	ARTES VISUALES
100	100	EDUCACION: ARTES PLASTICAS
101	101	LETRAS: HISTORIA DEL ARTE
102	102	HISTORIA DE LAS ARTES PLASTICAS
103	103	TEATRO: DOCENCIA
104	104	TEATRO: ACTUACION
105	105	TEATRO: DISEÑO TEATRAL
106	106	TEATRO: GERENCIA Y PRODUCCION TEATRAL
107	107	EDUCACION: ARTES ESCENICAS
108	108	DANZA: DOCENCIA DANZA CLASICA
109	109	DANZA: DOCENCIA DANZA CONTEMPORANEA
110	110	DANZA: INTERPRETE DANZA CLASICA
111	111	DANZA: INTERPRETE DANZA CONTEMPORANEA
112	112	MEDIOS AUDIOVISUALES
113	113	CIENCIAS AUDIOVISUALES Y FOTOGRAFIA
114	114	TECNOLOGIA AUDIOVISUAL
115	115	COMUNICACION SOCIAL: PERIODISMO AUDIOVISUAL
116	116	EDUCACION: CIENCIA Y TECNOLOGIA DE LA INSTRUCCION
117	117	BIOLOGIA
118	118	EDUCACION: BIOLOGIA
119	119	EDUCACION: BIOLOGIA Y QUIMICA
120	120	EDUCACION: CIENCIAS BIOLOGICAS
123	123	BIOANALISIS
124	124	GEOGRAFIA
125	125	EDUCACION: GEOGRAFIA
126	126	EDUCACION: GEOGRAFIA E HISTORIA
127	127	EDUCACION: GEOGRAFIA Y CIENCIAS DE LA TIERRA
128	128	HISTORIA  
129	129	EDUCACION: CIENCIAS DE LA TIERRA
130	130	EDUCACION: HISTORIA
132	132	EDUCACION: CIENCIAS SOCIALES
133	133	SOCIOLOGIA
134	134	ANTROPOLOGIA
135	135	ESTUDIOS LIBERALES
136	136	GESTION SOCIAL DEL DESARROLLO LOCAL
137	137	COMERCIO EXTERIOR
138	138	MERCADEO: COMERCIO EXTERIOR
139	139	ADMINISTRACION: COMERCIO EXTERIOR
140	140	ADMINISTRACION DE ADUANAS
141	141	ADMINISTRACION ADUANERA
142	142	ADMINISTRACION: COMERCIO INTERNACIONAL
143	143	HACIENDA PUBLICA: ADUANAS
144	144	COMERCIO INTERNACIONAL
145	145	BANCA Y FINANZAS:TRANSACCIONES INTERNACIONALES
146	146	INGENIERIA EN COMPUTACION
147	147	COMPUTACION
148	148	EDUCACION: COMPUTACION
149	149	INGENIERIA EN INFORMATICA
150	150	ADMINISTRACION: INFORMATICA
151	151	INGENIERIA DE SISTEMAS
152	152	SISTEMAS DE INFORMACION
153	153	ANALISIS DE SISTEMAS
154	154	ANALISIS Y DISEÑO DE SISTEMAS
155	155	EDUCACION: INFORMATICA
156	156	EDUCACION: INFORMATICA Y MATEMATICA
157	157	PROGRAMACION
158	158	COMUNICACION SOCIAL 
159	159	COMUNICACION SOCIAL: PERIODISMO IMPRESO
161	161	COMUNICACION SOCIAL: PUBLICIDAD Y RELACIONES PUBLICAS
162	162	COMUNICACION SOCIAL: DESARROLLO SOCIAL
163	163	COMUNICACION SOCIAL ORGANIZACIONAL
165	165	RELACIONES PUBLICAS
166	166	COMUNICACION SOCIAL: COMUNICACIONES CORPORATIVAS
167	167	INGENIERIA CIVIL
168	168	CONSTRUCCION CIVIL
169	169	OBRAS CIVILES
170	170	TECNOLOGIA DE LA CONSTRUCCION CIVIL
171	171	INGENIERIA EN MANTENIMIENTO DE OBRAS
172	172	MANTENIMIENTO DE EDIFICACIONES
173	173	INGENIERIA DE ADMINISTRACION DE OBRAS
174	174	CONTADURIA
175	175	CONTADURIA PUBLICA
176	176	CONTADURIA Y FINANZAS
177	177	ADMINISTRACION: CONTABILIDAD Y FINANZAS
178	178	ADMINISTRACION: CONTADURIA
179	179	ADMINISTRACION: CONTABILIDAD DE COSTOS
180	180	CONTABILIDAD COMPUTARIZADA
181	181	CONTABILIDAD Y FINANZAS
182	182	ADMINISTRACION: PRESUPUESTO
183	183	ADMINISTRACION DE RECURSOS FISICOS Y FINANCIEROS
185	185	ADMINISTRACION DE RECURSOS MATERIALES Y FINANCIEROS
186	186	EDUCACION: DEPORTES
187	187	EDUCACION: CIENCIA DEL DEPORTE
188	188	EDUCACION FISICA
189	189	EDUCACION FISICA Y DEPORTES
190	190	EDUCACION FISICA, DEPORTES Y RECREACION
192	192	RECREACION
193	193	EDUCACION: CULTURA FISICA Y RECREACION
194	194	DISEÑO GRAFICO
195	195	DISEÑO GRAFICO PUBLICITARIO
196	196	DISEÑO INDUSTRIAL
197	197	INGENIERO DE DISEÑO INDUSTRIAL
198	198	DISEÑO DE MODAS
199	199	DISEÑO DE JOYAS Y FANTASIAS
200	200	DISEÑO TEXTIL
201	201	DISEÑO AMBIENTAL 
202	202	ADMINISTRACION DE EMPRESAS DE DISEÑO
204	204	BIBLIOTECOLOGIA Y ARCHIVOLOGIA
205	205	INFORMACION Y DOCUMENTACION
206	206	ECONOMIA  
208	208	ECONOMIA EMPRESARIAL
209	209	ECONOMIA DE LA INDUSTRIA FORESTAL
210	210	EDUCACION
211	211	EDUCACION: CIENCIAS PEDAGOGICAS
212	212	PEDAGOGIA SOCIAL
213	213	EDUCACION BASICA INTEGRAL
214	214	EDUCACION INTEGRAL
215	215	EDUCACION PREESCOLAR
216	216	EDUCACION: CIENCIAS Y TECNOLOGIA DE LA EDUCACION
217	217	EDUCACION PARA EL TRABAJO
219	219	EDUCACION: ARTES INDUSTRIALES
220	220	EDUCACION: GERENCIA DE PROCESOS EDUCATIVOS
221	221	PSICOPEDAGOGIA
222	222	EDUCACION ESPECIAL
223	223	EDUCACION ESPECIAL: DIFICULTADES DE APRENDIZAJE
224	224	EDUCACION ESPECIAL: RETARDO MENTAL
225	225	EDUCACION ESPECIAL: DEFICIENCIAS AUDITIVAS
226	226	EDUCACION DE NIÑOS SORDOS Y TRASTORNOS DE LENGUAJE
227	227	TERAPIA DE LENGUAJE
229	229	INGENIERIA ELECTRICA
230	230	ELECTRICIDAD
231	231	TECNOLOGIA ELECTRICA
232	232	ELECTROTECNIA
233	233	MANTENIMIENTO DE EQUIPOS ELECTRICOS
234	234	MANTENIMIENTO DE EQUIPOS ELECTROMECANICOS
235	235	EDUCACION: ELECTRICIDAD INDUSTRIAL
236	236	EDUCACION INDUSTRIAL: ELECTRICA
239	239	INSTALACIONES ELECTRICAS
240	240	INGENIERIA ELECTRONICA
241	241	INGENIERIA ELECTRONICA EN COMPUTACION
242	242	INGENIERIA ELECTRONICA: INSTRUMENTACION Y CONTROL
243	243	INGENIERIA ELECTRONICA: TELECOMUNICACIONES
244	244	INGENIERIA DE REDES Y COMUNICACIONES
245	245	INGENIERIA EN TELECOMUNICACIONES
246	246	INGENIERIA DE TELECOMUNICACIONES
247	247	CONTROL DE PROCESOS Y TELECOMUNICACIONES
248	248	ELECTRONICA
249	249	ELECTRONICA INDUSTRIAL
251	251	TECNOLOGIA DE FABRICACION ELECTRONICA
254	254	INSTRUMENTACION
255	255	CONTROLES AUTOMATICOS
256	256	ELECTRONICA: INSTRUMENTACION Y CONTROL
257	257	REDES Y COMUNICACIONES
258	258	FILOSOFIA
259	259	EDUCACION: FILOSOFIA
260	260	BANCA Y FINANZAS 
261	261	ADMINISTRACION BANCARIA
262	262	ADMINISTRACION: BANCA Y FINANZAS
263	263	ADMINISTRACION BANCARIA Y FINANCIERA
264	264	GERENCIA FINANCIERA
265	265	FISICA
266	266	EDUCACION: FISICA Y MATEMATICA
267	267	EDUCACION: FISICA  
268	268	EDUCACION CIENCIAS FISICO NATURALES
269	269	INGENIERIA FORESTAL
270	270	INGENIERIA EN INDUSTRIA FORESTAL
271	271	TECNOLOGIA EN INDUSTRIA FORESTAL
272	272	TECNOLOGIA SUPERIOR FORESTAL 
273	273	ECONOMIA FORESTAL
274	274	TECNOLOGIA AGROFORESTAL
276	276	INGENIERIA GEOLOGICA
277	277	INGENIERIA GEODESICA
278	278	INGENIERIA GEOFISICA
279	279	INGENIERIA HIDROMETEOROLOGICA
280	280	INGENIERIA DE MINAS
281	281	TECNOLOGIA MINERA
282	282	GEOLOGIA
283	283	GEOLOGIA Y MINAS
284	284	MINERIA
285	285	GEOQUIMICA
286	286	TOPOGRAFIA
291	291	SEGURIDAD INDUSTRIAL
292	292	SEGURIDAD E HIGIENE INDUSTRIAL
293	293	HIGIENE Y SEGURIDAD INDUSTRIAL
294	294	SEGURIDAD E HIGIENE INDUSTRIAL: RADIOLOGIA
295	295	GERENCIA INDUSTRIAL
296	296	MANEJO DE EMERGENCIA Y ACCION CONTRA DESASTRES
297	297	TECNOLOGIA BOMBERIL
298	298	TECNOLOGIA DE INCENDIOS
299	299	IDIOMA: INGLES
300	300	IDIOMAS MODERNOS
301	301	EDUCACION: IDIOMAS MODERNOS
302	302	EDUCACION: FRANCES
303	303	EDUCACION: INGLES
304	304	EDUCACION: LENGUAS MODERNAS
305	305	EDUCACION: LENGUAS EXTRANJERAS
306	306	EDUCACION INTERCULTURAL BILINGUE
307	307	INGENIERIA INDUSTRIAL
308	308	INGENIERIA DE MANTENIMIENTO INDUSTRIAL
309	309	MANTENIMIENTO INDUSTRIAL
310	310	INGENIERIA DE MOLINERIA
311	311	PRODUCCION INDUSTRIAL
312	312	TECNOLOGIA EN PROCESOS INDUSTRIALES
313	313	TECNOLOGIA EN SISTEMAS INDUSTRIALES
314	314	SERVICIOS INDUSTRIALES
315	315	INGENIERIA EN DISEÑO INDUSTRIAL
316	316	LOGISTICA INDUSTRIAL
319	319	TECNOLOGIA TEXTIL
320	320	CONTROL DE CALIDAD
321	321	CALIDAD INTEGRAL
322	322	ADMINISTRACION INDUSTRIAL
328	328	DERECHO
329	329	DERECHO CANONICO
330	330	CRIMINOLOGIA
331	331	ESTUDIOS POLITICOS Y ADMINISTRATIVOS
332	332	CIENCIAS POLITICAS
333	333	ESTUDIOS INTERNACIONALES
335	335	LETRAS
336	336	LETRAS HISPANICAS
337	337	LETRAS: LENGUA Y LITERATURA HISPANOAMERICANA Y VENEZOLANA
338	338	LETRAS: LENGUA Y LITERATURA MODERNA
339	339	LETRAS: LENGUA Y LITERATURA CLASICA
340	340	LETRAS: HISTORIA DEL ARTE
341	341	EDUCACION: CASTELLANO Y LITERATURA
342	342	EDUCACION: LENGUA, LITERATURA Y LATIN
343	343	EDUCACION: LENGUA Y LITERATURA
345	345	INGENIERIA DE MANTENIMIENTO MECANICO
350	350	MANTENIMIENTO DE EQUIPOS MECANICOS
353	353	ADMINISTRACION DE SISTEMAS DE MANTENIMIENTO
354	354	ADMINISTRACION DE MANTENIMIENTO
355	355	INGENIERIA DE MANTENIMIENTO DE OBRAS
356	356	TECNOLOGIA DE MANTENIMIENTO
357	357	MANTENIMIENTO DE VIAS FERREAS
358	358	MATEMATICA
359	359	MATEMATICA:PROBABILIDAD Y ESTADISTICA
360	360	MATEMATICA: ANALISIS NUMERICO
361	361	MATEMATICA Y ESTADISTICA COMPUTACIONAL
362	362	EDUCACION: MATEMATICA
363	363	EDUCACION FISICA Y MATEMATICA
364	364	CIENCIAS ESTADISTICAS
365	365	TECNOLOGIA EN ESTDISTICA
366	366	CIENCIAS ACTUARIALES
368	368	INGENIERIA MECANICA
369	369	MECANICA AUTOMOTRIZ
370	370	MECANICA INDUSTRIAL
372	372	MECANICA TERMICA
373	373	TECNOLOGIA EN FABRICACION MECANICA
374	374	EDUCACION: MECANICA INDUSTRIAL
382	382	PUBLICIDAD Y MERCADEO
383	383	MERCADEO
385	385	MERCADEO: PUBLICIDAD
386	386	MERCADOTECNIA
387	387	ADMINISTRACION: MERCADEO  
388	388	ADMINISTRACION: MERCADOTECNIA
389	389	ADMINISTRACION DE VENTAS
390	390	INGENIERIA DE MATERIALES
391	391	INGENIERIA METALURGICA
392	392	METALURGIA
393	393	METALURGIA Y SIDERURGIA
394	394	METALURGIA Y CIENCIAS DE LOS MATERIALES
395	395	TECNOLOGIA DE LOS MATERIALES
396	396	POLIMEROS
398	398	INGENIERIA MARITIMA
399	399	CIENCIAS Y ARTES MILITARES: TERRESTRE
401	401	CIENCIAS Y ARTES MILITARES: GUARDIA NACIONAL
402	402	CIENCIAS Y ARTES MILITARES: SUB-OFICIAL GUARDIA NACIONAL
403	403	CIENCIAS Y ARTES MILITARES: SUB-OFICIAL EJERCITO
404	404	CIENCIAS Y ARTES MILITARES: CIENCIAS NAVALES
405	405	CIENCIAS Y ARTES MILITARES: COMUNICACIONES
406	406	CIENCIAS Y ARTES MILITARES: ELECTRONICA
420	420	SUB-TENIENTE DE AVIACION: ADMINISTRACION
421	421	SUB-TENIENTE DE AVIACION: LOGISTICA
422	422	SUB-TENIENTE DE AVIACION: OPERACIONES AEREAS
423	423	MUSICA
424	424	MUSICOLOGIA
425	425	ETNOMUSICOLOGIA
426	426	COMPOSICION
427	427	CANTO LIRICO
428	428	DIRECCION CORAL
429	429	DIRECCION ORQUESTAL
430	430	EJECUCION INSTRUMENTAL: CUERDAS
431	431	EJECUCION INSTRUMENTAL: GUITARRA
432	432	EJECUCION INSTRUMENTAL: VIENTO
433	433	EJECUCION INSTRUMENTAL: PIANO
434	434	EDUCACION MUSICAL
437	437	INTERPRETACION DE DANZA CLASICA
438	438	INTERPRETACION DE DANZA CONTEMPORANEA
439	439	INGENIERIA DE PRODUCCION ANIMAL
440	440	INGENIERIA AGRONOMICA DE PRODUCCION ANIMAL
441	441	TECNOLOGIA PECUARIA
442	442	ZOOTECNIA
443	443	MEDICINA VETERINARIRA
444	444	ASISTENTE VETERINARIO
447	447	PRODUCCION AGROPECUARIA
450	450	ADMINISTRACION DE EMPRESAS AGROPECUARIAS
451	451	ADMINISTRACION Y PLANIFICACION DE EMPRESAS AGROPECUARIAS
453	453	INGENIERIA DE GAS
454	454	INGENIERIA DE PETROLEO
455	455	PETROLEO: EXPLORACION
456	456	PETROLEO: PERFORACION
457	457	PETROLEO: PRODUCCION
458	458	PETROLEO: REFINACION
459	459	TECNOLOGIA PETROLERA
460	460	PROCESOS DE REFINACION DE PETROLEO
461	461	ADMINISTRACION DE EMPRESAS PETROLERAS
462	462	HIDROCARBUROS
463	463	ADMINISTRACION: HIDROCARBUROS
464	464	TECNOLOGIA DEL GAS
465	465	CIENCIAS POLICIALES
466	466	POLICIAPREVENTIVA
467	467	CRIMINALISTICA
469	469	PSICOLOGIA
470	470	EDUCACION:ORIENTACION
471	471	PUBLICIDAD  
473	473	PUBLICIDAD Y RELACIONES PUBLICAS
476	476	INGENIERIA QUIMICA
477	477	QUIMICA
478	478	PROCESOS QUIMICOS
479	479	QUIMICA INDUSTRIAL
481	481	EDUCACION: QUIMICA
483	483	METALURGIA: PROCESOS QUIMICOS
485	485	RECURSOS HUMANOS
486	486	GERENCIA DE RECURSOS HUMANOS
487	487	ADMINISTRACION DE RECURSOS HUMANOS
488	488	ADMINISTRACION DE PERSONAL
489	489	RELACIONES INDUSTRIALES
490	490	ADMINISTRACION: RELACIONES INDUSTRIALES
491	491	TEOLOGIA
492	492	EDUCACION: TEOLOGIA
493	493	EDUCACION: CIENCIAS DE LA RELIGION
494	494	EDUCACION: PEDAGOGIA RELIGIOSA
495	495	HISTORIA ECLESIASTICA
497	497	COMUNICACION SOCIAL: PASTORAL
499	499	ENFERMERIA
500	500	CITOTECNOLOGIA
501	501	GERONTOLOGIA
502	502	FISIOTERAPIRA
503	503	REHABILITACION: FISIOTERAPIA
504	504	ELECTROMEDICINA
505	505	EMERGENCIA PRE-HOSPITALARIA
506	506	IMAGENOLOGIA
507	507	INSTRUMENTACION BIOMEDICA
508	508	REHABILITACION: TERAPIA OCUPACIONAL
509	509	EDUCACION: FISICA, DEPORTES Y RECREACION PARA PERSONAS
510	510	RADIOLOGIA
511	511	RADIODIAGNOSTICO
512	512	TECNOLOGIA CARDIOPULMONAR
513	513	FARMACIA
514	514	INSPECCION SANITARIA
515	515	ADMINISTRACION DE SERVICIOS DE LA SALUD
516	516	ADMINISTRACION DE SALUD Y HOSPITALES
517	517	GERENCIA DE PROCESOS HOSPITALARIOS
518	518	ESTADISTICAS DE LASALUD
519	519	INFORMACION DE LA SALUD
520	520	ADMINISTRACION DE HOSPITALES
523	523	ODONTOLOGIA
524	524	SALUD BUCAL: MECANICA DENTAL
525	525	SALUD BUCAL: HIGIENE BUCAL
526	526	TECNOLOGIA RADIOLOGICA MEDICA
527	527	SEGUROS
528	528	SEGUROS MERCANTILES
529	529	RIESGOS Y SEGUROS
530	530	ADMINISTRACION DE EMPRESAS: RIESGOS Y SEGUROS
532	532	TRABAJO SOCIAL
533	533	PREVENCION Y READAPTACION SOCIAL
534	534	ASISTENCIA ESPECIALIZADA
535	535	PENITENCIARISMO
537	537	ADMINISTRACION:TRANSPORTE Y DISTRIBUCION DE BIENES
538	538	ADMINISTRACION DEL TRANSPORTE
541	541	HACIENDA PUBLICA: RENTA Y ADUANAS
542	542	RENTAS
543	543	CIENCIAS FISCALES: GASTO PUBLICO
544	544	GESTION FISCAL Y TRIBUTARIA
545	545	ADMINISTRACION TRIBUTARIA
546	546	ADMINISTRACION: FISCAL Y TRIBUTARIA
547	547	TURISMO
548	548	ECOTURISMO
549	549	GESTION HOTELERA
550	550	EMPRESAS TURISTICAS
551	551	EMPRESAS DE ALOJAMIENTO TURISTICO
552	552	ADMINISTRACION DE TURISMO
553	553	ADMINISTRACION DE EMPRESAS TURISTICAS
554	554	HOTELERIA
555	555	HOTELERIA Y SERVICIOS DE LA HOSPITABILIDAD
556	556	ADMINISTRACION HOTELERA
557	557	ADMINISTRACION DE EMPRESAS HOTELERAS
558	558	GERENCIA HOTELERA
559	559	GERENCIA DE CONDOMINIO
561	561	COMERCIO INFORMAL
562	562	NEGOCIOS
228	228	EDUCACION FISICA, DEP. Y REC. PARA PERSONAS CON NECESIDADES ESP.
445	445	MEDICINA
446	446	ADMINISTRACION FINANCIERA
\.


--
-- TOC entry 7423 (class 0 OID 184176)
-- Dependencies: 210
-- Data for Name: carreraarea; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY carreraarea (id_carrera_area, id_carrera, id_area_carrera) FROM stdin;
1	1	1
2	2	1
3	3	1
4	4	1
5	5	1
6	6	1
7	7	1
8	8	1
9	9	1
10	10	1
11	11	1
12	12	1
13	13	1
14	14	1
15	15	1
16	16	1
17	17	1
18	18	1
19	18	17
20	19	1
21	20	2
22	21	2
23	21	36
24	22	2
25	23	2
26	24	2
27	25	2
28	26	2
29	27	2
30	27	38
31	28	2
32	29	2
33	30	2
34	30	41
35	31	2
36	31	54
37	32	2
38	32	41
39	33	2
40	33	41
41	34	2
42	34	25
43	34	41
44	35	2
45	35	38
46	35	41
47	36	2
48	36	38
49	36	40
50	36	41
51	37	2
52	37	30
53	37	41
54	38	2
55	38	41
56	38	54
57	39	2
58	39	24
59	39	41
60	40	2
61	40	24
62	40	38
63	40	41
64	41	2
65	41	25
66	41	41
67	42	2
68	42	30
69	42	41
70	43	2
71	43	33
72	43	41
73	44	2
74	44	33
75	44	41
76	45	3
77	46	3
78	47	3
79	48	3
80	49	3
81	49	5
82	50	3
83	51	3
84	52	3
85	52	33
86	53	3
87	53	33
88	54	3
89	55	3
90	55	21
91	56	3
92	56	36
93	56	38
94	57	3
95	57	22
96	57	43
97	58	3
98	58	43
99	59	3
100	59	43
101	60	3
102	60	43
103	61	3
104	61	43
105	62	3
106	62	33
107	63	3
108	64	4
109	65	4
110	66	4
111	66	11
112	67	4
113	67	11
114	68	4
115	69	4
116	70	4
117	71	4
118	73	5
119	74	5
120	75	5
121	76	5
122	77	5
123	77	51
124	78	5
125	79	5
126	79	33
127	80	6
128	81	6
129	82	6
130	83	6
131	84	6
132	85	6
133	86	6
134	87	6
135	88	6
136	89	6
137	90	6
138	91	7
139	92	7
140	93	7
141	94	7
142	95	7
143	96	7
144	96	19
145	97	8
146	98	8
147	99	8
148	100	8
149	101	8
150	102	8
151	102	12
152	103	9
153	104	9
154	105	9
155	106	9
156	107	9
157	108	9
158	108	42
159	109	9
160	109	42
161	110	9
162	111	9
163	112	10
164	113	10
165	114	10
166	115	10
167	115	15
168	116	10
169	117	11
170	118	11
171	119	11
172	119	48
173	120	11
174	123	11
175	123	51
176	124	12
177	125	12
178	126	12
179	127	12
180	127	30
181	128	12
182	129	12
183	129	30
184	130	12
185	132	12
186	133	12
187	134	12
188	135	12
189	135	34
190	136	12
191	136	53
192	137	13
193	138	13
194	138	39
195	139	13
196	140	13
197	141	13
198	142	13
199	143	13
200	144	13
201	145	13
202	146	14
203	147	14
204	148	14
205	149	14
206	150	14
207	151	14
208	152	14
209	153	14
210	154	14
211	155	14
212	156	14
213	157	14
214	158	15
215	159	15
216	161	15
217	161	47
218	162	15
219	163	15
220	165	15
221	166	15
222	167	16
223	168	16
224	169	16
225	170	16
226	171	16
227	172	16
228	172	36
229	173	16
230	174	17
231	175	17
232	176	17
233	177	17
234	178	17
235	179	17
236	180	17
237	181	17
238	182	17
239	183	17
240	185	17
241	186	18
242	187	18
243	188	18
244	189	18
245	190	18
246	192	18
247	192	56
248	193	18
249	194	19
250	195	19
251	195	47
252	196	19
253	197	19
254	198	19
255	199	19
256	200	19
257	201	19
258	202	19
259	204	20
260	205	20
261	206	21
262	208	21
263	209	21
264	209	29
265	210	22
266	211	22
267	212	22
268	213	22
269	214	22
270	215	22
271	216	22
272	217	22
273	219	22
274	220	22
275	221	23
276	222	23
277	223	23
278	224	23
279	225	23
280	226	23
281	227	23
282	229	24
283	230	24
284	231	24
285	232	24
286	233	24
287	233	36
288	234	24
289	234	36
290	234	38
291	235	24
292	235	25
293	236	24
294	239	24
295	240	25
296	241	25
297	242	25
298	243	25
299	244	25
300	245	25
301	246	25
302	247	25
303	248	25
304	249	25
305	251	25
306	254	25
307	255	25
308	256	25
309	257	25
310	258	26
311	259	26
312	260	27
313	261	27
314	262	27
315	263	27
316	264	27
317	265	28
318	266	28
319	267	28
320	268	28
321	268	37
322	269	29
323	270	29
324	271	29
325	272	29
326	273	29
327	274	29
328	276	30
329	277	30
330	278	30
331	279	30
332	280	30
333	281	30
334	282	30
335	283	30
336	284	30
337	285	30
338	285	48
339	286	30
340	291	31
341	292	31
342	293	31
343	294	31
344	295	31
345	295	33
346	296	31
347	297	31
348	298	31
349	299	32
350	300	32
351	301	32
352	302	32
353	303	32
354	304	32
355	305	32
356	306	32
357	307	33
358	308	33
359	308	36
360	309	33
361	309	36
362	310	33
363	311	33
364	312	33
365	313	33
366	314	33
367	315	33
368	316	33
369	319	33
370	320	33
371	321	33
372	322	33
373	328	34
374	329	34
375	329	50
376	330	34
377	330	45
378	331	34
379	332	34
380	333	34
381	335	35
382	336	35
383	337	35
384	338	35
385	339	35
386	340	35
387	341	35
388	342	35
389	343	35
390	350	36
391	350	38
392	353	36
393	354	36
394	355	36
395	356	36
396	357	36
397	358	37
398	359	37
399	360	37
400	361	37
401	362	37
402	363	37
403	364	37
404	365	37
405	366	37
406	366	52
407	368	38
408	369	38
409	370	38
410	372	38
411	373	38
412	374	38
413	382	39
414	382	47
415	383	39
416	385	39
417	386	39
418	387	39
419	388	39
420	389	39
421	390	40
422	391	40
423	392	40
424	393	40
425	394	40
426	395	40
427	396	40
428	396	48
429	398	41
430	399	41
431	401	41
432	402	41
433	403	41
434	404	41
435	405	41
436	406	41
437	420	41
438	421	41
439	422	41
440	423	42
441	424	42
442	425	42
443	426	42
444	427	42
445	428	42
446	429	42
447	430	42
448	431	42
449	432	42
450	433	42
451	434	42
452	437	42
453	438	42
454	439	43
455	440	43
456	441	43
457	442	43
458	443	43
459	443	51
460	444	43
461	447	43
462	450	43
463	451	43
464	453	44
465	454	44
466	455	44
467	456	44
468	457	44
469	458	44
470	459	44
471	460	44
472	461	44
473	462	44
474	463	44
475	464	44
476	465	45
477	466	45
478	467	45
479	469	46
480	470	46
481	471	47
482	473	47
483	476	48
484	477	48
485	478	48
486	479	48
487	481	48
488	483	48
489	485	49
490	486	49
491	487	49
492	488	49
493	489	49
494	490	49
495	491	50
496	492	50
497	493	50
498	494	50
499	495	50
500	497	15
501	497	50
502	499	51
503	500	51
504	501	51
505	502	51
506	503	51
507	504	51
508	505	51
509	506	51
510	507	51
511	508	51
512	509	51
513	510	51
514	511	51
515	512	51
516	513	51
517	514	51
518	515	51
519	516	51
520	517	51
521	518	51
522	519	51
523	520	51
524	523	51
525	524	51
526	525	51
527	526	51
528	527	52
529	528	52
530	529	52
531	530	52
532	532	53
533	533	53
534	534	53
535	535	53
536	537	54
537	538	54
538	541	55
539	542	55
540	543	55
541	544	55
542	545	55
543	546	55
544	547	56
545	548	56
546	549	56
547	550	56
548	551	56
549	552	56
550	553	56
551	554	56
552	555	56
553	556	56
554	557	56
555	558	56
556	559	56
557	561	57
558	562	57
559	446	27
\.


--
-- TOC entry 7424 (class 0 OID 184179)
-- Dependencies: 211
-- Data for Name: categoriadocente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY categoriadocente (id_categoria_docente, digito_categoria, nombre) FROM stdin;
\.


--
-- TOC entry 7425 (class 0 OID 184182)
-- Dependencies: 212
-- Data for Name: categoriapersonal; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY categoriapersonal (id_categoria_personal, cod_categoria, desc_categoria) FROM stdin;
1	1	EMPLEADOS
2	2	OBREROS
3	3	DOCENTES (MED)
4	4	PARLAMENTARIOS
5	5	DIPLOMATICOS
7	7	BECARIOS
8	8	PASANTES
6	6	MEDICOS (MSDS)
9	0	OTROS
\.


--
-- TOC entry 7426 (class 0 OID 184185)
-- Dependencies: 213
-- Data for Name: categoriapresupuesto; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY categoriapresupuesto (id_categoria_presupuesto, cod_categoria, desc_categoria) FROM stdin;
1	1	EMPLEADO
2	2	OBRERO
3	3	CONTRATADO
4	4	JUBILADO
5	5	PENSIONADO
\.


--
-- TOC entry 7427 (class 0 OID 184188)
-- Dependencies: 214
-- Data for Name: causadocente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY causadocente (id_causa_docente, cod_causa_docente, nombre, tipo) FROM stdin;
\.


--
-- TOC entry 7428 (class 0 OID 184192)
-- Dependencies: 215
-- Data for Name: causamovimiento; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY causamovimiento (id_causa_movimiento, cod_causa_movimiento, descripcion, id_movimiento_personal, id_sitp, tiempo_sitp, sujeto_lefp, grado99, tipo_validacion, formato) FROM stdin;
61	490	JUBILACION DE DERECHO	4	0	\N	N	N	0	\N
62	491	JUBILACION ESPECIAL	4	0	\N	N	N	0	\N
63	492	PENSION POR INCAPACIDAD	4	0	\N	N	N	0	\N
64	493	PENSION SOBREVIVIENTE	4	0	\N	N	N	0	\N
1	101	INGRESO A UN CARGO DE CARRERA	1	0	\N	S	N	0	\N
2	102	INGRESO A UN CARGO DE LIBRE NOMBRAMIENTO Y REMOCION	1	0	\N	S	S	0	\N
3	201	REINGRESO A UN CARGO DE CARRERA	2	0	\N	S	N	0	\N
4	202	REINGRESO A UN CARGO DE LIBRE NOMBRAMIENTO Y REMOCION	2	0	\N	S	S	0	\N
43	509	RETIRO DE UN FUNCIONARIO DE LIBRE NOMBRAMIENTO Y REMOCION	5	0	\N	S	S	0	\N
65	596	EGRESO POR INGRESO A CARGO DE CARRERA	5	0	\N	N	N	0	\N
66	597	EGRESO POR INGRESO A  CARGO DE LIBRE NOMBRAMIENTO Y REMOCION	5	0	\N	N	N	0	\N
67	598	EGRESO POR INGRESO A PUESTO DE TRABAJO	5	0	\N	N	N	0	
18	314	TRASLADO POR EL ARTICULO 32	3	0	\N	S	N	0	\N
20	316	CORRECCION DE MOVIMIENTO	3	0	\N	S	N	0	\N
19	315	MODIFICACION DE HORARIO	3	0	\N	S	N	0	\N
21	317	ANULACION DE MOVIMIENTO	3	0	\N	S	N	0	\N
22	318	ACTUALIZACION DE DATOS PERSONALES	3	0	\N	S	N	0	\N
23	401	JUBILACION DE DERECHO	4	0	\N	S	N	0	\N
24	402	JUBILACION ESPECIAL	4	0	\N	S	N	0	\N
25	403	AJUSTE DE JUBILACION	4	0	\N	S	N	0	\N
26	404	SUSPENSION DE JUBILACION	4	0	\N	S	N	0	\N
27	405	REACTIVACION DE JUBILACION	4	0	\N	S	N	0	\N
44	191	INGRESO PERSONAL CONTRATADO	1	0	\N	N	N	0	\N
45	192	INGRESO PERSONAL OBRERO	1	0	\N	N	N	0	\N
28	406	CESE DE JUBILACION	4	0	\N	S	N	0	\N
30	408	AUMENTO PENSION DE SOBREVIVIENTE	4	0	\N	S	N	0	\N
29	407	PENSION DE SOBREVIVIENTES	4	0	\N	S	N	0	\N
31	409	CESE DE PENSION DE SOBREVIVIENTE	4	0	\N	S	N	0	\N
33	411	AUMENTO DE PENSION DE INVALIDEZ	4	0	\N	S	N	0	\N
35	501	RENUNCIA	5	0	\N	S	N	0	\N
32	410	PENSION DE INVALIDEZ	4	0	\N	S	N	0	\N
34	412	CESE DE PENSION DE INVALIDEZ	4	0	\N	S	N	0	\N
36	502	RENUNCIA POR EL ARTICULO 32	5	0	\N	S	N	0	\N
38	504	DESTITUCION	5	0	\N	S	N	0	\N
42	508	RETIRO POSTERIOR A LA REMOCION	5	0	\N	S	N	0	\N
37	503	RETIRO POR REDUCCION DE PERSONAL	5	0	\N	S	N	0	\N
39	505	REVOCATORIA O RETIRO POR NO SUPERAR PERIODO DE PRUEBA	5	0	\N	S	N	0	\N
41	507	REMOCION	5	0	\N	N	A	0	
40	506	FALLECIMIENTO	5	0	\N	S	N	0	FP020
69	601	EGRESO POR PENSION DE INVALIDEZ	5	0	\N	N	N	0	\N
70	602	RENUNCIA	5	0	\N	S	S	0	\N
46	193	INGRESO PERSONAL JUBILADO/PENSIONADO	1	0	\N	N	N	0	\N
47	190	INGRESO PERSONAL EMPLEADO 	1	0	\N	N	N	0	\N
5	301	CAMBIO EN EL CARGO	3	0	\N	A	A	0	
6	302	DESIGNACION	3	0	\N	S	N	0	\N
7	303	ASCENSO	3	0	\N	S	N	0	\N
8	304	CLASIFICACION	3	0	\N	S	N	0	\N
9	305	CAMBIO DE CLASIFICACION	3	0	\N	S	N	0	\N
10	306	AUMENTO DE SUELDO	3	0	\N	S	N	0	\N
11	307	LICENCIA SIN SUELDO	3	0	\N	S	N	0	\N
12	308	LICENCIA CON SUELDO	3	0	\N	S	N	0	\N
13	309	SUSPENSION SIN GOCE DE SUELDO	3	0	\N	S	N	0	\N
14	310	REUBICACION	3	0	\N	S	N	0	\N
15	311	REINCORPORACION	3	0	\N	S	N	0	\N
17	313	TRASLADO	3	0	\N	S	N	0	\N
48	290	REINGRESO	2	0	\N	N	A	0	
49	590	RENUNCIA	5	0	\N	N	N	0	\N
51	592	RETIRO POR REDUCCION PERSONAL	5	0	\N	N	N	0	\N
52	593	FIN DE CONTRATO	5	0	\N	N	N	0	\N
53	594	RETIRO POR NO SUPERAR PERIODO DE PRUEBA	5	0	\N	N	N	0	\N
54	595	FALLECIMIENTO	5	0	\N	N	N	0	\N
55	390	ASCENSO	3	0	\N	N	N	0	\N
56	391	TRASLADO	3	0	\N	N	N	0	\N
57	392	AUMENTO DE SUELDO POR DECRETO	3	0	\N	N	N	0	\N
58	393	AUMENTO POR TABULADOR	3	0	\N	N	N	0	\N
59	394	AUMENTO SUELDO	3	0	\N	N	N	0	\N
60	395	AUMENTO POR EVALUACION/COMPENSACION	3	0	\N	N	N	0	\N
68	600	EGRESO POR  JUBILACION	5	0	\N	S	N	0	\N
81	610	INICIO DE COMISION DE SERVICIO	1	0	\N	N	A	\N	
82	611	INICIO CONTRATO POR HONORARIOS	1	0	\N	N	A	\N	
50	591	DESTITUCION	5	0	\N	N	A	0	
92	410	PENSION POR INVALIEZ	5	0	\N	S	N	\N	
16	312	REINCORPORACION POR SENTENCIA	1	0	\N	N	N	0	
101	242	REINGRESO TRABAJADORES Y TRABAJADORAS	2	0	\N	N	A	\N	
102			2	0	\N	A	A	\N	
103	242	REINGRESO TRABAJADORES Y TRABAJADORAS	2	0	\N	N	A	\N	
119	603	CULMINACIÓN DE COMISIÓN DE SERVICIO	5	0	\N	N	A	\N	
\.


--
-- TOC entry 7429 (class 0 OID 184196)
-- Dependencies: 216
-- Data for Name: causapersonal; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY causapersonal (id_causa_personal, id_causa_movimiento, id_clasificacion_personal, id_sitp, tiempo_sitp) FROM stdin;
51	44	2	0	\N
60	52	2	0	\N
70	45	11	0	\N
71	48	11	0	\N
72	49	11	0	\N
81	46	4	0	\N
82	46	5	0	\N
83	28	4	0	\N
84	31	5	0	\N
85	34	5	0	\N
86	46	13	0	\N
87	46	14	0	\N
181	17	14	0	\N
89	31	14	0	\N
90	33	14	0	\N
131	65	2	0	\N
161	40	4	0	\N
132	49	2	0	\N
111	41	11	0	\N
121	39	11	0	\N
122	37	11	0	\N
133	54	2	0	\N
134	66	2	0	\N
141	67	2	0	\N
143	5	11	0	\N
151	48	2	0	\N
152	50	11	0	\N
203	47	7	0	\N
154	61	11	0	\N
211	54	1	0	\N
40	40	1	0	\N
110	54	11	0	\N
184	54	5	0	\N
225	63	5	0	\N
226	64	5	0	\N
212	54	4	0	\N
182	40	14	0	\N
164	40	13	0	\N
227	23	13	0	\N
228	24	13	0	\N
229	25	13	0	\N
230	26	13	0	\N
192	68	11	0	\N
1	1	1	0	\N
2	2	1	0	\N
3	3	1	0	\N
4	4	1	0	\N
5	5	1	0	\N
6	6	1	0	\N
7	7	1	0	\N
8	8	1	0	\N
9	9	1	0	\N
10	10	1	0	\N
11	11	1	0	\N
12	12	1	0	\N
13	13	1	0	\N
14	14	1	0	\N
15	15	1	0	\N
16	16	1	0	\N
17	17	1	0	\N
18	18	1	0	\N
19	19	1	0	\N
20	20	1	0	\N
21	21	1	0	\N
22	22	1	0	\N
23	23	1	0	\N
24	24	1	0	\N
25	25	1	0	\N
26	26	1	0	\N
27	27	1	0	\N
28	28	1	0	\N
29	29	1	0	\N
30	30	1	0	\N
31	31	1	0	\N
32	32	1	0	\N
33	33	1	0	\N
34	34	1	0	\N
35	35	1	0	\N
36	36	1	0	\N
37	37	1	0	\N
38	38	1	0	\N
39	39	1	0	\N
193	69	11	0	\N
41	41	1	0	\N
42	42	1	0	\N
43	43	1	0	\N
88	54	13	0	\N
231	27	13	0	\N
232	28	13	0	\N
233	61	13	0	\N
234	62	13	0	\N
235	29	14	0	\N
236	30	14	0	\N
237	32	14	0	\N
238	34	14	0	\N
239	54	14	0	\N
240	63	14	0	\N
241	64	14	0	\N
252	55	7	0	\N
253	56	7	0	\N
254	5	3	0	\N
255	49	3	0	\N
261	68	1	0	\N
273	66	7	0	\N
281	47	3	0	\N
292	2	8	0	\N
293	47	8	0	\N
294	70	1	0	\N
302	35	7	0	\N
213	23	4	0	\N
214	24	4	0	\N
215	25	4	0	\N
216	26	4	0	\N
217	27	4	0	\N
218	61	4	0	\N
219	62	4	0	\N
220	29	5	0	\N
221	30	5	0	\N
222	32	5	0	\N
223	33	5	0	\N
224	40	5	0	\N
311	81	3	0	\N
312	82	2	0	\N
321	49	12	0	\N
322	49	1	0	\N
323	44	12	0	\N
331	41	3	0	\N
333	50	3	0	\N
334	50	1	0	\N
335	50	2	0	\N
343	41	2	0	\N
345	38	2	0	\N
351	39	2	0	\N
352	53	2	0	\N
361	69	2	0	\N
371	41	12	0	\N
372	38	12	0	\N
373	50	12	0	\N
381	16	2	0	\N
393	66	1	0	\N
401	101	11	0	\N
402	101	12	0	\N
403	101	16	0	\N
404	103	12	0	\N
411	70	2	0	\N
421	5	2	0	\N
436	119	3	0	\N
441	67	12	0	\N
451	52	12	0	\N
\.


--
-- TOC entry 7430 (class 0 OID 184200)
-- Dependencies: 217
-- Data for Name: certificacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY certificacion (id_certificacion, id_area_conocimiento, fecha_certificacion, vigencia, id_personal, nombre_certificacion, nombre_entidad, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7431 (class 0 OID 184204)
-- Dependencies: 218
-- Data for Name: certificado; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY certificado (id_certificado, id_personal, fecha_emision, numero, libro, folio, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7432 (class 0 OID 184209)
-- Dependencies: 219
-- Data for Name: cierreunidad; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cierreunidad (id_cierre_unidad, id_unidad_funcional, id_tipo_personal, id_usuario, mes_cierre, anio_cierre, fecha_proceso) FROM stdin;
\.


--
-- TOC entry 7433 (class 0 OID 184214)
-- Dependencies: 220
-- Data for Name: ciudad; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ciudad (id_ciudad, abreviatura, cod_ciudad, id_estado, nombre, multiplicador, fluctuacion) FROM stdin;
931	\N	018	23	EL CARMELO	0	0
932	\N	019	23	EL CONSEJO DE CIRUMA	0	0
933	\N	020	23	EL COROZO	0	0
934	\N	021	23	EL CRUCE	0	0
935	\N	022	23	EL GUANÁBANO	0	0
936	\N	023	23	EL GUAYABO	0	0
937	\N	024	23	EL MECOCAL	0	0
938	\N	025	23	EL MENE	0	0
939	\N	026	23	EL MOLINETE	0	0
940	\N	027	23	EL MORALITO	0	0
941	\N	028	23	EL SILENCIO	0	0
942	\N	029	23	EL TIGRE	0	0
943	\N	030	23	EL TORO	0	0
944	\N	031	23	EL VENADO	0	0
945	\N	032	23	ENCONTRADOS	0	0
946	\N	033	23	GIBRALTAR	0	0
947	\N	034	23	JOBO ALTO (KILÓMETRO 25)	0	0
948	\N	035	23	KILÓMETRO 48 (SANTO DOMINGO)	0	0
949	\N	036	23	LA CONCEPCIÓN	0	0
950	\N	037	23	LA ENSENADA	0	0
951	\N	038	23	LA PAZ	0	0
952	\N	039	23	LA SIERRITA	0	0
953	\N	040	23	LA VILLA DEL ROSARIO	0	0
954	\N	041	23	LAGUNILLAS	0	0
955	\N	042	23	LAS PARCELAS	0	0
956	\N	043	23	LAS PIEDRAS	0	0
957	\N	044	23	LOS CORTIJOS	0	0
958	\N	045	23	LOS NARANJOS	0	0
959	\N	046	23	LOS PUERTOS DE ALTAGRACIA	0	0
960	\N	047	23	MACHIQUES	0	0
961	\N	048	23	MARACAIBO	0	0
962	\N	049	23	MENE GRANDE	0	0
963	\N	050	23	PALITO BLANCO	0	0
964	\N	051	23	PALMAREJO	0	0
965	\N	052	23	PARAGUAIPOA	0	0
966	\N	053	23	PICAPICA	0	0
967	\N	054	23	POTRERITOS	0	0
968	\N	055	23	PUEBLO NUEVO	0	0
969	\N	056	23	PUEBLO NUEVO EL CHIVO	0	0
970	\N	057	23	PUNTA GORDA	0	0
971	\N	058	23	QUISIRO	0	0
972	\N	059	23	RÍO NEGRO	0	0
973	\N	060	23	SABANA DE LA PLATA	0	0
974	\N	061	23	SABANETA DE PALMAS	0	0
975	\N	062	23	SAN ANTONIO	0	0
976	\N	063	23	SAN CARLOS	0	0
977	\N	064	23	SAN CARLOS DEL ZULIA	0	0
978	\N	065	23	SAN FRANCISCO	0	0
979	\N	066	23	SAN IGNACIO	0	0
980	\N	067	23	SAN ISIDRO	0	0
981	\N	068	23	SAN ISIDRO	0	0
982	\N	069	23	SAN JOSÉ	0	0
983	\N	070	23	SAN JOSÉ	0	0
984	\N	071	23	SAN RAFAEL DE EL MOJÁN	0	0
985	\N	072	23	SAN TIMOTEO	0	0
986	\N	073	23	SANTA BÁRBARA	0	0
987	\N	074	23	SANTA CRUZ DE MARA	0	0
988	\N	075	23	SANTA CRUZ DEL ZULIA	0	0
989	\N	076	23	SANTA MARÍA	0	0
990	\N	077	23	SANTA RITA	0	0
991	\N	078	23	SIERRA MAESTRA	0	0
992	\N	079	23	SINAMAICA	0	0
993	\N	080	23	SUR AMÉRICA	0	0
994	\N	081	23	TAMARE	0	0
995	\N	082	23	TÍA JUANA	0	0
996	\N	001	24	CARABALLEDA	0	0
997	\N	002	24	CARAYACA	0	0
998	\N	003	24	LA SABANA	0	0
999	\N	004	24	CATIA LA MAR	0	0
1000	\N	005	24	EL JUNKO	0	0
1001	\N	006	24	LA GUAIRA	0	0
1002	\N	007	24	MACUTO	0	0
1003	\N	008	24	MAIQUETÍA	0	0
1004	\N	009	24	NAIGUATÁ	0	0
2		001	2	ACANAÑA	0	0
828	\N	030	21	ESCUQUE	0	0
829	\N	031	21	FLOR DE PATRIA	0	0
830	\N	032	21	GRANADOS	0	0
831	\N	033	21	GUARAMACAL	0	0
832	\N	034	21	ISNOTÚ	0	0
833	\N	035	21	JAJÓ	0	0
834	\N	036	21	JALISCO	0	0
835	\N	037	21	JUAN IGNACIO MONTILLA	0	0
836	\N	038	21	JUNÍN	0	0
837	\N	039	21	LA BEATRIZ	0	0
838	\N	040	21	LA CEIBA	0	0
839	\N	041	21	LA CEJITA	0	0
840	\N	042	21	LA CONCEPCIÓN	0	0
841	\N	043	21	LA CONCEPCIÓN	0	0
842	\N	044	21	LA CUCHILLA	0	0
843	\N	045	21	LA MATA	0	0
844	\N	046	21	LA MESA DE ESNUJAQUE	0	0
845	\N	047	21	LA PLACITA	0	0
846	\N	048	21	LA PLAZUELA	0	0
847	\N	049	21	LA PUERTA	0	0
848	\N	050	21	LA QUEBRADA	0	0
849	\N	051	21	LAS LLANADAS	0	0
850	\N	052	21	LAS MESETAS	0	0
851	\N	053	21	LAS MESITAS	0	0
852	\N	054	21	LAS QUEBRADAS	0	0
853	\N	055	21	LAS RURALES	0	0
854	\N	056	21	LOS CAPRICHOS	0	0
855	\N	057	21	LOS CEDROS	0	0
856	\N	058	21	MATRIZ	0	0
857	\N	059	21	MENDOZA	0	0
858	\N	060	21	MERCEDES DÍAZ	0	0
859	\N	061	21	MINAS	0	0
860	\N	062	21	MITÓN	0	0
861	\N	063	21	MONAY	0	0
862	\N	064	21	MONTE CARMELO	0	0
863	\N	065	21	MOSQUEY	0	0
864	\N	066	21	MOTATÁN	0	0
865	\N	067	21	NIQUITAO	0	0
866	\N	068	21	PAMPÁN	0	0
867	\N	069	21	PAMPANITO	0	0
868	\N	070	21	PAMPANITO II	0	0
869	\N	071	21	SABANA DE MENDOZA	0	0
870	\N	072	21	SABANA GRANDE	0	0
871	\N	073	21	SABANA LIBRE	0	0
872	\N	074	21	SAN JACINTO	0	0
873	\N	075	21	SAN LÁZARO	0	0
874	\N	076	21	SAN LUIS	0	0
875	\N	077	21	SAN MIGUEL	0	0
876	\N	078	21	SAN RAFAEL	0	0
877	\N	079	21	SANTA ANA	0	0
878	\N	080	21	SANTA APOLONIA	0	0
879	\N	081	21	SANTA ISABEL	0	0
880	\N	082	21	SANTA ROSA	0	0
881	\N	083	21	SANTIAGO	0	0
882	\N	084	21	TOROCOCO	0	0
883	\N	085	21	TOSTÓS	0	0
884	\N	086	21	TRES DE FEBRERO	0	0
885	\N	087	21	TRES ESQUINAS	0	0
886	\N	088	21	TRUJILLO	0	0
887	\N	089	21	TUÑAME	0	0
888	\N	090	21	VALERA	0	0
889	\N	091	21	VALERITA	0	0
890	\N	092	21	VALMORE RODRÍGUEZ	0	0
891	\N	093	21	VEGA DE GUARAMACAL	0	0
892	\N	094	21	ZONA RICA	0	0
893	\N	001	22	ALBARICO	0	0
894	\N	002	22	AROA	0	0
895	\N	003	22	BORAURE	0	0
896	\N	004	22	CAMBURAL	0	0
897	\N	005	22	CAMPO ELÍAS	0	0
898	\N	006	22	CASIMIRO VÁSQUEZ	0	0
899	\N	007	22	CHIVACOA	0	0
900	\N	008	22	COCOROTE	0	0
901	\N	009	22	FARRIAR	0	0
902	\N	010	22	GUAMA	0	0
903	\N	011	22	INDEPENDENCIA	0	0
904	\N	012	22	MARÍN	0	0
905	\N	013	22	NIRGUA	0	0
906	\N	014	22	SABANA DE PARRA	0	0
907	\N	015	22	SALOM	0	0
908	\N	016	22	SAN FELIPE	0	0
909	\N	017	22	SAN PABLO	0	0
910	\N	018	22	TEMERLA	0	0
911	\N	019	22	URACHICHE	0	0
912	\N	020	22	YARITAGUA	0	0
913	\N	021	22	YUMARE	0	0
914	\N	001	23	BACHAQUERO	0	0
915	\N	002	23	BARRANQUITAS	0	0
916	\N	003	23	BOBURES	0	0
917	\N	004	23	CABIMAS	0	0
918	\N	005	23	CACHIRÍ	0	0
919	\N	006	23	CAJA SECA	0	0
920	\N	007	23	CAMPO LARA	0	0
921	\N	008	23	CARRASQUERO	0	0
922	\N	009	23	CASIGUA EL CUBO	0	0
923	\N	010	23	CEUTA	0	0
924	\N	011	23	CIUDAD  OJEDA	0	0
925	\N	012	23	COJORO	0	0
926	\N	013	23	CONCEPCIÓN	0	0
927	\N	014	23	CONCHA	0	0
928	\N	015	23	CUATRO ESQUINAS	0	0
929	\N	016	23	EL BAJO	0	0
930	\N	017	23	EL BATEY	0	0
726	\N	043	19	SAN VICENTE	0	0
727	\N	044	19	SANTA CRUZ	0	0
728	\N	045	19	SANTA MARÍA	0	0
729	\N	046	19	SORO	0	0
730	\N	047	19	TUNAPUICITO	0	0
731	\N	048	19	TUNAPUY	0	0
732	\N	049	19	VILLA FRONTADO (MUELLE DE CARIACO)	0	0
733	\N	050	19	VILLARROEL (QUEBRADA SECA)	0	0
734	\N	051	19	YAGUARAPARO	0	0
735	\N	052	19	YOCO	0	0
736	\N	001	20	ABEJALES	0	0
737	\N	002	20	AGUAS CALIENTES	0	0
738	\N	003	20	BOCA DE GRITA	0	0
739	\N	004	20	BOCONÓ	0	0
740	\N	005	20	BOROTÁ	0	0
741	\N	006	20	BRAMÓN	0	0
742	\N	007	20	CAPACHO NUEVO	0	0
743	\N	008	20	CAPACHO VIEJO	0	0
744	\N	009	20	COLÓN	0	0
745	\N	010	20	COLONCITO	0	0
746	\N	011	20	CORDERO	0	0
747	\N	012	20	DELICIAS	0	0
748	\N	013	20	EL COBRE	0	0
749	\N	014	20	EL MILAGRO	0	0
750	\N	015	20	EL PUEBLITO	0	0
751	\N	016	20	EL RECREO	0	0
752	\N	017	20	EL VALLE	0	0
753	\N	018	20	HATO DE LA VIRGEN	0	0
754	\N	019	20	HERNÁNDEZ	0	0
755	\N	020	20	LA FLORIDA	0	0
756	\N	021	20	LA FRÍA	0	0
757	\N	022	20	LA FUNDACIÓN	0	0
758	\N	023	20	LA GRITA	0	0
759	\N	024	20	LA PALMITA	0	0
760	\N	025	20	LA TENDIDA	0	0
761	\N	026	20	LAGUNA DE GARCÍA	0	0
762	\N	027	20	LAS DANTAS	0	0
763	\N	028	20	LAS MESAS	0	0
764	\N	029	20	LOBATERA	0	0
765	\N	030	20	MACANILLO	0	0
766	\N	031	20	MESA DEL TIGRE	0	0
767	\N	032	20	MICHELENA	0	0
768	\N	033	20	OROPE	0	0
769	\N	034	20	PALMIRA	0	0
770	\N	035	20	PALO GORDO	0	0
771	\N	036	20	PALOTAL	0	0
772	\N	037	20	PATIO REDONDO	0	0
773	\N	038	20	PERIBECA	0	0
774	\N	039	20	PREGONERO	0	0
775	\N	040	20	PUEBLO HONDO	0	0
776	\N	041	20	PUERTO NUEVO	0	0
688	\N	005	19	CAMPO CLARO	0	0
777	\N	042	20	PUERTO TETEO	0	0
778	\N	043	20	QUENIQUEA	0	0
779	\N	044	20	RÍO CHIQUITO	0	0
780	\N	045	20	RUBIO	0	0
781	\N	046	20	SABANA GRANDE	0	0
782	\N	047	20	SAN ANTONIO DEL TÁCHIRA	0	0
783	\N	048	20	SAN CRISTÓBAL	0	0
784	\N	049	20	SAN FÉLIX	0	0
785	\N	050	20	SAN JOAQUÍN DE NAVAY	0	0
786	\N	051	20	SAN JOSÉ DE BOLÍVAR	0	0
787	\N	052	20	SAN JOSECITO	0	0
788	\N	053	20	SAN LORENZO	0	0
789	\N	054	20	SAN PABLO	0	0
790	\N	055	20	SAN PEDRO DEL RÍO	0	0
791	\N	056	20	SAN RAFAEL DEL \r\nPIÑAL	0	0
792	\N	057	20	SAN SIMÓN	0	0
793	\N	058	20	SAN VICENTE DE LA REVANCHA	0	0
794	\N	059	20	SANTA ANA	0	0
795	\N	060	20	SEBORUCO	0	0
796	\N	061	20	TÁRIBA	0	0
797	\N	062	20	UMUQUENA	0	0
798	\N	063	20	UREÑA	0	0
799	\N	001	21	AGUA CALIENTE	0	0
800	\N	002	21	AGUA SANTA	0	0
801	\N	003	21	ALTAMIRA DE CAÚS	0	0
802	\N	004	21	ARAGUANEY	0	0
803	\N	005	21	BATATAL	0	0
804	\N	006	21	BETIJOQUE	0	0
805	\N	007	21	BOCONÓ	0	0
806	\N	008	21	BOLIVIA	0	0
807	\N	009	21	BUENA VISTA	0	0
808	\N	010	21	BURBUSAY	0	0
809	\N	011	21	CABIMBÚ	0	0
810	\N	012	21	CAMPO ALEGRE	0	0
811	\N	013	21	CAMPO ELÍAS	0	0
812	\N	014	21	CARACHE	0	0
813	\N	015	21	CARVAJAL	0	0
814	\N	016	21	CASA DE TABLA	0	0
815	\N	017	21	CHEJENDÉ	0	0
816	\N	018	21	CHIQUINQUIRÁ	0	0
817	\N	019	21	CUICAS	0	0
818	\N	020	21	EL ALTO	0	0
819	\N	021	21	EL BAÑO	0	0
820	\N	022	21	EL CARMEN	0	0
821	\N	023	21	EL CENIZO	0	0
822	\N	024	21	EL DIVIDIVE	0	0
823	\N	025	21	EL GALLO	0	0
824	\N	026	21	EL JAGÜITO	0	0
825	\N	027	21	EL PARADERO	0	0
826	\N	028	21	EL PARAÍSO	0	0
827	\N	029	21	EL ZAPATERO	0	0
626	\N	005	17	EL MACO	0	0
627	\N	006	17	EL PILAR (LOS ROBLES)	0	0
628	\N	007	17	EL VALLE DEL ESPÍRITU SANTO	0	0
629	\N	008	17	GÜINIMA	0	0
630	\N	009	17	JUANGRIEGO	0	0
631	\N	010	17	LA ASUNCIÓN	0	0
632	\N	011	17	LA GUARDIA	0	0
633	\N	012	17	LA PLAZA DE PARAGUACHÍ	0	0
634	\N	013	17	LOS MILLANES	0	0
635	\N	014	17	PAMPATAR	0	0
636	\N	015	17	PEDROGONZÁLEZ	0	0
637	\N	016	17	PORLAMAR	0	0
638	\N	017	17	PUNTA DE PIEDRAS	0	0
639	\N	018	17	SAN JUAN BAUTISTA	0	0
640	\N	019	17	SAN PEDRO DE COCHE	0	0
641	\N	020	17	SANTA ANA	0	0
642	\N	021	17	TACARIGUA	0	0
643	\N	022	17	VILLA ROSA	0	0
644	\N	001	18	ACARIGUA	0	0
645	\N	002	18	AGUA BLANCA	0	0
646	\N	003	18	ARAURE	0	0
647	\N	004	18	BISCUCUY	0	0
648	\N	005	18	BOCONOITO	0	0
649	\N	006	18	CAÑO DELGADITO	0	0
650	\N	007	18	COLONIA TURÉN	0	0
651	\N	008	18	CÓRDOBA	0	0
652	\N	009	18	EL ALGARROBITO	0	0
653	\N	010	18	EL PLAYÓN	0	0
654	\N	011	18	GUANARE	0	0
655	\N	012	18	GUANARITO	0	0
656	\N	013	18	LA APARICIÓN	0	0
657	\N	014	18	LA CONCEPCIÓN	0	0
658	\N	015	18	LA ESTACIÓN	0	0
659	\N	016	18	LA MISIÓN	0	0
660	\N	017	18	LAS CRUCES	0	0
661	\N	018	18	MESA DE CAVACAS	0	0
662	\N	019	18	MIJAGÜITO	0	0
663	\N	020	18	MORRONES	0	0
664	\N	021	18	NUEVA FLORIDA	0	0
665	\N	022	18	OSPINO	0	0
666	\N	023	18	PAPELÓN	0	0
667	\N	024	18	PARAÍSO DE CHABASQUÉN	0	0
668	\N	025	18	PAYARA	0	0
669	\N	026	18	PEÑA BLANCA	0	0
670	\N	027	18	PIMPINELA	0	0
671	\N	028	18	PÍRITU	0	0
672	\N	029	18	QUEBRADA DE LA VIRGEN	0	0
673	\N	030	18	RÍO ACARIGUA	0	0
674	\N	031	18	SAN JOSÉ DE LA MONTAÑA	0	0
675	\N	032	18	SAN JOSÉ DE SAGUAZ	0	0
676	\N	033	18	SAN NICOLÁS	0	0
677	\N	034	18	SAN RAFAEL DE ONOTO	0	0
678	\N	035	18	SAN RAFAEL DE PALO ALZADO	0	0
679	\N	036	18	SANTA CRUZ	0	0
680	\N	037	18	SANTA FE	0	0
681	\N	038	18	TRINIDAD DE LA CAPILLA	0	0
682	\N	039	18	VILLA BRUZUAL	0	0
683	\N	040	18	VILLA ROSA	0	0
684	\N	001	19	ARAYA	0	0
685	\N	002	19	ARENAS	0	0
686	\N	003	19	ARICAGUA	0	0
687	\N	004	19	CAIGÜIRE	0	0
689	\N	006	19	CARIACO	0	0
690	\N	007	19	CARÚPANO	0	0
691	\N	008	19	CASANAY	0	0
692	\N	009	19	CATUARO	0	0
693	\N	010	19	CHACOPATA	0	0
694	\N	011	19	CUMANÁ	0	0
695	\N	012	19	CUMANACOA	0	0
696	\N	013	19	EL MORRO DE PUERTO SANTO	0	0
697	\N	014	19	EL PAUJIL	0	0
698	\N	015	19	EL PILAR	0	0
699	\N	016	19	EL RINCÓN	0	0
700	\N	017	19	GUARAÚNOS	0	0
701	\N	018	19	GUARIQUÉN	0	0
702	\N	019	19	GUAYANA	0	0
703	\N	020	19	GÜIRIA	0	0
704	\N	021	19	IRAPA	0	0
705	\N	022	19	LAS PIEDRAS	0	0
706	\N	023	19	LOS ALTOS	0	0
707	\N	024	19	LOS ARROYOS	0	0
708	\N	025	19	LOS PUERTOS DE SANTA FE	0	0
709	\N	026	19	MACURO	0	0
710	\N	027	19	MANICUARE	0	0
711	\N	028	19	MARABAL	0	0
712	\N	029	19	MARIGÜITAR	0	0
713	\N	030	19	PLAYA GRANDE	0	0
714	\N	031	19	PUERTO SANTO	0	0
715	\N	032	19	RÍO CARIBE	0	0
716	\N	033	19	RÍO CASANAY	0	0
717	\N	034	19	RIO SALADO	0	0
718	\N	035	19	RÍO SECO	0	0
719	\N	036	19	SAN ANTONIO DE IRAPA	0	0
720	\N	037	19	SAN ANTONIO DEL GOLFO	0	0
721	\N	038	19	SAN JOSÉ DE AEROCUAR	0	0
722	\N	039	19	SAN JUAN	0	0
723	\N	040	19	SAN JUAN DE LAS GALDONAS	0	0
724	\N	041	19	SAN JUAN DE UNARE	0	0
725	\N	042	19	SAN LORENZO	0	0
524	\N	061	14	SANTA ELENA DE ARENALES	0	0
525	\N	062	14	SANTA MARÍA DE CAPARO	0	0
526	\N	063	14	SANTO DOMINGO	0	0
527	\N	064	14	TABAY	0	0
528	\N	065	14	TIMOTES	0	0
529	\N	066	14	TORONDOY	0	0
530	\N	067	14	TOVAR	0	0
531	\N	068	14	TUCANÍ	0	0
532	\N	069	14	ZEA	0	0
533	\N	001	15	ALTAGRACIA DE LA MONTAÑA	0	0
534	\N	002	15	ARAGÜITA	0	0
535	\N	003	15	ARAIRA	0	0
536	\N	004	15	CAPAYA	0	0
537	\N	005	15	CARACAS	0	0
538	\N	006	15	CARRIZAL	0	0
539	\N	007	15	CAUCAGUA	0	0
540	\N	008	15	CAUCAGÜITA	0	0
541	\N	009	15	CHARALLAVE	0	0
542	\N	010	15	CÚA	0	0
543	\N	011	15	CUMBO	0	0
544	\N	012	15	CÚPIRA	0	0
545	\N	013	15	CURIEPE	0	0
546	\N	014	15	EL CAFÉ	0	0
547	\N	015	15	EL CARTANAL	0	0
548	\N	016	15	EL CLAVO	0	0
549	\N	017	15	EL GUAPO	0	0
550	\N	018	15	EL HATILLO	0	0
551	\N	019	15	EL JARILLO	0	0
552	\N	020	15	FILA DE MARICHES	0	0
553	\N	021	15	GUARENAS	0	0
554	\N	022	15	GUATIRE	0	0
555	\N	023	15	HIGUEROTE	0	0
556	\N	024	15	LA DEMOCRACIA	0	0
557	\N	025	15	LA DOLORITA	0	0
558	\N	026	15	LAS BRISAS	0	0
559	\N	027	15	LOS TEQUES	0	0
560	\N	028	15	MACHURUCUTO	0	0
561	\N	029	15	MAMPORAL	0	0
562	\N	030	15	MARIZAPA	0	0
563	\N	031	15	NUEVA CÚA	0	0
564	\N	032	15	OCUMARE DEL TUY	0	0
565	\N	033	15	PANAQUIRE	0	0
566	\N	034	15	PAPARO	0	0
567	\N	035	15	PARACOTOS	0	0
568	\N	036	15	RÍO CHICO	0	0
569	\N	037	15	SAN ANTONIO DE LOS ALTOS	0	0
570	\N	038	15	SAN ANTONIO DE YARE	0	0
571	\N	039	15	SAN DIEGO	0	0
572	\N	040	15	SAN FERNANDO	0	0
573	\N	041	15	SAN FRANCISCO DE YARE	0	0
574	\N	042	15	SAN JOSÉ DE BARLOVENTO	0	0
575	\N	043	15	SAN PEDRO	0	0
576	\N	044	15	SANTA BÁRBARA	0	0
577	\N	045	15	SANTA LUCÍA	0	0
578	\N	046	15	SANTA TERESA DEL TUY	0	0
579	\N	047	15	TACARIGUA DE LA LAGUNA 	0	0
580	\N	048	15	TACARIGUA DE MAMPORAL	0	0
581	\N	049	15	TÁCATA	0	0
582	\N	050	15	TAPIPA	0	0
583	\N	001	16	AGUASAY	0	0
584	\N	002	16	APARICIO	0	0
585	\N	003	16	ARAGUA	0	0
586	\N	004	16	AREO	0	0
587	\N	005	16	BARRANCAS	0	0
588	\N	006	16	CACHIPO	0	0
589	\N	007	16	CAICARA	0	0
590	\N	008	16	CARIPE	0	0
591	\N	009	16	CARIPITO	0	0
592	\N	010	16	CHAGUARAMAL	0	0
593	\N	011	16	CHAGUARAMAS	0	0
594	\N	012	16	EL COROZO	0	0
595	\N	013	16	EL FURRIAL	0	0
596	\N	014	16	EL GUÁCHARO	0	0
597	\N	015	16	EL PINTO	0	0
598	\N	016	16	EL TEJERO	0	0
599	\N	017	16	GUANAGUANA	0	0
600	\N	018	16	JUSEPÍN	0	0
601	\N	019	16	LA GUANOTA	0	0
602	\N	020	16	LA PICA	0	0
603	\N	021	16	LA TOSCANA	0	0
604	\N	022	16	LAS ALHUACAS	0	0
605	\N	023	16	LOS BARRANCOS DE FAJARDO	0	0
606	\N	024	16	MATURÍN	0	0
607	\N	025	16	PUNTA DE MATA	0	0
608	\N	026	16	QUIRIQUIRE	0	0
609	\N	027	16	SABANA DE PIEDRA	0	0
610	\N	028	16	SAN AGUSTÍN	0	0
611	\N	029	16	SAN ANTONIO	0	0
612	\N	030	16	SAN FÉLIX	0	0
613	\N	031	16	SAN FRANCISCO	0	0
614	\N	032	16	SAN VICENTE	0	0
615	\N	033	16	SANTA BÁRBARA	0	0
616	\N	034	16	TABASCA	0	0
617	\N	035	16	TAGUAYA	0	0
618	\N	036	16	TEMBLADOR	0	0
619	\N	037	16	TERESÉN	0	0
620	\N	038	16	URACOA	0	0
621	\N	039	16	VIENTO FRESCO	0	0
622	\N	001	17	ALTAGRACIA	0	0
623	\N	002	17	BOCA DEL POZO	0	0
624	\N	003	17	BOCA DEL RÍO	0	0
625	\N	004	17	EL GUAMACHE	0	0
421	\N	010	13	BARBACOAS	0	0
422	\N	011	13	BARQUISIMETO	0	0
423	\N	012	13	BOBARE	0	0
424	\N	013	13	BUENA VISTA	0	0
425	\N	014	13	BURERE	0	0
426	\N	015	13	CABUDARE	0	0
427	\N	016	13	CARORA	0	0
428	\N	017	13	CUARA	0	0
429	\N	018	13	CUBIRO	0	0
430	\N	019	13	CURARIGUA	0	0
431	\N	020	13	DUACA	0	0
432	\N	021	13	EL EMPEDRADO	0	0
433	\N	022	13	EL ENEAL	0	0
434	\N	023	13	EL HATO	0	0
435	\N	024	13	EL JABÓN	0	0
436	\N	025	13	EL PARADERO	0	0
437	\N	026	13	EL TOCUYO	0	0
438	\N	027	13	GUAITÓ	0	0
439	\N	028	13	GUARICO	0	0
440	\N	029	13	HUMOCARO ALTO	0	0
441	\N	030	13	HUMOCARO BAJO	0	0
442	\N	031	13	LA BUCARITA	0	0
443	\N	032	13	LA CEIBA	0	0
444	\N	033	13	LA ESCALERA	0	0
445	\N	034	13	LA MIEL	0	0
446	\N	035	13	LA PASTORA	0	0
447	\N	036	13	LOS RASTROJOS	0	0
448	\N	037	13	MANZANITA	0	0
449	\N	038	13	PALMARITO	0	0
450	\N	039	13	PARAPARA	0	0
451	\N	040	13	QUEBRADA ARRIBA	0	0
452	\N	041	13	QUÍBOR	0	0
453	\N	042	13	RÍO CLARO	0	0
454	\N	043	13	RÍO TOCUYO	0	0
455	\N	044	13	SAN FRANCISCO	0	0
456	\N	045	13	SAN MIGUEL	0	0
457	\N	046	13	SAN PEDRO	0	0
458	\N	047	13	SANARE	0	0
459	\N	048	13	SANTA INÉS	0	0
460	\N	049	13	SARARE	0	0
461	\N	050	13	SIQUISIQUE	0	0
462	\N	051	13	TINTORERO	0	0
463	\N	052	13	VILLANUEVA	0	0
464	\N	001	14	ACEQUIAS	0	0
465	\N	002	14	ARAPUEY	0	0
466	\N	003	14	ARICAGUA	0	0
467	\N	004	14	BAILADORES	0	0
468	\N	005	14	CACUTE	0	0
469	\N	006	14	CAMPO ELÍAS	0	0
470	\N	007	14	CANAGUÁ	0	0
471	\N	008	14	CAÑO TIGRE	0	0
472	\N	009	14	CAPURÍ	0	0
473	\N	010	14	CHACANTÁ	0	0
474	\N	011	14	CHACHOPO	0	0
475	\N	012	14	CHIGUARÁ	0	0
476	\N	013	14	EJIDO	0	0
477	\N	014	14	EJIDO	0	0
478	\N	015	14	EJIDO	0	0
479	\N	016	14	EL MOLINO	0	0
480	\N	017	14	EL MORRO	0	0
481	\N	018	14	EL PINAR	0	0
482	\N	019	14	EL VIENTO	0	0
483	\N	020	14	EL VIGÍA	0	0
484	\N	021	14	ESTÁNQUEZ	0	0
485	\N	022	14	GUARAQUE	0	0
486	\N	023	14	GUAYABONES	0	0
487	\N	024	14	JAJÍ	0	0
488	\N	025	14	LA AZULITA	0	0
489	\N	026	14	LA BLANCA (12 DE OCTUBRE)	0	0
490	\N	027	14	LA MESA	0	0
491	\N	028	14	LA PALMITA	0	0
492	\N	029	14	LA PLAYA	0	0
493	\N	030	14	LA TOMA	0	0
494	\N	031	14	LA TRAMPA	0	0
495	\N	032	14	LA VENTA	0	0
496	\N	033	14	LAGUNILLAS	0	0
497	\N	034	14	LAS PIEDRAS	0	0
498	\N	035	14	LAS VIRTUDES	0	0
499	\N	036	14	LOS NARANJOS	0	0
500	\N	037	14	LOS NEVADOS	0	0
501	\N	038	14	MÉRIDA	0	0
502	\N	039	14	MESA BOLÍVAR	0	0
503	\N	040	14	MESA DE LAS PALMAS	0	0
504	\N	041	14	MESA DE QUINTERO	0	0
505	\N	042	14	MUCUCHACHÍ	0	0
506	\N	043	14	MUCUCHÍES	0	0
507	\N	044	14	MUCUJEPE	0	0
508	\N	045	14	MUCURUBÁ	0	0
509	\N	046	14	MUCUTUY	0	0
510	\N	047	14	NUEVA BOLIVIA	0	0
511	\N	048	14	PALMARITO	0	0
512	\N	049	14	PIÑANGO	0	0
513	\N	050	14	PUEBLO LLANO	0	0
514	\N	051	14	PUEBLO NUEVO DEL SUR	0	0
515	\N	052	14	RÍO NEGRO	0	0
516	\N	053	14	SAN CRISTÓBAL DE TORONDOY	0	0
517	\N	054	14	SAN JOSÉ	0	0
518	\N	055	14	SAN JOSÉ DE PALMIRA	0	0
519	\N	056	14	SAN JUAN	0	0
520	\N	057	14	SAN RAFAEL	0	0
521	\N	058	14	SAN RAFAEL DE ALCÁZAR	0	0
522	\N	059	14	SANTA APOLONIA	0	0
523	\N	060	14	SANTA CRUZ DE MORA	0	0
322	\N	029	11	EL VÍNCULO	0	0
323	\N	030	11	GUAIBACOA	0	0
324	\N	031	11	GUAJIRO	0	0
325	\N	032	11	JACURA	0	0
326	\N	033	11	JADACAQUIVA	0	0
327	\N	034	11	JUDIBANA	0	0
328	\N	035	11	LA CIÉNAGA	0	0
329	\N	036	11	LA CRUZ DE TARATARA	0	0
330	\N	037	11	LA NEGRITA	0	0
331	\N	038	11	LA PASTORA	0	0
332	\N	039	11	LA PEÑA	0	0
333	\N	040	11	LA SOLEDAD	0	0
334	\N	041	11	LA VELA DE CORO	0	0
335	\N	042	11	LAS CALDERAS	0	0
336	\N	043	11	LAS VEGAS DEL TUY	0	0
337	\N	044	11	MAPARARÍ	0	0
338	\N	045	11	MENE DE MAUROA	0	0
339	\N	046	11	MIRIMIRE	0	0
340	\N	047	11	MITARE	0	0
341	\N	048	11	MORUY	0	0
342	\N	049	11	PALMASOLA	0	0
343	\N	050	11	PECAYA	0	0
344	\N	051	11	PEDREGAL	0	0
345	\N	052	11	PIEDRA GRANDE	0	0
346	\N	053	11	PÍRITU	0	0
347	\N	054	11	PUEBLO CUMAREBO	0	0
348	\N	055	11	PUEBLO NUEVO	0	0
349	\N	056	11	PUEBLO NUEVO DE LA SIERRA	0	0
350	\N	057	11	PUERTO CUMAREBO	0	0
351	\N	058	11	PUNTA CARDÓN	0	0
352	\N	059	11	PUNTO FIJO	0	0
353	\N	060	11	PURURECHE	0	0
354	\N	061	11	RÍO SECO	0	0
355	\N	062	11	SABANETA	0	0
356	\N	063	11	SAN FÉLIX	0	0
357	\N	064	11	SAN JOSÉ DE BRUZUAL	0	0
358	\N	065	11	SAN JOSÉ DE LA COSTA	0	0
359	\N	066	11	SAN JOSÉ DE SEQUE	0	0
360	\N	067	11	SAN JUAN DE LOS CAYOS	0	0
361	\N	068	11	SAN LUIS	0	0
362	\N	069	11	SANTA ANA	0	0
363	\N	070	11	SANTA ANA DE CORO	0	0
364	\N	071	11	SANTA CRUZ DE BUCARAL	0	0
365	\N	072	11	SANTA CRUZ DE LOS TAQUES	0	0
366	\N	073	11	TOCÓPERO	0	0
367	\N	074	11	TOCUYO DE LA COSTA	0	0
368	\N	075	11	TUCACAS	0	0
369	\N	076	11	TUPURE	0	0
370	\N	077	11	URUMACO	0	0
371	\N	078	11	YARACAL	0	0
372	\N	079	11	ZAZÁRIDA	0	0
1005	\N	080	11	CORO	0	0
373	\N	001	12	ALTAGRACIA DE ORITUCO	0	0
374	\N	002	12	ALTAMIRA	0	0
375	\N	003	12	CABRUTA	0	0
376	\N	004	12	CALABOZO	0	0
377	\N	005	12	CAMAGUÁN	0	0
378	\N	006	12	CANTAGALLO	0	0
379	\N	007	12	CAZORLA	0	0
380	\N	008	12	CHAGUARAMAS	0	0
381	\N	009	12	EL CALVARIO	0	0
382	\N	010	12	EL RASTRO	0	0
383	\N	011	12	EL SOCORRO	0	0
384	\N	012	12	EL SOMBRERO	0	0
385	\N	013	12	ESPINO	0	0
386	\N	014	12	GUARDATINAJAS	0	0
387	\N	015	12	GUAYABAL	0	0
388	\N	016	12	LA UNIÓN DE CANUTO	0	0
389	\N	017	12	LAS MERCEDES	0	0
390	\N	018	12	LEZAMA	0	0
391	\N	019	12	LIBERTAD DE ORITUCO	0	0
392	\N	020	12	ORTIZ	0	0
393	\N	021	12	PARAPARA	0	0
394	\N	022	12	PASO REAL DE MACAIRA	0	0
395	\N	023	12	PUERTO MIRANDA	0	0
396	\N	024	12	SABANA GRANDE DE ORITUCO	0	0
397	\N	025	12	SAN FRANCISCO DE MACAIRA	0	0
398	\N	026	12	SAN FRANCISCO DE TIZNADOS	0	0
399	\N	027	12	SAN JOSÉ DE GUARIBE	0	0
400	\N	028	12	SAN JOSÉ DE TIZNADOS	0	0
401	\N	029	12	SAN JOSÉ DE UNARE	0	0
402	\N	030	12	SAN JUAN DE LOS MORROS	0	0
403	\N	031	12	SAN RAFAEL DE LAYA	0	0
404	\N	032	12	SAN RAFAEL DE ORITUCO	0	0
405	\N	033	12	SANTA MARÍA DE IPIRE	0	0
406	\N	034	12	SANTA RITA	0	0
407	\N	035	12	SOSA	0	0
408	\N	036	12	TUCUPIDO	0	0
409	\N	037	12	UVERITO	0	0
410	\N	038	12	VALLE DE LA PASCUA	0	0
411	\N	039	12	ZARAZA	0	0
412	\N	001	13	AGUA NEGRA	0	0
413	\N	002	13	AGUA VIVA	0	0
414	\N	003	13	AGUADA GRANDE	0	0
415	\N	004	13	ALTAGRACIA	0	0
416	\N	005	13	ANZOÁTEGUI	0	0
417	\N	006	13	AREGUE	0	0
418	\N	007	13	ARENALES	0	0
419	\N	008	13	ATARIGUA	0	0
420	\N	009	13	BARAGUA	0	0
220	\N	020	7	LA URBANA	0	0
221	\N	021	7	LAS BONITAS	0	0
222	\N	022	7	LAS CLARITAS	0	0
223	\N	023	7	LAS MAJADAS	0	0
224	\N	024	7	MARIPA	0	0
225	\N	025	7	MOITACO	0	0
226	\N	026	7	MORICHALITO	0	0
227	\N	027	7	POZO VERDE	0	0
228	\N	028	7	SAN FRANCISCO	0	0
229	\N	029	7	SAN JOSÉ DE BONGO	0	0
230	\N	030	7	SANTA BÁRBARA DE CENTURIÓN	0	0
231	\N	031	7	SANTA ELENA DE UAIRÉN	0	0
232	\N	032	7	SANTA ROSALÍA	0	0
233	\N	033	7	TUMEREMO	0	0
234	\N	034	7	UPATA	0	0
235	\N	001	8	BEJUMA	0	0
236	\N	002	8	BELÉN	0	0
237	\N	003	8	BORBURATA	0	0
238	\N	004	8	CANOABO	0	0
239	\N	005	8	CENTRAL TACARIGUA	0	0
240	\N	006	8	CHIRGUA	0	0
241	\N	007	8	GUACARA	0	0
242	\N	008	8	GÜIGÜE	0	0
243	\N	009	8	LOS GUAYOS	0	0
244	\N	010	8	LOS NARANJOS	0	0
245	\N	011	8	MARIARA	0	0
246	\N	012	8	MIRANDA	0	0
247	\N	013	8	MONTALBÁN	0	0
248	\N	014	8	MORÓN	0	0
249	\N	015	8	NAGUANAGUA	0	0
250	\N	016	8	PATANEMO	0	0
251	\N	017	8	PUERTO CABELLO	0	0
252	\N	018	8	SAN DIEGO	0	0
253	\N	019	8	SAN JOAQUÍN	0	0
254	\N	020	8	TOCUYITO	0	0
255	\N	021	8	URAMA	0	0
256	\N	022	8	VALENCIA	0	0
257	\N	023	8	YAGUA	0	0
258	\N	001	9	APARTADEROS	0	0
259	\N	002	9	COJEDES	0	0
260	\N	003	9	EL AMPARO	0	0
261	\N	004	9	EL BAÚL	0	0
262	\N	005	9	EL PAO	0	0
263	\N	006	9	LA AGUADITA	0	0
264	\N	007	9	LA SIERRA	0	0
265	\N	008	9	LAS VEGAS	0	0
266	\N	009	9	LIBERTAD	0	0
267	\N	010	9	MACAPO	0	0
268	\N	011	9	MANRIQUE	0	0
269	\N	012	9	SAN CARLOS	0	0
270	\N	013	9	SUCRE	0	0
271	\N	014	9	TINACO	0	0
272	\N	015	9	TINAQUILLO	0	0
273	\N	001	10	ARAGUABISI	0	0
274	\N	002	10	ARAGUAIMUJO	0	0
275	\N	003	10	BOCA DE CUYUBINI	0	0
276	\N	004	10	CAPURE	0	0
277	\N	005	10	CARAPAL DE GUARA	0	0
278	\N	006	10	CURIAPO	0	0
279	\N	007	10	EL TRIUNFO	0	0
280	\N	008	10	HACIENDA DEL MEDIO	0	0
281	\N	009	10	LA HORQUETA	0	0
282	\N	010	10	MANOA	0	0
283	\N	011	10	MORUCA	0	0
284	\N	012	10	PALOMA	0	0
285	\N	013	10	PEDERNALES	0	0
286	\N	014	10	PIACOA	0	0
287	\N	015	10	SAN FRANCISCO DE GUAYO	0	0
288	\N	016	10	SAN RAFAEL	0	0
289	\N	017	10	SANTA CATALINA	0	0
290	\N	018	10	SIERRA IMATACA	0	0
291	\N	019	10	TUCUPITA	0	0
292	\N	020	10	URBANIZACIÓN DELFÍN MENDOZA	0	0
293	\N	021	10	URBANIZACIÓN LEONARDO RUÍZ PINEDA	0	0
294	\N	001	11	ACURIGUA	0	0
295	\N	002	11	ADAURE	0	0
296	\N	003	11	ADÍCORA	0	0
297	\N	004	11	AGUA LARGA	0	0
298	\N	005	11	AGUA LINDA	0	0
299	\N	006	11	ARACUA	0	0
300	\N	007	11	ARAURIMA	0	0
301	\N	008	11	BARAIVED	0	0
302	\N	009	11	BARIRO	0	0
303	\N	010	11	BOCA DE AROA	0	0
304	\N	011	11	BOCA DE TOCUYO	0	0
305	\N	012	11	BOROJÓ	0	0
306	\N	013	11	BUENA VISTA	0	0
307	\N	014	11	CABURE	0	0
308	\N	015	11	CAPADARE	0	0
309	\N	016	11	CAPATÁRIDA	0	0
310	\N	017	11	CASIGUA	0	0
311	\N	018	11	CHICHIRIVICHE	0	0
312	\N	019	11	CHURUGUARA	0	0
313	\N	020	11	CURIMAGUA	0	0
314	\N	021	11	DABAJURO	0	0
315	\N	022	11	EL CHARAL	0	0
316	\N	023	11	EL HATO	0	0
317	\N	024	11	EL MANANTIAL (AGUA CLARA)	0	0
318	\N	025	11	EL MENE DE SAN LORENZO	0	0
319	\N	026	11	EL MOYEPO	0	0
320	\N	027	11	EL PAUJÍ	0	0
321	\N	028	11	EL TUPÍ	0	0
119	\N	010	5	EL CONSEJO	0	0
120	\N	011	5	EL LIMÓN	0	0
121	\N	012	5	FRANCISCO DE MIRANDA	0	0
122	\N	013	5	GÜIRIPA	0	0
123	\N	014	5	LA COLONIA TOVAR	0	0
124	\N	015	5	LA PICA	0	0
125	\N	016	5	LA VICTORIA	0	0
126	\N	017	5	LAS GUACAMAYAS	0	0
127	\N	018	5	LAS MERCEDES	0	0
128	\N	019	5	LAS PEÑITAS	0	0
129	\N	020	5	LAS TEJERÍAS	0	0
130	\N	021	5	LOS BAGRES	0	0
131	\N	022	5	MAGDALENO	0	0
132	\N	023	5	MARACAY	0	0
133	\N	024	5	OCUMARE DE LA COSTA	0	0
134	\N	025	5	OLLAS DE CARAMACATE	0	0
135	\N	026	5	PALO NEGRO	0	0
136	\N	027	5	PAO DE ZÁRATE	0	0
137	\N	028	5	PARAPARAL	0	0
138	\N	029	5	ROSARIO DE PAYA	0	0
139	\N	030	5	SAN CASIMIRO	0	0
140	\N	031	5	SAN FRANCISCO DE ASÍS	0	0
141	\N	032	5	SAN FRANCISCO DE CARA	0	0
142	\N	033	5	SAN JOAQUÍN	0	0
143	\N	034	5	SAN MATEO	0	0
144	\N	035	5	SAN SEBASTIÁN	0	0
145	\N	036	5	SANTA CRUZ	0	0
146	\N	037	5	SANTA RITA	0	0
147	\N	038	5	TAGUAY	0	0
148	\N	039	5	TIARA	0	0
149	\N	040	5	TOCORÓN	0	0
150	\N	041	5	TURMERO	0	0
151	\N	042	5	VALLE MORÍN	0	0
152	\N	043	5	VILLA DE CURA	0	0
153	\N	044	5	ZUATA	0	0
154	\N	001	6	ALTAMIRA	0	0
155	\N	002	6	ARISMENDI	0	0
156	\N	003	6	BARINAS	0	0
157	\N	004	6	BARINITAS	0	0
158	\N	005	6	BARRANCAS	0	0
159	\N	006	6	BUM-BUM	0	0
160	\N	007	6	CALDERAS	0	0
161	\N	008	6	CAPITANEJO	0	0
162	\N	009	6	CHAMETA	0	0
163	\N	010	6	CIUDAD BOLIVIA	0	0
164	\N	011	6	CIUDAD DE NUTRIAS	0	0
165	\N	012	6	CURBATÍ	0	0
166	\N	013	6	DOLORES	0	0
167	\N	014	6	EL CANTÓN	0	0
168	\N	015	6	EL COROZO	0	0
169	\N	016	6	EL REAL	0	0
170	\N	017	6	EL REGALO	0	0
171	\N	018	6	GUADARRAMA	0	0
172	\N	019	6	LA CARAMUCA	0	0
173	\N	020	6	LA LUZ	0	0
174	\N	021	6	LA MULA	0	0
175	\N	022	6	LA UNIÓN	0	0
176	\N	023	6	LA YUCA	0	0
177	\N	024	6	LIBERTAD	0	0
178	\N	025	6	LOS GUASIMITOS	0	0
179	\N	026	6	MAPORAL	0	0
180	\N	027	6	MASPARRITO	0	0
181	\N	028	6	MIJAGUAL	0	0
182	\N	029	6	OBISPOS	0	0
183	\N	030	6	PEDRAZA LA VIEJA	0	0
184	\N	031	6	PUERTO DE NUTRIAS	0	0
185	\N	032	6	PUERTO VIVAS	0	0
186	\N	033	6	PUNTA DE PIEDRA	0	0
187	\N	034	6	QUEBRADA SECA	0	0
188	\N	035	6	SABANETA	0	0
189	\N	036	6	SAN ANTONIO	0	0
190	\N	037	6	SAN RAFAEL DE CANAGUÁ	0	0
191	\N	038	6	SAN SILVESTRE	0	0
192	\N	039	6	SANTA BÁRBARA	0	0
193	\N	040	6	SANTA CATALINA	0	0
194	\N	041	6	SANTA CRUZ DE GUACAS	0	0
195	\N	042	6	SANTA INÉS	0	0
196	\N	043	6	SANTA LUCÍA	0	0
197	\N	044	6	SANTA ROSA	0	0
198	\N	045	6	SOCOPÓ	0	0
199	\N	046	6	TORUNOS	0	0
200	\N	047	6	VEGUITAS	0	0
201	\N	001	7	ALMACÉN	0	0
202	\N	002	7	ARIPAO	0	0
203	\N	003	7	CAICARA DEL ORINOCO	0	0
204	\N	004	7	CIUDAD BOLÍVAR	0	0
205	\N	005	7	CIUDAD GUAYANA	0	0
206	\N	006	7	CIUDAD PIAR	0	0
207	\N	007	7	EL CALLAO	0	0
208	\N	008	7	EL DORADO	0	0
209	\N	009	7	EL MANTECO	0	0
210	\N	010	7	EL MIAMO	0	0
211	\N	011	7	EL MILAGRO	0	0
212	\N	012	7	EL PALMAR	0	0
213	\N	013	7	EL PAO DE EL HIERRO	0	0
214	\N	014	7	EL ROSARIO	0	0
215	\N	015	7	GUARATARO	0	0
216	\N	016	7	GUASIPATI	0	0
217	\N	017	7	IKABARÚ	0	0
218	\N	018	7	LA CAROLINA	0	0
219	\N	019	7	LA PARAGUA	0	0
18	\N	017	2	PENDARE	0	0
19	\N	018	2	PLATANILLAL	0	0
20	\N	019	2	PUERTO AYACUCHO	0	0
21	\N	020	2	SAMARIAPO	0	0
22	\N	021	2	SAN CARLOS DE RÍO NEGRO	0	0
23	\N	022	2	SAN FERNANDO DE ATABAPO	0	0
24	\N	023	2	SAN JUAN DE MANAPIARE	0	0
25	\N	024	2	SAN PEDRO DEL ORINOCO	0	0
26	\N	025	2	SANTA LUCÍA	0	0
27	\N	026	2	SOLANO	0	0
28	\N	027	2	TOKY-SHAMANAÑA	0	0
29	\N	028	2	VICTORINO	0	0
30	\N	001	3	ANACO	0	0
31	\N	002	3	ARAGUA DE BARCELONA	0	0
32	\N	003	3	ATAPIRIRE	0	0
33	\N	004	3	BARCELONA	0	0
34	\N	005	3	BERGANTÍN	0	0
35	\N	006	3	BOCA DE CHÁVEZ	0	0
36	\N	007	3	BOCA DE UCHIRE	0	0
37	\N	008	3	BOCA DEL PAO	0	0
38	\N	009	3	CACHIPO	0	0
39	\N	010	3	CAIGUA	0	0
40	\N	011	3	CANTAURA	0	0
41	\N	012	3	CARAPA	0	0
42	\N	013	3	CLARINES	0	0
43	\N	014	3	EL CARITO	0	0
44	\N	015	3	EL CHAPARRO	0	0
45	\N	016	3	EL HATILLO	0	0
46	\N	017	3	EL PAO DE BARCELONA	0	0
47	\N	018	3	EL PILAR	0	0
48	\N	019	3	EL TIGRE	0	0
49	\N	020	3	GUANAPE	0	0
50	\N	021	3	GUANTA	0	0
51	\N	022	3	JOSÉ GREGORIO MONAGAS	0	0
52	\N	023	3	LECHERÍAS	0	0
53	\N	024	3	MAPIRE	0	0
54	\N	025	3	MÚCURA	0	0
55	\N	026	3	MUNDO NUEVO	0	0
56	\N	027	3	NARICUAL	0	0
57	\N	028	3	ONOTO	0	0
58	\N	029	3	PARIAGUÁN	0	0
59	\N	030	3	PERTIGALETE	0	0
60	\N	031	3	PÍRITU	0	0
61	\N	032	3	POZUELOS	0	0
62	\N	033	3	PUEBLO NUEVO	0	0
63	\N	034	3	PUERTO LA CRUZ	0	0
64	\N	035	3	PUERTO PÍRITU	0	0
65	\N	036	3	SABANA DE UCHIRE	0	0
66	\N	037	3	SAN DIEGO DE CABRUTICA	0	0
67	\N	038	3	SAN FRANCISCO	0	0
68	\N	039	3	SAN JOAQUÍN	0	0
69	\N	040	3	SAN JOSÉ DE GUANIPA (EL TIGRITO)	0	0
70	\N	041	3	SAN MATEO	0	0
71	\N	042	3	SAN MIGUEL	0	0
72	\N	043	3	SAN PABLO	0	0
73	\N	044	3	SANTA ANA	0	0
74	\N	045	3	SANTA BÁRBARA	0	0
75	\N	046	3	SANTA CLARA	0	0
76	\N	047	3	SANTA CRUZ DE ORINOCO	0	0
77	\N	048	3	SANTA INÉS	0	0
78	\N	049	3	SANTA ROSA	0	0
79	\N	050	3	SOLEDAD	0	0
80	\N	051	3	URICA	0	0
81	\N	052	3	UVERITO	0	0
82	\N	053	3	VALLE DE GUANAPE	0	0
83	\N	054	3	ZUATA	0	0
84	\N	001	4	ACHAGUAS	0	0
85	\N	002	4	APURITO	0	0
86	\N	003	4	ARICHUNA	0	0
87	\N	004	4	BIRUACA	0	0
88	\N	005	4	BRUZUAL	0	0
89	\N	006	4	EL AMPARO	0	0
90	\N	007	4	EL NULA	0	0
91	\N	008	4	EL RECREO	0	0
92	\N	009	4	EL SAMÁN DE APURE	0	0
93	\N	010	4	EL YAGUAL	0	0
94	\N	011	4	ELORZA	0	0
95	\N	012	4	GUACHARA	0	0
96	\N	013	4	GUASDUALITO	0	0
97	\N	014	4	GUASIMAL	0	0
98	\N	015	4	LA ESTACADA	0	0
99	\N	016	4	LA TRINIDAD DE ORICHUNA	0	0
100	\N	017	4	LA VICTORIA	0	0
101	\N	018	4	MANTECAL	0	0
102	\N	019	4	PALMARITO	0	0
103	\N	020	4	PUERTO PÁEZ	0	0
104	\N	021	4	QUINTERO	0	0
105	\N	022	4	SAN FERNANDO DE APURE	0	0
106	\N	023	4	SAN JUAN DE PAYARA	0	0
107	\N	024	4	SAN MIGUEL DE CUNAVICHE	0	0
108	\N	025	4	SAN RAFAEL DE ATAMAICA	0	0
109	\N	026	4	SAN VICENTE	0	0
110	\N	001	5	19 DE ABRIL	0	0
111	\N	002	5	BARBACOAS	0	0
112	\N	003	5	BELLA VISTA	0	0
113	\N	004	5	CAGUA	0	0
114	\N	005	5	CAMATAGUA	0	0
115	\N	006	5	CAÑA DE AZÚCAR	0	0
116	\N	007	5	CARMEN DE CURA	0	0
117	\N	008	5	CHORONÍ	0	0
118	\N	009	5	CHUAO	0	0
1	\N	001	1	CARACAS	0	0
3	\N	002	2	CACURÍ	0	0
4	\N	003	2	CAMANI	0	0
5	\N	004	2	COMUNIDAD	0	0
6	\N	005	2	CURIMACARE	0	0
7	\N	006	2	GUARINUMA	0	0
8	\N	007	2	ISLA RATÓN	0	0
9	\N	008	2	LA ESMERALDA	0	0
10	\N	009	2	LAJA LISA	0	0
11	\N	010	2	LIMÓN DE PARHUEÑA	0	0
12	\N	011	2	MACURUCO	0	0
13	\N	012	2	MAROA	0	0
14	\N	013	2	MARUETA	0	0
15	\N	014	2	MAVACA	0	0
16	\N	015	2	MUNDUAPO	0	0
17	\N	016	2	PARIMABÉ	0	0
\.


--
-- TOC entry 7434 (class 0 OID 184219)
-- Dependencies: 221
-- Data for Name: clasificacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY clasificacion (id_clasificacion, cod_clasificacion, nombre, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7435 (class 0 OID 184223)
-- Dependencies: 222
-- Data for Name: clasificaciondependencia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY clasificaciondependencia (id_clasificacion_dependencia, id_dependencia, id_caracteristica_dependencia) FROM stdin;
\.


--
-- TOC entry 7436 (class 0 OID 184226)
-- Dependencies: 223
-- Data for Name: clasificacionpersonal; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY clasificacionpersonal (id_clasificacion_personal, id_categoria_personal, id_relacion_personal, id_categoria_presupuesto) FROM stdin;
11	2	1	2
2	1	2	3
12	2	2	3
22	3	2	3
52	6	2	3
1	1	1	1
3	1	3	1
6	1	6	1
7	1	9	1
8	1	10	1
21	3	1	1
25	3	6	1
26	3	10	1
31	4	1	1
34	4	6	1
35	4	10	1
43	5	6	1
44	5	7	1
45	5	8	1
51	6	1	1
55	6	6	1
56	6	10	1
61	7	10	1
71	8	10	1
4	1	4	4
5	1	5	5
13	2	4	4
14	2	5	5
15	2	6	2
16	2	10	2
23	3	4	4
24	3	5	5
32	4	4	4
33	4	5	5
41	5	4	4
42	5	5	5
53	6	4	4
54	6	5	5
\.


--
-- TOC entry 7437 (class 0 OID 184229)
-- Dependencies: 224
-- Data for Name: comisionservicio; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY comisionservicio (id_comision_servicio, id_sede_diplomatica, fecha_fin, fecha_inicio, id_personal, observaciones, nombre_institucion, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7438 (class 0 OID 184236)
-- Dependencies: 225
-- Data for Name: comisionservicioext; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY comisionservicioext (id_comision_servicio_ext, id_sede_diplomatica, fecha_fin, fecha_inicio, id_personal, observaciones, nombre_institucion, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7439 (class 0 OID 184243)
-- Dependencies: 226
-- Data for Name: concepto; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY concepto (id_concepto, cod_concepto, descripcion, tipo_prestamo, unidad, valor, reservado, sueldo_basico, compensacion, primas_cargo, primas_trabajador, gravable, deduccion_sindicato, deduccion_gremio, sobretiempo, beneficio, jubilacion, anticipo, deduccion_caja, aporte_patronal, embargo, prestaciones_nr, prestaciones_vr, onapre, recalculo, anual, ocurrencia, movimiento, proyeccion, base_legal, id_organismo, id_sitp, tiempo_sitp, id_concepto_aporte, ajuste_sueldo, sueldo_integral, retroactivo, id_concepto_retroactivo, id_concepto_caja, retroactivo_anterior, id_concepto_retroactivo_anterior) FROM stdin;
125	0401	DIFERENCIA  PRIMA PROFESIONALIZACION (E/S)	N	M	0	S	N	N	N	S	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	S	S	164	\N	N	\N
65	0405	PRIMA POR RAZONES DE SERVICIO	N	M	0	S	N	N	N	S	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	S	S	334	\N	N	\N
71	0009	REMUNERACION POR SUPLENCIA	N	D	0	S	S	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	S	N	\N	\N	N	\N
122	0201	BONO COMPLEMENTARIO JORNADA EXTRA (65%)	N	M	0	S	N	N	N	S	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	S	S	261	\N	N	\N
123	0202	BONO COMPLEMENTARIO JORNADA EXTRA (70%)	N	M	0	S	N	N	N	S	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	S	S	441	\N	N	\N
124	0203	BONO COMPLEMENTARIO JORNADA EXTRA (75%)	N	M	0	S	N	N	N	S	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	S	S	442	\N	N	\N
62	0200	BONIFICACION ESPECIAL	N	M	0	S	N	N	S	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	S	S	431	\N	N	\N
69	0506	PRIMA POR MOTO	N	D	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
701	3010	RETROACTIVO REMUNERACION POR SUPLENCIA	R	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
413	0269	BONO UNICO  AYUDA NAVIDEÑA	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
126	0520	PRIMA SINDICAL	N	M	0	S	N	N	N	S	S	N	N	N	N	N	N	N	N	N	S	S	S	S	S	1	S	N	 	11	0	\N	\N	N	S	S	432	\N	N	\N
130	0006	REMUNERACION POR ENCARGADURIA	N	D	0	S	N	N	N	S	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	S	N	\N	\N	N	\N
131	0007	DIFERENCIA POR SUPLENCIA	N	D	0	S	N	N	N	S	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	S	N	\N	\N	N	\N
70	0008	DIFERENCIA POR ENCARGADURIA	N	D	0	S	N	N	N	S	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	S	S	163	\N	N	\N
185	0137	DIFERENCIA BONO JERARQUIA( E)	N	M	0	S	N	N	N	S	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	S	S	168	\N	N	\N
120	0015	AJUSTE SUELDO MINIMO	N	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
1054	3526	RETROACTIVO PAGO DE GASTOS POR PERMANENCIA	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
79	0112	PRIMA DE RIESGO	N	D	0	S	N	N	S	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
21	2027	HORAS EXTRAS DIURNAS	N	H	0	S	N	N	N	N	S	N	N	S	N	S	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
22	2030	HORAS EXTRAS NOCTURNAS	N	H	0	S	N	N	N	N	S	N	N	S	N	S	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
331	0024	COMPENSACIONES NO CANCELADAS 	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
336	6006	DESCUENTO BONO AYUDA ESCOLAR	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
432	3520	RETROACTIVO DE PRIMA SINDICAL	R	D	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
18	2018	DIA FERIADO LABORADO	N	D	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
102	5016	AJUSTE/RETROACTIVO HCM	R	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
109	3001	RETROACTIVO SUELDO BASICO	R	D	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	S	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
110	3002	RETROACTIVO SUELDO BASICO (TP)	R	D	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
111	3003	RETROACTIVO SALARIO 	R	D	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	52	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
734	0029	3 ULTIMOS DIAS DEL AÑO	N	D	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	S	N	N	\N	\N	N	\N
163	3008	RETROACTIVO DIFERENCIA  ENCARGADURIA	R	D	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
117	3400	RETROACTIVO PRIMA DE PROFESIONALIZACION	R	D	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
187	3130	RETROACTIVO BONO JERARQUIA (E)	R	D	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
115	3020	RETROACTIVO COMPENSACION	R	D	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
644	0327	BONO VACACIONAL DEBITADO	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
119	3025	AJUSTE BONO VACACIONAL	N	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
103	4801	REINTEGRO SSO	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
104	4802	REINTEGRO SPF	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
105	4803	REINTEGRO LPH	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
193	0014	DIFERENCIA SUELDO BASICO, MOVIMIENTO PERSONAL	N	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
75	0021	COMPENSACION POR EVALUACION	N	D	0	S	N	S	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
411	4807	REINTEGRO POR DESCUENTO NO PROCEDENTES	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
68	0005	AUMENTO POR DECRETO	N	D	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
171	3007	RETROACTIVO HONORARIOS PROFESIONALES	R	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
453	0025	SMN CONT FEB06	N	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
431	3200	RETROACTIVO BONIFICACION ESPECIAL	R	D	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
334	3405	RETROACTIVO PRIMA RAZONES DE SERVICIO 	R	D	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
96	7302	MONTEPIO CAPRANDES	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	S	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
190	0022	DIFERENCIA COMPENSACION,  MOVIMIENTO PERSONAL	N	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
132	0013	HONORARIOS PROFESIONALES 	N	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	S	171	\N	N	\N
189	0205	DIFERENCIA BONO CLAUSULA 23 Y 52 	N	M	0	S	N	N	S	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
11	0510	PRIMA ALIMENTACION	N	M	0	S	N	N	N	N	S	N	N	N	S	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
59	0100	BONO COMPENSATORIO	N	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
511	0026	HONORARIOS PROFESIONALES (POR HORAS)	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
192	0106	DIFERENCIA BONO EVALUACION	N	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
127	5020	RESCARVEN	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
128	5021	SERVICIOS FUNERARIOS	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
52	7000	SINDICATO S.U.N.E.P.	N	M	0	S	N	N	N	N	N	S	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
106	4804	REINTEGRO FJU	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
107	4805	REINTEGRO IPASME	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
108	4806	REINTEGRO HCM	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
77	0041	ASIGNACION POR VEHICULO	N	D	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
80	0115	BONO POR QUINQUENIO	N	D	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
76	0040	GASTOS DE REPRESENTACION	N	D	0	S	N	N	S	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	S	N	\N	\N	N	\N
14	2000	BONO NOCTURNO	N	D	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
83	4007	BONO TRANSPORTE	N	D	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
93	5010	DESCUENTO HCM	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
94	7300	INAVI	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
95	7301	INCE	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
63	0250	BONO EXTRAORDINARIO	N	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
50	9000	EMBARGO (PENSION ALIMENTICIA)	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
72	0255	BONO UNICO POR EVALUACION	N	D	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
73	0507	PRIMA POR HOGAR	N	D	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
31	4100	BECA TRABAJADOR	B	M	0	S	N	N	N	N	N	N	N	N	S	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
34	4300	TICKET ALIMENTACION	T	M	0	S	N	N	N	N	S	N	N	N	S	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
35	4310	TICKET JUGUETES	T	M	0	S	N	N	N	N	S	N	N	N	S	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
36	4320	TICKET UTILES	T	M	0	S	N	N	N	N	S	N	N	N	S	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
531	0141	BONO UNICO ESPECIAL MES SALARIO INTEGRAL	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
541	0208	DIFERENCIA BONO COMPLEMENTARIO JORNADA EXT.	N	M	0	N	N	N	N	S	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
24	2035	ALMUERZO	N	M	0	S	N	N	N	N	S	N	N	N	S	S	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
60	0105	BONO POR EVALUACION DESEMPEÑO	N	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
33	4200	DOTACIONES	N	M	0	S	N	N	N	N	S	N	N	N	S	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
23	2033	LUNCH	N	M	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
924	3522	RETROACTIVO DE PRIMA TRANSPORTE	R	D	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
188	0204	BONO CLAUSULA 23 Y 52	N	M	0	S	N	N	S	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
373	0612	DIF. BONO RET AL ESFUERZO POR EVALUACION EFIC.	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	N	S	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
194	0240	DOBLE REMUNERACION	N	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
374	0613	DIF. BONO  POR EVALUACION DE EFICIENCIA	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	N	S	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
116	3500	RETROACTIVO PRIMA ANTIGUEDAD	R	M	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
462	3009	RETROACTIVO POR ENCARGADURIA	R	D	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
53	7100	SINDICATO F.E.N.O.D.E.	N	M	0	S	N	N	N	N	N	S	N	N	N	N	N	N	N	N	S	S	S	S	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
333	4009	PAGOS NO RELACIONADOS	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	N	S	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
242	0206	DIFERENCIA BONIFICACION ESPECIAL 	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	N	S	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
371	0607	DIF. BONO VACACIONAL POR EVALUACION DE EFICIENCIA	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	N	S	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
136	6000	DESCUENTO POR INASISTENCIA	N	D	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
137	6001	DESCUENTO TRANSPORTE INASISTENCIA	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
233	3250	RETROACTIVO BONO EXTRAORDINARIO	R	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	N	S	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
151	6002	DESCUENTO RECALCULO INTERESES PSS	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
54	7101	SINDICATO S.O.N.T.E.Z.	N	M	0	S	N	N	N	N	N	S	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
55	7102	SINDICATO LA GUAIRA	N	M	0	S	N	N	N	N	N	S	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
56	7103	SINDICATO PUERTO CABELLO	N	M	0	S	N	N	N	N	N	S	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
57	7104	FETRA CARABOBO	N	M	0	S	N	N	N	N	N	S	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
221	6003	DESCUENTO DE BONIFICACION POR BONO VACACIONAL	N	D	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
464	0207	RETROACTIVO BONIFICACION ESPECIAL	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
465	0608	DIF. BONO VACACIONAL X AUMENTO DE SALARIO	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
280	0406	DIF PRIMA RAZONES DE SERVICIO, MOVIMIENTO PERSONAL	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
191	0402	DIFERENCIA PRIMA PROFESIONAL,  MOVIMIENTO PERSONAL	N	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
25	2037	CENA	N	M	0	S	N	N	N	N	S	N	N	N	S	S	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
671	6007	RETENCION PENSION BONO DE FIN DE AÑO	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
29	4003	BONO NACIMIENTO	N	M	0	S	N	N	N	N	S	N	N	N	S	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
30	4004	BONO MATRIMONIO	N	M	0	S	N	N	N	N	S	N	N	N	S	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
81	4005	BONO DEFUNCION	N	D	0	S	N	N	N	N	S	N	N	N	S	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
82	4006	BONO ALIMENTACION	N	D	0	S	N	N	N	N	S	N	N	N	S	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
291	0267	DIF. BONO UNICO PERSONAL CONTRATADO	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
722	0210	DIF. BONIF. JORNADA EXTRAORDINARIA DE TRABAJO	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
421	0140	INCREMENTO POR EVALUAC. DE EFIC. OBRERO	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	N	S	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
481	1503	BONO VACACIONAL ESTIMADO	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
491	3404	RETROACTIVO PRIMA PROFESIONALIZACION ( E )	R	D	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
372	0611	DIF. BONO AYUDA  ESC. POR EVALUACION DE EFICIENCIA	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	N	S	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
245	0263	DIFERENCIA BONO PRODUCTIVIDAD	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
554	0028	DIFERENCIA SALARIO BASICO	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
244	0262	BONO PRODUCTIVIDAD	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
472	0139	BONO INCENTIVO A LA BUENA LABOR	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
571	0270	BONO DE PRODUCCION	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
591	0142	BONO RETRIBUCION ESPECIAL AL ESFUERZO	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
583	0609	DIFERENCIA DE  BONO VACACIONAL COM. DE  SERV.	L	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	S	N	\N	\N	N	\N
58	7105	SINAOP-M.F.	N	M	0	S	N	N	N	N	N	S	N	N	N	N	N	N	N	N	S	S	S	S	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
290	0266	BONO UNICO ESPECIAL COMPLEMENTARIO	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
584	5264	DESCUENTO BONO SUNEP	N	D	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
48	8000	DEDUCCION CAJA DE  AHORRO	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
661	0274	COMPLEMENTO BONO DE PRODUCCION	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
603	0300	PRESTAMO HIPOTECARIO	S	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
611	3112	DIFERENCIA DE BONO VACACIONAL	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
643	0326	SUELDO BASICO  DEBITADO	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
682	9006	EMBARGO (BONO FIN DE AÑO)	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
352	3021	RETROACTIVO COMPENSACION POR EVALUAC. DE EFIC.	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	N	S	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
732	0275	BONO UNICO DE EFICIENCIA	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
684	8121	DESCUENTO PRESTAMO PLAN DE VIVIENDA	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
703	0252	DIFERENCIA POR CARGO	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
752	0276	BONO UNICO EFICIENCIA	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
753	0277	BONO UNICO COMPLEMENTARIO	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
711	8122	DESCUENTOS CUOTAS ESPECIAL PLAN DE VIVIENDA	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
755	0033	3 ULTIMOS DIAS DEL AÑO 	N	D	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
234	0403	PRIMA PROFESIONAL OBRERO	N	M	0	N	N	N	N	S	S	N	N	N	N	N	N	N	N	N	S	N	S	S	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
651	0273	DIFERENCIA BONO AYUDA ESCOLAR	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
741	2016	SUMINISTRO DE LECHE	N	M	0	S	N	N	N	N	S	N	N	N	S	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	S	N	\N	\N	N	\N
32	4101	BECA FAMILIAR	B	M	0	S	N	N	N	N	S	N	N	N	S	N	N	N	N	N	N	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
61	0120	BONO DE JERARQUIA	N	M	0	S	N	N	S	N	S	N	N	N	N	N	N	N	N	N	S	S	S	S	S	1	S	N	 	11	0	\N	\N	N	S	S	186	\N	N	\N
113	3005	AJUSTE PENSION	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	12	S	N	 	11	0	\N	\N	S	N	N	\N	\N	N	\N
114	3006	AJUSTE JUBILACION	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	12	S	N	 	11	0	\N	\N	S	N	N	\N	\N	N	\N
112	3004	RETROACTIVO SALARIO (Q)	R	D	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
121	0130	BONO DE JERARQUIA (E)	N	M	0	S	N	N	N	S	S	N	N	N	N	N	N	N	N	N	S	S	S	S	S	1	S	N	 	11	0	\N	\N	N	S	N	\N	\N	N	\N
135	0521	PRIMA POR EVALUACION Y  EFICIENCIA	N	M	0	S	N	N	N	S	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
168	3137	RETROACTIVO DIFERENCIA BONO JERARQUIA (E)	R	D	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
178	0127	DIFERENCIA BONO JERARQUIA	N	M	0	S	N	N	S	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
186	3120	RETROACTIVO BONO JERARQUIA	R	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
211	3521	RETROACTIVO PRIMA POR EVALUACION Y EFICIENCIA	R	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	N	S	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
222	0251	BONIFICACION ESPECIAL	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	N	S	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
231	3019	RETROACTIVO AJUSTE SALARIO	R	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	S	S	S	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
201	0019	AJUSTE SALARIO	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	N	S	N	N	1	N	N	\N	11	0	\N	\N	S	N	N	\N	\N	N	\N
232	6004	DESCUENTO POR AUSENCIA	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
250	0256	BONO UNICO ESPECIAL	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
261	3201	RETROACTIVO BONO JORNADA EXTRA	R	D	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
321	0268	BONO AYUDA ESCOLAR	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
335	4010	APORTE ESPECIAL CAJA DE AHORRO	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
454	0404	PRIMA PROFESIONALIZACION (E)	N	M	0	N	N	N	S	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
501	0253	REINTEGRO BONIFICACION ESPECIAL	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
683	2014	COMPLEMENTO BONO NAVIDEÑO	N	M	0	N	N	N	N	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
692	2013	BONO NAVIDEÑO	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	S	S	N	\N	\N	N	\N
563	3204	BONO MEDICINAS	N	M	0	N	N	N	N	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
581	0209	BONIFICACION ESPECIAL	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
622	0271	BONO AYUDA ESCOLAR	N	M	0	N	N	N	N	N	S	N	N	N	S	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
736	0407	DIFERENCIA DE BONIFICACION POR MOV. PERSONAL	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
441	3202	RETROACTIVO BONO JORNADA EXTRA (70%)	R	D	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
442	3203	RETROACTIVO BONO JORNADA  EXTRA (75%)	R	D	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
98	5012	AJUSTE/RETROACTIVO SPF	R	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
99	5013	AJUSTE/RETROACTIVO LPH	R	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
100	5014	AJUSTE/RETROACTIVO FJU	R	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
101	5015	AJUSTE/RETROACTIVO IPASME	R	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
412	1601	COMPLEMENTO BONO FIN DE AÑO	N	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
8	0020	COMPENSACION	N	D	0	S	N	S	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	S	S	115	\N	N	\N
7	0011	PENSION	N	D	0	S	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
97	5011	AJUSTE/RETROACTIVO SSO	R	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
38	4991	APORTE PATRON SPF	A	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
27	4001	UTILES	N	M	0	S	N	N	N	N	S	N	N	N	S	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
39	4992	APORTE PATRON LPH	A	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
40	4993	APORTE PATRON FJU	A	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
3	0002	SUELDO BASICO (TP)	N	D	0	S	S	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
12	1500	BONO VACACIONAL	N	D	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
85	7200	COLEGIO DE INGENIEROS	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
86	7201	COLEGIO DE ABOGADOS	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
87	7203	COLEGIO DE CONTADORES	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
88	7204	COLEGIO DE MEDICOS	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
90	7206	COLEGIO DE FARMACEUTAS	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
47	5005	IPASME	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
89	7205	COLEGIO DE ENFERMERAS	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
41	4994	APORTE PATRON IPASME	A	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
1061	3527	RETROACTIVO DE JUBILACIÓN	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
67	5000	NETO NOMINA	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
26	4000	PRIMA POR HIJO	N	M	0	S	N	N	N	N	S	N	N	N	S	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
28	4002	JUGUETES	N	M	0	S	N	N	N	N	S	N	N	N	S	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
6	0010	JUBILACION	N	D	0	S	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	12	S	N	 	11	0	\N	\N	N	N	N	113	\N	N	\N
614	8118	PRESTAMO ESPECIAL O CONFIANZA	S	M	0	N	N	N	N	N	N	N	N	N	N	N	N	S	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	830	N	\N
2	0001	SUELDO BASICO	N	D	0	S	S	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	S	S	109	\N	N	\N
64	0400	PRIMA DE PROFESIONALIZACION	N	M	0	S	N	N	N	S	S	N	N	N	N	N	N	N	N	N	S	S	S	S	S	1	S	N	 	11	0	\N	\N	N	S	S	117	\N	N	\N
612	8116	PRESTAMO CORTO PLAZO	S	M	0	N	N	N	N	N	N	N	N	N	N	N	N	S	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	830	N	\N
84	4008	JARDIN INFANCIA/GUARDERIA	N	D	0	S	N	N	N	N	S	N	N	N	S	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
44	5002	SPF	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	S	N	N	N	S	N	S	1	S	N	 	11	0	\N	38	N	N	S	98	\N	N	\N
45	5003	LPH	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	S	N	N	N	S	N	S	1	S	N	 	11	0	\N	39	N	N	S	99	\N	N	\N
4	0003	SALARIO 	N	D	0	S	S	N	N	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	52	S	N	 	11	0	\N	\N	N	N	S	111	\N	N	\N
46	5004	FJU	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	S	N	S	S	S	N	S	1	S	N	 	11	0	\N	40	N	N	S	100	\N	N	\N
5	0004	SALARIO (Q)	N	D	0	S	N	N	N	N	S	N	N	N	N	S	N	N	N	N	N	N	N	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
91	7202	COLEGIO DE ECONOMISTAS	N	D	0	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
92	7207	ASOCIACION PROFESIONALES Y TECNICOS	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
13	1600	BONO FIN DE AÑO	N	D	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
761	1602	BONO EXTRA FIN DE AÑO	N	M	0	S	N	N	N	N	S	N	N	N	S	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
763	1701	ALICUOTA BONO PETROLERO	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
764	1800	PRESTACIONES ANTIGUEDAD	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
765	1801	INTERESES SOBRE PRESTACIONES ANTIGUEDAD	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
762	1700	BONO PETROLERO	N	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
766	1802	DEUDA REGIMEN DEROGADO	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
767	1803	INTERESES DEUDA REGIMEN DEROGADO	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
768	1804	PREAVISO	N	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
769	1805	DIAS ADICIONALES PRESTACIONES ANTIGUEDAD	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
770	7208	COLEGIO DE BIOANALISTAS	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
771	7209	COLEGIO DE PERIODISTAS	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
831	5017	AJUSTE/RETROACTIVO CAHOMIM	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	S	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	830	N	\N
830	5018	RETENCIÓN CAHOMIM	H	M	0	N	N	N	N	N	N	N	N	N	N	N	N	S	S	N	N	N	N	N	N	1	N	N	\N	11	0	\N	42	N	N	N	\N	\N	N	\N
37	4990	APORTE PATRON SSO	A	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
42	4995	APORTE PATRON CAJA DE AHORRO	A	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
841	0418	RETROACTIVO PRIMA POR MERITO	R	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
842	0419	RETROACTIVO PRIMA JERARQUIA	R	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
843	0420	RETROACTIVO PRIMA RESPONSABILIDAD	R	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
49	8100	PRESTAMO CAJA DE AHORRO	S	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
861	8120	PRESTAMO CAHOMIM LINEA BLANCA	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
801	0410	PRIMA POR RESPONSABILIDAD	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	S	S	843	\N	N	\N
844	0017	RETROACTIVO COMPLEMENTO SUELDO	R	D	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
845	0118	RETROACTIVO OTROS COMPLEMENTOS	R	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
822	0018	OTROS COMPLEMENTOS	N	M	0	N	N	N	N	N	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	39	N	S	S	845	\N	N	\N
847	0113	RETROACTIVO PRIMA DE RIESGO	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	S	N	\N	\N	N	\N
848	0030	REMUNERACION DEJADO DE PERCIBIR	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
849	5030	PAGOS INDEBIDOS	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
51	9999	I.S.L.R.	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	S	S	S	N	S	1	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
851	8119	MONTEPIO CAHOMIN	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
10	0505	PRIMA TRANSPORTE	N	M	0	S	N	N	S	S	S	N	N	N	N	N	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	S	S	924	\N	N	\N
613	8117	PRESTAMO MEDIANO PLAZO	S	M	0	N	N	N	N	N	N	N	N	N	N	N	N	S	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	830	N	\N
43	5001	SSO	N	M	0	S	N	N	N	N	N	N	N	N	N	N	N	N	S	N	N	N	S	S	S	1	S	N	 	11	0	\N	37	N	N	S	97	\N	N	\N
927	2051	PAGO DE RETROACTIVO DE PRIMA TRANSPORTE	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
78	0111	PRIMA DE RESPONSABILIDAD	N	D	0	S	N	N	S	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	N	\N	\N	N	\N
794	0408	PRIMA POR MERITO	N	M	0	N	N	N	S	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	S	S	841	\N	N	\N
795	0409	PRIMA POR JERARQUIA	N	M	0	N	N	N	S	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	S	S	842	\N	N	\N
793	0016	COMPLEMENTO SUELDO	N	M	0	N	N	N	S	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	S	S	844	\N	N	\N
885	0045	COMPLEMENTO POR COMISIÒN DE SERVICIO	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
891	0605	DIFERENCIA ENCARGADURIA EN CARGO ALTO NIVEL Y  DIR	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	S	N	\N	\N	N	\N
893	0619	RETROACTIVO DE PRIMA ALTO NIVEL Y DIRECCION	N	M	0	N	N	N	S	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
895	4808	REINTEGRO DE CAHOMIM 	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
339	1501	ALICUOTA BONO VACACIONAL	N	M	0	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	S	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
905	8102	DESCUENTO DE CAHOMIN NO REALIZADO EN QCNA ANTERIOR	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	S	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	830	N	\N
897	8001	DESCUENTO DE PRESTAMO NO REALIZADO OPORTUNAMENTE	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	S	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	830	N	\N
913	2050	BONO AL MERITO EN EL TRABAJO Y PRODUCTIVIDAD	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
881	0411	PRIMA DE ALTO NIVEL Y DIRECCION	N	M	0	N	N	N	S	S	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	S	S	994	\N	N	\N
871	0264	PAGO POR GASTOS DE PERMANENCIA	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	S	1053	\N	N	\N
1091	2038	ASIGNACIÓN MENSUAL	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
1102	3528	RETROACTIVO ASIGNACIÓN MENSUAL	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
1111	2024	DIA ADICIONAL	N	D	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
1122	5022	DESCUENTO POR PAGO ANTICIPADO	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
1134	0414	RETROACTIVO PRIMA DE PROFES TSU	R	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
1132	0412	PRIMA DE PROFESIONALIZACION TSU	N	M	0	N	N	N	N	S	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	S	S	1134	\N	N	\N
1136	0415	RETROACTIVO PRIMA DE PROFES LIC	R	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
1135	0413	PRIMA DE PROFESIONALIZACION LIC	N	M	0	N	N	N	N	S	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	S	S	1136	\N	N	\N
982	0606	DIF. DE SUELDO POR ENCARGADURÍA CARGO DE CONFIANZA	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	S	S	\N	\N	N	\N
984	3519	RETROACTIVO COMPLEMENTO DE COMISIÓN DE SERVICIOS	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
993	3523	RETROACTIVO DE COMPENSACIÓN SALARIAL	R	D	0	N	N	S	N	N	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
994	0421	RETROACTIVO PRIMA DE ALTO NIVEL Y DIRECCION	R	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
998	0119	PRIMA DE RESPONSABILIDAD OBRERO	N	D	0	N	N	N	S	N	S	N	N	N	N	S	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
1002	8002	DESCUENTO DEL SSO NO REALIZADO OPORTUNAMENTE	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
1003	8003	DESCUENTO DEL SPF NO REALIZADO OPORTUNAMENTE	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
1004	8004	DESCUENTO DEL LPH NO REALIZADO OPORTUNAMENTE	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
1005	8005	DESCUENTO DEL FJP NO REALIZADO OPORTUNAMENTE	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
1012	8103	PAGO INDEBIDO POR AYUDA DE ÚTILES ESCOLARES	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
1021	0035	SALARIO CAIDO Y OTROS CONCEPTOS DEJADOS PERCIBIR 	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
1022	1502	BONO VACACIONAL NO PAGADO EN SU OPORTUNIDAD	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
1031	8104	DESCUENTO DE LO PAGADO 15/03/2013 POR CHEQUE	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
1042	3524	RETROACTIVO DE PRIMA DE RESPONSABILIDAD OBRERO	N	M	0	N	N	N	N	N	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
9	0500	PRIMA ANTIGUEDAD	N	D	0	S	N	N	N	S	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	S	116	\N	N	\N
1071	0501	DIFERENCIA PRIMA DE ANTIGÜEDAD	N	M	0	N	N	N	N	S	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	S	N	\N	\N	N	\N
74	0012	COMPENSACION SALARIAL	N	M	0	S	N	S	S	N	S	N	N	N	N	S	N	N	N	N	S	S	S	N	S	12	S	N	 	11	0	\N	\N	N	N	S	993	\N	N	\N
1053	3525	RECTROACTIVO PAGO POR GASTOS DE PERMANENCIA	R	M	0	N	N	N	N	S	S	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
1082	9998	AJUSTE / RETROACTIVO ISLR	N	M	0	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	N	1	N	N	\N	11	0	\N	\N	N	N	N	\N	\N	N	\N
\.


--
-- TOC entry 7440 (class 0 OID 184303)
-- Dependencies: 227
-- Data for Name: conceptoasociado; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptoasociado (id_concepto_asociado, id_concepto_tipo_personal, id_concepto_asociar, base, factor, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7441 (class 0 OID 184310)
-- Dependencies: 228
-- Data for Name: conceptocargo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptocargo (id_concepto_cargo, id_concepto_tipo_personal, id_cargo, excluir, monto, unidades, porcentaje, automatico_ingreso, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7442 (class 0 OID 184319)
-- Dependencies: 229
-- Data for Name: conceptocargoanio; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptocargoanio (id_concepto_cargo_anio, id_concepto_tipo_personal, id_cargo, monto, unidades, porcentaje, anios, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7443 (class 0 OID 184325)
-- Dependencies: 230
-- Data for Name: conceptoconstancia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptoconstancia (id_concepto_constancia, id_constancia, id_concepto_tipo_personal, origen) FROM stdin;
\.


--
-- TOC entry 7444 (class 0 OID 184329)
-- Dependencies: 231
-- Data for Name: conceptocuenta; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptocuenta (id_concepto_cuenta, id_concepto_tipo_personal, id_cuenta_presupuesto) FROM stdin;
\.


--
-- TOC entry 7445 (class 0 OID 184334)
-- Dependencies: 232
-- Data for Name: conceptocuentacontable; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptocuentacontable (id_concepto_cuenta, id_concepto_tipo_personal, id_cuenta_contable) FROM stdin;
\.


--
-- TOC entry 7446 (class 0 OID 184339)
-- Dependencies: 233
-- Data for Name: conceptodependencia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptodependencia (id_concepto_dependencia, id_concepto_tipo_personal, id_dependencia, excluir, unidades, monto, porcentaje, automatico_ingreso, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7447 (class 0 OID 184349)
-- Dependencies: 234
-- Data for Name: conceptodiplomatico; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptodiplomatico (id_concepto_diplomatico, id_trabajador, id_concepto_tipo_personal, monto) FROM stdin;
\.


--
-- TOC entry 7448 (class 0 OID 184353)
-- Dependencies: 235
-- Data for Name: conceptodocente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptodocente (id_concepto_docente, id_movimiento, id_concepto_tipo_personal, id_frecuencia_tipo_personal, unidades, monto, fecha_registro, variable) FROM stdin;
\.


--
-- TOC entry 7449 (class 0 OID 184359)
-- Dependencies: 236
-- Data for Name: conceptoespecifica; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptoespecifica (id_concepto_especifica, id_concepto_tipo_personal, id_uel_especifica, anio) FROM stdin;
\.


--
-- TOC entry 7450 (class 0 OID 184363)
-- Dependencies: 237
-- Data for Name: conceptoevaluacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptoevaluacion (id_concepto_evaluacion, id_tipo_personal, id_concepto_tipo_personal, eliminar_despues_aumento) FROM stdin;
\.


--
-- TOC entry 7451 (class 0 OID 184367)
-- Dependencies: 238
-- Data for Name: conceptofijo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptofijo (id_concepto_fijo, id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal, unidades, monto, fecha_registro, fecha_comienzo, fecha_eliminar, documento_soporte, estatus, id_sitp, tiempo_sitp, restituir, monto_restituir, unidades_restituir, monto_anterior, monto_proyectado) FROM stdin;
\.


--
-- TOC entry 7452 (class 0 OID 184379)
-- Dependencies: 239
-- Data for Name: conceptofijo_cambio_unidad; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptofijo_cambio_unidad (cedula, unidad, id_trabajador1) FROM stdin;
\.


--
-- TOC entry 7453 (class 0 OID 184382)
-- Dependencies: 240
-- Data for Name: conceptoliquidacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptoliquidacion (id_concepto_variable, id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal, unidades, monto, fecha_registro, documento_soporte, estatus, mes_sobretiempo, anio_sobretiempo, monto_proyectado) FROM stdin;
\.


--
-- TOC entry 7454 (class 0 OID 184392)
-- Dependencies: 241
-- Data for Name: conceptomovimiento; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptomovimiento (id_concepto_movimiento, id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal, anio, numero_movimiento, monto, monto_anterior) FROM stdin;
\.


--
-- TOC entry 7455 (class 0 OID 184397)
-- Dependencies: 242
-- Data for Name: conceptoprestaciones; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptoprestaciones (id_concepto_prestaciones, id_tipo_personal, id_concepto_tipo_personal, tipo, posicion_onapre, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7456 (class 0 OID 184404)
-- Dependencies: 243
-- Data for Name: conceptopresupuesto; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptopresupuesto (id_concepto_presupuesto, id_concepto_tipo_personal, id_cuenta_presupuesto) FROM stdin;
\.


--
-- TOC entry 7457 (class 0 OID 184409)
-- Dependencies: 244
-- Data for Name: conceptoproyectado; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptoproyectado (id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal, monto) FROM stdin;
\.


--
-- TOC entry 7458 (class 0 OID 184413)
-- Dependencies: 245
-- Data for Name: conceptoresumen; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptoresumen (id_concepto_resumen, id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal, id_unidad_administradora, anio, mes, numero_nomina, monto, unidades, tipo, cerrado) FROM stdin;
\.


--
-- TOC entry 7459 (class 0 OID 184424)
-- Dependencies: 246
-- Data for Name: conceptotipopersonal; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptotipopersonal (id_concepto_tipo_personal, id_concepto, id_tipo_personal, id_frecuencia_tipo_personal, tipo, valor, unidades, automatico_ingreso, tope_minimo, tope_maximo, tope_anual, monto_escenario, formula_concepto, multiplicador_formula, otra_moneda, homologacion, cod_concepto, cod_tipo_personal, cod_frecuencia_pago, base_legal, anual, ocurrencia, id_sitp, tiempo_sitp, id_contrato_colectivo, refleja_movimiento, aprobacion_mpd, recalculo, distribucion, base_jubilacion) FROM stdin;
\.


--
-- TOC entry 7460 (class 0 OID 184456)
-- Dependencies: 247
-- Data for Name: conceptotipopersonalhist; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptotipopersonalhist (id_concepto_tipo_personal, id_concepto, id_tipo_personal, id_frecuencia_tipo_personal, tipo, valor, unidades, automatico_ingreso, tope_minimo, tope_maximo, tope_anual, monto_escenario, formula_concepto, multiplicador_formula, otra_moneda, homologacion, cod_concepto, cod_tipo_personal, cod_frecuencia_pago, base_legal, anual, ocurrencia, id_sitp, tiempo_sitp, id_contrato_colectivo, refleja_movimiento, aprobacion_mpd, recalculo, distribucion, base_jubilacion) FROM stdin;
\.


--
-- TOC entry 7461 (class 0 OID 184482)
-- Dependencies: 248
-- Data for Name: conceptoutilidades; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptoutilidades (id_concepto_utilidades, id_tipo_personal, id_concepto_tipo_personal, tipo, mes_inicio, factor, tope_monto, tope_unidades, mes_buscar, semana_buscar, mes_final, numero_dias, numero_meses) FROM stdin;
\.


--
-- TOC entry 7462 (class 0 OID 184495)
-- Dependencies: 249
-- Data for Name: conceptovacaciones; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptovacaciones (id_concepto_vacaciones, id_tipo_personal, id_concepto_tipo_personal, tipo, mes_cerrado, mes30, numero_meses, factor, tope_monto, tope_unidades, id_sitp, tiempo_sitp, alicuota_vacacional, id_concepto_alicuota) FROM stdin;
\.


--
-- TOC entry 7463 (class 0 OID 184511)
-- Dependencies: 250
-- Data for Name: conceptovariable; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY conceptovariable (id_concepto_variable, id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal, unidades, monto, fecha_registro, documento_soporte, estatus, mes_sobretiempo, anio_sobretiempo, monto_proyectado) FROM stdin;
\.


--
-- TOC entry 7464 (class 0 OID 184521)
-- Dependencies: 251
-- Data for Name: concurso; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY concurso (id_concurso, cod_concurso, nombre, descripcion, estatus, fecha_apertura, inicio_convocatoria, fin_convocatoria, inicio_retiro, fin_retiro, inicio_inscripcion, fin_inscripcion, ini_publicacion_insc, fin_publicacion_insc, ini_examenes, fin_examenes, ini_publicacion_exam, fin_publicacion_exam, ini_entrevistas, fin_entrevistas, ini_publicacion_entr, fin_publicacion_entr, entrega_informe, id_organismo, aprobado_mpd, id_plan_personal) FROM stdin;
\.


--
-- TOC entry 7465 (class 0 OID 184529)
-- Dependencies: 252
-- Data for Name: concursocargo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY concursocargo (id_concurso_cargo, id_concurso, id_registro_cargos, id_postulado_concurso, cedula, estatus) FROM stdin;
\.


--
-- TOC entry 7466 (class 0 OID 184533)
-- Dependencies: 253
-- Data for Name: constancia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY constancia (id_constancia, id_tipo_personal, tipo, oficina, firmante, cargo, nombramiento, observacion, pie_pagina_uno, pie_pagina_dos, pie_pagina_tres, direccion, telefono, pie_pagina_cuatro, iniciales) FROM stdin;
21	14	2	RECURSOS  HUMANOS	 DANY JOSE PIRE MARTINEZ	DIRECTORO GENERAL  DE LA OFICINA DE  RECURSOS HUMANOS	(SEGÚN RESOLUCIÓN Nº 03-3-CJ de fecha 03/05/2013\r\nPublicado en la G.O. RBV No. 40.161 de fecha 07/05/2013)	MAS UNA ASIGNACIÓN PROMEDIO MENSUAL DE ACUERDO A  LA  LEY  DE ALIMENTACIÓN DE LOS TRABAJADORES, EQUIVALENTE A MIL TRESCIENTOS CINCUENTA BOLIVARES SIN CÉNTIMOS (BSF 1.350,00).\r\n		  		\N	\N		
\.


--
-- TOC entry 7467 (class 0 OID 184539)
-- Dependencies: 254
-- Data for Name: continente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY continente (id_continente, abreviatura, cod_continente, nombre) FROM stdin;
4	ASI	4	ASIA
1	AFR	1	AFRICA
2	AME	2	AMERICA
3	ANT	3	ANTARTIDA
5	AUS	5	AUSTRALIA
6	EUR	6	EUROPA
\.


--
-- TOC entry 7468 (class 0 OID 184542)
-- Dependencies: 255
-- Data for Name: contrato; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY contrato (id_contrato, fecha_inicio, fecha_fin, fecha_registro, fecha_rescision, estatus, modalidad, prorroga, institucion, monto_unico, monto_mensual, objeto_contrato, tareas_contrato, observaciones, id_tipo_contrato, id_personal, id_tipo_personal, id_sitp, tiempo_sitp, apartado) FROM stdin;
\.


--
-- TOC entry 7469 (class 0 OID 184554)
-- Dependencies: 256
-- Data for Name: contratocolectivo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY contratocolectivo (id_contrato_colectivo, cod_contrato_colectivo, denominacion, descripcion, sector, fecha_vigencia, fecha_vencimiento, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7470 (class 0 OID 184561)
-- Dependencies: 257
-- Data for Name: contratosplan; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY contratosplan (id_contratos_plan, id_plan_personal, id_region, cantidad_aprobados, cantidad_realizados) FROM stdin;
\.


--
-- TOC entry 7471 (class 0 OID 184566)
-- Dependencies: 258
-- Data for Name: credencial; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY credencial (id_credencial, id_subtipo_credencial, numero, color, fecha_entrega, fecha_retiro, observaciones, id_personal, motivo) FROM stdin;
\.


--
-- TOC entry 7472 (class 0 OID 184572)
-- Dependencies: 259
-- Data for Name: cuadroonapre; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cuadroonapre (id_cuadro_onapre, id_organismo, id_proyecto, id_accion_centralizada, id_clasificacion_personal, anio, tipo_cargo, jornada, sexo_vacante, cantidad, sueldo, compensacion, primas, tipo) FROM stdin;
\.


--
-- TOC entry 7473 (class 0 OID 184583)
-- Dependencies: 260
-- Data for Name: cuenta; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cuenta (cedula, cuentano) FROM stdin;
\.


--
-- TOC entry 7474 (class 0 OID 184589)
-- Dependencies: 261
-- Data for Name: cuentabanco; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cuentabanco (id_cuenta_banco, id_banco, cod_cuenta_banco, agencia, id_ciudad, id_organismo) FROM stdin;
\.


--
-- TOC entry 7475 (class 0 OID 184592)
-- Dependencies: 262
-- Data for Name: cuentacontable; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cuentacontable (id_cuenta_contable, cod_contable, descripcion, tipo, id_organismo, indicador) FROM stdin;
\.


--
-- TOC entry 7476 (class 0 OID 184598)
-- Dependencies: 263
-- Data for Name: cuentapresupuesto; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cuentapresupuesto (id_cuenta_presupuesto, cod_presupuesto, descripcion, tipo, id_organismo, indicador) FROM stdin;
\.


--
-- TOC entry 7477 (class 0 OID 184604)
-- Dependencies: 264
-- Data for Name: curso; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY curso (id_curso, cod_curso, descripcion, id_area_conocimiento, id_tipo_curso) FROM stdin;
\.


--
-- TOC entry 7478 (class 0 OID 184607)
-- Dependencies: 265
-- Data for Name: cursoentidad; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cursoentidad (id_curso_entidad, costo_participante, id_curso, id_entidad_educativa) FROM stdin;
\.


--
-- TOC entry 7479 (class 0 OID 184611)
-- Dependencies: 266
-- Data for Name: declaracion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY declaracion (id_declaracion, fecha_registro, descargo, observaciones, id_personal, id_organismo, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7480 (class 0 OID 184618)
-- Dependencies: 267
-- Data for Name: dedicaciondocente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY dedicaciondocente (id_dedicacion_docente, digito_dedicacion, nombre) FROM stdin;
\.


--
-- TOC entry 7481 (class 0 OID 184621)
-- Dependencies: 268
-- Data for Name: denominacionticket; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY denominacionticket (id_denominacion_ticket, id_tipo_personal, id_proveedor_ticket, valor, tickets_por_dia, estatus, costo) FROM stdin;
\.


--
-- TOC entry 7482 (class 0 OID 184628)
-- Dependencies: 269
-- Data for Name: dependencia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY dependencia (id_dependencia, cod_dependencia, dependencia_staff, vigente, fecha_fin, fecha_vigencia, localidad, nivel_estructura, sede_diplomatica, id_tipo_dependencia, id_administradora_uel, id_unidad_funcional, id_grupo_organismo, id_organismo, id_dependencia_anterior, nombre, aprobacion_mpd, id_sede, cod_cesta, id_region, id_estructura) FROM stdin;
81	108-1	N	S	\N	\N	C	1	N	70	14	\N	11	11	\N	PERSONAL JUBILADO	N	12	\N	10	11
11	101-1	N	S	\N	\N	C	1	N	70	13	17	11	11	\N	DESPACHO DE LA MINISTRA	S	12	44400	10	11
19	106-1	N	S	\N	\N	C	1	N	70	16	\N	11	11	\N	DESPACHO DE LA VICEMIN. PARA LA IGUALDAD Y LA EQUIDAD DE GENERO, AFRODESCENDENCIA Y ET.	S	12	44400	10	11
17	104-1	N	S	\N	\N	C	1	N	70	16	30	11	11	\N	DESPACHO DE LA VICEMINISTRA  DEL DESARROLLO PRODUCTIVO DE LA MUJER	S	12	44400	10	11
20	107-1	N	S	\N	\N	R	1	N	70	19	33	11	11	\N	DESPACHO DE LA VICEMINISTRA DE IGUALDAD DE GÉNERO Y NO DISCRIMINACIÓN	S	12	44400	10	11
34	102-1	N	S	\N	\N	C	1	N	71	14	18	11	11	\N	AUDITORIA INTERNA	S	12	44400	10	11
37	0102-5	N	S	\N	\N	C	1	N	71	14	22	11	11	\N	OFICINA DE GESTION ADMINISTRATIVA	S	12	44400	10	11
39	102-8	N	S	\N	\N	C	1	N	71	14	25	11	11	\N	CONSULTORIA JURIDICA	S	12	44400	10	11
91	00107-7B	N	S	\N	\N	R	1	N	81	21	17	11	11	\N	EFOSIG BOLIVAR	S	12	87574	29	11
42	102-11	N	S	\N	\N	C	1	N	71	14	28	11	11	\N	OFICINA DE PLANIFICACION Y PRESUPUESTO	S	12	44400	10	11
41	102-10	N	S	\N	\N	C	1	N	71	14	27	11	11	\N	OFICINA DE ATENCION A LA CIUDADANIA	S	12	44400	10	11
43	102-12	N	S	\N	\N	C	1	N	70	21	\N	11	11	\N	ESCUELA DE FORMACIÓN SOCIALISTA ANA MARIA CAMPOS 	S	12	48008	10	11
53	00107-3	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	AMAZONAS	S	12	48007	24	11
54	00107-4	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	ANZOATEGUI	S	12	48005	25	11
55	00107-5	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	APURE	S	12	48712	26	11
56	00107-6	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	BARINAS	S	12	47697	28	11
57	00107-7	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	BOLIVAR	S	12	48009	29	11
58	00107-8	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	CARABOBO	S	12	48429	30	11
70	00107-20	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	SUCRE	S	12	47698	42	11
59	00107-9	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	COJEDES	S	12	47701	31	11
60	00107-10	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	DISTRITO CAPITAL	S	12	44400	32	11
62	00107-12	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	FALCON	S	12	47696	34	11
63	00107-13	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	GUARICO	S	12	48387	35	11
64	00107-14	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	LARA	S	12	47699	36	11
65	00107-15	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	MERIDA	S	12	47703	37	11
66	00107-16	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	MIRANDA	S	12	48417	38	11
67	00107-17	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	MONAGAS	S	12	47704	39	11
61	00107-11	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	DELTA AMACURO	S	12	47705	33	11
68	00107-18	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	NUEVA ESPARTA	S	12	48424	40	11
71	00107-21	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	TACHIRA	S	12	48367	43	11
69	00107-19	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	PORTUGUESA	S	12	47695	41	11
72	00107-22	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	TRUJILLO	S	12	48411	44	11
73	00107-23	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	VARGAS	S	12	48006	45	11
74	00107-24	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	YARACUY	S	12	48368	46	11
75	00107-25	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	ZULIA	S	12	47702	46	11
16	101-2	N	S	\N	\N	C	1	N	70	13	17	11	11	\N	DIRECCION GENERAL DEL DESPACHO	S	12	44400	10	11
52	00107-2	N	S	\N	\N	R	1	N	81	19	\N	11	11	\N	ARAGUA	S	12	48369	23	11
18	105-1	N	S	\N	\N	C	1	N	70	17	55	11	11	\N	DESPACHO DE LA VICEMINISTRA PARA PROTECCIÓN DE LOS DERECHOS DE LA MUJER	S	12	44400	10	11
101	00107-10B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG DISTRITO CAPITAL	S	12	\N	32	11
102	00107-11B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG DELTA AMACURO	S	12	\N	33	11
103	00107-12B	N	S	\N	\N	C	1	N	73	21	33	11	11	\N	EFOSIG FALCON	S	12	\N	34	11
104	00107-13B	N	S	\N	\N	C	1	N	73	21	33	11	11	\N	EFOSIG GUARICO	S	12	\N	35	11
105	00107-15B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG LARA	S	12	\N	36	11
106	00107-15B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG MERIDA	S	12	\N	37	11
107	00107-16B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG MIRANDA	S	12	\N	38	11
108	00107-17B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG MONAGAS	S	12	\N	39	11
109	00107-18B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG NUEVA ESPARTA	S	12	\N	40	11
110	00107-19B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG PORTUGUESA	S	12	\N	41	11
111	00107-2B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG ARAGUA	S	12	\N	23	11
112	00107-20B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG SUCRE	S	12	\N	42	11
113	00107-21B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG TACHIRA	S	12	\N	43	11
114	00107-22B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG TRUJILLO	S	12	\N	44	11
115	00107-23B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG VARGAS	S	12	\N	45	11
116	00107-24B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG YARACUY	S	12	\N	46	11
117	00107-25B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG ZULIA	S	12	\N	47	11
118	00107-3B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG AMAZONAS	S	12	\N	24	11
119	00107-4B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG ANZOATEGUI	S	12	\N	25	11
120	00107-5B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG APURE	S	12	\N	26	11
121	00107-6B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG BARINAS	S	12	\N	28	11
122	00107-8B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG CARABOBO	S	12	\N	30	11
123	00107-9B	N	S	\N	\N	R	1	N	73	21	33	11	11	\N	EFOSIG COJEDES	S	12	\N	31	11
135	0102-12	N	S	\N	\N	C	1	N	71	14	22	11	11	\N	COORDINACION DE SEGURIDAD	N	12	\N	10	11
142	102-6-1	N	S	\N	\N	C	1	N	95	14	23	11	11	\N	COORDINACIÓN DE NÓMINA	S	12	\N	10	11
38	102-6	N	S	\N	\N	C	1	N	71	14	23	11	11	\N	OFICINA DE GESTIÓN HUMANA	S	12	44400	10	11
40	102-9	N	S	\N	\N	C	1	N	71	14	26	11	11	\N	OFICINAS DE TECNOLOGÍAS DE LA INFORMACIÓN Y LA COMUNICACIÓN	S	12	44400	10	11
35	102-3	N	S	\N	\N	C	1	N	71	14	20	11	11	\N	OFICINA DE GESTIÓN COMUNICACIONAL	S	12	44400	10	11
36	102-4	N	S	\N	\N	C	1	N	71	14	20	11	11	\N	OFICINA DE INTEGRACIÓN Y ASUNTOS INTERNACIONALES	S	12	44400	10	11
153	101-11	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	DELTA AMACURO	S	12	\N	33	11
154	101-26	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	ARAGUA	S	12	\N	23	11
155	101-3	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	AMAZONAS	S	12	\N	24	11
156	101-4	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	ANZOATEGUI	S	12	\N	25	11
157	101-5	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	APURE	S	12	\N	26	11
158	101-6	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	BARINAS	S	12	\N	28	11
159	101-7	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	BOLIVAR	S	12	\N	29	11
160	101-8	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	CARABOBO	S	12	\N	30	11
161	101-9	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	COJEDES	S	12	\N	31	11
162	101-10	N	S	\N	\N	R	1	N	73	14	42	11	11	\N	DISTRITO CAPITAL	S	12	\N	32	11
163	101-12	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	FALCON	S	12	\N	34	11
164	101-13	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	GUARICO	S	12	\N	35	11
165	101-14	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	LARA	S	12	\N	36	11
166	101-15	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	MERIDA	S	12	\N	37	11
167	101-16	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	MIRANDA	S	12	\N	38	11
168	101-17	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	MONAGAS	S	12	\N	39	11
169	101-18	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	NUEVA ESPARTA	S	12	\N	40	11
170	101-19	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	PORTUGUESA	S	12	\N	41	11
171	101-20	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	SUCRE	S	12	\N	42	11
172	101-21	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	TACHIRA	S	12	\N	43	11
173	101-22	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	TRUJILLO	S	12	\N	44	11
174	101-23	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	VARGAS	S	12	\N	45	11
175	101-24	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	YARACUY	S	12	\N	46	11
176	101-25	N	S	\N	\N	R	1	N	73	13	42	11	11	\N	ZULIA	S	12	\N	47	11
14	102-7	N	S	\N	\N	C	1	N	71	14	24	11	11	\N	OFICINA ESTRATÉGICA DE SEGUIMIENTO Y EVALUACIÓN DE POLÍTICAS PÚBLICAS	S	12	44400	10	11
\.


--
-- TOC entry 7483 (class 0 OID 184642)
-- Dependencies: 270
-- Data for Name: dependenciajudicial; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY dependenciajudicial (id_dependencia_judicial, id_dependencia, id_operacion, id_materia, id_instancia, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7484 (class 0 OID 184646)
-- Dependencies: 271
-- Data for Name: descuentoticket; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY descuentoticket (id_descuento_ticket, id_trabajador, anio, mes, referencia_ticket, referencia_embargo, referencia_ausencia, descuento_ausencia, descuento_reposo, descuento_permiso, descuento_vacaciones, descuento_otros, pagado, observaciones) FROM stdin;
\.


--
-- TOC entry 7485 (class 0 OID 184663)
-- Dependencies: 272
-- Data for Name: detalledisquete; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY detalledisquete (id_detalle_disquete, id_disquete, tipo_registro, numero_campo, tipo_campo, longitud_campo, campo_base_datos, campo_entrada, campo_usuario, separador_decimal, alineacion_campo, rellenar_cero, multiplicador, id_concepto, campo_totales) FROM stdin;
\.


--
-- TOC entry 7486 (class 0 OID 184677)
-- Dependencies: 273
-- Data for Name: detalletabulador; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY detalletabulador (id_detalle_tabulador, id_tabulador, grado, sub_grado, paso, monto, sueldo_hora, carga_horaria) FROM stdin;
\.


--
-- TOC entry 7487 (class 0 OID 184686)
-- Dependencies: 274
-- Data for Name: detalletabuladormed; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY detalletabuladormed (id_detalle_tabulador_med, id_tabulador, cod_cargo, sueldo_mensual, sueldo_hora, carga_horaria) FROM stdin;
\.


--
-- TOC entry 7488 (class 0 OID 184692)
-- Dependencies: 275
-- Data for Name: detalletabuladormre; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY detalletabuladormre (id_detalle_tabulador_mre, id_tabulador, id_ciudad, nivel, asignacion_mensual, fluctuacion_mensual) FROM stdin;
\.


--
-- TOC entry 7489 (class 0 OID 184698)
-- Dependencies: 276
-- Data for Name: detalletabuladoronu; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY detalletabuladoronu (id_detalle_tabulador_onu, id_tabulador, nivel, estado_civil, anios_servicio, asignacion_anual) FROM stdin;
\.


--
-- TOC entry 7490 (class 0 OID 184705)
-- Dependencies: 277
-- Data for Name: disquete; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY disquete (id_disquete, cod_disquete, descripcion, tipo_disquete, id_banco, id_organismo, ingresos, egresos, id_concepto) FROM stdin;
\.


--
-- TOC entry 7491 (class 0 OID 184710)
-- Dependencies: 278
-- Data for Name: dotacioncargo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY dotacioncargo (id_dotacion_cargo, id_cargo, id_subtipo_dotacion, id_tipo_personal, unidad, cantidad) FROM stdin;
\.


--
-- TOC entry 7492 (class 0 OID 184716)
-- Dependencies: 279
-- Data for Name: dotacionentregada; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY dotacionentregada (id_dotacion_entregada, id_trabajador, id_subtipo_dotacion, talla, cantidad, anio, mes, fecha) FROM stdin;
\.


--
-- TOC entry 7493 (class 0 OID 184722)
-- Dependencies: 280
-- Data for Name: dotaciontrabajador; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY dotaciontrabajador (id_dotacion_trabajador, id_trabajador, id_subtipo_dotacion, talla, cantidad) FROM stdin;
\.


--
-- TOC entry 7494 (class 0 OID 184726)
-- Dependencies: 281
-- Data for Name: educacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY educacion (id_educacion, anio_fin, anio_inicio, anios_experiencia, becado, id_carrera, id_titulo, estatus, sector, meses_experiencia, id_nivel_educativo, id_ciudad, organizacion_becaria, id_personal, registro_titulo, fecha_registro, reembolso, observaciones, nombre_entidad, nombre_postgrado, id_sitp, tiempo_sitp, escala, calificacion, mencion) FROM stdin;
\.


--
-- TOC entry 7495 (class 0 OID 184747)
-- Dependencies: 282
-- Data for Name: elegible; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY elegible (id_elegible, anios_servicio_apn, cedula, cedula_conyugue, id_ciudad_nacimiento, id_ciudad_residencia, diestralidad, direccion_residencia, doble_nacionalidad, email, estado_civil, estatura, fecha_nacimiento, fecha_nacionalizacion, gaceta_nacionalizacion, grado_licencia, grupo_sanguineo, maneja, marca_vehiculo, mismo_organismo_conyugue, modelo_vehiculo, nacionalidad, nacionalizado, nivel_educativo, nombre_conyugue, numero_libreta_militar, numero_rif, numero_sso, otra_normativa_nac, id_pais_nacionalidad, id_parroquia, peso, placa_vehiculo, primer_apellido, primer_nombre, sector_trabajo_conyugue, segundo_apellido, segundo_nombre, sexo, telefono_celular, telefono_oficina, telefono_residencia, tenencia_vivienda, tiene_hijos, tiene_vehiculo, tipo_vivienda, zona_postal_residencia, id_sitp, tiempo_sitp, fecha_registro, cargo_aspira, sueldo_aspira, disponibilidad, trabajando_actualmente, trabajo_actual, cargo_actual, sueldo_actual, motivo_retiro) FROM stdin;
\.


--
-- TOC entry 7496 (class 0 OID 184792)
-- Dependencies: 283
-- Data for Name: elegibleactividaddocente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY elegibleactividaddocente (id_elegible_actividad_docente, nivel_educativo, anio_inicio, anio_fin, estatus, id_carrera, id_elegible, sector, relacion_laboral, nombre_entidad, asignatura, observaciones, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7497 (class 0 OID 184806)
-- Dependencies: 284
-- Data for Name: elegibleafiliacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY elegibleafiliacion (id_elegible_afiliacion, fecha, id_gremio, numero_afiliacion, id_elegible, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7498 (class 0 OID 184810)
-- Dependencies: 285
-- Data for Name: elegiblecertificacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY elegiblecertificacion (id_elegible_certificacion, id_area_conocimiento, fecha_certificacion, vigencia, id_elegible, nombre_certificacion, nombre_entidad, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7499 (class 0 OID 184814)
-- Dependencies: 286
-- Data for Name: elegibleeducacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY elegibleeducacion (id_elegible_educacion, anio_fin, anio_inicio, anios_experiencia, becado, id_carrera, id_titulo, estatus, sector, meses_experiencia, id_nivel_educativo, id_ciudad, organizacion_becaria, id_elegible, registro_titulo, fecha_registro, reembolso, observaciones, nombre_entidad, nombre_postgrado, id_sitp, tiempo_sitp, escala, calificacion, mencion) FROM stdin;
\.


--
-- TOC entry 7500 (class 0 OID 184835)
-- Dependencies: 287
-- Data for Name: elegibleestudio; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY elegibleestudio (id_elegible_estudio, anios_experiencia, certifico, duracion, meses_experiencia, origen_curso, participacion, id_elegible, unidad_tiempo, becado, financiamiento, id_pais, id_tipo_curso, id_area_conocimiento, observaciones, nombre_curso, nombre_entidad, anio, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7501 (class 0 OID 184855)
-- Dependencies: 288
-- Data for Name: elegibleexperiencia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY elegibleexperiencia (id_elegible_experiencia, nombre_institucion, fecha_ingreso, fecha_egreso, cargo_ingreso, cargo_egreso, jefe, telefono, causa_retiro, ultimo_sueldo, observaciones, id_elegible, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7502 (class 0 OID 184863)
-- Dependencies: 289
-- Data for Name: elegiblefamiliar; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY elegiblefamiliar (id_elegible_familiar, alergias, alergico, cedula_familiar, estado_civil, fecha_nacimiento, goza_beca, goza_prima_por_hijo, goza_seguro, goza_utiles, grado, grupo_sanguineo, mismo_organismo, nino_excepcional, nivel_educativo, parentesco, sexo, talla_franela, talla_gorra, talla_pantalon, id_elegible, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, promedio_nota, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7503 (class 0 OID 184892)
-- Dependencies: 290
-- Data for Name: elegiblehabilidad; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY elegiblehabilidad (id_elegible_habilidad, id_elegible, id_tipo_habilidad, nivel, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7504 (class 0 OID 184898)
-- Dependencies: 291
-- Data for Name: elegibleidioma; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY elegibleidioma (id_elegible_idioma, escribe, habla, lee, id_elegible, id_tipo_idioma, examen_suficiencia, entidad_suficiencia, fecha_suficiencia, examen_academico, entidad_academica, fecha_academica, nombre_entidad, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7505 (class 0 OID 184912)
-- Dependencies: 292
-- Data for Name: elegibleorganismo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY elegibleorganismo (id_elegible_organismo, id_elegible, id_organismo) FROM stdin;
\.


--
-- TOC entry 7506 (class 0 OID 184915)
-- Dependencies: 293
-- Data for Name: elegibleotraactividad; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY elegibleotraactividad (id_elegible_otra_actividad, observaciones, id_tipo_otra_actividad, id_elegible) FROM stdin;
\.


--
-- TOC entry 7507 (class 0 OID 184918)
-- Dependencies: 294
-- Data for Name: elegibleprofesion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY elegibleprofesion (id_elegible_profesion, id_profesion, id_elegible, actualmente, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7508 (class 0 OID 184924)
-- Dependencies: 295
-- Data for Name: elegiblepublicacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY elegiblepublicacion (id_elegible_publicacion, anio_publicacion, editorial, propiedad_intelectual, titulo, id_elegible, observaciones, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7509 (class 0 OID 184932)
-- Dependencies: 296
-- Data for Name: embargo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY embargo (id_embargo, oficio, expediente, fecha_vigencia, numero_menores, numero_tickets, id_personal) FROM stdin;
\.


--
-- TOC entry 7510 (class 0 OID 184937)
-- Dependencies: 297
-- Data for Name: embargoconcepto; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY embargoconcepto (id_embargo_concepto, id_embargo, id_concepto, porcentaje, monto, id_sitp, tiempo_sitp, banco, cedula_beneficiario, cuenta, nombre, id_personal, rif_beneficiario) FROM stdin;
\.


--
-- TOC entry 7511 (class 0 OID 184943)
-- Dependencies: 298
-- Data for Name: encabezadorendicionmensual; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY encabezadorendicionmensual (id_encabezado_rendicion_mensual, anio, mes, id_unidad_administradora, numero_nomina, cod_unidad_administ, cerrado, usuario, fecha_cierre, numero_expediente, titulo, aportes, id_aporte) FROM stdin;
1	2012	12	30	0	000102	N	abello	\N	0	NOMINA ORDINARIA	0	0
2	2012	12	30	0	000102	N	abello	\N	0	APORTE PATRON SSO	S	20
\.


--
-- TOC entry 7512 (class 0 OID 184952)
-- Dependencies: 299
-- Data for Name: encabezadoresumenmensual; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY encabezadoresumenmensual (id_encabezado_resumen_mensual, anio, mes, id_unidad_administradora, numero_nomina, cod_unidad_administ, cerrado, usuario, fecha_cierre, numero_expediente, titulo, aportes, id_aporte) FROM stdin;
\.


--
-- TOC entry 7513 (class 0 OID 184961)
-- Dependencies: 300
-- Data for Name: encargaduria; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY encargaduria (id_encargaduria, fecha_inicio, fecha_fin, cargo, dependencia, id_personal, observaciones, id_sitp, tiempo_sitp, id_organismo) FROM stdin;
\.


--
-- TOC entry 7514 (class 0 OID 184970)
-- Dependencies: 301
-- Data for Name: entidadeducativa; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY entidadeducativa (id_entidad_educativa, cod_entidad_educativa, cod_ince, direccion, nombre, numero_rif, persona_contacto, sector, telefono1, telefono2, numero_med, id_tipo_entidad, id_estado) FROM stdin;
\.


--
-- TOC entry 7515 (class 0 OID 184975)
-- Dependencies: 302
-- Data for Name: escalacuadroonapre; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY escalacuadroonapre (id_escalacuadroonapre, cod_escala, desde, hasta) FROM stdin;
\.


--
-- TOC entry 7516 (class 0 OID 184980)
-- Dependencies: 303
-- Data for Name: establecimientosalud; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY establecimientosalud (id_establecimiento_salud, id_ciudad, cod_establecimiento_salud, direccion, nombre, sector, sso, telefono) FROM stdin;
\.


--
-- TOC entry 7517 (class 0 OID 184987)
-- Dependencies: 304
-- Data for Name: estado; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY estado (id_estado, abreviatura, cod_estado, nombre, id_pais) FROM stdin;
2	AMZ	02	AMAZONAS	1
3	ANZ	03	ANZOATEGUI	1
4	APU	04	APURE	1
5	ARA	05	ARAGUA	1
6	BAR	06	BARINAS	1
7	BOL	07	BOLIVAR	1
8	CAR	08	CARABOBO	1
9	COJ	09	COJEDES	1
10	DTA	10	DELTA AMACURO	1
11	FAL	11	FALCON	1
12	GUA	12	GUARICO	1
13	LAR	13	LARA	1
14	MER	14	MERIDA	1
15	MIR	15	MIRANDA	1
16	MON	16	MONAGAS	1
17	NES	17	NUEVA ESPARTAL	1
18	POR	18	PORTUGUESA	1
19	SUC	19	SUCRE	1
20	TCH	20	TACHIRA	1
21	TRU	21	TRUJILLO	1
22	YAR	22	YARACUY	1
23	ZUL	23	ZULIA	1
24	VAR	24	VARGAS	1
1	DTF	01	DISTRITO CAPITAL	1
\.


--
-- TOC entry 7518 (class 0 OID 184990)
-- Dependencies: 305
-- Data for Name: estructura; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY estructura (id_estructura, nombre, aprobacion_mpd, id_organismo, anio, fecha_vigencia, vigente) FROM stdin;
11	MPP PARA LA MUJER Y LA IGUALDAD DE GENERO	S	11	2009	2009-08-24	S
\.


--
-- TOC entry 7519 (class 0 OID 184997)
-- Dependencies: 306
-- Data for Name: estudio; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY estudio (id_estudio, anios_experiencia, certifico, duracion, meses_experiencia, origen_curso, participacion, id_personal, unidad_tiempo, becado, financiamiento, id_pais, id_tipo_curso, id_area_conocimiento, observaciones, nombre_curso, nombre_entidad, anio, id_sitp, tiempo_sitp, escala, calificacion) FROM stdin;
\.


--
-- TOC entry 7520 (class 0 OID 185017)
-- Dependencies: 307
-- Data for Name: evaluacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY evaluacion (id_evaluacion, anio, mes, cedula_supervisor, nombre_supervisor, cedula_jefe, nombre_jefe, porcentaje_aumento, numero_pasos, monto_aumentar, monto_unico, observaciones, id_accion_evaluacion, id_resultado_evaluacion, id_personal, id_tipo_personal, id_cargo, id_dependencia, nombre_cargo, nombre_dependencia, resultado_competencias, resultado_objetivos, manejo_bienes, habito_seguridad, calidad_trabajo, cumplimiento_normas, atencion_publico, interes_trabajo, cooperacion, cantidad_trabajo, toma_decisiones, comunicacion, capacidad_mando, coordinacion, nivel) FROM stdin;
\.


--
-- TOC entry 7521 (class 0 OID 185045)
-- Dependencies: 308
-- Data for Name: excepcionbeneficiario; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY excepcionbeneficiario (id_excepcion_beneficiario, id_personal, id_plan_poliza, id_familiar) FROM stdin;
\.


--
-- TOC entry 7522 (class 0 OID 185048)
-- Dependencies: 309
-- Data for Name: excepcionticket; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY excepcionticket (id_excepcion_ticket, numero_tickets, observaciones, id_trabajador) FROM stdin;
\.


--
-- TOC entry 7523 (class 0 OID 185053)
-- Dependencies: 310
-- Data for Name: excepciontitular; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY excepciontitular (id_excepcion_titular, id_personal, id_plan_poliza) FROM stdin;
\.


--
-- TOC entry 7524 (class 0 OID 185056)
-- Dependencies: 311
-- Data for Name: experiencia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY experiencia (id_experiencia, nombre_institucion, fecha_ingreso, fecha_egreso, cargo_ingreso, cargo_egreso, jefe, telefono, causa_retiro, ultimo_sueldo, observaciones, id_personal, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7525 (class 0 OID 185064)
-- Dependencies: 312
-- Data for Name: experienciacargo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY experienciacargo (id_experiencia_cargo, id_cargo, id_cargo_requerido, anios_experiencia, meses_experiencia, peso, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7526 (class 0 OID 185071)
-- Dependencies: 313
-- Data for Name: experiencianoest; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY experiencianoest (id_experiencia_no_est, nombre_institucion, fecha_ingreso, fecha_egreso, cargo_ingreso, cargo_egreso, jefe, telefono, causa_retiro, ultimo_sueldo, observaciones, id_personal, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7527 (class 0 OID 185079)
-- Dependencies: 314
-- Data for Name: familiar; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY familiar (id_familiar, alergias, alergico, cedula_familiar, estado_civil, fecha_nacimiento, goza_beca, goza_prima_por_hijo, goza_seguro, goza_utiles, grado, grupo_sanguineo, mismo_organismo, nino_excepcional, nivel_educativo, parentesco, sexo, talla_franela, talla_gorra, talla_pantalon, id_personal, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, promedio_nota, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7528 (class 0 OID 185108)
-- Dependencies: 315
-- Data for Name: fideicomiso; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY fideicomiso (id_trabajador, id_tipo_personal, anio, mes, monto_fideicomiso, fecha, id_banco, id_fideicomiso, anio_abono, mes_abono) FROM stdin;
\.


--
-- TOC entry 7529 (class 0 OID 185113)
-- Dependencies: 316
-- Data for Name: firmasreportes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY firmasreportes (id_firmas_reportes, nombre, cargo, nombramiento, id_organismo) FROM stdin;
\.


--
-- TOC entry 7530 (class 0 OID 185119)
-- Dependencies: 317
-- Data for Name: frecuenciapago; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY frecuenciapago (id_frecuencia_pago, cod_frecuencia_pago, nombre, id_organismo, reservado) FROM stdin;
\.


--
-- TOC entry 7531 (class 0 OID 185124)
-- Dependencies: 318
-- Data for Name: frecuenciatipopersonal; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY frecuenciatipopersonal (id_frecuencia_tipo_personal, id_frecuencia_pago, id_tipo_personal, cod_tipo_personal, cod_frecuencia_pago) FROM stdin;
\.


--
-- TOC entry 7532 (class 0 OID 185127)
-- Dependencies: 319
-- Data for Name: fuentefinanciamiento; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY fuentefinanciamiento (id_fuente_financiamiento, cod_fuente_financiamiento, nombre) FROM stdin;
11	01	INGRESOS ORDINARIOS
12	07	OTROS INGRESOS
\.


--
-- TOC entry 7533 (class 0 OID 185130)
-- Dependencies: 320
-- Data for Name: gradodocente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY gradodocente (id_grado_docente, digito_grado, nombre) FROM stdin;
0	0	DOCENTE NO CLASIFICADO
1	1	PROFESOR O LICENCIADO EDUCACIÓN
2	2	TÈCNICO SUPERIOR EN EDUCACIÓN
3	3	MAESTRO O BACHILLER DOCENTE
4	4	DOCENTE NO GRADUADO
\.


--
-- TOC entry 7534 (class 0 OID 185133)
-- Dependencies: 321
-- Data for Name: gradoniveldocente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY gradoniveldocente (id_grado_nivel_docente, id_grado_docente, id_nivel_docente) FROM stdin;
\.


--
-- TOC entry 7535 (class 0 OID 185136)
-- Dependencies: 322
-- Data for Name: gremio; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY gremio (id_gremio, cod_gremio, nombre) FROM stdin;
2	002	COLEGIO DE ABOGADOS
3	003	COLEGIO DE CONTADORES PÚBLICOS
4	004	COLEGIO MÉDICO
5	005	COLEGIO NACIONAL DE PERIODISTAS
7	007	COLEGIO DE ODONTOLOGOS DE VENEZUELA
6	006	COLEGIO DE ECONOMISTAS
8	008	COLEGIO PROFESIONAL DE ENFERMERIA
10	010	COLEGIO DE BIBLIOTECOLOGOS Y ARCHIVÓLOGOS
9	009	COLEGIO DE PROFESORES DE VENEZUELA
1	001	COLEGIO DE INGENIEROS DE VENEZUELA
11	011	COLEGIO DE LICENCIADOS EN RELACIONES INDUSTRIALES
12	012	COLEGIO DE CIENCIAS FISCALES DE VENEZUELA
13	013	COLEGIO DE LICENCIADOS EN ADMINISTRACION PUBLICA
\.


--
-- TOC entry 7536 (class 0 OID 185139)
-- Dependencies: 323
-- Data for Name: gruponomina; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY gruponomina (id_grupo_nomina, id_organismo, anticipo_quincenal, cod_grupo_nomina, nombre, periodicidad, pagos_nomina_egresados) FROM stdin;
11	11	0	1	GRUPO ALTO NIVEL	Q	S
12	11	0	2	GRUPO CONTRATADOS	Q	S
20	11	0	4	HONORARIOS PROFESIONALES	Q	S
32	11	0	5	COMISION DE SERVICIO ALTO NIVEL	Q	N
41	11	0	7	JUBILADOS	Q	S
31	11	0	3	TRABAJADORES Y TRABAJADORAS	Q	S
33	11	0	6	COMISIÓN DE SERVICIO 	Q	S
51	11	0	10	NÓMINA DE PASANTE	M	S
\.


--
-- TOC entry 7537 (class 0 OID 185146)
-- Dependencies: 324
-- Data for Name: grupoocupacional; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY grupoocupacional (id_grupo_ocupacional, id_ramo_ocupacional, cod_grupo_ocupacional, nombre, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7538 (class 0 OID 185150)
-- Dependencies: 325
-- Data for Name: grupoorganismo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY grupoorganismo (id_grupo_organismo, cod_grupo_organismo, nombre, id_organismo, nombre_corto) FROM stdin;
11	0058	MINISTERIO DEL PP PARA LA MUJER Y LA IGUALDAD DE GENERO	11	MINMUJER
\.


--
-- TOC entry 7539 (class 0 OID 185153)
-- Dependencies: 326
-- Data for Name: grupoprofesion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY grupoprofesion (id_grupo_profesion, cod_grupo_profesion, nombre, descripcion) FROM stdin;
1	1	SECTOR PUBLICO Y PERSONAL DIRECTIVO DE EMPRESAS PRIVADAS	MIEMBROS DEL PODER EJECUTIVO Y DE LOS CUERPOS LEGISLATIVOS Y PERSONAL DIRECTIVO DE LA ADMINISTRACIÓN PÚBLICA, DE LAS EMPRESAS PÚBLICAS, PRIVADAS Y DE LAS ORGANIZACIONES ESPECIALIZADAS
2	2	PROFESIONALES UNIVERSITARIOS	PROFESIONALES UNIVERSITARIOS, INTELECTUALES Y CIENTIFICOS
3	3	TECNICOS SUPERIORES Y MEDIOS	TECNICOS SUPERIORES UNIVERSITARIOS Y PROFESIONALES DEL NIVEL MEDIO
4	4	TRABAJADORES DE OFICINA EN GENERAL	TRABAJADORES EN EL AREA DE OFICINA
5	5	SECTOR DE SERVICIOS	TRABAJADORES DE LOS SERVICIOS: TRANSPORTE, COMUNICACION, DIVERSION, RECREACION, PROTECCION, SEGURIDAD, PREVENCION, COMIDAS, BEBIDAS, SERVICIOS ASISTENCIALES Y COMERCIO
6	6	SECTOR AGRARIO Y PESQUERO	AGRICULTORES Y TRABAJADORES CALIFICADOS: AGROPECUARIOS, FORESTALES Y PESQUEROS
7	7	OPERADORES CALIFICADOS Y ARTESANOS	TRABAJADORES CALIFICADOS: OPERARIOS Y ARTESANOS DE LAS ARTES MECANICAS Y OTROS OFICIOS
8	8	INSTALADORES Y OPERARIOS INDUSTRIALES Y AGRICOLAS	TRABAJADORES CALIFICADOS: INSTALADORES, MONTADORES DE MAQUINAS INDUSTRIALES Y AGRICOLAS
9	9	OTROS OFICIOS NO CALIFICADOS	TRABAJADORES NO CALIFICADOS
10	10	OTROS	OTROS
\.


--
-- TOC entry 7540 (class 0 OID 185156)
-- Dependencies: 327
-- Data for Name: grupoticket; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY grupoticket (id_grupo_ticket, id_organismo, cod_grupo_ticket, nombre) FROM stdin;
11	11	1	GRUPO UNICO
\.


--
-- TOC entry 7541 (class 0 OID 185159)
-- Dependencies: 328
-- Data for Name: guarderia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY guarderia (id_guarderia, cod_guarderia, nombre, direccion, id_ciudad, telefono1, telefono2, persona_contacto, numero_rif, permiso_inam, beneficiario_cheque, seguro_medico, monto_inscripcion, monto_mensualidad, mes) FROM stdin;
\.


--
-- TOC entry 7542 (class 0 OID 185171)
-- Dependencies: 329
-- Data for Name: guarderiafamiliar; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY guarderiafamiliar (id_guarderia_familiar, id_personal, id_familiar, id_guarderia, fecha_registro, monto_mensualidad, monto_inscripcion) FROM stdin;
\.


--
-- TOC entry 7543 (class 0 OID 185176)
-- Dependencies: 330
-- Data for Name: habilidad; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY habilidad (id_habilidad, id_personal, id_tipo_habilidad, nivel, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7544 (class 0 OID 185182)
-- Dependencies: 331
-- Data for Name: habilidadcargo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY habilidadcargo (id_habilidad_cargo, id_cargo, id_tipo_habilidad, nivel, peso, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7545 (class 0 OID 185189)
-- Dependencies: 332
-- Data for Name: historialapn; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY historialapn (id_historial_apn, fecha_registro, fecha_movimiento, codigo_nomina, sueldo, compensacion, primas_cargo, primas_trabajador, grado, paso, cod_dependencia, cod_sede, tipo_personal, nombre_tipo_personal, id_clasificacion_personal, id_causa_movimiento, cod_causa_movimiento, cod_manual_cargo, cod_cargo, descripcion_cargo, cod_tabulador, afecta_sueldo, aprobacion_mpd, documento_soporte, localidad, numero_movimiento, cedula, apellidos_nombres, id_personal, remesa, estatus, nombre_dependencia, nombre_sede, id_organismo, cod_organismo, nombre_organismo, observaciones, usuario, id_sitp, tiempo_sitp, cod_region, nombre_region, origen_movimiento, fecha_punto_cuenta, punto_cuenta, cod_concurso) FROM stdin;
\.


--
-- TOC entry 7546 (class 0 OID 185212)
-- Dependencies: 333
-- Data for Name: historialorganismo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY historialorganismo (id_historial_organismo, fecha_registro, fecha_movimiento, codigo_nomina, sueldo, compensacion, primas_cargo, primas_trabajador, grado, paso, cod_dependencia, cod_sede, tipo_personal, nombre_tipo_personal, id_clasificacion_personal, id_causa_movimiento, cod_causa_movimiento, cod_manual_cargo, cod_cargo, descripcion_cargo, cod_tabulador, afecta_sueldo, aprobacion_mpd, documento_soporte, localidad, numero_movimiento, cedula, apellidos_nombres, id_personal, remesa, estatus, nombre_dependencia, nombre_sede, id_organismo, cod_organismo, nombre_organismo, observaciones, usuario, id_sitp, tiempo_sitp, cod_region, nombre_region, origen_movimiento, fecha_punto_cuenta, punto_cuenta, cod_concurso) FROM stdin;
\.


--
-- TOC entry 7547 (class 0 OID 185235)
-- Dependencies: 334
-- Data for Name: historialremun; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY historialremun (id_historial_remun, fecha_movimiento, codrac, sueldo, compensacion, primas_cargo, primas_trabajador, grado, paso, codigo_dependencia, id_clasificacion_personal, id_mov_remuneracion, codigo_manual, codigo_cargo, descripcion_cargo, aprobacion_mpd, documento_soporte, numero_movimiento, id_personal, nombre_dependencia, nombre_institucion, id_organismo, id_cargo, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7548 (class 0 OID 185249)
-- Dependencies: 335
-- Data for Name: historicobaseislr; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY historicobaseislr (id_historico_base_islr, id_grupo_nomina, id_tipo_personal, numero_nomina, id_nomina_especial, anio, mes, semana_quincena, id_trabajador, porcentaje, asignaciones, deducciones) FROM stdin;
\.


--
-- TOC entry 7769 (class 0 OID 0)
-- Dependencies: 336
-- Name: historicobaseislr_id_historico_base_islr_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('historicobaseislr_id_historico_base_islr_seq', 75687, true);


--
-- TOC entry 7550 (class 0 OID 185254)
-- Dependencies: 337
-- Data for Name: historicocargos; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY historicocargos (id_historico_cargos, id_registro, id_causa_movimiento, id_cargo, id_dependencia, codigo_nomina, situacion, movimiento, fecha_movimiento, horas, cedula, primer_apellido, segundo_apellido, primer_nombre, segundo_nombre) FROM stdin;
\.


--
-- TOC entry 7551 (class 0 OID 185260)
-- Dependencies: 338
-- Data for Name: historicodevengadointegral; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY historicodevengadointegral (id_historico_devengado_integral, id_personal, anio, mes, sueldo_integral) FROM stdin;
\.


--
-- TOC entry 7552 (class 0 OID 185266)
-- Dependencies: 339
-- Data for Name: historiconomina; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY historiconomina (id_historico_nomina, id_trabajador, numero_nomina, anio, mes, semana_quincena, fecha, id_dependencia, id_cargo, numero_registro, codigo_nomina, forma_pago, id_banco, tipo_cta_nomina, cuenta_nomina, estatus, situacion, id_tipo_personal, id_grupo_nomina, id_nomina_especial, id_lugar_pago, id_unidad_ejecutora, id_unidad_administradora, cod_dependencia, cod_cargo, cod_unidad_ejecutora, cod_unidad_administ, id_sede, id_region, cod_sede, cod_region, mes_sobretiempo, anio_sobretiempo, lunes_retroactivo, lunes_primera, lunes_segunda, hay_retroactivo, codigo_patronal, categoria_presupuesto) FROM stdin;
\.


--
-- TOC entry 7553 (class 0 OID 185287)
-- Dependencies: 340
-- Data for Name: historicoquincena; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY historicoquincena (id_historico_quincena, id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal, numero_nomina, anio, mes, semana_quincena, fecha, unidades, monto_asigna, monto_deduce, origen, documento_soporte, id_tipo_personal, id_grupo_nomina, id_nomina_especial, id_historico_nomina, id_concepto, monto_aporte, id_concepto_aporte, mes_sobretiempo, anio_sobretiempo) FROM stdin;
\.


--
-- TOC entry 7554 (class 0 OID 185302)
-- Dependencies: 341
-- Data for Name: historicosemana; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY historicosemana (id_historico_semana, id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal, numero_nomina, anio, mes, semana_quincena, fecha, unidades, monto_asigna, monto_deduce, origen, documento_soporte, id_tipo_personal, id_grupo_nomina, id_nomina_especial, id_historico_nomina, id_concepto, monto_aporte, id_concepto_aporte, mes_sobretiempo, anio_sobretiempo) FROM stdin;
\.


--
-- TOC entry 7555 (class 0 OID 185317)
-- Dependencies: 342
-- Data for Name: historicoticket; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY historicoticket (id_historico_ticket, anio, mes, cantidad_ticket, denominacion_ticket, monto_cobrar, total_descuentos_ticket, neto_cantidad_ticket, neto_monto_cobrar, especial, fecha_proceso, anio_proceso, mes_proceso, cod_ticket, id_trabajador, id_concepto_tipo_personal, id_proveedor_ticket, id_tipo_personal, id_dependencia, cod_dependencia, nombre_dependencia) FROM stdin;
\.


--
-- TOC entry 7556 (class 0 OID 185334)
-- Dependencies: 343
-- Data for Name: identity; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY identity (name, last) FROM stdin;
PersonalOrganismo	4320
\.


--
-- TOC entry 7557 (class 0 OID 185337)
-- Dependencies: 344
-- Data for Name: idioma; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY idioma (id_idioma, escribe, habla, lee, id_personal, id_tipo_idioma, examen_suficiencia, entidad_suficiencia, fecha_suficiencia, examen_academico, entidad_academica, fecha_academica, nombre_entidad, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7558 (class 0 OID 185351)
-- Dependencies: 345
-- Data for Name: informacionmpd; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY informacionmpd (codigo_nomina, cedula, nombre_apellido, sueldo1, compensacion1, sueldo2, compensacion2) FROM stdin;
\.


--
-- TOC entry 7559 (class 0 OID 185359)
-- Dependencies: 346
-- Data for Name: inhabilitado; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY inhabilitado (id_inhabilitado, cedula, primer_apellido, primer_nombre, segundo_apellido, segundo_nombre) FROM stdin;
\.


--
-- TOC entry 7560 (class 0 OID 185362)
-- Dependencies: 347
-- Data for Name: instancia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY instancia (id_instancia, id_clasificacion, cod_instancia, nombre, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7561 (class 0 OID 185366)
-- Dependencies: 348
-- Data for Name: institucion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY institucion (id_institucion, cod_institucion, nombre, nombre_corto, estatus, ley_estatuto) FROM stdin;
1	01	ASAMBLEA NACIONAL	NA	A	S
2	02	CONTRALORIA GENERAL DE LA REPÚBLICA	CGR	A	S
3	03	CONSEJO NACIONAL ELECTORAL	CNE	A	S
4	06	MINISTERIO DE RELACIONES EXTERIORES	MRE	A	S
5	07	MINISTERIO DE FINANZAS	MF	A	S
6	08	MINISTERIO DE LA DEFENSA	MD	A	S
7	10	MINISTERIO DE EDUCACIÓN Y DEPORTES	MED	A	S
8	13	MINISTERIO DEL TRABAJO	MINTRA	A	S
9	16	MINISTERIO DE ENERGIA Y MINAS	MEM	A	S
10	17	MINISTERIO DEL AMBIENTE Y DE LOS RECURSOS NATURALES	MARN	A	S
11	21	TRIBUNAL SUPREMO DE JUSTICIA	TSJ	A	S
12	23	MINISTERIO PÚBLICO	MP	A	S
13	25	PROCURADURIA GENERAL DE LA REPÚBLICA	PGR	A	S
14	26	MINISTERIO DEL INTERIOR Y JUSTICIA	MIJ	A	S
15	27	MINISTERIO DE LA PRODUCCIÓN Y EL COMERCIO	MPC	A	S
16	28	MINISTERIO DE INFRAESTRUCTURA	MINFRA	A	S
17	29	MINISTERIO DE PLANIFICACIÓN Y DESARROLLO	MPD	A	S
18	30	MINISTERIO DE CIENCIA Y TECNOLOGÍA	MCT	A	S
19	31	MINISTERIO DE SALUD Y DESARROLLO SOCIAL	MSDS	A	S
20	32	DEFENSORIA DEL PUEBLO	DP	A	S
21	33	VICEPRESIDENCIA DE LA REPÚBLICA	VPRBV	A	S
22	34	MINISTERIO DE AGRICULTURA Y TIERRAS	MAT	A	S
23	35	MINISTERIO DE EDUCACIÓN SUPERIOR	MES	A	S
24	36	MINISTERIO DE COMUNICACIÓN E INFORMACIÓN	MCI	A	S
25	37	PRESIDENCIA DE LA REPÚBLICA	PRBV	A	S
26	38	CONSEJO MORAL REPUBLICANO	CMR	A	S
27	39	SUPERINTENDENCIA NACIONAL DE AUDITORÍA INTERNA	SUNAI	A	S
28	40	MINISTERIO PARA LA ECONOMÍA POPULAR	MEP	A	S
29	41	MINISTERIO DE ALIMENTACIÓN	MA 	A	S
30	I01	CONGRESO DE LA REPÚBLICA	CR	I	S
31	I03	CONSEJO SUPREMO ELECTORAL	CSE	I	S
32	I04	MINISTERIO DE LA SECRETARÍA DE LA PRESIDENCIA	MSP	I	S
33	I05	MINISTERIO DE RELACIONES INTERIORES	MRI	I	S
34	I07	MINISTERIO DE HACIENDA	MH	I	S
35	I09	MINISTERIO DE FOMENTO	MFOM	I	S
36	I10	MINISTERIO DE EDUCACIÓN	ME 	I	S
37	I11	MINISTERIO DE SANIDAD Y ASISTENCIA SOCIAL	MSAS	I	S
38	I12	MINISTERIO DE AGRICULTURA Y CRÍA	MAC	I	S
39	I14	MINISTERIO DE TRANSPORTE Y COMUNICACIONES	MTC	I	S
40	I15	MINISTERIO DE JUSTICIA	MJ	I	S
41	I17	MINISTERIO DEL AMBIENTE Y DE LOS RECURSOS NATURALES RENOVABLES	MARNR	I	S
42	I18	MINISTERIO DEL DESARROLLO URBANO	MINDUR	I	S
43	I09-1	MINISTERIO DE INDUSTRIA Y COMERCIO	MIC	I	S
44	I10-1	MINISTERIO DE EDUCACION, CULTURA Y DEPORTES	MECD	I	S
45	A0002	INSTITUTO AUTÓNOMO BIBLIOTECA NACIONAL Y DE SERVICIOS DE BIBLIOTECAS	 	A	S
46	A0003	INSTITUTO AUTÓNOMO CAJA DE TRABAJO PENITENCIARIO	 	A	S
47	A0005	INSTITUTO AUTÓNOMO CÍRCULO DE LAS FUERZAS ARMADAS 	IACFA	A	S
48	A0006	COLEGIO UNIVERSITARIO FRANCISCO DE MIRANDA	 	A	S
49	A0007	COLEGIO UNIVERSITARIO DE CARACAS	CUC	A	S
50	A0008	COLEGIO UNIVERSITARIO PROFESOR JOSÉ LORENZO PÉREZ RODRÍGUEZ	 	A	S
51	A0009	COLEGIO UNIVERSITARIO CECILIO ACOSTA, DE LOS TEQUES	 	A	S
52	A0011	SERVICIO AUTÓNOMO OFICINAS TÉCNICAS DEL CONSEJO NACIONAL DE UNIVERSIDADES 	CNU	A	S
53	A0012	CONSEJO NACIONAL DE LA CULTURA 	CONAC	A	S
54	A0015	CORPORACIÓN DE DESARROLLO DE LA REGIÓN CENTRAL 	CORPOCENTRO	A	S
55	A0016	CORPORACIÓN DE DESARROLLO DE LA REGIÓN DE LOS LLANOS 	CORPOLLANOS	A	S
56	A0018	CORPORACIÓN DE DESARROLLO DE LA REGIÓN DE LOS ANDES	CORPOANDES	A	S
57	A0019	CORPORACIÓN DE DESARROLLO DE LA REGIÓN ZULIANA 	CORPOZULIA	A	S
58	A0022	INSTITUTO NACIONAL DE INVESTIGACIONES AGRÍCOLAS	INIA	A	S
59	A0024	CORPORACIÓN VENEZOLANA DE GUAYANA 	C.V.G.	A	S
60	A0025	HOSPITAL UNIVERSITARIO DE CARACAS 	HUC	A	S
61	A0026	I.U. DE TECNOLOGÍA JACINTO NAVARRO VALLENILLA, CARÚPANO	 	A	S
62	A0027	I.U. EXPERIMENTAL DE TECNOLOGÍA  ANDRÉS ELOY BLANCO- BQTO	 	A	S
63	A0028	I.U. DE TECNOLOGÍA "DR. FEDERICO RIVERO PALACIO", REGIÓN CAPITAL	 	A	S
64	A0029	I.U. DE TECNOLOGÍA ALONSO GAMERO, CORO	 	A	S
65	A0030	I.U. DE TECNOLOGÍA AGROINDUSTRIAL REGIÓN LOS ANDES	 	A	S
66	A0032	I.U. DE TECNOLOGÍA DE LOS LLANOS	 	A	S
67	A0033	I.U. DE TECNOLOGÍA DE MARACAIBO	 	A	S
68	A0034	I.U. DE TECNOLOGÍA DE EJIDO	 	A	S
69	A0035	I.U. DE TECNOLOGÍA DE YARACUY	 	A	S
70	A0036	I.U. DE TECNOLOGÍA DE PUERTO CABELLO	 	A	S
71	A0038	I.U. DE TECNOLOGÍA DE VALENCIA	 	A	S
72	A0039	I.U. DE TECNOLOGÍA DEL ESTADO TRUJILLO	 	A	S
73	A0040	I.U. DE TECNOLOGÍA "JOSÉ ANTONIO ANZOÁTEGUI", EL TIGRE	 	A	S
74	A0041	I.U. EXPERIMENTAL DE TECNOLOGÍA DE LA VICTORIA	 	A	S
75	A0042	I.U. DE TECNOLOGÍA DE CABIMAS	 	A	S
76	A0043	I.U. DE TECNOLOGÍA DEL ESTADO PORTUGUESA	 	A	S
77	A0044	INSTITUTO DE OFICIALES DE LAS FUERZAS ARMADAS EN SITUACIÓN DE RETIRO 	IORFAN	A	S
78	A0045	I.U. DE TECNOLOGÍA DE CUMANÁ 	 	A	S
79	A0046	INSTITUTO NACIONAL DE COOPERACIÓN EDUCATIVA	INCE	A	S
80	A0047	INSTITUTO NACIONAL DEL MENOR 	INAM	A	S
81	A0048	I.U. DE TECNOLOGÍA DEL OESTE "MARISCAL SUCRE"	 	A	S
82	A0049	INSTITUTO NACIONAL DE DEPORTE	IND	A	S
83	A0050	INSTITUTO DE PREVISIÓN SOCIAL DE LAS FUERZAS ARMADAS NACIONALES  	IPSFA	A	S
84	A0051	INST. NAC. PARA LA CAPACITACIÓN Y RECREACIÓN DE LOS TRABAJADORES 	INCRET	A	S
85	A0052	INSTITUTO NACIONAL DE PARQUES 	INPARQUES	A	S
86	A0053	I.U. DE TECNOLOGÍA DR. DELFÍN MENDOZA, TUCUPITA	 	A	S
87	A0054	INST. AUT. DE PREVISIÓN SOCIAL DEL C.I.C.P.C. 	 	A	S
88	A0055	INSTITUTO VENEZOLANO DE LOS SEGUROS SOCIALES 	I.V.S.S.	A	S
89	A0056	INSTITUTO DE PREVISIÓN Y ASISTENCIA SOCIAL PARA EL PERSONAL DEL M.E. 	IPASME	A	S
90	A0057	INSTITUTO NACIONAL DE NUTRICIÓN 	INN	A	S
91	A0058	I.U. DE BARLOVENTO	 	A	S
92	A0059	INSTITUTO NACIONAL DE GERIATRÍA Y GERONTOLOGÍA 	INAGER	A	S
93	A0060	I.U. DE TECNOLOGÍA DE CARIPITO	 	A	S
94	A0061	INSTITUTO NACIONAL DE HIGIENE "RAFAEL RANGEL" 	INHRR	A	S
95	A0062	I.U. DE ESTUDIOS MUSICALES	 	A	S
96	A0063	INSTITUTO VENEZOLANO DE INVESTIGACIONES CIENTÍFICAS 	IVIC	A	S
97	A0064	INSTITUTO PARA EL CONTROL Y LA CONSERVACIÓN DE LA CUENCA DEL LAGO DE MARACAIBO 	ICLAM	A	S
98	A0065	OFICINA COORDINADORA DE LA PRESTACIÓN DE LOS SERVICIOS EDUCATIVOS DEL M.D. 	OCPSE	A	S
99	A0066	SERVICIO AUTÓNOMO DE  SALUD DE LA FUERZA ARMADA NACIONAL	 	A	S
100	A0069	SERVICIO AUTÓNOMO SERVICIOS AMBIENTALES DEL M.A.R.N.	SAMARN	A	S
101	A0070	PROCURADURÍA AGRARIA NACIONAL 	PAN	A	S
102	A0071	SERVICIO AUTÓNOMO PROGRAMA NACIONAL DE VIVIENDA RURAL 	SAVIR	A	S
103	A0076	SERVICIO AUTÓNOMO RADIO NACIONAL DE VENEZUELA	 	A	S
104	A0078	SERVICIO AUTÓNOMO DE SANIDAD AGROPECUARIA 	SASA	A	S
105	A0079	SERVICIO AUTÓNOMO IMPRENTA NACIONAL Y GACETA OFICIAL	 	A	S
106	A0080	UNIVERSIDAD DEL ZULIA 	LUZ	A	S
107	A0081	UNIVERSIDAD NACIONAL EXPERIMENTAL POLITÉCNICA ANTONIO JOSÉ DE SUCRE 	UNEXPO	A	S
108	A0082	UNIVERSIDAD DE ORIENTE 	UDO	A	S
109	A0083	UNIVERSIDAD DE LOS ANDES 	ULA	A	S
110	A0084	UNIVERSIDAD NACIONAL EXP. DE LOS LLANOS CENTRALES RÓMULO GALLEGOS 	UNERG	A	S
111	A0085	UNIVERSIDAD NACIONAL EXP. RAFAEL MARÍA BARALT 	UNERMB	A	S
112	A0086	UNIVERSIDAD NACIONAL EXP. SIMÓN BOLÍVAR 	USB	A	S
113	A0087	UNIVERSIDAD NACIONAL ABIERTA 	UNA	A	S
114	A0088	UNIVERSIDAD NACIONAL EXPERIMENTAL DE GUAYANA 	UNEG	A	S
115	A0089	UNIVERSIDAD CENTROCCIDENTAL LISANDRO ALVARADO 	UCLA	A	S
116	A0090	UNIVERSIDAD PEDAGÓGICA EXPERIMENTAL LIBERTADOR 	UPEL	A	S
117	A0091	UNIVERSIDAD NACIONAL EXP. DE LLANOS OCC. EZEQUIEL ZAMORA 	UNELLEZ	A	S
118	A0092	UNIVERSIDAD NACIONAL EXP. DEL TÁCHIRA 	UNET	A	S
119	A0093	UNIVERSIDAD CENTRAL DE VENEZUELA	UCV	A	S
120	A0094	UNIVERSIDAD DE CARABOBO	UC 	A	S
121	A0095	UNIVERSIDAD NACIONAL EXPERIMENTAL SIMÓN RODRÍGUEZ 	UNESR	A	S
122	A0096	UNIVERSIDAD NACIONAL EXPERIMENTAL FRANCISCO DE MIRANDA 	UNEFM	A	S
123	A0097	SERVICIO AUTÓNOMO VENPRES	VENPRES	A	S
124	A0100	U.N. COORD DE  SERV CARENADO, REP DE CASCO, REP Y MANTENIMIENTO DE EQ Y SIST 	UCOCAR	A	S
125	A0103	INSTITUTO FORESTAL LATINOAMERICANO	 	A	S
126	A0107	AUTORIDAD ÚNICA DE AREA PARQUE NACIONAL ARCHIPIÉLAGO LOS ROQUES	 	A	S
127	A0118	FONDO NACIONAL PARA  EDIFICACIONES PENITENCIARIAS	FONEP	A	S
128	A0119	SERVICIO DE ELABORACIONES FARMACÉUTICAS	SEFAR	A	S
129	A0121	SUPERINTENDENCIA DE BANCOS Y OTRAS INSTITUCIONES FINANCIERAS 	 	A	S
130	A0122	SERVICIO AUTÓNOMO DE PRESTACIONES SOCIALES DE LOS ORGANISMOS DE LA ADM CENTRAL	 	A	S
131	A0123	SERVICIO NACIONAL INTEGRADO DE ADMINISTRACIÓN ADUANERA Y TRIBUTARIA 	SENIAT	A	S
132	A0124	CONSEJO NACIONAL PARA LA INTEGRACIÓN DE PERSONAS DISCAPACITADAS 	 	A	S
133	A0126	FONDO AUT DE INVERSIONES Y PREV SOCIOECONÓMICA PARA LOS EMP  Y OBR DE LAS FAN	FONDOEFA	A	S
134	A0129	SERVICIO NACIONAL AUTÓNOMO DE ATENCIÓN INTEGRAL A LA INFANCIA Y A LA FAMILIA 	SENIFA	A	S
135	A0131	SUPERINTENDENCIA DE SEGUROS	 	A	S
136	A0134	FONDO INTERGUBERNAMENTAL PARA LA DESCENTRALIZACIÓN  	FIDES	A	S
137	A0135	ACADEMIA NACIONAL DE CIENCIAS ECONÓMICAS	 	A	S
138	A0136	ACADEMIA NACIONAL DE CIENCIAS FÍSICA, MATEMÁTICAS Y NATURALES	 	A	S
139	A0137	ACADEMIA NACIONAL DE CIENCIAS POLÍTICAS Y SOCIALES	 	A	S
140	A0138	ACADEMIA NACIONAL DE LA HISTORIA	 	A	S
141	A0139	ACADEMIA VENEZOLANA DE LA LENGUA	 	A	S
142	A0140	ACADEMIA NACIONAL DE LA MEDICINA	 	A	S
143	A0142	INSTITUTO PARA LA DEFENSA Y EDUCACIÓN DEL CONSUMIDOR Y DEL USUARIO	INDECU	A	S
144	A0145	COMISIÓN NACIONAL DE CASINOS, SALAS DE BINGO Y MÁQUINAS TRAGANÍQUELES	 	A	S
145	A0149	I.U. DE TEATRO	 	A	S
146	A0150	INSTITUTO DEL PATRIMONIO CULTURAL	 	A	S
147	A0151	I.U. DE ESTUDIOS SUPERIORES DE ARTES PLÁSTICAS ARMANDO REVERÓN.	 	A	S
148	A0153	SERVICIO AUTÓNOMO HOSPITAL UNIVERSITARIO DE MARACAIBO	SAHUM	A	S
149	A0157	SERVICIO AUTÓNOMO DE BIENES Y SERVICIOS DEL EJÉRCITO	SABSE	A	S
150	A0158	COMPAÑÍA NACIONAL DE TEATRO	 	A	S
151	A0161	FUNDACIÓN ORQUESTA FILARMÓNICA NACIONAL	 	A	S
152	A0170	SERVICIO AUTÓNOMO INSTITUTO DE ALTOS ESTUDIOS DIPLOMÁTICOS PEDRO GUAL	 	A	S
153	A0176	INSTITUTO NACIONAL DE PREVENCIÓN, SALUD Y SEGURIDAD LABORALES 	INPSASEL	A	S
154	A0181	SERVICIO AUTÓNOMO INSTITUTO DE BIOMEDICINA	 	A	S
155	A0183	SERVICIO AUTÓNOMO SISTEMA NACIONAL DE ADIESTRAMIENTO 	SNA	A	S
156	A0185	COMISIÓN NACIONAL DE VALORES 	CNV	A	S
157	A0186	UNIVERSIDAD NACIONAL EXPERIMENTAL DEL YARACUY	UNEY	A	S
158	A0187	I.U. DE DANZA	 	A	S
159	A0188	FUNDACIÓN MUSEO JACOBO BORGES	 	A	S
160	A0189	FUNDACIÓN MUSEO DE LA ESTAMPA Y DEL DISEÑO "CARLOS CRUZ DIEZ"	 	A	S
161	A0191	FUNDACIÓN VENEZOLANA DE PROMOCIÓN DEL INVESTIGADOR 	FVPI	A	S
162	A0192	OFICINA COORDINADORA DE HIDROGRAFÍA Y NAVEGACIÓN 	OCHINA	A	S
163	A0193	OFICINA COORDINADORA DE APOYO MARÍTIMO DE LA ARMADA 	OCAMAR	A	S
164	A0194	SERVICIO AUTONÓMO SIN PERSONALIDAD JURÍDICA DE LA FUERZA AÉREA VENEZOLANA 	SAFAV	A	S
165	A0195	SERVICIO AUTÓNOMO DE MANTENIMIENTO DE LANCHAS DE LA GUARDIA NACIONAL 	SAMALGUARN	A	S
166	A0196	UNIVERSIDAD NACIONAL EXPERIMENTAL POLITÉCNICA DE LA FUERZA ARMADA NACIONAL	UNEFA	A	S
167	A0197	INSTITUTO AUTÓNOMO FONDO UNICO SOCIAL 	IAFUS	A	S
168	A0198	INSTITUTO NACIONAL DE ESTADÍSTICA 	INE	A	S
169	A0199	INSTITUTO NACIONAL DE GEOLOGÍA Y MINERÍA 	INGEOMIN	A	S
170	A0204	OFICINA COORDINADORA DE LOS SERVICIOS AGROPECUARIOS DEL M.D. 	O.C.S.A.	A	S
171	A0205	SERV. AUT NAC DE NORMALIZACIÓN, CALIDAD, METROLOGÍA Y REGLAMENTOS TÉCNICOS 	SENCAMER	A	S
172	A0206	ASOCIACIÓN CIVIL CLUB DE SUB OFICIALES PROFESIONALES DE LAS FUERZAS ARMADAS 	CLUSOFA	A	S
173	A0208	UNIVERSIDAD NACIONAL EXPERIMENTAL SUR DEL LAGO "JESÚS MARÍA SEMPRÚM" 	UNESUR	A	S
174	A0209	CENTRO NACIONAL DE TECNOLOGÍAS DE INFORMACIÓN	CNTI	A	S
175	A0210	CORPORACIÓN PARA LA RECUPERACIÓN Y DESARROLLO DEL ESTADO VARGAS 	CORPOVARGAS	A	S
176	A0211	INST AUT FONDO NAC DE PROMOCIÓN Y CAPACITACIÓN PARA LA PARTICIPACIÓN TURÍSTICA	INATUR	A	S
177	A0215	COMISIÓN NACIONAL DE ENERGÍA ELÉCTRICA 	CNEE	A	S
178	A0216	FUNDACIÓN "PUEBLO SOBERANO"	 	A	S
179	A0301	FUNDACIÓN BIBLIOTECA AYACUCHO	 	A	S
180	A0302	FUNDACIÓN DE CAPACITACIÓN E INNOVACIÓN PARA EL DESARROLLO RURAL 	CIARA	A	S
181	A0303	FUND CTRO DE INVEST DEL EDO PARA LA PRODUCCIÓN EXPERIMENTAL AGROINDUSTRIAL 	CIEPE	A	S
182	A0305	FUND "CENTRO CRECIMIENTO Y DESARR DE LA POBLACIÓN VENEZOLANA" 	FUNDACREDESA	A	S
183	A0306	FUNDACIÓN "JOSÉ FÉLIX RIBAS" (FUNDARIBAS)	FUNDARIBAS	A	S
184	A0307	FUND PARA  SERVICIO DE ASIST MÉDICA HOSPITALARIA PARA ESTUDIANTES DE EDU SUPERIOR 	FAMES	A	S
185	A0312	FUNDACIÓN PARA EL DESARROLLO DE LA REGIÓN CENTRO OCCIDENTAL DE VENEZUELA	FUDECO	A	S
186	A0313	FUNDACIÓN INSTITUTO INTERNACIONAL DE ESTUDIOS AVANZADOS 	IDEA	A	S
187	A0314	FUND PARA EL DESARROLLO DE LA CIENCIA Y LA TECNOLOGÍA DEL EDO ANZOÁTEGUI 	FUNDACITE-ANZ	A	S
188	A0315	FUND PARA EL DESARROLLO DE LA CIENCIA Y LA TECNOLOGÍA DEL EDO ARAGUA 	FUNDACITE-ARA	A	S
189	A0316	FUND PARA EL DESARROLLO DE LA CIENCIA Y LA TECNOLOGÍA DEL EDO CARABOBO	FUNDACITE-CAR	A	S
190	A0318	FUND PARA EL DESARROLLO DE LA CIENCIA Y LA TECNOLOGÍA DEL EDO FALCÓN 	FUNDACITE-FAL	A	S
191	A0319	FUND PARA EL DESARROLLO DE LA CIENCIA Y LA TECNOLOGÍA EN LA REGIÓN GUAYANA	FUNDACITE-GUA	A	S
192	A0320	FUND PARA EL DESARROLLO DE LA CIENCIA Y LA TECNOLOGÍA DEL EDO MÉRIDA 	FUNDACITE-MER	A	S
193	A0321	FUND PARA EL DESARROLLO DE LA CIENCIA Y LA TECNOLOGÍA DEL EDO TÁCHIRA 	FUNDACITE-TAC	A	S
194	A0322	FUND PARA EL DESARROLLO DE LA CIENCIA Y LA TECNOLOGÍA DEL EDO SUCRE 	FUNDACITE-SUC	A	S
195	A0323	FUNDACIÓN DE EDIFICACIONES Y DOTACIONES EDUCATIVAS 	FEDE	A	S
196	A0324	FUNDACIÓN DE EDUCACIÓN AMBIENTAL	 	A	S
197	A0325	FUNDACIÓN ESCUELA DE GERENCIA SOCIAL	FEGS	A	S
198	A0326	FUNDACIÓN PARA EL DESARROLLO DE LA COMUNIDAD Y FOMENTO MUNICIPAL 	FUNDACOMUN	A	S
199	A0330	FUNDACIÓN FONDO NACIONAL DE TRANSPORTE  URBANO  	FONTUR	A	S
200	A0331	FONDO DE INVERSIÓN SOCIAL DE VENEZUELA	FONVIS	A	S
201	A0333	FUNDACIÓN GRAN MARISCAL DE AYACUCHO	FUNDAYACUCHO	A	S
202	A0334	FUND INST DE INGENIERÍA PARA  LA INVESTIGACIÓN Y DESARROLLO TECNOLÓGICO 	FIIDT	A	S
203	A0335	INSTITUTO VENEZOLANO DE PLANIFICACIÓN	IVEPLAN	A	S
204	A0338	FUNDACIÓN INSTITUTO ZULIANO  DE INVESTIGACIONES TECNOLÓGICA  	INZIT-CICASI	A	S
205	A0342	FUNDACIÓN LA CASA DE BELLO	 	A	S
206	A0343	FUNDACIÓN LABORATORIO NACIONAL DE HIDRÁULICA	 	A	S
207	A0350	MUSEO DE ARTE CONTEMPORÁNEO DE CARACAS SOFIA IMBER	 	A	S
208	A0354	FUNDACIÓN NACIONAL DE PARQUES ZOOLÓGICOS Y ACUARIOS	 	A	S
209	A0355	FUND PARA EL DESARROLLO DE LA CIENCIA Y LA TECNOLOGÍA DE LA REGIÓN ZULIANA  	FUNDACITE-ZUL	A	S
210	A0356	FUNDACIÓN GUARDERÍA INFANTIL DEL MINISTERIO DE ENERGÍA Y MINAS LA ALQUITRANA	 	A	S
211	A0361	FUNDACIÓN ORO NEGRO	 	A	S
212	A0363	FUNDACIÓN VENEZOLANA DE INVESTIGACIONES SISMOLÓGICAS	FUNVISIS	A	S
213	A0364	FUNDACIÓN PARA EL DESARROLLO DEL SERVICIO ELÉCTRICO 	FUNDELEC	A	S
214	A0366	FUNDACIÓN INSTITUTO BOTÁNICO DE VENEZUELA DR. TOBÍAS LÁSER	 	A	S
215	A0367	FUNDACIÓN LABORATORIO NACIONAL DE VIALIDAD	 	A	S
216	A0369	FUNDACIÓN DEL ESTADO PARA LA ORQUESTA NACIONAL JUVENIL DE VENEZUELA	FESNOJIV	A	S
217	A0371	FUNDACIÓN VICENTE EMILIO SOJO	 	A	S
218	A0372	FUNDACIÓN TERESA CARREÑO	 	A	S
219	A0373	FUNDACIÓN CENTRO DE ESTUDIOS LATINOAMERICANOS RÓMULO GALLEGOS	 	A	S
220	A0374	FUNDACIÓN KUAI-MARE DEL LIBRO VENEZOLANO	 	A	S
221	A0375	FUNDACIÓN CASA DEL ARTISTA	 	A	S
222	A0376	FUNDACIÓN MUSEO DE BELLAS ARTES	 	A	S
223	A0377	FUNDACIÓN MUSEO ALEJANDRO OTERO	 	A	S
224	A0378	FUNDACIÓN DE ETNOMUSICOLOGIA Y FOLKLORE	 	A	S
225	A0379	FUNDACIÓN MUSEO DE CIENCIAS	 	A	S
226	A0381	FUNDACIÓN MUSEO ARTURO MICHELENA	 	A	S
227	A0382	FUNDACIÓN CENTRO DE INVESTIGACIONES DE ASTRONOMÍA FRANCISCO J. DUARTE 	CIDA	A	S
228	A0386	FUNDACIÓN PARA EL EQUIPAMIENTO DE BARRIOS 	FUNDABARRIOS	A	S
229	A0387	FUNDACIÓN CENTRO NACIONAL PARA EL MEJORAMIENTO DE LA ENSEÑANZA DE LA CIENCIA	CENAMEC	A	S
230	A0390	FUNDACIÓN CINEMATECA NACIONAL	 	A	S
231	A0392	FUNDACIÓN GALERÍA DE ARTE NACIONAL	 	A	S
232	A0398	FUND INST DE ALTOS ESTUDIOS DE CONT FISCAL Y AUDITORÍA DE EDO "GUMERSINDO TORRES" 	COFAE	A	S
233	A0403	FUNDACIÓN PROCURADURÍA 	 	A	S
234	A0404	FUNDACIÓN PROYECTO PAÍS	 	A	S
235	A0405	FUND PARA EL DESARROLLO DE LA CIENCIA Y LA TECNOLOGÍA DEL EDO LARA 	FUNDACITE-LAR	A	S
236	A0406	FUNDACIÓN LABORATORIO NACIONAL DE PRODUCTOS FORESTALES	 	A	S
237	A0409	FUNDACIÓN MEDIOS AUDIOVISUALES AL SERVICIO DE LA EDUCACIÓN	EDUMEDIA	A	S
238	A0410	FUNDACIÓN BOLIVARIANA DE INFORMÁTICA Y TELEMÁTICA 	FUNDABIT	A	S
239	A0411	FUNDACIÓN PRO-PATRIA 2000	 	A	S
240	A0412	FUNDACIÓN DEFENSORÍA DEL PUEBLO	 	A	S
241	A0413	FUNDACIÓN POLIEDRO DE CARACAS	 	A	S
242	A0415	FUNDACIÓN MISIÓN SUCRE	 	A	S
243	A0416	FUNDACIÓN PARA LOS SERVICIOS DE SALUD Y PREVISIÓN SOCIAL DE LA CGR 	SERSACON	A	S
244	A0417	FUNDACIÓN CENTRO NACIONAL DE LA FOTOGRAFÍA DE VENEZUELA	 	A	S
245	A0653	CORP ZONA LIBRE PARA  FOMENTO DE INVERSIÓN TURÍSTICA DE P.DE PARAGUANÁ 	CORPOTULIPA	A	S
246	A0658	INSTITUTO AUTÓNOMO AEROPUERTO INTERNACIONAL DE MAIQUETÍA	I.A.A.I.M.	A	S
247	A0659	INSTITUTO AUTÓNOMO FERROCARRILES DEL ESTADO 	IAFE	A	S
248	A0660	INSTITUTO POSTAL TELEGRÁFICO 	IPOSTEL	A	S
249	A0661	INSTITUTO NACIONAL DE CANALIZACIONES	INC 	A	S
250	A0662	INSTITUTO NACIONAL DE LA VIVIENDA	INAVI	A	S
251	A0663	INSTITUTO NACIONAL DE HIPÓDROMOS	INHRR	A	S
252	A0711	BANCO NACIONAL DE AHORRO Y PRÉSTAMO 	BANAP	A	S
253	A0714	INSTITUTO AUTÓNOMO CONSEJO NACIONAL DE VIVIENDA 	CONAVI	A	S
254	A0805	FONDO NACIONAL DE DESARROLLO URBANO 	FONDUR	A	S
255	A0808	FONDO DE CRÉDITO INDUSTRIAL 	FONCREI	A	S
256	A0818	SOC CIV CONTROL DE ENFERMEDADES ENDÉMICAS Y ASISTENCIA AL INDIGENA, BOLÍVAR 	CENASAI BOIVAR	A	S
257	A0821	CENTRO NACIONAL AUTÓNOMO DE CINEMATOGRAFIA 	CNAC	A	S
258	A0828	SERVICIO AUTÓNOMO DE LA PROPIEDAD INTELECTUAL 	SAPI	A	S
259	A0829	CENTRO NACIONAL DEL LIBRO 	CNL	A	S
260	A0830	SERVICIO COORDINADO DE TRANSPORTE AÉREO DEL EJECUTIVO NACIONAL	SATA	A	S
261	A0840	FONDO DE DESARROLLO AGROPECUARIO, PESQUERO, FORESTAL Y AFINES 	FONDAFA	A	S
262	A0842	FONDO DE DESARROLLO MICROFINANCIERO 	FONDEMI	A	S
263	A0844	INSTITUTO NACIONAL DE LA PESCA Y ACUICULTURA 	INAPESCA	A	S
264	A0846	INSTITUTO NACIONAL DE DESARROLLO DE LA PEQUEÑA Y MEDIANA INDUSTRIA 	INAPYMI	A	S
265	A0900	ENTE NACIONAL DEL GAS 	ENAGAS	A	S
266	A0904	AUTORIDAD ÚNICA DE ÁREA PARA EL ESTADO VARGAS 	AUAEV	A	S
267	A0905	SERVICIO AUTÓNOMO DE FONDOS INTEGRADOS DE VIVIENDA 	SAFIV	A	S
268	A0906	SERVICIO AUTÓNOMO SUPERINTENDENCIA NACIONAL DE ACTIVIDADES HÍPICAS	SUNAHIP	A	S
269	A0907	INSTITUTO DE ALTOS ESTUDIOS "DR. ARNOLDO GABALDÓN"	 	A	S
270	A0908	SERVICIO NACIONAL DE CONTRATACIONES 	SENACON	A	S
271	A0909	INSTITUTO GEOGRÁFICO DE VENEZUELA SIMÓN BOLÍVAR	 	A	S
272	A0910	CONSEJO NACIONAL DE DERECHOS DEL NIÑO Y DEL ADOLESCENTE	CNDNA	A	S
273	A0911	ACADEMIA NACIONAL DE LA INGENIERÍA Y EL HÁBITAT	 	A	S
274	A0912	UNIVERSIDAD NACIONAL EXPERIMENTAL MARÍTIMA  DEL CARIBE 	UNEMC	A	S
275	A0923	I.U. DE TECNOLOGÍA DEL ESTADO APURE	IUT-APURE	A	S
276	A0924	I.U. DE TECNOLOGÍA DEL ESTADO BARINAS	IUT-BARINAS	A	S
277	A0925	I.U. DE TECNOLOGÍA DEL ESTADO BOLÍVAR	IUT-BOLIVAR	A	S
278	A0927	FONDO VENEZOLANO DE RECONVERSIÓN INDUSTRIAL Y TECNOLÓGICA	FONDOIN	A	S
279	A0929	FONDO NACIONAL DE CIENCIA, TECNOLOGÍA E INNOVACIÓN 	FONACIT	A	S
280	A0931	SERVICIO AUTÓNOMO FONDO NACIONAL DE PROTECCIÓN DEL NIÑO Y DEL ADOLESCENTE	 	A	S
281	A0932	INSTITUTO NACIONAL DE LOS ESPACIOS ACUÁTICOS E INSULARES 	INEA	A	S
282	A0933	INSTITUTO NACIONAL DE DESARROLLO RURAL	INDER	A	S
283	A0934	CORPORACIÓN VENEZOLANA AGRARIA	CVA	A	S
284	A0935	INSTITUTO NACIONAL DE TIERRAS 	INTI	A	S
285	A0936	INSTITUTO NACIONAL DE LA MUJER 	INAMUJER	A	S
286	A0937	SUPERINTENDENCIA DE SERVICIOS DE CERTIFICACIÓN ELECTRÓNICA 	SUSCERTE	A	S
287	A0938	INSTITUTO NACIONAL DE LA JUVENTUD	INJ	A	S
288	A0939	INSTITUTO NACIONAL DE AVIACIÓN CIVIL 	INAC	A	S
289	A0940	INSTITUTO NACIONAL DE TRÁNSITO Y TRANSPORTE TERRESTRE 	INTTT	A	S
290	A0941	FOND NAC PARA FINANCIAMIENTO DE  ZONAS ESPECIALES DE DESARROLLO SUSTENTABLE 	FONZEDES	A	S
291	A0942	UNIVERSIDAD  BOLIVARIANA DE VENEZUELA 	UBV	A	S
292	A0943	COLEGIO UNIVERSITARIO HOTEL ESCUELA DE LOS ANDES VENEZOLANOS 	CUHELAV	A	S
293	A0946	I.U. DE TECNOLOGÍA LA FRÍA	IUT-LA FRIA	A	S
294	A0010	INSTITUTO AUTÓNOMO COMISIÓN NACIONAL DE TELECOMUNICACIONES 	CONATEL	A	S
295	A0148	C.A. METRO DE MARACAIBO.	 	A	S
296	A0212	METRO DE LOS TEQUES	 	A	S
297	A0500	PETRÓLEOS DE VENEZUELA S.A.	PDVSA	A	S
298	A0501	PETROQUÍMICA DE VENEZUELA S.A. 	PEQUIVEN	A	S
299	A0502	BITÚMENES ORINOCO S.A. 	BITOR	A	S
300	A0503	LAGOVEN S.A.	LAGOVEN	A	S
301	A0504	MARAVEN S.A.	MARAVEN	A	S
302	A0505	CORPOVEN S.A.	CORPORVEN	A	S
303	A0599	C.V.G. BAUXILUM, C.A.	 	A	S
304	A0600	ALMACENADORA CARACAS C.A.	 	A	S
305	A0601	DESARROLLO URBANO DE LA COSTA ORIENTAL DEL LAGO DE MARACAIBO S.A.	DUCOLSA	A	S
306	A0602	C.V.G. ALUMINIO DEL CARONÍ S.A.	ALCASA	A	S
307	A0605	C.A. HIDROLÓGICA DE FALCÓN.	 	A	S
308	A0606	C.A. HIDROLÓGICA DE VENEZUELA.	 	A	S
309	A0607	C.A. ENERGÍA ELÉCTRICA DE VENEZUELA 	ENELVEN	A	S
310	A0608	C.A. VENEZOLANA DE TELEVISIÓN	 	A	S
311	A0609	C.A. HIDROLÓGICA DE LA REGIÓN CAPITAL.	 	A	S
312	A0610	C.A. VENEZOLANA DE INDUSTRIAS MILITARES	CAVIM	A	S
313	A0611	C.A. HIDROLÓGICA DEL CARIBE.	 	A	S
314	A0612	C.A. CONSTRUCCIONES PARA VIVIENDAS DEL METRO 	COVIMETRO	A	S
315	A0613	C.A. HIDROLÓGICA DE LA REGIÓN SUROESTE.	 	A	S
316	A0614	C.A. HOTEL GUAYANA.	 	A	S
317	A0615	C.A. HIDROLÓGICA PÁEZ.	 	A	S
318	A0616	C.A. HIDROLÓGICA DE LOS LLANOS.	 	A	S
319	A0617	C.A. HIDROLÓGICA DE OCCIDENTE.	 	A	S
320	A0619	C.A. HIDROLÓGICA DEL LAGO DE MARACAIBO.	 	A	S
321	A0620	C.A. DE ADMINISTRACIÓN Y FOMENTO ELÉCTRICO	CADAFE	A	S
322	A0621	C.A. METRO DE CARACAS 	CAMETRO	A	S
323	A0622	C.A. HIDROLÓGICA DEL CENTRO.	 	A	S
324	A0626	C.V.G. ELECTRIFICACIÓN DEL CARONÍ C.A.	EDELCA	A	S
325	A0627	C.V.G. TÉCNICA MINERA C.A. (TECMIN).	TECMIN	A	S
326	A0628	C.V.G. FERROMINERA DEL ORINOCO C.A.	 	A	S
327	A0629	C.V.G. PROMOCIONES FERROCA S.A.	 	A	S
328	A0631	C.V.G. CARBONES DEL ORINOCO, C.A.	 	A	S
329	A0632	CARBONES DEL ZULIA S.A.	CARBOZULIA	A	S
330	A0633	CARBONES DEL SUROESTE C.A. 	CARBOSUROESTE	A	S
331	A0635	CENTRO SIMÓN BOLÍVAR  C.A. 	CSB	A	S
332	A0636	CENTRO RAFAEL URDANETA S.A.	 	A	S
333	A0638	C.V.G. COMPAÑÍA GENERAL DE MINERÍA DE VENEZUELA C. A.	MINERVEN	A	S
334	A0639	COMPAÑÍA NACIONAL DE REFORESTACIÓN 	CONARE	A	S
335	A0641	CORPORACIÓN DE ABASTECIMIENTO Y SERVICIOS AGRÍCOLAS S.A. 	CASA	A	S
336	A0644	DIQUES Y ASTILLEROS NACIONALES C.A. 	DIANCA	A	S
337	A0647	PRODUCTOS HALOGENADOS DE VENEZUELA C.A. 	PRODUVEN	A	S
338	A0648	HOTEL DEL LAGO C.A.	 	A	S
339	A0649	C.A. ENERGÍA ELÉCTRICA DE LA COSTA ORIENTAL 	ENELCO	A	S
340	A0651	METRO DE VALENCIA 	VALMETRO	A	S
341	A0652	FOSFATOS DEL SUROESTE C.A. 	FOSFASUROESTE	A	S
342	A0655	HOTEL TACARIGUA C.A.	 	A	S
343	A0656	C.V.G. MINERALES ORDAZ, C.A. 	MINORCA	A	S
344	A0657	C.V.G. FERROMINTEC.	 	A	S
345	A0664	C.A. DE ELECTRICIDAD DE LOS ANDES 	CADELA	A	S
346	A0665	C.V.G. INDUSTRIA VENEZOLANA DEL ALUMINIO, C.A	VENALUM	A	S
347	A0667	DESARROLLO URIBANTE - CAPARO 	DESURCA	A	S
348	A0668	PALMAVEN, S.A.	PALMAVEN	A	S
349	A0669	C.A. DE ELECTRICIDAD DEL CENTRO 	ELECENTRO	A	S
350	A0675	PROMOTORA DEL DESARROLLO URBANO DE LA REGIÓN ZULIANA C.A. 	PRODUZCA	A	S
351	A0677	QUIMBIOTEC, C.A.	QUIMBIOTEC	A	S
352	A0678	SISTEMA HIDRÁULICO YACAMBÚ QUÍBOR C.A.	 	A	S
353	A0682	VIAJES Y TURISMO, IFAMIL.	 	A	S
354	A0683	VIVIENDAS EN GUARNICIÓN C.A.	 	A	S
355	A0685	C.A. HIDROLÓGICA DE LA CORDILLERA ANDINA.	 	A	S
356	A0686	C.A. ELECTRICIDAD EL OCCIDENTE 	ELEOCCIDENTE	A	S
357	A0688	C.A. ELECTRICIDAD DE ORIENTE	ELEORIENTE	A	S
358	A0690	C.V.G. INTERNACIONAL, C.A.	 	A	S
359	A0691	C.A. ENERGÍA ELÉCTRICA DE BARQUISIMETO 	ENELBAR	A	S
360	A0692	C.V.G. COMPAÑÍA NACIONAL DE CAL C.A.	CONACAL	A	S
361	A0694	C.V.G. PRODUCTOS FORESTALES DE ORIENTE, C.A., PRODEFOR II FASE 	PROFORCA	A	S
362	A0696	EMPRESA REGIONAL SISTEMA HIDRÁULICO TRUJILLANO S.A.	 	A	S
363	A0697	EMPRESA REGIONAL DESARROLLOS HIDRÁULICOS COJEDES C.A.	 	A	S
364	A0702	C.A.  SISTEMA ELÉCTRICO DE MONAGAS Y DELTA AMACURO 	SEMDA	A	S
365	A0703	BANCO DE FOMENTO REGIONAL DE LOS ANDES C.A.	 	A	S
366	A0704	BANCO DE COMERCIO EXTERIOR.	 	A	S
367	A0709	BANCO INDUSTRIAL DE VENEZUELA C.A. 	BIV	A	S
368	A0717	BANCO DEL PUEBLO SOBERANO C.A.	 	A	S
369	A0718	BANCO DE DESARROLLO DE LA MUJER, C.A. 	BANMUJER	A	S
370	A0719	BANCO DE DESARROLLO ECONÓMICO Y SOCIAL DE VENEZUELA	BANDES	A	S
371	A0800	ARR FIN DE  CORP DE DESARROLLO DE LA PEQUEÑA Y MEDIANA INDUSTRIA.	 	A	S
372	A0806	INST AUT  FONDO DE GARANTÍA DE DEPÓSITOS Y PROTECCIÓN BANCARIA.	FOGADE	A	S
373	A0811	HORIZONTE C.A. DE SEGUROS.	 	A	S
374	A0814	INVERSORA BANCO INDUSTRIAL DE VENEZUELA C.A.	INBIVEN	A	S
375	A0816	SOCIEDAD FINANCIERA INDUSTRIAL DE VENEZUELA 	FIVCA	A	S
376	A0817	SOC NAC DE GARANTÍAS RECÍPROCAS PARA MEDIANA Y PEQUEÑA INDUSTRIA 	SOGAMPI	A	S
377	A0820	EMPRESA REGIONAL SISTEMA HIDRÁULICO PLANICIE DE MARACAIBO 	PLANIMARA	A	S
378	A0825	EMPRESA NACIONAL DE ALMACENES.	 	A	S
379	A0836	INVERSORA HORIZONTE, S.A.	 	A	S
380	A0837	PRODUCTORA DE CHAMPIÑONES SANTO DOMINGO, C.A.	 	A	S
381	A0838	MONTEAVILA EDITORES LATINOAMERICANA.	 	A	S
382	A0841	FON NAC DE GARANTÍAS RECÍPROCAS PARA PEQUEÑA Y MEDIANA EMPRESA	FONPYME	A	S
383	A0845	COMPLEJO AGROINDUSTRIAL AZUCARERO EZEQUIEL ZAMORA	 	A	S
384	A0902	PUERTOS DEL LITORAL CENTRAL S.A.	 	A	S
385	A1201	C.A. ENELVEN DISTRIBUIDORA 	ENELDIS	A	S
386	A1202	C.A. ENELVEN GENERADOR 	ENELGEN	A	S
387	A1204	ZONA  INDUSTRIAL COSTA ORIENTAL DEL LAGO, C.A. 	ZICOLCA	A	S
388	A1205	PROCESAMIENTO ELECTRÓNICO DE DATOS, S.A. 	PROCEDATOS	A	S
389	A1206	MERCADOS DE ALIMENTOS, C.A. 	MERCAL	A	S
390	A1207	CORPORACIÓN VENEZOLANA DE TELECOMUNICACIONES 	COVETEL	A	S
400	42	INSTITUTO MUNICIPAL DE ASEO URBANO	IMAU	I	S
401	43	CENAZUCAR	CENAZUCAR	I	S
402	44	ENSAL	ENSAL	I	S
403	45	ADAGRO	ADAGRO	I	S
404	46	BANDAGRO	BANDAGRO	I	S
\.


--
-- TOC entry 7562 (class 0 OID 185373)
-- Dependencies: 349
-- Data for Name: interesadicional; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY interesadicional (id_interes_adicional, id_trabajador, anio, mes, dias, tasa_interes, monto_capital, monto_interes_mensual, monto_interes_acumulado, monto_anticipo, monto_anticipo_acumulado, saldo_al_18061997) FROM stdin;
\.


--
-- TOC entry 7563 (class 0 OID 185386)
-- Dependencies: 350
-- Data for Name: intereses; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY intereses (concepto, cedula, monto) FROM stdin;
\.


--
-- TOC entry 7564 (class 0 OID 185390)
-- Dependencies: 351
-- Data for Name: interesnuevoregimen; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY interesnuevoregimen (id_interes_nuevo_regimen, id_trabajador, anio, mes, dias, tasa_interes, monto_prestaciones, monto_prestaciones_acumuladas, monto_adicional, monto_capital, monto_interes_mensual, monto_interes_acumulado, monto_anticipo, monto_anticipo_acumulado, monto_fideicomiso, monto_fideicomiso_acumulado, dias_mensuales, dias_adicionales) FROM stdin;
\.


--
-- TOC entry 7565 (class 0 OID 185409)
-- Dependencies: 352
-- Data for Name: interesviejoregimen; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY interesviejoregimen (id_interes_viejo_regimen, id_trabajador, anio, mes, dias, sueldo_integral, tasa_interes, anios_servicio, monto_prestaciones, monto_capital, monto_interes_mensual, monto_interes_acumulado, monto_anticipo, monto_anticipo_acumulado) FROM stdin;
\.


--
-- TOC entry 7566 (class 0 OID 185424)
-- Dependencies: 353
-- Data for Name: jerarquiacategoriadocente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY jerarquiacategoriadocente (id_jerarquia_categoria_docente, id_jerarquia_docente, id_categoria_docente) FROM stdin;
\.


--
-- TOC entry 7567 (class 0 OID 185427)
-- Dependencies: 354
-- Data for Name: jerarquiadocente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY jerarquiadocente (id_jerarquia_docente, digito_jerarquia, nombre) FROM stdin;
\.


--
-- TOC entry 7568 (class 0 OID 185430)
-- Dependencies: 355
-- Data for Name: jubilado; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY jubilado (id_jubilado, id_trabajador, fecha_jubilacion, tipo_jubilacion, cod_cargo, descripcion_cargo, grado, base_jubilacion, porcentaje_jubilacion, monto_jubilacion, id_institucion) FROM stdin;
\.


--
-- TOC entry 7569 (class 0 OID 185438)
-- Dependencies: 356
-- Data for Name: juguete; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY juguete (id_juguete, id_personal, id_familiar, fecha_nacimiento, sexo, monto) FROM stdin;
\.


--
-- TOC entry 7570 (class 0 OID 185443)
-- Dependencies: 357
-- Data for Name: liquidacioninteresadicional; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY liquidacioninteresadicional (id_liquidacion_interes_adicional, id_trabajador, anio, mes, dias, tasa_interes, monto_capital, monto_interes_mensual, monto_interes_acumulado, monto_anticipo, monto_anticipo_acumulado, saldo_al_18061997) FROM stdin;
\.


--
-- TOC entry 7571 (class 0 OID 185456)
-- Dependencies: 358
-- Data for Name: liquidacioninteresnuevoregimen; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY liquidacioninteresnuevoregimen (id_liquidacion_interes_nuevo_regimen, id_trabajador, anio, mes, dias, tasa_interes, monto_prestaciones, monto_adicional, monto_capital, monto_interes_mensual, monto_interes_acumulado, monto_anticipo, monto_anticipo_acumulado, monto_fideicomiso, monto_fideicomiso_acumulado, dias_mensuales, dias_adicionales, monto_prestaciones_acumuladas) FROM stdin;
\.


--
-- TOC entry 7572 (class 0 OID 185475)
-- Dependencies: 359
-- Data for Name: liquidacioninteresviejoregimen; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY liquidacioninteresviejoregimen (id_liquidacion_interes_viejo_regimen, id_trabajador, anio, mes, dias, sueldo_integral, tasa_interes, anios_servicio, monto_prestaciones, monto_capital, monto_interes_mensual, monto_interes_acumulado, monto_anticipo, monto_anticipo_acumulado) FROM stdin;
\.


--
-- TOC entry 7573 (class 0 OID 185490)
-- Dependencies: 360
-- Data for Name: liquidacionprestacionesmensuales; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY liquidacionprestacionesmensuales (id_liquidacion_prestaciones_mensuales, id_tipo_personal, id_trabajador, anio, mes, dias_mensuales, dias_adicionales, base_mensual, base_adicional, monto_prestaciones, monto_adicional, fideicomiso, dias_cancelados, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7574 (class 0 OID 185501)
-- Dependencies: 361
-- Data for Name: liquidacionresumennuevoregimen; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY liquidacionresumennuevoregimen (id_liquidacion_resumen_nuevo_regimen, id_trabajador, monto_prestaciones_acumuladas, monto_interes_acumulado, monto_anticipo_acumulado, monto_fideicomiso_acumulado, dias_mensuales, dias_adicionales, monto_fraccion_adicional, monto_fraccion_mensual) FROM stdin;
\.


--
-- TOC entry 7575 (class 0 OID 185512)
-- Dependencies: 362
-- Data for Name: liquidacionresumenviejoregimen; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY liquidacionresumenviejoregimen (id_liquidacion_resumen_viejo_regimen, id_trabajador, sueldo_transferencia, aniosservicios, monto_prestaciones, monto_interes_acumulado, monto_anticipo_acumulado, monto_transferencia, saldo_al_18061997, monto_interes_adicional) FROM stdin;
\.


--
-- TOC entry 7576 (class 0 OID 185523)
-- Dependencies: 363
-- Data for Name: lugarpago; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY lugarpago (id_lugar_pago, id_ciudad, cod_lugar_pago, direccion, id_sede, nombre, cod_cesta) FROM stdin;
11	1	102-6	AV. LECUNA PARQUE CENTRAL, PISO 4 OFICINA DE RECURSOS HUMANOS 	12	OFICINA DE RECURSOS HUMANOS	44400
\.


--
-- TOC entry 7577 (class 0 OID 185526)
-- Dependencies: 364
-- Data for Name: manualcargo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY manualcargo (id_manual_cargo, cod_manual_cargo, nombre, fecha_vigencia, id_tabulador, id_organismo, tipo_manual, multiple_descripcion, id_sitp, tiempo_sitp, cod_mpd, proceso_seleccion, tipo_cargo) FROM stdin;
12	1	CLASIFICADOR DE ALTO NIVEL	2009-02-01	20	11	1	S	0	\N	\N	N	AN
31	3	CLASIFICADOR DE TRABAJADORAS Y TRABAJADORES	2008-10-07	31	11	3	S	0	\N	\N	N	OB
22	2	CLASIFICADOR CONTRATADOS	2008-10-07	21	11	3	S	0	\N	\N	N	TA
32	4	CLASIFICADOR HONORARIOS PROFESIONALES Y COMISION DE SERVICIO	2008-10-07	32	11	3	N	0	\N	\N	N	NC
41	10	CLASIFICADOR DE JUBILADOS	2010-12-15	\N	11	3	N	0	\N	\N	N	AN
\.


--
-- TOC entry 7578 (class 0 OID 185536)
-- Dependencies: 365
-- Data for Name: manualpersonal; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY manualpersonal (id_manual_personal, id_manual_cargo, id_tipo_personal, id_sitp, tiempo_sitp) FROM stdin;
11	12	15	0	\N
12	22	14	0	\N
41	31	31	0	\N
42	32	22	0	\N
51	32	33	0	\N
53	12	33	0	\N
54	22	33	0	\N
61	41	41	0	\N
\.


--
-- TOC entry 7579 (class 0 OID 185540)
-- Dependencies: 366
-- Data for Name: materia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY materia (id_materia, id_clasificacion, cod_materia, nombre, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7580 (class 0 OID 185544)
-- Dependencies: 367
-- Data for Name: mes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY mes (id_mes, anio, mes, lunes_pr_quincena, lunes_se_quincena, dias_habiles, con_sabados) FROM stdin;
17	2010	1	2	2	20	25
18	2010	2	2	2	18	22
19	2010	3	3	2	23	27
21	2010	4	2	2	19	23
22	2010	5	2	3	21	26
23	2010	6	2	2	21	25
31	2011	1	2	3	21	26
41	2011	2	2	2	20	0
43	2011	3	2	2	21	0
44	2011	4	2	2	18	0
45	2011	5	2	3	22	0
46	2011	6	2	2	21	0
47	2011	7	2	2	19	0
48	2011	8	3	2	23	0
49	2011	9	2	2	22	0
100	2011	10	2	3	20	0
101	2011	11	2	2	22	0
102	2011	12	2	2	22	0
111	2012	1	2	3	22	24
112	2012	2	2	2	19	23
122	2012	3	2	2	22	31
132	2012	4	2	3	18	30
133	2012	5	2	2	22	31
141	2012	6	2	2	21	30
151	2012	7	2	3	20	31
152	2012	8	2	2	23	31
161	2012	9	2	2	20	30
162	2012	10	3	2	22	31
163	2012	11	2	2	22	30
171	2012	12	2	3	20	31
181	2013	1	2	2	23	0
191	2013	2	2	2	20	0
201	2013	3	2	2	21	0
211	2013	4	3	2	22	0
221	2013	5	2	2	22	0
231	2013	6	2	2	19	24
411	2014	12	3	2	20	24
241	2013	7	3	2	21	25
251	2013	8	2	2	22	27
262	2013	9	2	3	21	25
271	2013	10	2	2	23	19
281	2013	11	2	2	21	26
291	2013	12	2	3	19	24
301	2014	1	2	2	23	22
313	2014	2	2	2	20	18
321	2014	3	2	3	18	22
331	2014	4	2	2	20	24
341	2014	5	2	2	21	26
351	2014	6	2	3	20	24
361	2014	7	2	2	21	25
421	2015	1	2	2	21	26
371	2014	8	2	2	21	26
381	2014	9	3	2	22	26
391	2014	10	2	2	22	26
431	2015	2	2	2	18	22
401	2014	11	2	2	20	24
441	2015	3	2	3	22	26
451	2015	4	2	2	20	24
461	2015	5	2	2	20	25
471	2015	6	3	2	21	25
472	2015	7	2	2	22	26
481	2015	8	2	3	21	26
491	2015	9	2	2	22	26
492	2015	10	2	2	21	27
502	2015	11	2	3	21	24
511	2015	12	2	2	20	24
521	2016	1	2	2	20	25
531	2016	2	2	3	19	23
532	2016	3	2	2	21	25
\.


--
-- TOC entry 7581 (class 0 OID 185553)
-- Dependencies: 368
-- Data for Name: mesesjubilacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY mesesjubilacion (id_trabajador, anio, mes, base_mensual) FROM stdin;
\.


--
-- TOC entry 7582 (class 0 OID 185559)
-- Dependencies: 369
-- Data for Name: mm_conceptocolumna; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY mm_conceptocolumna (id_concepto, cod_concepto, descripcion, columna) FROM stdin;
109	3001	RETROACTIVO SUELDO BASICO	retroactivo_sueldo
12	1500	BONO VACACIONAL	bono_vacacional
2	0001	SUELDO BASICO	sueldo_basico_quincenal
43	5001	SSO	retencion_sso
44	5002	SPF	retencion_spf
45	5003	LPH	retencion_faov
46	5004	FJU	fju
49	8100	PRESTAMO CAJA DE AHORRO	prestamos_caja_ahorro
51	9999	I.S.L.R.	islr
612	8116	PRESTAMO CORTO PLAZO	prestamos_caja_ahorro_cortoplazo
613	8117	PRESTAMO MEDIANO PLAZO	prestamos_caja_ahorro_medianoplazo
614	8118	PRESTAMO ESPECIAL O CONFIANZA	prestamos_caja_ahorro
64	0400	PRIMA DE PROFESIONALIZACION	prima_profesion_quincenal
794	0408	PRIMA POR MERITO	prima_merito_quincenal
795	0409	PRIMA POR JERARQUIA	prima_jerarquia_quincenal
801	0410	PRIMA POR RESPONSABILIDAD	prima_responsabilidad_quincenal
793	0016	COMPLEMENTO SUELDO	otros_complementos_quincenal
830	5018	RETENCIÓN CAHOMIM	retencion_caja_ahorro
851	8119	MONTEPIO CAHOMIN	Montepio_CAHOMIN
861	8120	PRESTAMO CAHOMIM LINEA BLANCA	prestamos_caja_ahorro
9	0500	PRIMA ANTIGUEDAD	prima_antiguedad_quincenal
10	0505	PRIMA TRANSPORTE	prima_transporte
116	3500	RETROACTIVO PRIMA ANTIGUEDAD	retroactivo_antiguedad
74	0012	COMPENSACION SALARIAL	compensacion_salarial
881	0411	PRIMA DE ALTO NIVEL Y DIRECCION	prima_altonivel
994	0421	RETROACTIVO PRIMA DE ALTO NIVEL Y DIRECCION	retroactivo_prima_altonivel
993	3523	RETROACTIVO DE COMPENSACION SALARIAL	retroactivo_compensacion_salarial
844	0017	RETROACTIVO COMPLEMENTO SUELDO	retroactivo_complemento_sueldo
842	0419	RETROACTIVO PRIMA JERARQUIA	retroactivo_prima_jerarquia
885	0045	COMPLEMENTO POR COMISION DE SERVICIO	complemento_comision_servicio
984	3519	RETROACTIVO COMPLEMENTO DE COMISION DE SERVICIOS	retroactivo_complemento_comision_servicio
8	0020	COMPENSACION	compensacion_salarial
849	5030	PAGOS INDEBIDOS	pagos_indebidos
117	3400	RETROACTIVO PRIMA DE PROFESIONALIZACION	retroactivo_prima_profesionalizacion
\.


--
-- TOC entry 7583 (class 0 OID 185565)
-- Dependencies: 370
-- Data for Name: mm_tipopersonal; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY mm_tipopersonal (id_tipo_personal, nombre, letra) FROM stdin;
14	CONTRATADOS	C
15	ALTO NIVEL	F
22	HONORARIOS PROFESIONALES	HP
31	TRABAJADORES Y TRABAJADORAS	C
33	COMISIÓN DE SERVICIO	CS
41	JUBILADOS	J
\.


--
-- TOC entry 7584 (class 0 OID 185571)
-- Dependencies: 371
-- Data for Name: movimientocargo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY movimientocargo (id_movimiento_cargo, cod_movimiento_cargo, descripcion, tipo) FROM stdin;
1	401	CREACION	1
2	402	ELIMINACION	2
3	403	CLASIFICACION	3
4	404	CAMBIO CLASIFICACION	4
5	405	TRASLADO	5
\.


--
-- TOC entry 7585 (class 0 OID 185575)
-- Dependencies: 372
-- Data for Name: movimientopersonal; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY movimientopersonal (id_movimiento_personal, cod_movimiento_personal, descripcion, id_sitp, tiempo_sitp) FROM stdin;
1	01	INGRESO	0	\N
2	02	REINGRESO	0	\N
3	03	ACTUALIZACIONES	0	\N
4	04	JUBILACIONES Y PENSIONES	0	\N
5	05	EGRESO	0	\N
\.


--
-- TOC entry 7586 (class 0 OID 185579)
-- Dependencies: 373
-- Data for Name: movimientoregistro; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY movimientoregistro (id_movimiento_registro, fecha_registro, fecha_movimiento, codigo_nomina, sueldo, compensacion, primas_cargo, primas_trabajador, grado, paso, cod_dependencia, cod_sede, tipo_personal, id_movimiento_cargo, id_causa_movimiento, cod_movimiento_cargo, cod_movimiento_personal, cod_causa_movimiento, cod_manual_cargo, cod_cargo, descripcion_cargo, cod_tabulador, aprobacion_mpd, documento_soporte, localidad, numero_movimiento, cedula, apellidos_nombres, id_personal, remesa, estatus, nombre_dependencia, nombre_sede, id_organismo, cod_organismo, nombre_organismo, observaciones, usuario, cod_region, nombre_region, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7587 (class 0 OID 185600)
-- Dependencies: 374
-- Data for Name: movimientoscio; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY movimientoscio (id_movimiento_scio, fecha_registro, fecha_movimiento, codigo_nomina, sueldo, compensacion, primas_cargo, primas_trabajador, grado, paso, cod_dependencia, cod_sede, tipo_personal, nombre_tipo_personal, cod_movimiento_personal, cod_causa_movimiento, cod_manual_cargo, cod_manual_mpd, cod_cargo, descripcion_cargo, nombramiento, caucion, horario, cod_tabulador, documento_soporte, numero_movimiento, cedula, apellidos_nombres, sexo, estado_civil, nivel_educativo, fecha_nacimiento, id_personal, remesa, estatus, nombre_dependencia, nombre_sede, id_organismo, cod_organismo, grupo_organismo, cod_organismo_mpd, nombre_organismo, observaciones, usuario, estatus_mpd, codigo_devolucion, analista_mpd, cod_analista_mpd, id_analista_mpd, fecha_inicio_mpd, fecha_fin_mpd, observaciones_mpd, cod_region, nombre_region, cod_manual_mpd_anterior, cod_cargo_anterior, codigo_nomina_anterior, nombramiento_anterior, sueldo_anterior, compensacion_anterior, primas_cargo_anterior, primas_trabajador_anterior, grado_anterior, cod_organismo_mpd_anterior, nombre_organismo_anterior, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7588 (class 0 OID 185625)
-- Dependencies: 375
-- Data for Name: movimientositp; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY movimientositp (id_movimiento_sitp, fecha_registro, fecha_movimiento, codigo_nomina, sueldo, compensacion, primas_cargo, primas_trabajador, grado, paso, cod_dependencia, cod_sede, tipo_personal, nombre_tipo_personal, id_clasificacion_personal, id_causa_movimiento, cod_causa_movimiento, cod_manual_cargo, cod_cargo, descripcion_cargo, cod_tabulador, afecta_sueldo, documento_soporte, localidad, numero_movimiento, cedula, apellidos_nombres, id_personal, id_remesa, estatus, nombre_dependencia, nombre_sede, id_organismo, cod_organismo, cod_organismo_mpd, nombre_organismo, observaciones, id_usuario, estatus_mpd, codigo_devolucion, analista_mpd, id_analista_mpd, fecha_inicio_mpd, fecha_fin_mpd, observaciones_mpd, cod_region, nombre_region, id_sitp, tiempo_sitp, fecha_punto_cuenta, punto_cuenta, anio, anterior_cod_manual_cargo, anterior_cod_cargo, anterior_descripcion_cargo, anterior_codigo_nomina, anterior_cod_sede, anterior_nombre_sede, anterior_cod_dependencia, anterior_nombre_dependencia, anterior_sueldo, anterior_compensacion, anterior_primas_cargo, anterior_primas_trabajador, anterior_grado, anterior_paso, anterior_cod_region, anterior_nombre_region, cod_concurso, fecha_ingreso, id_turno, fecha_culminacion, monto_jubilacion, sueldo_promedio, porc_jubilacion) FROM stdin;
\.


--
-- TOC entry 7589 (class 0 OID 185657)
-- Dependencies: 376
-- Data for Name: movimientosplan; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY movimientosplan (id_movimientos_plan, id_plan_personal, id_causa_movimiento, cantidad_planificados, cantidad_realizados, cantidad_aprobados, cantidad_devueltos) FROM stdin;
\.


--
-- TOC entry 7590 (class 0 OID 185664)
-- Dependencies: 377
-- Data for Name: movremuneracion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY movremuneracion (id_mov_remuneracion, cod_mov_remuneracion, descripcion, aprobacion_mpd) FROM stdin;
\.


--
-- TOC entry 7591 (class 0 OID 185669)
-- Dependencies: 378
-- Data for Name: mpdcontratado; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY mpdcontratado (cedula, apellido1, apellido2, nombre1, nombre2, sexo, fecha_nacimiento, codigo_nomina, cod_cargo, denom_cargo, grado, sueldo_basico, compensacion, prima_profesional, prima_antiguedad, otro_serv) FROM stdin;
\.


--
-- TOC entry 7592 (class 0 OID 185681)
-- Dependencies: 379
-- Data for Name: mpdempleado; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY mpdempleado (cedula, apellido1, apellido2, nombre1, nombre2, sexo, fecha_nacimiento, codigo_nomina, cod_cargo, denom_cargo, grado, sueldo_basico, compensacion, prima_profesional, prima_antiguedad, otro_serv) FROM stdin;
\.


--
-- TOC entry 7593 (class 0 OID 185693)
-- Dependencies: 380
-- Data for Name: mpdfinanciero; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY mpdfinanciero (fecha_vigencia, codigo_organismo, codigo_grupo, numero_nomina, codigo_adm, codigo_clase, grado, tipo_cargo, deno_cargo, jornada, cedula, apellido1, nombre1, codigo_ubi_geo, codigo_decreto_serie, codigo_decreto_escala, accion_administrativa, situacion_cargo, cod_asig_aprobada1, monto_asig_aprobada1, cod_asig_aprobada2, monto_asig_aprobada2, cod_asig_aprobada3, monto_asig_aprobada3, cod_asig_aprobada4, monto_asig_aprobada4, cod_asig_aprobada5, monto_asig_aprobada5, cod_asig_aprobada6, monto_asig_aprobada6, cod_asig_aprobada7, monto_asig_aprobada7, cod_asig_aprobada8, monto_asig_aprobada8, cod_asig_aprobada9, monto_asig_aprobada9, cod_asig_aprobada10, monto_asig_aprobada10, cod_asig_noaprobada1, denominacion_asig_noaprobada1, partida_concepto_noaprobada1, monto_asig_noaprobada1, cod_asig_noaprobada2, denominacion_asig_noaprobada2, partida_concepto_noaprobada2, monto_asig_noaprobada2, cod_asig_noaprobada3, denominacion_asig_noaprobada3, partida_concepto_noaprobada3, monto_asig_noaprobada3, cod_asig_noaprobada4, denominacion_asig_noaprobada4, partida_concepto_noaprobada4, monto_asig_noaprobada4, cod_asig_noaprobada5, denominacion_asig_noaprobada5, partida_concepto_noaprobada5, monto_asig_noaprobada5, cod_asig_noaprobada6, denominacion_asig_noaprobada6, partida_concepto_noaprobada6, monto_asig_noaprobada6, cod_asig_noaprobada7, denominacion_asig_noaprobada7, partida_concepto_noaprobada7, monto_asig_noaprobada7, cod_asig_noaprobada8, denominacion_asig_noaprobada8, partida_concepto_noaprobada8, monto_asig_noaprobada8, cod_asig_noaprobada9, denominacion_asig_noaprobada9, partida_concepto_noaprobada9, monto_asig_noaprobada9, cod_asig_noaprobada10, denominacion_asig_noaprobada10, partida_concepto_noaprobada10, monto_asig_noaprobada10, fecha_vigencia_tran, codigo_org_tran, grupo_tran, nomina_tran, espacios) FROM stdin;
\.


--
-- TOC entry 7594 (class 0 OID 185720)
-- Dependencies: 381
-- Data for Name: mpdobrero; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY mpdobrero (cedula, apellido1, apellido2, nombre1, nombre2, sexo, fecha_nacimiento, codigo_nomina, cod_cargo, denom_cargo, grado, sueldo_basico, compensacion, prima_profesional, prima_antiguedad, otro_serv) FROM stdin;
\.


--
-- TOC entry 7595 (class 0 OID 185732)
-- Dependencies: 382
-- Data for Name: municipio; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY municipio (id_municipio, abreviatura, cod_municipio, id_estado, nombre) FROM stdin;
1	\N	01	1	LIBERTADOR
2	\N	01	2	ALTO ORINOCO
3	\N	02	2	ATABAPO
4	\N	03	2	ATURES
5	\N	04	2	AUTANA
6	\N	05	2	MAROA
7	\N	06	2	MANAPIARE
8	\N	07	2	RIO NEGRO
9	\N	01	3	ANACO
10	\N	02	3	ARAGUA
11	\N	03	3	FERNANDO DE PEÑALVER
12	\N	04	3	FRANCISCO DEL CARMEN CARVAJAL
13	\N	05	3	FRANCISCO DE MIRANDA
14	\N	06	3	GUANTA
15	\N	07	3	INDEPENDENCIA
16	\N	08	3	JUAN ANTONIO SOTILLO
17	\N	09	3	JUAN MANUEL CAGIJAL
18	\N	10	3	JOSE GREGORIO MONAGAS
19	\N	11	3	LIBERTAD
20	\N	12	3	MANUEL EZEQUIEL BRUZUAL
21	\N	13	3	PEDRO MARIA FREITES
22	\N	14	3	PIRITU
23	\N	15	3	SAN JOSE DE GUANIPA
24	\N	16	3	SAN JUAN DE CAPISTRANO
25	\N	17	3	SANTA ANA
26	\N	18	3	SIMON BOLIVAR
27	\N	19	3	SIMON RODRIGUEZ
28	\N	20	3	SIR ARTHUR MACGREGOR
29	\N	21	3	DIEGO BAUTISTA URBANEJA
30	\N	01	4	ACHAGUAS
31	\N	02	4	BIRUACA
32	\N	03	4	MUÑOZ
33	\N	04	4	PAEZ
34	\N	05	4	PEDRO CAMEJO
35	\N	06	4	ROMULO GALLEGOS
36	\N	07	4	SAN FERNANDO
37	\N	01	5	BOLIVAR
38	\N	02	5	CAMATAGUA
39	\N	03	5	GIRARDOT
40	\N	04	5	JOSE ANGEL LAMAS
41	\N	05	5	JOSE FELIX RIBAS
42	\N	06	5	JOSE RAFAEL REVENGA
43	\N	07	5	LIBERTADOR
44	\N	08	5	MARIO BRICEÑO IRAGORRY
45	\N	09	5	SAN CASIMIRO
46	\N	10	5	SAN SEBASTIAN
47	\N	11	5	SANTIAGO MARIÑO
48	\N	12	5	SANTOS MICHELENA
49	\N	13	5	SUCRE
50	\N	14	5	TOVAR
51	\N	15	5	URDANETA
52	\N	16	5	ZAMORA
53	\N	17	5	FRANCISCO LINARES ALCANTARA
54	\N	18	5	OCUMARE DE LA COSTA DE ORO
55	\N	01	6	ALBERTO ARVELO TORREALBA
56	\N	02	6	ANTONIO JOSE DE SUCRE
57	\N	03	6	ARISMENDI
58	\N	04	6	BARINAS
59	\N	05	6	BOLIVAR
60	\N	06	6	CRUZ PAREDES
61	\N	07	6	EZEQUIEL ZAMORA
62	\N	08	6	OBISPOS
63	\N	09	6	PEDRAZA
64	\N	10	6	ROJAS
65	\N	11	6	SOSA
66	\N	12	6	ANDRES ELOY BLANCO
67	\N	01	7	CARONI
68	\N	02	7	CEDEÑO
69	\N	03	7	EL CALLAO
70	\N	04	7	GRAN SABANA
71	\N	05	7	HERES
72	\N	06	7	PIAR
73	\N	07	7	RAUL LEONI
74	\N	08	7	ROSCIO
75	\N	09	7	SIFONTES
76	\N	10	7	SUCRE
77	\N	11	7	PADRE PEDRO CHIEN
78	\N	01	8	BEJUMA
79	\N	02	8	CARLOS ARVELO
80	\N	03	8	DIEGO IBARRA
81	\N	04	8	GUACARA
82	\N	05	8	JUAN JOSE MORA
83	\N	06	8	LIBERTADOR
84	\N	07	8	LOS GUAYOS
85	\N	08	8	MIRANDA
86	\N	09	8	MONTALBAN
87	\N	10	8	NAGUANAGUA
88	\N	11	8	PUERTO CABELLO
89	\N	12	8	SAN DIEGO
90	\N	13	8	SAN JOAQUIN
91	\N	14	8	VALENCIA
92	\N	01	9	ANZOATEGUI
93	\N	02	9	FALCON
94	\N	03	9	GIRARDOT
95	\N	04	9	LIMA BLANCO
96	\N	05	9	PAO DE SAN JUAN BAUTISTA
97	\N	06	9	RICAURTE
98	\N	07	9	ROMULO GALLEGOS
99	\N	08	9	SAN CARLOS
100	\N	09	9	TINACO
101	\N	01	10	ANTONIO DIAZ
102	\N	02	10	CASACOIMA
103	\N	03	10	PEDERNALES
104	\N	04	10	TUCUPITA
105	\N	01	11	ACOSTA
106	\N	02	11	BOLIVAR
107	\N	03	11	BUCHIVACOA
108	\N	04	11	CACIQUE MANAURE
109	\N	05	11	CARIRUBANA
110	\N	06	11	COLINA
111	\N	07	11	DABAJURO
112	\N	08	11	DEMOCRACIA
113	\N	09	11	FALCON
114	\N	10	11	FEDERACION
115	\N	11	11	JACURA
116	\N	12	11	LOS TAQUES
117	\N	13	11	MAUROA
118	\N	14	11	MIRANDA
119	\N	15	11	MONSEÑOR ITURRIZA
120	\N	16	11	PALMASOLA
121	\N	17	11	PETIT
122	\N	18	11	PIRITU
123	\N	19	11	SAN FRANCISCO
124	\N	20	11	SILVA
125	\N	21	11	SUCRE
126	\N	22	11	TOCOPERO
127	\N	23	11	UNION
128	\N	24	11	URUMACO
129	\N	25	11	ZAMORA
130	\N	01	12	CAMAGUAN
131	\N	02	12	CHAGUARAMAS
132	\N	03	12	EL SOCORRO
133	\N	04	12	SAN GERONIMO DE GUAYABAL
134	\N	05	12	LEONARDO INFANTE
135	\N	06	12	LAS MERCEDES
136	\N	07	12	JULIAN MELLADO
137	\N	08	12	FRANCISCO DE MIRANDA
139	\N	09	12	JOSE TADEO MONAGAS
140	\N	10	12	ORTIZ
141	\N	11	12	JOSE FELIX RIBAS
142	\N	12	12	JUAN GERMAN ROSCIO
143	\N	13	12	SAN JOSE DE GUARIBE
144	\N	14	12	SANTA MARIA DE IPIRE
145	\N	15	12	PEDRO ZARAZA
146	\N	01	13	ANDRES ELOY BLANCO
147	\N	02	13	CRESPO
148	\N	03	13	IRIBARREN
149	\N	04	13	JIMENEZ
150	\N	05	13	MORAN
151	\N	06	13	PALAVECINO
152	\N	07	13	SIMON PLANAS
153	\N	08	13	TORRES
154	\N	09	13	URDANETA
155	\N	01	14	ALBERTO ADRIANI
156	\N	02	14	ANDRES BELLO
157	\N	03	14	ANTONIO PINTO SALINAS
158	\N	04	14	ARICAGUA
159	\N	05	14	ARZOBISPO CHACON
160	\N	06	14	CAMPO ELIAS
161	\N	07	14	CARACCIOLO PARRA OLMEDO
162	\N	08	14	CARDENAL QUINTERO
163	\N	09	14	GUARAQUE
164	\N	10	14	JULIO CESAR SALAS
165	\N	11	14	JUSTO BRICEÑO
166	\N	12	14	LIBERTADOR
167	\N	13	14	MIRANDA
168	\N	14	14	OBISPO RAMOS DE LORA
169	\N	15	14	PADRE NOGUERA
170	\N	16	14	PUEBLO LLANO
171	\N	17	14	RANGEL
172	\N	18	14	RIVAS DAVILA
173	\N	19	14	SANTOS MARQUINA
174	\N	20	14	SUCRE
175	\N	21	14	TOVAR
176	\N	22	14	TULIO FEBRES CORDERO
177	\N	23	14	ZEA
178	\N	01	15	ACEVEDO
179	\N	02	15	ANDRES BELLO
180	\N	03	15	BARUTA
181	\N	04	15	BRION
182	\N	05	15	BUROZ
183	\N	06	15	CARRIZAL
184	\N	07	15	CHACAO
185	\N	08	15	CRISTOBAL ROJAS
186	\N	09	15	EL HATILLO
187	\N	10	15	GUACAIPURO
188	\N	11	15	INDEPENDENCIA
189	\N	12	15	LANDER
190	\N	13	15	LOS SALIAS
191	\N	14	15	PAEZ
192	\N	15	15	PAZ CASTILLO
193	\N	16	15	PEDRO GUAL
194	\N	17	15	PLAZA
195	\N	18	15	SIMON BOLIVAR
196	\N	19	15	SUCRE
197	\N	20	15	URDANETA
198	\N	21	15	ZAMORA
199	\N	01	16	ACOSTA
200	\N	02	16	AGUASAY
201	\N	03	16	BOLIVAR
202	\N	04	16	CARIPE
203	\N	05	16	CEDEÑO
204	\N	06	16	EZEQUIEL ZAMORA
205	\N	07	16	LIBERTADOR
206	\N	08	16	MATURIN
207	\N	09	16	PIAR
208	\N	10	16	PUNCERES
209	\N	11	16	SANTA BARBARA
210	\N	12	16	SOTILLO
211	\N	13	16	URACOA
212	\N	01	17	ANTOLIN DEL CAMPO
213	\N	02	17	ARISMENDI
214	\N	03	17	DIAZ
215	\N	04	17	GARCIA
216	\N	05	17	GOMEZ
217	\N	06	17	MANEIRO
218	\N	07	17	MARCANO
219	\N	08	17	MARIÑO
220	\N	09	17	PENINSULA DE MACANAO
221	\N	10	17	TUBORES
222	\N	11	17	VILLALBA
223	\N	01	18	AGUA BLANCA
224	\N	02	18	ARAURE
225	\N	03	18	ESTELLER
226	\N	04	18	GUANARE
227	\N	05	18	GUANARITO
228	\N	06	18	MONSEÑOR JOSE VICENTE DE UNDA
229	\N	07	18	OSPINO
230	\N	08	18	PAEZ
231	\N	09	18	PAPELON
232	\N	10	18	SAN GENARO DE BOCONOITO
233	\N	11	18	SAN RAFAEL DE ONOTO
234	\N	12	18	SANTA ROSALIA
235	\N	13	18	SUCRE
236	\N	14	18	TUREN
237	\N	01	19	ANDRES ELOY BLANCO
238	\N	02	19	ANDRES MATA
239	\N	03	19	ARISMENDI
240	\N	04	19	BENITEZ
241	\N	05	19	BERMUDEZ
242	\N	06	19	BOLIVAR
243	\N	07	19	CAJIGAL
244	\N	08	19	CRUZ SALMERON ACOSTA
245	\N	09	19	LIBERTADOR
246	\N	10	19	MARIÑO
247	\N	11	19	MEJIA
248	\N	12	19	MONTES
249	\N	13	19	RIBERO
250	\N	14	19	SUCRE
251	\N	15	19	VALDEZ
252	\N	01	20	ANDRES BELLO
253	\N	02	20	ANTONIO ROMULO COSTA
254	\N	03	20	AYACUCHO
255	\N	04	20	BOLIVAR
256	\N	05	20	CARDENAS
257	\N	06	20	CORDOBA
258	\N	07	20	FERNANDEZ FEO
259	\N	08	20	FRANCISCO DE MIRANDA
260	\N	09	20	GARCIA DE HEVIA
261	\N	10	20	GUASIMOS
262	\N	11	20	INDEPENDENCIA
263	\N	12	20	JAUREGUI
264	\N	13	20	JOSE MARIA VARGAS
265	\N	14	20	JUNIN
266	\N	15	20	LIBERTAD
267	\N	16	20	LIBERTADOR
268	\N	17	20	LOBATERA
269	\N	18	20	MICHELENA
270	\N	19	20	PANAMERICANO
271	\N	20	20	PEDRO MARIA UREÑA
272	\N	21	20	RAFAEL URDANETA
273	\N	22	20	SAMUEL DARIO MALDONADO
274	\N	23	20	SAN CRISTOBAL
275	\N	24	20	SEBORUCO
276	\N	25	20	SIMON RODRIGUEZ
277	\N	26	20	SUCRE
278	\N	27	20	TORBES
279	\N	28	20	URIBANTE
280	\N	29	20	SAN JUDAS TADEO
281	\N	01	21	ANDRES BELLO
282	\N	02	21	BOCONO
283	\N	03	21	BOLIVAR
284	\N	04	21	CANDELARIA
285	\N	05	21	CARACHE
286	\N	06	21	ESCUQUE
287	\N	07	21	JOSE FELIPE MARQUEZ CAÑIZALES
288	\N	08	21	JUAN VICENTE CAMPO ELIAS
289	\N	09	21	LA CEIBA
290	\N	10	21	MIRANDA
291	\N	11	21	MONTE CARMELO
292	\N	12	21	MOTATAN
293	\N	13	21	PAMPAN
294	\N	14	21	PAMPANITO
295	\N	15	21	RAFAEL RANGEL
296	\N	16	21	SAN RAFAEL DE CARVAJAL
297	\N	17	21	SUCRE
298	\N	18	21	TRUJILLO
299	\N	19	21	URDANETA
300	\N	20	21	VALERA
301	\N	01	22	ARISTIDES BASTIDAS
302	\N	02	22	BOLIVAR
303	\N	03	22	BRUZUAL
304	\N	04	22	COCOROTE
305	\N	05	22	INDEPENDENCIA
306	\N	06	22	JOSE ANTONIO PAEZ
307	\N	07	22	LA TRINIDAD
308	\N	08	22	MANUAL MONGE
309	\N	09	22	NIRGUA
310	\N	10	22	PEÑA
311	\N	11	22	SAN FELIPE
312	\N	12	22	SUCRE
313	\N	13	22	URACHICHE
314	\N	14	22	VEROES
315	\N	01	23	ALMIRANTE PADILLA
316	\N	02	23	BARALT
317	\N	03	23	CABIMAS
318	\N	04	23	CATATUMBO
319	\N	05	23	COLON
320	\N	06	23	FRANCISCO JAVIER PULGAR
321	\N	07	23	JESUS ENRIQUE LOSSADA
322	\N	08	23	JESUS MARIA SEMPRUN
323	\N	09	23	LA CAÑADA DE URDANETA
324	\N	10	23	LAGUNILLAS
325	\N	11	23	MACHIQUES DE PERIJA
326	\N	12	23	MARA
327	\N	13	23	MARACAIBO
328	\N	14	23	MIRANDA
329	\N	15	23	PAEZ
330	\N	16	23	ROSARIO DE PERIJA
331	\N	17	23	SAN FRANCISCO
332	\N	18	23	SANTA RITA
333	\N	19	23	SIMON BOLIVAR
334	\N	20	23	SUCRE
335	\N	21	23	VALMORE RODRIGUEZ
336	\N	01	24	VARGAS
\.


--
-- TOC entry 7596 (class 0 OID 185735)
-- Dependencies: 383
-- Data for Name: nivelbeca; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nivelbeca (id_nivel_beca, nivel_educativo, inicio_nivel, fin_nivel, proximo_nivel) FROM stdin;
\.


--
-- TOC entry 7597 (class 0 OID 185741)
-- Dependencies: 384
-- Data for Name: niveldocente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY niveldocente (id_nivel_docente, digito_nivel, nombre) FROM stdin;
\.


--
-- TOC entry 7598 (class 0 OID 185744)
-- Dependencies: 385
-- Data for Name: niveleducativo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY niveleducativo (id_nivel_educativo, cod_nivel_educativo, descripcion, orden) FROM stdin;
10	I	PRIMARIA	3
2	B	BASICA	2
1	P	PREESCOLAR	1
11	H	BACHILLERATO	5
3	D	DIVERSIFICADO	4
4	T	TECNICO MEDIO	6
5	S	TECNICO SUPERIOR	7
6	U	UNIVERSITARIO	8
12	E	ESPECIALIZACION	9
14	M	MAESTRIA	10
8	C	DOCTORADO	11
15	R	POST DOCTORADO	12
7	G	POSTGRADO	13
13	L	DIPLOMADO	14
9	O	OTRO	15
\.


--
-- TOC entry 7599 (class 0 OID 185748)
-- Dependencies: 386
-- Data for Name: noevaluacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY noevaluacion (id_no_evaluacion, anio, mes, motivo, cedula_supervisor, nombre_supervisor, observaciones, id_personal, id_tipo_personal) FROM stdin;
\.


--
-- TOC entry 7600 (class 0 OID 185758)
-- Dependencies: 387
-- Data for Name: nombreorganismo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nombreorganismo (id_nombre_organismo, fecha_vigencia, id_organismo, nombre, nombre_corto) FROM stdin;
13	2009-04-13	11	MINISTERIO DEL PODER POPULAR PARA LA MUJER Y LA IGUALDAD DE GENERO	0058
\.


--
-- TOC entry 7601 (class 0 OID 185761)
-- Dependencies: 388
-- Data for Name: nominaconversion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nominaconversion (id_nomina_conversion, id_trabajador, id_cargo, anio, mes, numero_nomina, asignacion_bs, asignacion_otra_moneda, deduccion_ley_bs, deduccion_ley_otra_moneda, deduccion_personal_bs, deduccion_personal_otra_moneda, id_tipo_personal, id_grupo_nomina, id_nomina_especial) FROM stdin;
\.


--
-- TOC entry 7602 (class 0 OID 185771)
-- Dependencies: 389
-- Data for Name: nominadiplomatico; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nominadiplomatico (id_nomina_diplomatico, id_trabajador, id_cargo, id_dependencia, anio, mes, numero_nomina, asignacion_bs, asignacion_otra_moneda, deduccion_ley_bs, deduccion_ley_otra_moneda, deduccion_personal_bs, deduccion_personal_otra_moneda, asignacion_mre, fluctuacion_mre, asignacion_anual_onu, ajuste_anual_onu, asignacion_mensual_onu, prima_destino_onu, prima_destino_mre, otras_asignaciones, multiplicador, id_tipo_personal, id_grupo_nomina, id_nomina_especial) FROM stdin;
\.


--
-- TOC entry 7603 (class 0 OID 185790)
-- Dependencies: 390
-- Data for Name: nominaespecial; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nominaespecial (id_nomina_especial, numero_nomina, anio, fecha_registro, id_grupo_nomina, descripcion, estatus, fecha_proceso, mes, usuario, id_frecuencia_pago, fecha_inicio, fecha_fin, personal, pagada, fecha_pago) FROM stdin;
\.


--
-- TOC entry 7604 (class 0 OID 185798)
-- Dependencies: 391
-- Data for Name: opcion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY opcion (id_opcion, codigo_opcion, descripcion, ruta, tipo) FROM stdin;
72	PLBC06	CARGO, MANUALES ASOCIADOS A TIPO DE PERSONAL	sigefirrhh/base/cargo/ManualPersonal	D
73	PLBC07	CARGO, PERFIL DE CARGO	sigefirrhh/base/cargo/Perfil	D
74	PLBC08	CARGO, RAMO OCUPACIONAL	sigefirrhh/base/cargo/RamoOcupacional	D
75	PLBC09	CARGO, SERIES DE CARGOS	sigefirrhh/base/cargo/SerieCargo	D
76	PLBC10	CARGO, SUELDOS / SALARIOS MINIMOS	sigefirrhh/base/cargo/SueldoMinimo	D
77	PLBC11	CARGO, TABULADORES	sigefirrhh/base/cargo/Tabulador	D
119	PLBE01	DEPENDENCIAS ADMINISTRATIVAS	sigefirrhh/base/estructura/Dependencia	D
120	PLBE02	GRUPOS DEL ORGANISMO	sigefirrhh/base/estructura/GrupoOrganismo	D
121	PLBE03	LUGARES DE PAGO POR SEDES	sigefirrhh/base/estructura/LugarPago	D
402	PLBE04	ACTUALIZAR LUGAR DE PAGO	sigefirrhh/base/estructura/LugarPago	P
122	PLBE05	NOMBRES DEL ORGANISMO	sigefirrhh/base/estructura/NombreOrganismo	D
123	PLBE06	ORGANISMOS	sigefirrhh/base/estructura/Organismo	D
124	PLBE07	PROGRAMAS	sigefirrhh/base/estructura/Programa	D
125	PLBE08	SEDES	sigefirrhh/base/estructura/Sede	D
126	PLBE09	TIPOS DE DEPENDENCIA	sigefirrhh/base/estructura/TipoDependencia	D
129	PLBE10	UNIDADES ADMINISTRADORAS	sigefirrhh/base/estructura/UnidadAdministradora	D
130	PLBE11	UNIDADES EJECUTORAS LOCALES	sigefirrhh/base/estructura/UnidadEjecutora	D
131	PLBE12	UNIDADES FUNCIONALES	sigefirrhh/base/estructura/UnidadFuncional	D
359	PLPE01	EVALUACION,  ACCIONES POR EL RESULTADO DE EVALUACION	sigefirrhh/planificacion/evaluacion/AccionEvaluacion	D
357	PLPE02	EVALUACION,  ACTUALIZAR EVALUACION	sigefirrhh/planificacion/evaluacion/ActualizarEvaluacion	D
358	PLPE03	EVALUACION,  CONSULTAR EVALUACION	sigefirrhh/planificacion/evaluacion/Evaluacion	D
371	PLPE04	EVALUACION,  REPORTE DETALLADO DE EVALUACION	sigefirrhh/planificacion/evaluacion/ReportEvaluaciones	R
373	PLPE05	EVALUACION,  NOTIFICACION RESULTADOS DE EVALUACION	sigefirrhh/planificacion/evaluacion/ReportNotificacionEvaluaciones	R
372	PLPE06	EVALUACION,  REPORTE DE RESUMEN POR NIVEL - EVALUACION	sigefirrhh/planificacion/evaluacion/ReportResumenEvaluaciones	D
360	PLPE07	EVALUACION,  RESULTADOS DE EVALUACION	sigefirrhh/planificacion/evaluacion/ResultadoEvaluacion	D
209	SISA01	SISTEMA,  ACCIONES A AUDITAR	sigefirrhh/sistema/AccionAuditoria	D
212	SISA03	SISTEMA,  OPCIONES DEL SISTEMA	sigefirrhh/sistema/Opcion	D
213	SISA04	SISTEMA,  ROLES	sigefirrhh/sistema/Rol	D
214	SISA05	SISTEMA,  OPCIONES POR ROL	sigefirrhh/sistema/RolOpcion	D
215	SISA06	SISTEMA,  USUARIOS	sigefirrhh/sistema/Usuario	D
216	SISA07	SISTEMA,  USUARIOS POR ORGANISMO	sigefirrhh/sistema/UsuarioOrganismo	D
218	SISA08	SISTEMA,  USUARIOS POR ROLES	sigefirrhh/sistema/UsuarioRol	D
219	SISA09	SISTEMA,  USUARIOS POR TIPO PERSONAL	sigefirrhh/sistema/UsuarioTipoPersonal	D
65	BSBB02	TIPOS DE AYUDAS	sigefirrhh/base/bienestar/TipoAyuda	D
505	BSBB17	POLIZA DE SEGURO, PRIMAS POR PLAN	sigefirrhh/base/bienestar/PrimasPlan	D
506	BSBB18	POLIZA DE SEGURO, ESTABLECIMIENTO DE SALUD	sigefirrhh/base/bienestar/EstablecimientoSalud	D
504	BSBB19	POLIZA DE SEGURO, TIPOS DE SINIESTROS	sigefirrhh/base/bienestar/TipoSiniestro	D
66	BSBB21	DOTACIONES, TIPOS DE DOTACION	sigefirrhh/base/bienestar/TipoDotacion	D
390	BSBB22	TICKETS,  PROVEEDORES DE TICKET	sigefirrhh/base/bienestar/ProveedorTicket	D
63	BSBB23	TICKETS, PROVEEDORES TICKETS POR ORGANISMO	sigefirrhh/base/bienestar/ProveedorTicketOrganismo	D
253	ADBD10	DEFINICIONES, CONCEPTO  POR CARGO Y ANIO	sigefirrhh/base/definiciones/ConceptoCargoAnio	D
507	BSBB03	BECAS, PARAMETRO GENERAL 	sigefirrhh/base/bienestar/ParametroBecaGeneral	D
508	BSBE01	BECAS, BECA DEL  TRABAJADOR	sigefirrhh/bienestar/beca/BecaTrabajador	D
150	EXBP19	EXPEDIENTE,   TBE-TITULOS	sigefirrhh/base/personal/Titulo	D
158	EXPE02	EXPEDIENTE,   ACTIVIDADES DOCENTES	sigefirrhh/personal/expediente/ActividadDocente	D
159	EXPE03	EXPEDIENTE,   AFILIACIONES A GREMIOS	sigefirrhh/personal/expediente/Afiliacion	D
160	EXPE04	EXPEDIENTE,   ANTECEDENTES DE SERVICIOS	sigefirrhh/personal/expediente/Antecedente	D
161	EXPE05	EXPEDIENTE,   AUSENCIAS, PERMISOS Y/O REPOSO	sigefirrhh/personal/expediente/Ausencia	D
386	EXPE06	EXPEDIENTE,   REGISTRO DE AUSENCIAS	sigefirrhh/personal/expediente/Ausencia.jsf	D
401	EXPE07	EXPEDIENTE,   REGISTRO DE AUSENCIAS	sigefirrhh/personal/expediente/Ausencia.jsf	P
162	EXPE08	EXPEDIENTE,   RECAUDOS DE AUSENCIAS	sigefirrhh/personal/expediente/AusenciaRecaudo	D
163	EXPE09	EXPEDIENTE,   AVERIGUACIONES ADMINISTRATIVAS	sigefirrhh/personal/expediente/Averiguacion	D
164	EXPE10	EXPEDIENTE,   CERTIFICACIONES	sigefirrhh/personal/expediente/Certificacion	D
165	EXPE11	EXPEDIENTE,   CERTIFICADOS DE CARRERA	sigefirrhh/personal/expediente/Certificado	D
166	EXPE12	EXPEDIENTE,   COMISIONES DE SERVICIO - PERSONAL DEL ORGANISMO	sigefirrhh/personal/expediente/ComisionServicio	D
167	EXPE13	EXPEDIENTE,   COMISIONES DE SERVICIO - PERSONAL EXTERNO	sigefirrhh/personal/expediente/ComisionServicioExt	D
196	EXPE14	EXPEDIENTE,   CONTRATOS	sigefirrhh/personal/expediente/Contrato	D
168	EXPE15	EXPEDIENTE,   DECLARACIONES JURADAS	sigefirrhh/personal/expediente/Declaracion	D
211	SISA02	SISTEMA,  AUDITORIA	sigefirrhh/sistema/Auditoria	D
169	EXPE16	EXPEDIENTE,   EDUCACION FORMAL	sigefirrhh/personal/expediente/Educacion	D
170	EXPE17	EXPEDIENTE,   ENCARGADURIAS	sigefirrhh/personal/expediente/Encargaduria	D
171	EXPE18	EXPEDIENTE,   ESTUDIOS INFORMALES / SEMINARIOS / PONENCIAS	sigefirrhh/personal/expediente/Estudio	D
172	EXPE19	EXPEDIENTE,   EXPERIENCIA LABORAL - PRIVADO	sigefirrhh/personal/expediente/Experiencia	D
173	EXPE20	EXPEDIENTE,   EXPERIENCIA LABORAL ORGANISMOS NO SUJETOS A LEY DEL ESTATUTO	sigefirrhh/personal/expediente/ExperienciaNoEst	D
174	EXPE21	EXPEDIENTE,   GRUPO FAMILIAR	sigefirrhh/personal/expediente/Familiar	D
175	EXPE22	EXPEDIENTE,   RECAUDOS DE FAMILIARES	sigefirrhh/personal/expediente/FamiliarRecaudo	D
176	EXPE23	EXPEDIENTE,   HABILIDADES COMPETENCIAS	sigefirrhh/personal/expediente/Habilidad	D
177	EXPE24	EXPEDIENTE,   TRAYECTORIA EN APN	sigefirrhh/personal/expediente/HistorialApn	D
178	EXPE25	EXPEDIENTE,   HISTORIAL DE CARGOS / SUELDOS EN ORGANISMOS	sigefirrhh/personal/expediente/HistorialOrganismo	D
179	EXPE26	EXPEDIENTE,   HISTORIAL DE REMUNERACIONES EN ORGANISMOS	sigefirrhh/personal/expediente/HistorialRemun	D
180	EXPE27	EXPEDIENTE,   IDIOMAS	sigefirrhh/personal/expediente/Idioma	D
182	EXPE28	EXPEDIENTE,   OTRAS ACTIVIDADES	sigefirrhh/personal/expediente/OtraActividad	D
183	EXPE29	EXPEDIENTE,   DATOS PERSONALES	sigefirrhh/personal/expediente/Personal	D
184	EXPE30	EXPEDIENTE,   RELACION DE PERSONAL Y ORGANISMOS	sigefirrhh/personal/expediente/PersonalOrganismo	D
185	EXPE31	EXPEDIENTE,   RECAUDOS PERSONALES	sigefirrhh/personal/expediente/PersonalRecaudo	D
186	EXPE32	EXPEDIENTE,   PROFESIONES / OFICIOS 	sigefirrhh/personal/expediente/ProfesionTrabajador	D
187	EXPE33	EXPEDIENTE,   RECONOCIMIENTOS	sigefirrhh/personal/expediente/Reconocimiento	D
220	EXPE34	EXPEDIENTE,   HOJA DE VIDA	sigefirrhh/personal/expediente/ReportCurriculum	D
230	EXPE35	EXPEDIENTE,   REPORTE FAMILIAR	sigefirrhh/personal/expediente/ReportFamiliares	D
432	EXPE36	EXPEDIENTE,   REPORTE DE MADRES Y PADRES	sigefirrhh/personal/expediente/ReportMadresPadres	R
188	EXPE37	EXPEDIENTE,   SANCIONES	sigefirrhh/personal/expediente/Sancion	D
189	EXPE38	EXPEDIENTE,   SERVICIO EXTERIOR	sigefirrhh/personal/expediente/ServicioExterior	D
222	EXPE39	EXPEDIENTE,   SUPLENCIAS	sigefirrhh/personal/expediente/Suplencia	D
190	EXPE40	EXPEDIENTE,   VACACIONES DISFRUTADAS / PENDIENTES	sigefirrhh/personal/expediente/Vacacion	D
151	PLB01	UG-CIUDAD	sigefirrhh/base/ubicacion/Ciudad	D
152	PLB02	UG-ESTADO	sigefirrhh/base/ubicacion/Estado	D
153	PLB03	UG-MUNICIPIO	sigefirrhh/base/ubicacion/Municipio	D
154	PLB04	UG-PAIS	sigefirrhh/base/ubicacion/Pais	D
155	PLB05	UG-PARROQUIA	sigefirrhh/base/ubicacion/Parroquia	D
41	PLBA01	ADIESTRAMIENTO, AREAS DE CONOCIMIENTO	sigefirrhh/base/adiestramiento/AreaConocimiento	D
42	PLBA02	ADIESTRAMIENTO, CURSOS	sigefirrhh/base/adiestramiento/Curso	D
43	PLBA03	ADIESTRAMIENTO, CURSOS DE ENTIDAD	sigefirrhh/base/adiestramiento/CursoEntidad	D
44	PLBA04	ADIESTRAMIENTO, ENTIDADES EDUCATIVAS	sigefirrhh/base/adiestramiento/EntidadEducativa	D
45	PLBA05	ADIESTRAMIENTO, ENTIDADES POR NIVEL	sigefirrhh/base/adiestramiento/EntidadNivel	D
46	PLBA06	ADIESTRAMIENTO, TIPOS DE CURSO	sigefirrhh/base/adiestramiento/TipoCurso	D
47	PLBA07	ADIESTRAMIENTO, TIPOS DE ENTIDAD	sigefirrhh/base/adiestramiento/TipoEntidad	D
67	PLBC01	CARGO, DEFINICIONES DE CARGOS	sigefirrhh/base/cargo/Cargo	D
68	PLBC02	CARGO, DETALLE DE TABULADOR	sigefirrhh/base/cargo/DetalleTabulador	D
69	PLBC03	CARGO, DETALLE DE TABULADOR POR AÑOS	sigefirrhh/base/cargo/DetalleTabuladorAnios	D
70	PLBC04	CARGO, GRUPO OCUPACIONAL	sigefirrhh/base/cargo/GrupoOcupacional	D
71	PLBC05	CARGO, MANUALES DE CARGOS	sigefirrhh/base/cargo/ManualCargo	D
387	BSBB01	TICKETS,  DENOMINACIONES DE TICKET	sigefirrhh/base/bienestar/DenominacionTicket	D
48	BSBB04	BECAS, NIVELES EDUCATIVOS	sigefirrhh/base/bienestar/NivelBeca	D
83	ADBD08	DEFINICIONES, CONCEPTOS ASOCIADOS	sigefirrhh/base/definiciones/ConceptoAsociado	D
84	ADBD09	DEFINICIONES, CONCEPTOS POR CARGOS	sigefirrhh/base/definiciones/ConceptoCargo	D
51	BSBB07	GASTO MEDICO, PARAMETROS PARA GASTOS MEDICOS POR PARENTESCO	sigefirrhh/base/bienestar/ParametroGastoMedico	D
52	BSBB08	GUARDERIAS, PARAMETROS PAGO GUARDERIA	sigefirrhh/base/bienestar/ParametroGuarderia	D
54	BSBB09	JUGUETES, PARAMETROS ASIGNACION JUGETES	sigefirrhh/base/bienestar/ParametroJuguete	D
428	BSBB10	JUGUETES,  PARAMETRO DE JUGUETES	sigefirrhh/base/bienestar/ParametroJuguete	P
55	BSBB11	PARAMETROS PARA PLAN VACACIONAL	sigefirrhh/base/bienestar/ParametroPlanVacacional	D
388	BSBB12	TICKETS,  PARAMETROS TICKET	sigefirrhh/base/bienestar/ParametroTicket	D
57	BSBB13	UTILES ESCOLARES, PARAMETROS ASIGNACION UTILES	sigefirrhh/base/bienestar/ParametroUtiles	D
58	BSBB14	PARENTESCO POR PLANES	sigefirrhh/base/bienestar/ParentescoPlan	D
59	BSBB15	POLIZA DE SEGURO, PLANES POR POLIZAS	sigefirrhh/base/bienestar/PlanPoliza	D
60	BSBB16	POLIZA DE SEGURO, DEFINICION DE POLIZA	sigefirrhh/base/bienestar/Poliza	D
64	BSBB20	DOTACIONES, SUB-TIPOS DE DOTACION	sigefirrhh/base/bienestar/SubtipoDotacion	D
427	BSBG01	GUARDERIAS,  REGISTRAR GUARDERIA	sigefirrhh/bienestar/guarderia/Guarderia	P
426	BSBG02	GUARDERIAS,  GUARDERIA POR TRABAJADOR	sigefirrhh/bienestar/guarderia/GuarderiaFamiliar	P
425	BSBG03	GUARDERIAS,  GENERAR PAGO DE GUARDERIA	sigefirrhh/bienestar/guarderia/PagarGuarderia	P
424	BSBJ01	GUARDERIAS,  REPORTE DE GUARDERIAS	sigefirrhh/bienestar/guarderia/ReportGuarderia	R
429	BSBJ02	JUGUETES,  ASIGNAR JUGUETES	sigefirrhh/bienestar/juguete/AsignarJuguetes	P
430	BSBJ03	JUGUETES,  REPORTE DE JUGUETES	sigefirrhh/bienestar/juguete/ReportJuguetes	R
385	BSBT01	TICKETS,  ASIGNAR TICKETS	sigefirrhh/bienestar/ticketAlimentacion/AsignarTickets	D
384	BSBT02	TICKETS,  DESCUENTO TICKET	sigefirrhh/bienestar/ticketAlimentacion/DescuentoTicket	D
383	BSBT03	TICKETS,  EXCEPCION TICKET	sigefirrhh/bienestar/ticketAlimentacion/ExcepcionTicket	D
382	BSBT04	TICKETS,  HISTORICO TICKET	sigefirrhh/bienestar/ticketAlimentacion/HistoricoTicket	D
381	BSBT05	TICKETS,  PROVEEDOR POR REGION	sigefirrhh/bienestar/ticketAlimentacion/ProveedorRegion	D
380	BSBT06	TICKETS,  PROVEEDOR POR UBICACION	sigefirrhh/bienestar/ticketAlimentacion/ProveedorUbicacion	D
379	BSBT07	TICKETS,  REPORTE HISTORICO TICKETS	sigefirrhh/bienestar/ticketAlimentacion/ReportHistoricoTickets	D
378	BSBT08	TICKETS,  RETROACTIVO TICKET	sigefirrhh/bienestar/ticketAlimentacion/RetroactivoTicket	D
431	BSBT09	TICKETS,  SEGURIDAD AUSENCIAS TICKET	sigefirrhh/bienestar/ticketAlimentacion/SeguridadAusencia	P
377	BSBT10	TICKETS,  SEGURIDAD TICKET	sigefirrhh/bienestar/ticketAlimentacion/SeguridadTicket	D
376	BSBT11	TICKETS,  UBICACION DEPENDENCIA	sigefirrhh/bienestar/ticketAlimentacion/UbicacionDependencia	D
422	BSBU01	UTILES ESCOLARES ,  ASIGNAR UTILES ESCOLARES	sigefirrhh/bienestar/utiles/AsignarUtiles	P
421	BSBU02	UTILES ESCOLARES ,  REPORTE DE UTILES	sigefirrhh/bienestar/utiles/ReportUtiles	R
132	EXBP01	EXPEDIENTE,   TBE-AREAS DE CARRERA	sigefirrhh/base/personal/AreaCarrera	D
133	EXBP02	EXPEDIENTE,   TBE-CARRERAS	sigefirrhh/base/personal/Carrera	D
134	EXBP03	EXPEDIENTE,   TBE-CARRERAS POR AREA	sigefirrhh/base/personal/CarreraArea	D
135	EXBP04	EXPEDIENTE,   GREMIOS	sigefirrhh/base/personal/Gremio	D
136	EXBP05	EXPEDIENTE,   TBE-GRUPO DE PROFESIONES	sigefirrhh/base/personal/GrupoProfesion	D
137	EXBP06	EXPEDIENTE,   INSTITUCIONES PUBLICAS	sigefirrhh/base/personal/Institucion	D
138	EXBP07	EXPEDIENTE,   NIVELES EDUCATIVOS	sigefirrhh/base/personal/NivelEducativo	D
139	EXBP08	EXPEDIENTE,   TBE-PROFESIONES / OFICIOS	sigefirrhh/base/personal/Profesion	D
140	EXBP09	EXPEDIENTE,   RECAUDOS	sigefirrhh/base/personal/Recaudo	D
141	EXBP10	EXPEDIENTE,   RELACION DE RECAUDOS	sigefirrhh/base/personal/RelacionRecaudo	D
142	EXBP11	EXPEDIENTE,   TBE-SUBGRUPO DE PROFESIONES	sigefirrhh/base/personal/SubgrupoProfesion	D
143	EXBP12	EXPEDIENTE,   TIPOS DE ACREENCIA	sigefirrhh/base/personal/TipoAcreencia	D
144	EXBP13	EXPEDIENTE,   TBE-TIPO DE SANCIONES	sigefirrhh/base/personal/TipoAmonestacion	D
145	EXBP14	EXPEDIENTE,   TIPOS DE AUSENCIA	sigefirrhh/base/personal/TipoAusencia	D
146	EXBP15	EXPEDIENTE,   TBE- HABILIDADES/ COMPETENCIAS	sigefirrhh/base/personal/TipoHabilidad	D
147	EXBP16	EXPEDIENTE,   TBE-IDIOMAS	sigefirrhh/base/personal/TipoIdioma	D
148	EXBP17	EXPEDIENTE,   TBE-OTRAS ACTIVIDADES	sigefirrhh/base/personal/TipoOtraActividad	D
149	EXBP18	EXPEDIENTE,   TBE-TIPO DE RECONOCIMIENTOS	sigefirrhh/base/personal/TipoReconocimiento	D
306	ADPPN10	PROCESOS DE NOMINA,  REPORTE DE PRENOMINA	sigefirrhh/personal/procesoNomina/ReportPrenomina	D
231	ADPPN11	PROCESOS DE NOMINA,  REPORTES PRENOMINA ESPECIAL	sigefirrhh/personal/procesoNomina/ReportPrenominaEspecial	D
307	ADPPN12	PROCESOS DE NOMINA,  REPORTE DE VARIACIONES PRENOMINA	sigefirrhh/personal/procesoNomina/ReportVariacionesPrenomina	D
311	ADPPN13	PROCESOS DE NOMINA,  REVERSAR NOMINA	sigefirrhh/personal/procesoNomina/ReversarNomina	D
312	ADPPN14	PROCESOS DE NOMINA,  SEGURIDAD ESPECIAL	sigefirrhh/personal/procesoNomina/SeguridadEspecial	D
313	ADPPN15	PROCESOS DE NOMINA,  SEGURIDAD ORDINARIA	sigefirrhh/personal/procesoNomina/SeguridadOrdinaria	D
632	BSBT13	GRUPOS DE TICKET	sigefirrhh/bienestar/ticketAlimentacion/GrupoTicket	D
314	ADPT02	TRABAJADOR,  ACTUALIZAR ESTATUS Y  FE VIDA TRABAJADOR	sigefirrhh/personal/trabajador/ActualizarEstatusFeVidaTrabajador	D
227	ADPT03	TRABAJADOR,  ACTUALIZAR FECHAS TRABAJADOR	sigefirrhh/personal/trabajador/ActualizarFechasTrabajador	D
191	ADPT04	TRABAJADOR,  ANTICIPOS ( PRESTACIONES, BONO FIN AÑO, BONO VACACIONAL )	sigefirrhh/personal/trabajador/Anticipo	D
192	ADPT05	TRABAJADOR,  CAJA AHORROS	sigefirrhh/personal/trabajador/CajaAhorro	D
315	ADPT06	TRABAJADOR,  CARGA MASIVA PRESTAMOS	sigefirrhh/personal/trabajador/CargaMasivaPrestamos	D
193	ADPT07	TRABAJADOR,  CONCEPTOS ASOCIADOS A UN CONTRATO	sigefirrhh/personal/trabajador/ConceptoContrato	D
194	ADPT08	TRABAJADOR,  CONCEPTOS FIJOS	sigefirrhh/personal/trabajador/ConceptoFijo	D
195	ADPT09	TRABAJADOR,  CONCEPTOS VARIABLES	sigefirrhh/personal/trabajador/ConceptoVariable	D
197	ADPT10	TRABAJADOR,  EMBARGOS POR PENSION	sigefirrhh/personal/trabajador/Embargo	D
198	ADPT11	TRABAJADOR,  EMBARGOS POR CONCEPTO	sigefirrhh/personal/trabajador/EmbargoConcepto	D
223	ADBD07	DEFINICIONES, CONCEPTO	sigefirrhh/base/definiciones/Concepto	D
199	ADPT12	TRABAJADOR,  EMBARGOS POR PENSION	sigefirrhh/personal/trabajador/EmbargoFamiliar	D
316	ADPT13	TRABAJADOR,  GENERAR PLANILLA ARC	sigefirrhh/personal/trabajador/GenerarPlanillaArc	D
200	ADPT14	TRABAJADOR,  PASANTIAS	sigefirrhh/personal/trabajador/Pasantia	D
202	ADPT15	TRABAJADOR,  PLANILLAS ARC	sigefirrhh/personal/trabajador/PlanillaARC	D
203	ADPT16	TRABAJADOR,  PLANILLAS ARI	sigefirrhh/personal/trabajador/PlanillaARI	D
204	ADPT17	TRABAJADOR,  PRESTAMOS VIJENTES	sigefirrhh/personal/trabajador/Prestamo	D
205	ADPT18	TRABAJADOR,  PROCESOS VARIOS CON TRABAJADOR	sigefirrhh/personal/trabajador/Procesos	D
317	ADPT19	TRABAJADOR,  REPORTE DE CONCEPTOS	sigefirrhh/personal/trabajador/ReportConceptos	D
318	ADPT20	TRABAJADOR,  REPORTE COTIZACION TRABAJADOR	sigefirrhh/personal/trabajador/ReportCotizacionTrabajador	D
411	ADPT21	TRABAJADOR,  REPORTES TRABAJADORES COTIZAN O NO COTIZAN	sigefirrhh/personal/trabajador/ReportCotizacionTrabajador	R
319	ADPT22	TRABAJADOR,  REPORTE DE EGRESO	sigefirrhh/personal/trabajador/ReportEgreso	D
320	ADPT23	TRABAJADOR,  REPORTE DE FECHAS DEPENDENCIA	sigefirrhh/personal/trabajador/ReportFechasDependencia	D
321	ADPT24	TRABAJADOR,  REPORTE DE FECHAS NAC.,SERVICIO X REGION	sigefirrhh/personal/trabajador/ReportFechasNacimientoServicioRegion	D
322	ADPT25	TRABAJADOR,  REPORTE DE FECHAS NAC., SERVICIO  X TIPO PERSONAL	sigefirrhh/personal/trabajador/ReportFechasNacimientoServicioTipoPersonal	D
323	ADPT26	TRABAJADOR,  REPORTE DE FECHAS NAC., SERVICIO X UEL	sigefirrhh/personal/trabajador/ReportFechasNacimientoServicioUnidadEjecutora	D
324	ADPT27	TRABAJADOR,  REPORTE DE FECHAS X REGION	sigefirrhh/personal/trabajador/ReportFechasRegion	D
325	ADPT28	TRABAJADOR,  REPORTE DE FECHAS  X SEDE	sigefirrhh/personal/trabajador/ReportFechasSede	D
326	ADPT29	TRABAJADOR,  REPORTE DE FECHAS X UNIDAD FUNCIONAL	sigefirrhh/personal/trabajador/ReportFechasUnidadFuncional	D
327	ADPT30	TRABAJADOR,  REPORTE DE INGRESOS	sigefirrhh/personal/trabajador/ReportIngreso	D
328	ADPT31	TRABAJADOR,  REPORTE DE PLANILLA ARC	sigefirrhh/personal/trabajador/ReportPlanillaArc	D
329	ADPT32	TRABAJADOR,  REPORTE DE PRESTAMOS	sigefirrhh/personal/trabajador/ReportPrestamos	D
330	ADPT33	TRABAJADOR,  REPORTE DE TRABAJADOR	sigefirrhh/personal/trabajador/ReportTrabajador	D
331	ADPT34	TRABAJADOR,  REPORTE DE TRABAJADOR X DEPENDENCIA	sigefirrhh/personal/trabajador/ReportTrabajadorDependencia	D
332	ADPT35	TRABAJADOR,  REPORTE DE TRABAJADOR X REGION	sigefirrhh/personal/trabajador/ReportTrabajadorRegion	D
333	ADPT36	TRABAJADOR,  REPORTE DE TRABAJADOR X SEDE	sigefirrhh/personal/trabajador/ReportTrabajadorSede	D
334	ADPT37	TRABAJADOR,  REPORTE DE TRABAJADOR X SITUACION	sigefirrhh/personal/trabajador/ReportTrabajadorSituacion	D
233	ADPT38	TRABAJADOR,  REPORTE TRABAJADOR POR TIPO PERSONAL	sigefirrhh/personal/trabajador/ReportTrabajadorTipoPersonal	D
335	ADPT39	TRABAJADOR,  REPORTE DE TRABAJADOR X  UEL	sigefirrhh/personal/trabajador/ReportTrabajadorUnidadEjecutora	D
80	ADBD03	DEFINICIONES, CATEGORIA DE PERSONAL	sigefirrhh/base/definiciones/CategoriaPersonal	D
336	ADPT40	TRABAJADOR,  REPORTE DE TRABAJADOR X UNIDAD FUNCIONAL	sigefirrhh/personal/trabajador/ReportTrabajadorUnidadFuncional	D
206	ADPT41	TRABAJADOR,  SUELDO PROMEDIO DEL TRABAJADOR	sigefirrhh/personal/trabajador/SueldoPromedio	D
207	ADPT42	TRABAJADOR,  DATOS DE NOMINA DEL TRABAJADOR	sigefirrhh/personal/trabajador/Trabajador	D
225	ADPT43	TRABAJADOR,  TRABAJADOR	sigefirrhh/personal/trabajador/Trabajador	D
224	ADPT44	TRABAJADOR,  UBICAR TRABAJADOR	sigefirrhh/personal/trabajador/UbicarTrabajador	D
208	ADPT45	TRABAJADOR,  VACACIONES PROGRAMADAS TRABAJADOR	sigefirrhh/personal/trabajador/VacacionProgramada	D
280	ADPH02	HISTORICOS,  HISTORICO DE NOMINA	sigefirrhh/personal/historico/HistoricoNomina	D
281	ADPH03	HISTORICOS,  HISTORICO DE QUINCENA	sigefirrhh/personal/historico/HistoricoQuincena	D
282	ADPH04	HISTORICOS,  HISTORICO DE SEMANA	sigefirrhh/personal/historico/HistoricoSemana	D
283	ADPH05	HISTORICOS,  PAGO FUERA DE NOMINA	sigefirrhh/personal/historico/PagoFueraNomina	D
242	ADPH06	HISTORICOS,  REPORTES CONCEPTOS POR UNIDAD ADMINISTRADORA	sigefirrhh/personal/historico/ReportHistoricoAdministradora	R
284	ADPH07	HISTORICOS,  REPORTE HISTORICO DE CONCEPTO	sigefirrhh/personal/historico/ReportHistoricoConcepto	D
285	ADPH08	HISTORICOS,  REPORTE HISTORICO DE DEVENGADOS	sigefirrhh/personal/historico/ReportHistoricoDevengado	D
286	ADPH09	HISTORICOS,  REPORTE HISTORICO DE NOMINA	sigefirrhh/personal/historico/ReportNominaHistorico	D
251	ADPJ01	JUBILACION,  DATOS DEL PERSONAL JUBILADO	sigefirrhh/personal/jubilacion/Jubilado	D
258	ADPJ02	JUBILACION,  PENSION INVALIDEZ	sigefirrhh/personal/jubilacion/PensionInvalidez	D
259	ADPJ03	JUBILACION,  PENSION SOBREVIVIENTE	sigefirrhh/personal/jubilacion/PensionSobreviviente	D
260	ADPJ04	JUBILACION,  TABULADOR  DE JUBILADOS	sigefirrhh/personal/jubilacion/TabuladorJub	D
289	ADPM01	MOVIMIENTOS, EGRESO TRABAJADOR JUBILADO	sigefirrhh/personal/movimientos/EgresoTrabajadorJubilado	D
287	ADPM02	MOVIMIENTOS, INGRESO TRABAJADOR JUBILADO	sigefirrhh/personal/movimientos/IngresoTrabajadorJubilado	D
288	ADPM03	MOVIMIENTOS,  JUBILACION TRABAJADOR SIN REGISTRO	sigefirrhh/personal/movimientos/JubilacionTrabajadorSinRegistro	D
343	ADPO01	CONTANCIAS,  CONCEPTOS  POR CONSTANCIA DE TRABAJO	sigefirrhh/personal/constancias/ConceptoConstancia	D
342	ADPO02	CONTANCIAS,  DEFINICION CONSTANCIAS DE TRABAJO	sigefirrhh/personal/constancias/Constancia	P
341	ADPO03	CONTANCIAS,  REPORTE CONSTANCIAS DE TRABAJO	sigefirrhh/personal/constancias/ReportConstancias	R
290	ADPOP01	OTROS PROCESOS,  ACTUALIZAR PROMEDIOS	sigefirrhh/personal/otrosProcesos/ActualizarPromedios	D
291	ADPOP02	OTROS PROCESOS,  CALCULAR BONO DE FIN DE AÑO	sigefirrhh/personal/otrosProcesos/CalcularBonoFinAnio	D
292	ADPOP03	OTROS PROCESOS,  CALCULAR RETROACTIVO	sigefirrhh/personal/otrosProcesos/CalcularRetroactivo	D
293	ADPOP04	OTROS PROCESOS,  DESACTIVAR FE DE VIDA	sigefirrhh/personal/otrosProcesos/DesactivarFeVida	D
294	ADPOP05	OTROS PROCESOS,  PROCESO AUMENTO POR PORCENTAJE	sigefirrhh/personal/otrosProcesos/ProcesoAumentoPorPorcentaje	D
295	ADPOP06	OTROS PROCESOS,  REPORTR PROYECCION POR CONCEPTO	sigefirrhh/personal/otrosProcesos/ReportProyeccionConcepto	D
296	ADPOP07	OTROS PROCESOS,  REPORTE RESUMEN DE PROYECCION  	sigefirrhh/personal/otrosProcesos/ReportProyeccionResumen	D
297	ADPOP08	OTROS PROCESOS,  SUSPENDER TRABAJADORES	sigefirrhh/personal/otrosProcesos/SuspenderTrabajadores	D
356	ADPP01	PRESTACIONES,  ACTUALIZAR FIDEICOMISO	sigefirrhh/personal/prestaciones/ActualizarFideicomiso	D
355	ADPP02	PRESTACIONES,  CALCULAR PRESTACIONES MENSUALES	sigefirrhh/personal/prestaciones/CalcularPrestacionesMensuales	D
348	ADPP03	PRESTACIONES,  CONCEPTO PARA PRESTACIONES	sigefirrhh/personal/prestaciones/ConceptoPrestaciones	D
347	ADPP04	PRESTACIONES,  FIDEICOMISO	sigefirrhh/personal/prestaciones/Fideicomiso	D
354	ADPP05	PRESTACIONES,  GENERAR PAGO DE DIAS ADICIONALES	sigefirrhh/personal/prestaciones/GenerarPagoDiasAdicionales	D
346	ADPP06	PRESTACIONES,  PRESTACIONES MENSUALES	sigefirrhh/personal/prestaciones/PrestacionesMensuales	D
345	ADPP07	PRESTACIONES,  PRESTACIONES ONAPRE	sigefirrhh/personal/prestaciones/PrestacionesOnapre	D
353	ADPP08	PRESTACIONES,  REPORTE DE DIAS ADICIONALES	sigefirrhh/personal/prestaciones/ReportDiasAdicionales	D
352	ADPP09	PRESTACIONES,  REPORTE DE PRESTACIONES MENSUALES	sigefirrhh/personal/prestaciones/ReportPrestacionesMensuales	D
351	ADPP10	PRESTACIONES,  REPORTE DE PRESTACIONES ONAPRE	sigefirrhh/personal/prestaciones/ReportPrestacionesOnapre	D
226	ADPT01	TRABAJADOR,  ACTUALIZAR DATOS TRABAJADOR	sigefirrhh/personal/trabajador/ActualizarDatosTrabajador	P
349	ADPP12	PRESTACIONES, ESTADO DE CUENTA DE PRESTACIONES (GENERAL)	sigefirrhh/personal/prestaciones/ReportPrestacionesTrabajadorGeneral	D
344	ADPP13	PRESTACIONES,  SEGURIDAD PRESTACIONES	sigefirrhh/personal/prestaciones/SeguridadPrestaciones	D
228	ADPPA01	CALCULAR BONO VACACIONAL	sigefirrhh/personal/procesoAniversario/CalcularBonoVacacional	D
229	ADPPA02	SEGURIDAD ANIVERSARIO	sigefirrhh/personal/procesoAniversario/SeguridadAniversario	D
298	ADPPN01	PROCESOS DE NOMINA,  GENERAR NOMINA	sigefirrhh/personal/procesoNomina/GenerarNomina	D
299	ADPPN02	PROCESOS DE NOMINA,  GENERAR NOMINA ESPECIAL	sigefirrhh/personal/procesoNomina/GenerarNominaEspecial	D
300	ADPPN03	PROCESOS DE NOMINA,  GENERAR PRENOMINA	sigefirrhh/personal/procesoNomina/GenerarPrenomina	D
301	ADPPN04	PROCESOS DE NOMINA,  GENERAR PRENOMINA ESPECIAL	sigefirrhh/personal/procesoNomina/GenerarPrenominaEspecial	D
302	ADPPN05	PROCESOS DE NOMINA,  GENERAR SUELDO PROMEDIO	sigefirrhh/personal/procesoNomina/GenerarSueldoPromedio	D
303	ADPPN06	PROCESOS DE NOMINA,  NOMINA ESPECIAL	sigefirrhh/personal/procesoNomina/NominaEspecial	D
304	ADPPN07	PROCESOS DE NOMINA,  REPORTE DE APORTES PATRONALES	sigefirrhh/personal/procesoNomina/ReportAportesPatronales	D
305	ADPPN08	PROCESOS DE NOMINA,  REPORTE DE NOMINA	sigefirrhh/personal/procesoNomina/ReportNomina	D
232	ADPPN09	PROCESOS DE NOMINA,  REPORTES NOMINA ESPECIAL	sigefirrhh/personal/procesoNomina/ReportNominaEspecial	D
254	ADBD11	DEFINICIONES, CONCEPTO COLECTIVO	sigefirrhh/base/definiciones/ConceptoColectivo	D
85	ADBD12	DEFINICIONES, CONCEPTOS POR DEPENDENCIA	sigefirrhh/base/definiciones/ConceptoDependencia	D
86	ADBD13	DEFINICIONES, CONCEPTOS POR TIPO DE PERSONAL	sigefirrhh/base/definiciones/ConceptoTipoPersonal	D
87	ADBD14	DEFINICIONES, CONCEPTOS PARA CALCULO DE UTILIDADES	sigefirrhh/base/definiciones/ConceptoUtilidades	D
88	ADBD15	DEFINICIONES, CONCEPTOS CALCULO BONO VACACIONAL	sigefirrhh/base/definiciones/ConceptoVacaciones	D
89	ADBD16	DEFINICIONES, CUENTAS BANCARIAS DEL ORGANISMO	sigefirrhh/base/definiciones/CuentaBanco	D
90	ADBD17	DEFINICIONES, DETALLE DE DISQUETE	sigefirrhh/base/definiciones/DetalleDisquete	D
91	ADBD18	DEFINICIONES, DIAS FERIADOS	sigefirrhh/base/definiciones/DiaFeriado	D
92	ADBD19	DEFINICIONES, DIAS A PAGAR POR UTILIDADES	sigefirrhh/base/definiciones/DiaUtilidades	D
93	ADBD20	DEFINICIONES, DIAS DE VACACIONES POR AÑO	sigefirrhh/base/definiciones/DiaVacCargo	D
94	ADBD21	DEFINICIONES, DISQUETES	sigefirrhh/base/definiciones/Disquete	D
255	ADBD22	DEFINICIONES, FIRMAS DE REPORTE	sigefirrhh/base/definiciones/FirmasReporte	D
95	ADBD23	DEFINICIONES, FRECUENCIAS DE PAGO	sigefirrhh/base/definiciones/FrecuenciaPago	D
96	ADBD24	DEFINICIONES, FRECUENCIAS DE PAGO POR TIPO DE PERSONAL	sigefirrhh/base/definiciones/FrecuenciaTipoPersonal	D
97	ADBD25	DEFINICIONES, GRUPOS DE NOMINA	sigefirrhh/base/definiciones/GrupoNomina	D
98	ADBD26	DEFINICIONES, MESES	sigefirrhh/base/definiciones/Mes	D
99	ADBD27	DEFINICIONES, PAGO POR QUINQUENIO	sigefirrhh/base/definiciones/PagoQuinquenio	D
256	ADBD28	DEFINICIONES, PARAMETROS ARI	sigefirrhh/base/definiciones/ParametroAri	D
100	ADBD29	DEFINICIONES, PARAMETROS CAJA DE AHORROS	sigefirrhh/base/definiciones/ParametroCaja	D
101	ADBD30	DEFINICIONES, PARAMETROS RETENCIONES	sigefirrhh/base/definiciones/ParametroGobierno	D
102	ADBD31	DEFINICIONES, PARAMETROS REPORTES	sigefirrhh/base/definiciones/ParametroReportes	D
441	BSBP01	POLIZA DE SEGURO, TITULAR	sigefirrhh/bienestar/poliza/Titular	D
442	BSBP02	POLIZA DE SEGURO, SUSPENDER PRIMAS	sigefirrhh/bienestar/poliza/SuspenderPrimas	P
103	ADBD32	DEFINICIONES, PARAMETROS VARIOS	sigefirrhh/base/definiciones/ParametroVarios	D
443	BSBP03	POLIZA DE SEGURO, SINIESTRO	sigefirrhh/bienestar/poliza/Siniestro	D
444	BSBP04	POLIZA DE SEGURO, REPORTE DE SINIESTROS	sigefirrhh/bienestar/poliza/ReportPolizaSiniestros	R
104	ADBD33	DEFINICIONES, PARAMETROS PRIMA ANTIGUEDAD	sigefirrhh/base/definiciones/PrimaAntiguedad	D
105	ADBD34	DEFINICIONES, PARAMETRO PRIMA POR HIJO	sigefirrhh/base/definiciones/PrimaHijo	D
106	ADBD35	DEFINICIONES, RELACION DE PERSONAL	sigefirrhh/base/definiciones/RelacionPersonal	D
257	ADBD36	DEFINICIONES, REPORTE DE DEFINICIONES	sigefirrhh/base/definiciones/ReporteDefiniciones	D
109	ADBD37	DEFINICIONES, TIPOS DE PERSONAL RESTRINGIDOS ENTRE SI	sigefirrhh/base/definiciones/Restringido	D
445	BSBP05	POLIZA DE SEGURO, REPORTE DE COSTOS DE POLIZA	sigefirrhh/bienestar/poliza/ReportPolizaCostos	R
110	ADBD38	DEFINICIONES, PERIODOS SEMANALES	sigefirrhh/base/definiciones/Semana	D
111	ADBD39	DEFINICIONES, SINDICATOS	sigefirrhh/base/definiciones/Sindicato	D
446	BSBP06	POLIZA DE SEGURO, REPORTE DE BENEFICIARIOS	sigefirrhh/bienestar/poliza/ReportPolizaBeneficiarios	R
112	ADBD40	DEFINICIONES, TARIFA ARI	sigefirrhh/base/definiciones/TarifaAri	D
447	BSBP07	POLIZA DE SEGURO, PRIMAS SEGUN CARGO	sigefirrhh/bienestar/poliza/PrimasCargo	D
448	BSBP08	POLIZA DE SEGURO, PRESTAMOS	sigefirrhh/bienestar/poliza/GenerarPrestamoPoliza	P
49	BSBB05	BECAS,  PARAMETROS POR NIVEL	sigefirrhh/base/bienestar/ParametroBeca	D
449	BSPS09	POLIZA DE SEGURO, GENERAR POLIZAS	sigefirrhh/bienestar/poliza/GenerarPolizas	P
501	BSBP10	POLIZA DE SEGURO, EXCEPCION DE TITULAR	sigefirrhh/bienestar/poliza/ExcepcionTitular	D
502	BSBP11	POLIZA DE SEGURO, EXCEPCION DE BENEFICIARIO	sigefirrhh/bienestar/poliza/ExcepcionBeneficiario	D
503	BSBP12	POLIZA DE SEGURO, BENEFICIARIO	sigefirrhh/bienestar/poliza/Beneficiario	D
114	ADBD42	DEFINICIONES, TIPOS DE ACREENCIAS	sigefirrhh/base/definiciones/TipoAcreencia	D
115	ADBD43	DEFINICIONES, TIPOS DE CONTRATO	sigefirrhh/base/definiciones/TipoContrato	D
116	ADBD44	DEFINICIONES, TIPOS DE PERSONAL	sigefirrhh/base/definiciones/TipoPersonal	D
117	ADBD45	DEFINICIONES, TURNOS	sigefirrhh/base/definiciones/Turno	D
118	ADBD46	DEFINICIONES, DIAS DE VACACIONES POR AÑO	sigefirrhh/base/definiciones/VacacionesPorAnio	D
261	ADPC01	CONCEPTOS;  ACTUALIZAR MONTO	sigefirrhh/personal/conceptos/ActualizarMonto	D
262	ADPC02	CONCEPTOS;  CAMBIO DE ESTATUS	sigefirrhh/personal/conceptos/CambioEstatus	D
263	ADPC03	CONCEPTOS;  CAMBIO DE FRECUENCIA	sigefirrhh/personal/conceptos/CambioFrecuencia	D
264	ADPC04	CONCEPTOS;  CARGA  DE CONCEPTOS	sigefirrhh/personal/conceptos/CargaConceptos	D
265	ADPC05	CONCEPTOS;  CARGA MASIVA DE CONCEPTOS	sigefirrhh/personal/conceptos/CargaMasivaConceptos	D
266	ADPC06	CONCEPTOS;  CARGA DE PRESTAMOS	sigefirrhh/personal/conceptos/CargaPrestamos	D
267	ADPC07	CONCEPTOS;  ELIMINACION DE CONCEPTOS	sigefirrhh/personal/conceptos/EliminarConceptos	D
268	ADPC08	CONCEPTOS;  INGRESO DE CONCEPTOS	sigefirrhh/personal/conceptos/IngresarConceptos	D
275	ADPC09	CONCEPTOS;  INGRESAR CONCEPTOS	sigefirrhh/personal/conceptos/IngresarConceptos	D
269	ADPC10	CONCEPTOS;  RECALCULO	sigefirrhh/personal/conceptos/Recalculo	D
270	ADPC11	CONCEPTOS;  RECALCULO POR ASOCIADO	sigefirrhh/personal/conceptos/RecalculoPorAsociado	D
271	ADPC12	CONCEPTOS;  RECALCULO POR CRITERIO	sigefirrhh/personal/conceptos/RecalculoPorCriterio	D
272	ADPC13	CONCEPTOS;  RECALCULO PROYECTADO	sigefirrhh/personal/conceptos/RecalculoProyectado	D
273	ADPC14	CONCEPTOS;  REPORTE DE CONCEPTOS	sigefirrhh/personal/conceptos/ReportConceptos	D
274	ADPC15	CONCEPTOS;  SUMAR CONCEPTOS	sigefirrhh/personal/conceptos/SumarConcepto	D
276	ADPD01	DISQUETE,  DISQUETE APORTE	sigefirrhh/personal/disquete/DisqueteAporte	D
277	ADPD02	DISQUETE,  DISQUETE FIDEICOMISO	sigefirrhh/personal/disquete/DisqueteFideicomiso	D
278	ADPD03	DISQUETE,  DISQUETE NOMINA	sigefirrhh/personal/disquete/DisqueteNomina	D
389	ADPD04	DISQUETE,  TICKETS,  GENERACION DISQUETE DE TICKET	sigefirrhh/personal/disquete/DisqueteTicket	D
279	ADPH01	HISTORICOS,  HISTORICO CONCEPTOS  POR TRABAJADOR	sigefirrhh/personal/historico/HistoricoConceptoTrabajador	D
78	ADBD01	DEFINICIONES,  BANCOS	sigefirrhh/base/definiciones/Banco	D
79	ADBD02	DEFINICIONES, BENEFICIARIOS GLOBALES	sigefirrhh/base/definiciones/BeneficiarioGlobal	D
252	ADBD04	DEFINICIONES, CATEGORIA PRESUPUESTO	sigefirrhh/base/definiciones/CategoriaPresupuesto	D
81	ADBD05	DEFINICIONES, CLASIFICACION DE PERSONAL	sigefirrhh/base/definiciones/ClasificacionPersonal	D
82	ADBD06	DEFINICIONES, CONCEPTOS	sigefirrhh/base/definiciones/Concepto	D
662	PLPEO8	EVALUACION, REGISTRAR EVALUACIONES	sigefirrhh/planificacion/evaluacion/RegistrarEvaluacion	D
568	BSBD01	DOTACIONES, ACTUALIZAR TALLAS POR TRABAJADOR	sigefirrhh/bienestar/dotacion/ActualizarDotacionTrabajador	P
569	BSBD02	DOTACIONES, ASIGNAR  DOTACIONES POR TRABAJADOR	sigefirrhh/bienestar/dotacion/GenerarDotacionTrabajador	P
620	BSBD03	DOTACIONES, ENTREGAR/ELIMINAR DOTACION	sigefirrhh/bienestar/dotacion/GenerarDotacionEntregada	P
509	BSBE02	BECAS, BECA DEL FAMILIAR	sigefirrhh/bienestar/beca/BecaFamiliar	D
350	ADPP11	PRESTACIONES,  ESTADO DE CUENTA PRESTACIONES POR TRABAJADOR 	sigefirrhh/personal/prestaciones/ReportPrestacionesTrabajador	D
641	ADPR01	REPORTE REGISTRO CARGOS	sigefirrhh/personal/registroCargos/ReportRegistroCargos	R
642	ADPR02	CONSULTA REGISTRO CARGOS	sigefirrhh/personal/registroCargos/RegistroCargos	D
565	BSBE06	BECAS, PAGAR BECA FAMILIAR	sigefirrhh/bienestar/beca/PagarBecaFamiliar	P
643	ADPR03	CONSULTA HISTORIAL DE REGISTRO CARGOS	sigefirrhh/personal/registroCargos/HistoricoCargos	D
644	ADPR04	REPORTE NUMEROS DE CARGOS EN UN REGISTRO CARGO	sigefirrhh/personal/registroCargos/ReportCantidadCargos	R
566	BSBE07	BECAS,   SOLICITUDES DE BECAS	sigefirrhh/bienestar/beca/InicializarSolicitudes	P
567	BSBE08	BECAS, APROBAR BECAS	sigefirrhh/bienestar/beca/AprobarBecaFamiliar	P
645	ADPR05	REPORTE REGISTROCARGOS POR UEL	sigefirrhh/personal/registroCargos/ReportRegistroCargosUEL	R
561	BSBE03	BECAS, REPORTE DE BECAS DE FAMILIARES 	sigefirrhh/bienestar/beca/ReportBecaFamiliarNivel	R
562	BSBE04	BECAS, REPORTE DE BECAS FAMILIARES APROBADAS	sigefirrhh/bienestar/beca/ReportBecaFamiliarAprobada	R
560	BSBE05	BECAS, REPORTE DE BECAS FAMILIARES RECHAZADAS 	sigefirrhh/bienestar/beca/ReportBecaFamiliarRechazada	R
652	ADM01	MOVIMIENTO EGRESOS LEFFP	sigefirrhh/personal/movimientos/EgresoTrabajadorLefp	P
621	BSBD04	DOTACIONES, DOTACIONES POR CARGO	sigefirrhh/bienestar/dotacion/DotacionCargo	D
653	ADM02	MOVIMIENTO EGRESO NO SUJETO SIN REGISTRO	sigefirrhh/personal/movimientos/EgresoTrabajadorSinRegistro	P
113	ADBD41	DEFINICIONES, TASAS BCV	sigefirrhh/personal/pasivoLaboral/TasaBcv	D
622	BSBD05	DOTACIONES, REPORTES DE DOTACIONES	sigefirrhh/bienestar/dotacion/ReportDotaciones	D
660	BSBD06	DOTACIONES, CONSULTAR/ACTUALIZAR DOTACIONES ASIGNADAS                      	sigefirrhh/bienestar/dotacion/DotacionTrabajador	D
661	BSBD07	DOTACIONES, CONSULTAR/ACTUALIZAR DOTACIONES ENTREGADAS	sigefirrhh/bienestar/dotacion/DotacionEntregada	D
157	EXPE01	EXPEDIENTE,   ACREENCIA	sigefirrhh/personal/expediente/Acreencia	D
\.


--
-- TOC entry 7605 (class 0 OID 185801)
-- Dependencies: 392
-- Data for Name: operacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY operacion (id_operacion, cod_operacion, nombre, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7606 (class 0 OID 185805)
-- Dependencies: 393
-- Data for Name: organismo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY organismo (id_organismo, cedula_agente_retencion, cedula_director, id_ciudad, cod_organismo, cod_sigecof, cod_uel, direccion, nit, nombre_agente_retencion, organo_rector, rif, rif_agente_retencion, telefono, zona_postal, aprobacion_mpd, organismo_adscrito, nombre_organismo, actualiza_expediente, nombre_rrhh, cedula_rrhh, nombre_informatica, cedula_informatica, nombre_maxima_autoridad, cedula_maxima_autoridad, codigo_anterior_mpd, telefono_rrhh, telefono_informatica, telefono_maxima_autoridad, gaceta_rrhh, gaceta_informatica, gaceta_maxima_autoridad, nombre_corto) FROM stdin;
11	16101603	0	1	0058	0058	 	AV LECUNA PARQUE CENTRAL, TORRE ESTE PISO 4. OFICINA	1	JULIO CESAR FUENMAYOR BUITRAGO	S	G20008830-3		 5976618	1010	S	N	MINISTERIO DEL PODER POPULAR PARA LA MUJER Y LA IGUALDAD DE GÉNERO	S	SIDNY HERNANDEZ	10632515	THAIS SORZANO	5976617	NANCY PEREZ SIERRA	4055363		04166368101	04265201049	5976626	GO RBV N° 39.761 DE FECHA 19/09/2011, RESOLUCION N° 018	GORB N° 39.268 DE FECHA 21 DE SEPTIEMBRE 2009, SEGUN RESOLUCIÓN N° 012	GORB N° 39.451 DE FECHA 22 DE JUNIO DE 2010, SEGUN DECRETO N° 7.504	MINMUJER
\.


--
-- TOC entry 7607 (class 0 OID 185822)
-- Dependencies: 394
-- Data for Name: otraactividad; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY otraactividad (id_otra_actividad, observaciones, id_tipo_otra_actividad, id_personal) FROM stdin;
\.


--
-- TOC entry 7608 (class 0 OID 185825)
-- Dependencies: 395
-- Data for Name: otrasalicuotas; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY otrasalicuotas (id_otras_alicuotas, id_trabajador, id_concepto_alicuota, monto) FROM stdin;
\.


--
-- TOC entry 7609 (class 0 OID 185829)
-- Dependencies: 396
-- Data for Name: pagoguarderia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pagoguarderia (id_pago_guarderia, id_personal, id_familiar, id_guarderia, anio, mes, monto, inscripcion) FROM stdin;
\.


--
-- TOC entry 7610 (class 0 OID 185834)
-- Dependencies: 397
-- Data for Name: pais; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pais (id_pais, abreviatura, cod_pais, nombre, moneda, moneda_sing, moneda_plur, simbolo, fraccion, id_region_continente) FROM stdin;
2	AG	AG	ANTIGUA Y BARBUDA	\N	\N	\N	\N	\N	\N
3	AN	AN	ANTILLAS NEERLANDESAS	\N	\N	\N	\N	\N	\N
5	AT	AT	AUSTRIA	\N	\N	\N	\N	\N	\N
6	AU	AU	AUSTRALIA	\N	\N	\N	\N	\N	\N
7	BB	BB	BARBADOS	\N	\N	\N	\N	\N	\N
8	BE	BE	BELGICA	\N	\N	\N	\N	\N	\N
9	BG	BG	BULGARIA	\N	\N	\N	\N	\N	\N
10	BN	BN	BENIN	\N	\N	\N	\N	\N	\N
13	BZ	BZ	BELICE	\N	\N	\N	\N	\N	\N
14	CA	CA	CANADA	\N	\N	\N	\N	\N	\N
15	CH	CH	SUIZA	\N	\N	\N	\N	\N	\N
17	CN	CN	CHINA	\N	\N	\N	\N	\N	\N
21	CZ	CZ	REPUBLICA CHECA	\N	\N	\N	\N	\N	\N
22	DE	DE	ALEMANIA	\N	\N	\N	\N	\N	\N
23	DK	DK	DINAMARCA	\N	\N	\N	\N	\N	\N
24	DM	DM	DOMINICA	\N	\N	\N	\N	\N	\N
25	DO	DO	REPUBLICA DOMINICANA	\N	\N	\N	\N	\N	\N
26	DZ	DZ	ARGELIA	\N	\N	\N	\N	\N	\N
28	EG	EG	EGIPTO	\N	\N	\N	\N	\N	\N
29	ES	ES	ESPAÑA	\N	\N	\N	\N	\N	\N
30	FI	FI	FINLANDIA	\N	\N	\N	\N	\N	\N
31	FR	FR	FRANCIA	\N	\N	\N	\N	\N	\N
32	GD	GD	GRENADA	\N	\N	\N	\N	\N	\N
33	GR	GR	GRECIA	\N	\N	\N	\N	\N	\N
34	GT	GT	GUATEMALA	\N	\N	\N	\N	\N	\N
35	GY	GY	GUYANA	\N	\N	\N	\N	\N	\N
36	HK	HK	HONG KONG	\N	\N	\N	\N	\N	\N
37	HN	HN	HONDURAS	\N	\N	\N	\N	\N	\N
38	HT	HT	HAITI	\N	\N	\N	\N	\N	\N
39	HU	HU	HUNGRIA	\N	\N	\N	\N	\N	\N
40	IC	IC	SANTA LUCIA	\N	\N	\N	\N	\N	\N
41	ID	ID	INDONESIA	\N	\N	\N	\N	\N	\N
42	IK	IK	IRAK	\N	\N	\N	\N	\N	\N
43	IL	IL	ISRAEL	\N	\N	\N	\N	\N	\N
44	IN	IN	INDIA	\N	\N	\N	\N	\N	\N
45	IR	IR	IRAN	\N	\N	\N	\N	\N	\N
46	IT	IT	ITALIA	\N	\N	\N	\N	\N	\N
47	JM	JM	JAMAICA	\N	\N	\N	\N	\N	\N
48	JP	JP	JAPON	\N	\N	\N	\N	\N	\N
49	KE	KE	KENIA	\N	\N	\N	\N	\N	\N
50	KN	KN	SAN CRISTOBAL Y NEVIS	\N	\N	\N	\N	\N	\N
51	KR	KR	COREA DEL SUR	\N	\N	\N	\N	\N	\N
52	KT	KT	KAZAKHSTAN	\N	\N	\N	\N	\N	\N
53	KW	KW	KUWAIT	\N	\N	\N	\N	\N	\N
54	LB	LB	LIBANO	\N	\N	\N	\N	\N	\N
55	LY	LY	LIBIA	\N	\N	\N	\N	\N	\N
56	MA	MA	MARRUECOS	\N	\N	\N	\N	\N	\N
57	MQ	MQ	MARTINICA	\N	\N	\N	\N	\N	\N
58	MX	MX	MEXICO	\N	\N	\N	\N	\N	\N
59	MY	MY	MALASIA	\N	\N	\N	\N	\N	\N
60	NA	NA	NAMIBIA	\N	\N	\N	\N	\N	\N
61	NG	NG	NIGERIA	\N	\N	\N	\N	\N	\N
62	NI	NI	NICARAGUA	\N	\N	\N	\N	\N	\N
63	NL	NL	HOLANDA	\N	\N	\N	\N	\N	\N
64	NO	NO	NORUEGA	\N	\N	\N	\N	\N	\N
67	PH	PH	FILIPINAS	\N	\N	\N	\N	\N	\N
68	PL	PL	POLONIA	\N	\N	\N	\N	\N	\N
69	PR	PR	PUERTO RICO	\N	\N	\N	\N	\N	\N
70	PT	PT	PORTUGAL	\N	\N	\N	\N	\N	\N
72	QT	QT	QATAR	\N	\N	\N	\N	\N	\N
73	RO	RO	RUMANIA	\N	\N	\N	\N	\N	\N
74	RU	RU	RUSIA	\N	\N	\N	\N	\N	\N
75	SA	SA	ARABIA SAUDITA	\N	\N	\N	\N	\N	\N
76	SE	SE	SUECIA	\N	\N	\N	\N	\N	\N
77	SG	SG	SENEGAL	\N	\N	\N	\N	\N	\N
78	SR	SR	SURINAME	\N	\N	\N	\N	\N	\N
80	SY	SY	SIRIA	\N	\N	\N	\N	\N	\N
81	TR	TR	TURQUIA	\N	\N	\N	\N	\N	\N
82	TT	TT	TRINIDAD Y TOBAGO	\N	\N	\N	\N	\N	\N
83	UK	UK	GRAN BRETAÑA	\N	\N	\N	\N	\N	\N
86	VA	VA	SANTA SEDE	\N	\N	\N	\N	\N	\N
87	VC	VC	SAN VICENTE Y LAS GRANADINAS	\N	\N	\N	\N	\N	\N
88	ZA	ZA	SUDAFRICA	\N	\N	\N	\N	\N	\N
1	VEN	VE	VENEZUELA						3
4	AR	AR	ARGENTINA						3
12	BR	BR	BRASIL						3
18	CO	CO	COLOMBIA						3
84	US	US	ESTADOS UNIDOS						1
79	SV	SV	EL SALVADOR						2
71	PY	PY	PARAGUAY						3
65	PA	PA	PANAMA						2
66	PE	PE	PERU						3
11	BO	BO	BOLIVIA						3
16	CL	CL	CHILE						3
19	CR	CR	COSTA RICA						2
20	CU	CU	CUBA						2
27	EC	EC	ECUADOR						3
85	UY	UY	URUGUAY						3
\.


--
-- TOC entry 7611 (class 0 OID 185837)
-- Dependencies: 398
-- Data for Name: parametroari; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY parametroari (id_parametro_ari, unidad_tributaria, fecha_vigencia, un_desgravamenes, un_persona_natural, un_carga) FROM stdin;
11	107	2013-02-15	774	10	10
\.


--
-- TOC entry 7612 (class 0 OID 185844)
-- Dependencies: 399
-- Data for Name: parametrobeca; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY parametrobeca (id_parametro_beca, id_tipo_personal, id_nivel_beca, id_concepto_tipo_personal, anios_servicio, meses_servicio, edad_maxima, promedio_notas, numero_becas, maximo_trabajador, monto_beca, monto_excepcional, sueldo_maximo, sueldo, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7613 (class 0 OID 185859)
-- Dependencies: 400
-- Data for Name: parametrobecageneral; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY parametrobecageneral (id_parametro_beca_general, id_tipo_personal, maximo_tipo_personal, maximo_trabajador, incluye_trabajador, aprobacion_solicitud, quien_cobra) FROM stdin;
\.


--
-- TOC entry 7614 (class 0 OID 185866)
-- Dependencies: 401
-- Data for Name: parametrocaja; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY parametrocaja (id_parametro_caja, aporte_fijo, aporte_trabajador, aporte_patron, maximo_trabajador, maximo_patron, ingreso_automatico, recalculo, id_concepto_tipo_personal, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7615 (class 0 OID 185879)
-- Dependencies: 402
-- Data for Name: parametrodotacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY parametrodotacion (id_parametro_dotacion, id_tipo_personal, id_tipo_dotacion, modalidad, monto_dotacion, id_concepto_tipo_personal, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7616 (class 0 OID 185886)
-- Dependencies: 403
-- Data for Name: parametrogobierno; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY parametrogobierno (id_parametro_gobierno, limsem_sso, limmen_sso, limsem_lph, limmen_lph, limsem_fju, limmen_fju, edadmasc_sso, edadfem_sso, edadmasc_lph, edadfem_lph, edadmasc_fju, edadfem_fju, porcentaje_integral, porcentaje_parcial, porcbpat_sso, porcmpat_sso, porcapat_sso, porctrab_spf, porcpat_spf, porctrab_lph, porcpat_lph, porctrab_fju, porcpat_fju, id_grupo_organismo, limsem_spf, limmen_spf) FROM stdin;
31	2786	17482.1699999999983	15000	50000	9999999	999999999	60	55	60	60	0	0	4	2	10	4	4	0.5	2	1	2	3	3	11	2786	17482.0999999999985
\.


--
-- TOC entry 7617 (class 0 OID 185915)
-- Dependencies: 404
-- Data for Name: parametroguarderia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY parametroguarderia (id_parametro_guarderia, id_tipo_personal, sueldo_maximo, edad_maxima, monto_patron, pago_nomina, quien_cobra) FROM stdin;
20	14	0	6	818.990000000000009	N	A
\.


--
-- TOC entry 7618 (class 0 OID 185925)
-- Dependencies: 405
-- Data for Name: parametrojubilacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY parametrojubilacion (id_parametro_jubilacion, id_tipo_personal, edad, edadm, anios_servicio, anios_serviciom, anios_servicio_sin_edad, anios_servicio_especial, meses_promediar, porcentaje, factor) FROM stdin;
\.


--
-- TOC entry 7619 (class 0 OID 185937)
-- Dependencies: 406
-- Data for Name: parametrojuguete; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY parametrojuguete (id_parametro_juguete, id_tipo_personal, edad_minima, edad_maxima, cantidad_beneficiarios, monto_juguetes, quien_cobra) FROM stdin;
\.


--
-- TOC entry 7620 (class 0 OID 185946)
-- Dependencies: 407
-- Data for Name: parametroticket; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY parametroticket (id_parametro_ticket, id_tipo_personal, id_concepto_tipo_personal, dias_habiles, incluye_sabados, deducir_ausencias, cierre_ausencias, dias_fijos, monto_fijo, monto_unico, pago_nomina, pago_tarjeta, tickets_por_dia, maximo_tickets, sueldo_basico_integral, sueldo_maximo, varias_denominaciones, distribucion) FROM stdin;
13	15	352	N	N	N	N	1	N	0	N	N	0	0	B	1000000	N	D
14	14	353	N	N	N	N	1	N	0	N	N	0	0	B	1000000	N	D
15	31	354	N	N	N	N	1	N	0	N	N	0	0	B	1000000	N	D
17	33	356	N	N	N	N	1	N	0	N	N	0	0	B	1000000	N	D
\.


--
-- TOC entry 7621 (class 0 OID 185967)
-- Dependencies: 408
-- Data for Name: parametroutiles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY parametroutiles (id_parametro_utiles, id_tipo_personal, nivel_educativo, cantidad_beneficiarios, monto_utiles, quien_cobra) FROM stdin;
\.


--
-- TOC entry 7622 (class 0 OID 185974)
-- Dependencies: 409
-- Data for Name: parametrovarios; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY parametrovarios (id_parametro_varios, nuevo_regimen, alicuota_bfa_prestac, alicuota_bfa_bvac, alicuota_bvac_prestac, alicuota_bvac_bfa, dias_anio, aniversario_disfrute, dias_bfa1997, id_tipo_personal, id_grupo_organismo, calculo_utilidades, id_sitp, tiempo_sitp, alicuota_bono_petrolero, constante_petrolero_a, constante_petrolero_b, constante_petrolero_c, bono_extra, sumo_apn, calculo_alicuota_bfa, fecha_tope_utilidades, fecha_apertura_fideicomiso, regimen_derogado_procesado, intereses_adicionales, cambio_moneda, tipo_calculo_bfa) FROM stdin;
32	S	S	N	S	N	360	A	30	15	11	300	0	\N	N	0	0	0	N	N	F	\N	2011-01-01	N	N	0	D
11	S	S	N	S	N	360	A	30	14	11	300	0	\N	N	0	0	0	N	N	F	\N	2011-01-01	N	N	0	D
22	S	S	N	S	N	360	A	30	31	11	300	0	\N	N	0	0	0	N	N	F	\N	2011-01-01	N	N	0	D
34	S	S	N	S	N	360	A	30	33	11	300	0	\N	N	0	0	0	N	N	F	\N	2011-01-01	N	N	0	D
\.


--
-- TOC entry 7623 (class 0 OID 186005)
-- Dependencies: 410
-- Data for Name: parroquia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY parroquia (id_parroquia, abreviatura, cod_parroquia, id_municipio, nombre) FROM stdin;
1	\N	01	1	ALTAGRACIA
2	\N	02	1	ANTÍMANO
3	\N	03	1	CANDELARIA
4	\N	04	1	CARICUAO
5	\N	05	1	CATEDRAL
6	\N	06	1	COCHE
7	\N	07	1	EL JUNQUITO
8	\N	08	1	EL PARAÍSO
9	\N	09	1	EL RECREO
10	\N	10	1	EL VALLE
11	\N	11	1	LA PASTORA
12	\N	12	1	LA VEGA
13	\N	13	1	MACARAO
14	\N	14	1	SAN AGUSTÍN
15	\N	15	1	SAN BERNARDINO
16	\N	16	1	SAN JOSÉ
17	\N	17	1	SAN JUAN
18	\N	18	1	SAN PEDRO
19	\N	19	1	SANTA ROSALÍA
20	\N	20	1	SANTA TERESA
21	\N	21	1	SUCRE
22	\N	22	1	23 DE ENERO
23	\N	01	2	LA ESMERALDA
24	\N	02	2	HUACHAMACARE
25	\N	03	2	MARAWAKA
26	\N	04	2	MAVACA
27	\N	05	2	SIERRA PARIMA
28	\N	01	3	SAN FERNANDO DE ATABAPO
29	\N	02	3	UCATA
30	\N	03	3	YAPACANA
31	\N	04	3	CANAME
32	\N	01	4	FERNANDO GIRÓN TOVAR
33	\N	02	4	LUIS ALBERTO GÓMEZ
34	\N	03	4	PARHUEÑA
35	\N	04	4	PLATANILLAL
36	\N	01	5	ISLA RATÓN
37	\N	02	5	SAMARIAPO
38	\N	03	5	SIPAPO
39	\N	04	5	MUNDUAPO
40	\N	05	5	GUAYAPO
41	\N	01	6	VICTORINO
42	\N	02	6	COMUNIDAD
43	\N	01	7	SAN JUAN DE MANAPIARE
44	\N	02	7	ALTO VENTUARI
45	\N	03	7	MEDIO VENTUARI
46	\N	04	7	BAJO VENTUARI
47	\N	01	8	SAN CARLOS DE RÍO NEGRO
48	\N	02	8	SOLANO
49	\N	03	8	CASIQUIARE
50	\N	04	8	COCUY
51	\N	01	9	ANACO
52	\N	02	9	SAN JOAQUÍN
53	\N	01	10	ARAGUA DE BARCELONA
54	\N	02	10	CACHIPO
55	\N	01	11	PUERTO PÍRITU
56	\N	02	11	SAN MIGUEL
57	\N	03	11	SUCRE
58	\N	01	12	VALLE DE GUANAPE
59	\N	02	12	SANTA BÁRBARA
60	\N	01	13	PARIAGUÁN
61	\N	02	13	ATAPIRIRE
62	\N	03	13	BOCA DEL PAO
63	\N	04	13	EL PAO
64	\N	05	13	MÚCURA
65	\N	01	14	GUANTA
66	\N	02	14	CHORRERÓN
67	\N	01	15	SOLEDAD
68	\N	02	15	MAMO
69	\N	01	16	PUERTO LA CRUZ
70	\N	02	16	POZUELOS
71	\N	01	17	ONOTO
72	\N	02	17	SAN PABLO
73	\N	01	18	MAPIRE
74	\N	02	18	PIAR
75	\N	03	18	SAN DIEGO DE CABRUTICA
76	\N	04	18	SANTA CLARA
77	\N	05	18	UVERITO
78	\N	06	18	ZUATA
79	\N	01	19	SAN MATEO
80	\N	02	19	EL CARITO
81	\N	03	19	SANTA INÉS
82	\N	01	20	CLARINES
83	\N	02	20	GUANAPE
84	\N	03	20	SABANA DE UCHIRE
85	\N	01	21	CANTAURA
86	\N	02	21	LIBERTADOR
87	\N	03	21	SANTA ROSA
88	\N	04	21	URICA
89	\N	01	22	PÍRITU
90	\N	02	22	SAN FRANCISCO
91	\N	01	23	SAN JOSÉ DE GUANIPA (EL TIGRITO)
92	\N	01	24	BOCA DE UCHIRE
93	\N	02	24	BOCA DE CHÁVEZ
94	\N	01	25	SANTA ANA
95	\N	02	25	PUEBLO NUEVO
96	\N	01	26	EL CARMEN
97	\N	02	26	SAN CRISTÓBAL
98	\N	03	26	BERGANTÍN
99	\N	04	26	CAIGUA
100	\N	05	26	EL PILAR
101	\N	06	26	NARICUAL
102	\N	01	27	EDMUNDO BARRIOS
103	\N	02	27	MIGUEL OTERO SILVA
104	\N	01	28	EL CHAPARRO
105	\N	02	28	TOMÁS ALFARO CALATRAVA
106	\N	01	29	LECHERÍAS
107	\N	02	29	EL MORRO
108	\N	01	30	ACHAGUAS
109	\N	02	30	APURITO
110	\N	03	30	EL YAGUAL
111	\N	04	30	GUACHARA
112	\N	05	30	MUCURITAS
113	\N	06	30	QUESERAS DEL MEDIO
114	\N	01	31	BIRUACA
115	\N	01	32	BRUZUAL
116	\N	02	32	MANTECAL
117	\N	03	32	QUINTERO
118	\N	04	32	RINCÓN HONDO
119	\N	05	32	SAN VICENTE
120	\N	01	33	GUASDUALITO
121	\N	02	33	ARAMENDI
122	\N	03	33	EL AMPARO
123	\N	04	33	SAN CAMILO
124	\N	05	33	URDANETA
125	\N	01	34	SAN JUAN DE PAYARA
126	\N	02	34	CODAZZI
127	\N	03	34	CUNAVICHE
128	\N	01	35	ELORZA
129	\N	02	35	LA TRINIDAD
130	\N	01	36	SAN FERNANDO
131	\N	02	36	EL RECREO
132	\N	03	36	PEÑALVER
133	\N	04	36	SAN RAFAEL DE ATAMAICA
134	\N	01	37	SAN MATEO
135	\N	01	38	CAMATAGUA
136	\N	02	38	CARMEN DE CURA
137	\N	02	39	CHORONÍ
138	\N	03	39	LAS DELICIAS
139	\N	04	39	MADRE MARÍA DE SAN JOSÉ
140	\N	05	39	JOAQUÍN CRESPO
141	\N	06	39	PEDRO JOSÉ OVALLES
142	\N	07	39	JOSÉ CASANOVA GODOY
143	\N	08	39	ANDRÉS ELOY BLANCO
144	\N	09	39	LOS TACARIGUAS
145	\N	01	40	SANTA CRUZ
146	\N	01	41	LA VICTORIA
147	\N	02	41	CASTOR NIEVES RÍOS
148	\N	03	41	LAS GUACAMAYAS
149	\N	04	41	PAO DE ZÁRATE
150	\N	05	41	ZUATA
151	\N	01	42	EL CONSEJO
152	\N	01	43	PALO NEGRO
153	\N	02	43	SAN MARTÍN DE PORRES
154	\N	01	44	EL LIMÓN
155	\N	02	44	CAÑA DE AZÚCAR
156	\N	01	45	SAN CASIMIRO
157	\N	02	45	GÜIRIPA
158	\N	03	45	OLLAS DE CARAMACATE
159	\N	04	45	VALLE MORÍN
160	\N	01	46	SAN SEBASTIÁN
161	\N	01	47	TURMERO
162	\N	02	47	ARÉVALO APONTE
163	\N	03	47	CHUAO
164	\N	04	47	SAMÁN DE GÜERE
165	\N	05	47	ALFREDO PACHECO MIRANDA
166	\N	01	48	LAS TEJERÍAS
167	\N	02	48	TIARA
168	\N	01	49	CAGUA
169	\N	02	49	BELLA VISTA
170	\N	01	50	LA COLONIA TOVAR
171	\N	01	51	BARBACOAS
172	\N	02	51	LAS PEÑITAS
173	\N	03	51	SAN FRANCISCO DE CARA
174	\N	04	51	TAGUAY
175	\N	01	52	VILLA DE CURA
176	\N	02	52	MAGDALENO
177	\N	03	52	SAN FRANCISCO DE ASÍS
178	\N	04	52	AUGUSTO MIJARES
179	\N	05	52	VALLES DE TUCUTUNEMO
180	\N	01	53	SANTA RITA
181	\N	02	53	FRANCISCO DE MIRANDA
182	\N	03	53	MONSEÑOR FELICIANO GONZÁLEZ
183	\N	01	54	OCUMARE DE LA COSTA
184	\N	01	55	SABANETA
185	\N	02	55	RODRÍGUEZ DOMÍNGUEZ
186	\N	01	56	TICOPORO
187	\N	02	56	ANDRÉS BELLO
188	\N	03	56	NICOLÁS PULIDO
189	\N	01	57	ARISMENDI
190	\N	02	57	GUADARRAMA
191	\N	03	57	LA UNIÓN
192	\N	04	57	SAN ANTONIO
193	\N	01	58	BARINAS
194	\N	02	58	ALFREDO ARVELO LARRIVA
195	\N	03	58	SAN SILVESTRE
196	\N	04	58	SANTA INÉS
197	\N	05	58	SANTA LUCÍA
198	\N	06	58	TORUNOS
199	\N	07	58	EL CARMEN
200	\N	08	58	RÓMULO BETANCOURT
201	\N	09	58	CORAZÓN DE JESÚS
202	\N	10	58	RAMÓN IGNACIO MÉNDEZ
203	\N	11	58	ALTO BARINAS
204	\N	12	58	MANUEL PALACIO FAJARDO
205	\N	13	58	JUAN ANTONIO RODRÍGUEZ DOMÍNGUEZ
206	\N	14	58	DOMINGA ORTIZ DE PÁEZ
207	\N	01	59	BARINITAS
208	\N	02	59	ALTAMIRA
209	\N	03	59	CALDERAS
210	\N	01	60	BARRANCAS
211	\N	02	60	EL SOCORRO
212	\N	03	60	MASPARRITO
213	\N	01	61	SANTA BÁRBARA
214	\N	02	61	JOSÉ IGNACIO DEL PUMAR
215	\N	03	61	PEDRO BRICEÑO MÉNDEZ
216	\N	04	61	RAMÓN IGNACIO MÉNDEZ
217	\N	01	62	OBISPOS
218	\N	02	62	EL REAL
219	\N	03	62	LA LUZ
220	\N	04	62	LOS GUASIMITOS
221	\N	01	63	CIUDAD BOLIVIA
222	\N	02	63	IGNACIO BRICEÑO
223	\N	03	63	JOSÉ FÉLIX RIBAS
224	\N	04	63	PÁEZ
225	\N	01	64	LIBERTAD
226	\N	02	64	DOLORES
227	\N	03	64	PALACIOS FAJARDO
228	\N	04	64	SANTA ROSA
229	\N	01	65	CIUDAD DE NUTRIAS
230	\N	02	65	EL REGALO
231	\N	03	65	PUERTO DE NUTRIAS
232	\N	04	65	SANTA CATALINA
233	\N	01	66	EL CANTÓN
234	\N	02	66	SANTA CRUZ DE GUACAS
235	\N	03	66	PUERTO VIVAS
236	\N	01	67	CACHAMAY
237	\N	02	67	CHIRICA
238	\N	03	67	DALLA COSTA
239	\N	04	67	ONCE DE ABRIL
240	\N	05	67	SIMÓN BOLÍVAR
241	\N	06	67	UNARE
242	\N	07	67	UNIVERSIDAD
243	\N	08	67	VISTA AL SOL
244	\N	09	67	POZO VERDE
245	\N	10	67	YOCOIMA
246	\N	01	68	SECCIÓN CEDEÑO
247	\N	02	68	ALTAGRACIA
248	\N	03	68	ASCENSIÓN FARRERAS
249	\N	04	68	GUANIAMO
250	\N	05	68	LA URBANA
251	\N	06	68	PIJIGUAOS
252	\N	01	69	EL CALLAO
253	\N	01	70	SECCIÓN GRAN SABANA
254	\N	02	70	IKABARÚ
255	\N	01	71	AGUA SALADA
256	\N	02	71	CATEDRAL
257	\N	03	71	JOSÉ ANTONIO PÁEZ
258	\N	04	71	LA SABANITA
259	\N	05	71	MARHUANTA
260	\N	06	71	VISTA HERMOSA
261	\N	07	71	ORINOCO
262	\N	08	71	PANAPANA
263	\N	09	71	ZEA
264	\N	01	72	SECCIÓN PIAR
265	\N	02	72	ANDRÉS ELOY BLANCO
266	\N	03	72	PEDRO COVA
267	\N	01	73	SECCIÓN RAÚL LEONI
268	\N	02	73	BARCELONETA
269	\N	03	73	SAN FRANCISCO
270	\N	04	73	SANTA BÁRBARA
271	\N	01	74	SECCIÓN ROSCIO
272	\N	02	74	SALOM
273	\N	01	75	SECCIÓN SIFONTES
274	\N	02	75	DALLA COSTA
275	\N	03	75	SAN ISIDRO
276	\N	01	76	SECCIÓN SUCRE
277	\N	02	76	ARIPAO
278	\N	03	76	GUARATARO
279	\N	04	76	LAS MAJADAS
280	\N	05	76	MOITACO
281	\N	01	77	EL PALMAR
282	\N	01	78	BEJUMA
283	\N	02	78	CANOABO
284	\N	03	78	SIMÓN BOLÍVAR
285	\N	01	79	GÜIGÜE
286	\N	02	79	BELÉN
287	\N	03	79	TACARIGUA
288	\N	01	80	AGUAS CALIENTES
289	\N	02	80	MARIARA
290	\N	01	81	CIUDAD ALIANZA
291	\N	02	81	GUACARA
292	\N	03	81	YAGUA
293	\N	01	82	MORÓN
294	\N	02	82	URAMA
295	\N	01	83	TOCUYITO
296	\N	02	83	INDEPENDENCIA
297	\N	01	84	LOS GUAYOS
298	\N	01	85	MIRANDA
299	\N	01	86	MONTALBÁN
300	\N	01	87	NAGUANAGUA
301	\N	01	88	BARTOLOMÉ SALOM
302	\N	02	88	DEMOCRACIA
303	\N	03	88	FRATERNIDAD
304	\N	04	88	GOAIGOAZA
305	\N	05	88	JUAN JOSÉ FLORES
306	\N	06	88	UNIÓN
307	\N	07	88	BORBURATA
308	\N	08	88	PATANEMO
309	\N	01	89	SAN DIEGO
310	\N	01	90	SAN JOAQUÍN
311	\N	01	91	CANDELARIA
312	\N	02	91	CATEDRAL
313	\N	03	91	EL SOCORRO
314	\N	04	91	MIGUEL PEÑA
315	\N	05	91	RAFAEL URDANETA
316	\N	06	91	SAN BLAS
317	\N	07	91	SAN JOSÉ
318	\N	08	91	SANTA ROSA
319	\N	09	91	NEGRO PRIMERO
320	\N	01	92	COJEDES
321	\N	02	92	JUAN DE MATA SUÁREZ
322	\N	01	93	TINAQUILLO
323	\N	01	94	EL BAÚL
324	\N	02	94	SUCRE
325	\N	01	95	MACAPO
326	\N	02	95	LA AGUADITA
327	\N	01	96	EL PAO
328	\N	01	97	LIBERTAD DE COJEDES
329	\N	02	97	EL AMPARO
330	\N	01	98	RÓMULO GALLEGOS
331	\N	01	99	SAN CARLOS DE AUSTRIA
332	\N	02	99	JUAN ANGEL BRAVO
333	\N	03	99	MANUEL MANRIQUE
334	\N	01	100	GENERAL EN JEFE JOSÉ LAURENCIO SILVA
335	\N	01	101	CURIAPO
336	\N	02	101	ALMIRANTE LUIS BRIÓN
337	\N	03	101	FRANCISCO ANICETO LUGO
338	\N	04	101	MANUEL RENAUD
339	\N	05	101	PADRE BARRAL
340	\N	06	101	SANTOS DE ABELGAS
341	\N	01	102	IMATACA
342	\N	02	102	CINCO DE JULIO
343	\N	03	102	JUAN BAUTISTA ARISMENDI
344	\N	04	102	MANUEL PIAR
345	\N	05	102	RÓMULO GALLEGOS
346	\N	01	103	PEDERNALES
347	\N	02	103	LUIS BELTRÁN PRIETO FIGUEROA
348	\N	01	104	SAN JOSÉ
349	\N	02	104	JOSÉ VIDAL MARCANO
350	\N	03	104	JUAN MILLÁN
351	\N	04	104	LEONARDO RUÍZ PINEDA
352	\N	05	104	MARISCAL ANTONIO JOSÉ DE SUCRE
353	\N	06	104	MONSEÑOR ARGIMIRO GARCÍA
354	\N	07	104	SAN RAFAEL
355	\N	08	104	VIRGEN DEL VALLE
356	\N	01	105	SAN JUAN DE LOS CAYOS
357	\N	02	105	CAPADARE
358	\N	03	105	LA PASTORA
359	\N	04	105	LIBERTADOR
360	\N	01	106	SAN LUIS
361	\N	02	106	ARACUA
362	\N	03	106	LA PEÑA
363	\N	01	107	CAPATÁRIDA
364	\N	02	107	BARIRO
365	\N	03	107	BOROJÓ
366	\N	04	107	GUAJIRO
367	\N	05	107	SEQUE
368	\N	06	107	ZAZÁRIDA
369	\N	01	108	YARACAL
370	\N	01	109	CARIRUBANA
371	\N	02	109	NORTE
372	\N	03	109	PUNTA CARDÓN
373	\N	04	109	SANTA ANA
374	\N	01	110	LA VELA DE CORO
375	\N	02	110	ACURIGUA
376	\N	03	110	GUAIBACOA
377	\N	04	110	LAS CALDERAS
378	\N	05	110	MACORUCA
379	\N	01	111	DABAJURO
380	\N	01	112	PEDREGAL
381	\N	02	112	AGUA CLARA
382	\N	03	112	AVARIA
383	\N	04	112	PIEDRA GRANDE
384	\N	05	112	PURURECHE
385	\N	01	113	PUEBLO NUEVO
386	\N	02	113	ADÍCORA
387	\N	03	113	BARAIVED
388	\N	04	113	BUENA VISTA
389	\N	05	113	JADACAQUIVA
390	\N	06	113	MORUY
391	\N	07	113	ADAURE
392	\N	08	113	EL HATO
393	\N	09	113	EL VÍNCULO
394	\N	01	114	CHURUGUARA
395	\N	02	114	AGUA LARGA
396	\N	03	114	PAUJÍ
397	\N	04	114	INDEPENDENCIA
398	\N	05	114	MAPARARÍ
399	\N	01	115	JACURA
400	\N	02	115	AGUA LINDA
401	\N	03	115	ARAURIMA
402	\N	01	116	LOS TAQUES
403	\N	02	116	JUDIBANA
404	\N	01	117	MENE DE MAUROA
405	\N	02	117	CASIGUA
406	\N	03	117	SAN FÉLIX
407	\N	01	118	SAN ANTONIO
408	\N	02	118	SAN GABRIEL
409	\N	03	118	SANTA ANA
410	\N	04	118	GUZMÁN GUILLERMO
411	\N	05	118	MITARE
412	\N	06	118	RÍO SECO
413	\N	07	118	SABANETA
414	\N	01	119	CHICHIRIVICHE
415	\N	02	119	BOCA DE TOCUYO
416	\N	03	119	TOCUYO DE LA COSTA
417	\N	01	120	PALMASOLA
418	\N	01	121	CABURE
419	\N	02	121	COLINA
420	\N	03	121	CURIMAGUA
421	\N	01	122	PÍRITU
422	\N	02	122	SAN JOSÉ DE LA COSTA
423	\N	01	123	MIRIMIRE
424	\N	01	124	TUCACAS
425	\N	02	124	BOCA DE AROA
426	\N	01	125	SUCRE
427	\N	02	125	PECAYA
428	\N	01	126	TOCÓPERO
429	\N	01	127	SANTA CRUZ DE BUCARAL
430	\N	02	127	EL CHARAL
431	\N	03	127	LAS VEGAS DEL TUY
432	\N	01	128	URUMACO
433	\N	02	128	BRUZUAL
434	\N	01	129	PUERTO CUMAREBO
435	\N	02	129	LA CIÉNAGA
436	\N	03	129	LA SOLEDAD
437	\N	04	129	PUEBLO CUMAREBO
438	\N	05	129	ZAZÁRIDA
439	\N	01	130	CAMAGUÁN
440	\N	02	130	PUERTO MIRANDA
441	\N	03	130	UVERITO
442	\N	01	131	CHAGUARAMAS
443	\N	01	132	EL SOCORRO
444	\N	01	133	GUAYABAL
445	\N	02	133	CAZORLA
446	\N	01	134	VALLE DE LA PASCUA
447	\N	02	134	ESPINO
448	\N	01	135	LAS MERCEDES
449	\N	02	135	CABRUTA
450	\N	03	135	SANTA RITA DE MANAPIRE
451	\N	01	136	EL SOMBRERO
452	\N	02	136	SOSA
453	\N	01	137	CALABOZO
454	\N	02	137	EL CALVARIO
455	\N	03	137	EL RASTRO
456	\N	04	137	GUARDATINAJAS
457	\N	01	139	ALTAGRACIA DE ORITUCO
458	\N	02	139	LEZAMA
459	\N	03	139	LIBERTAD DE ORITUCO
460	\N	04	139	PASO REAL DE MACAIRA
461	\N	05	139	SAN FRANCISCO DE MACAIRA
462	\N	06	139	SAN RAFAEL DE ORITUCO
463	\N	07	139	SOUBLETTE
464	\N	01	140	ORTIZ
465	\N	02	140	SAN FRANCISCO DE TIZNADOS
466	\N	03	140	SAN JOSÃ DE TIZNADOS
467	\N	04	140	SAN LORENZO DE TIZNADOS
468	\N	01	141	TUCUPIDO
469	\N	02	141	SAN RAFAEL DE LAYA
470	\N	01	142	SAN JUAN DE LOS MORROS
471	\N	02	142	CANTAGALLO
472	\N	03	142	PARAPARA
473	\N	01	143	SAN JOSÉ DE GUARIBE
474	\N	01	144	SANTA MARÍA DE IPIRE
475	\N	02	144	ALTAMIRA
476	\N	01	145	ZARAZA
477	\N	02	145	SAN JOSÉ DE UNARE
478	\N	01	146	PÍO TAMAYO
479	\N	02	146	QUEBRADA HONDA DE GUACHE
480	\N	03	146	YACAMBÚ
481	\N	01	147	FRÉITEZ
482	\N	02	147	JOSÉ MARÍA BLANCO
483	\N	01	148	CATEDRAL
484	\N	02	148	CONCEPCIÓN
485	\N	03	148	EL CUJÍ
486	\N	04	148	JUAN DE VILLEGAS
487	\N	05	148	SANTA ROSA
488	\N	06	148	TAMACA
489	\N	07	148	UNIÓN
490	\N	08	148	AGUEDO FELIPE ALVARADO
491	\N	09	148	BUENA VISTA
492	\N	10	148	JUÁREZ
493	\N	01	149	JUAN BAUTISTA RODRÍGUEZ
494	\N	02	149	CUARA
495	\N	03	149	DIEGO DE LOZADA
496	\N	04	149	PARAÍSO DE SAN JOSÉ
497	\N	05	149	SAN MIGUEL
498	\N	06	149	TINTORERO
499	\N	07	149	JOSÉ BERNARDO DORANTE
500	\N	08	149	CORONEL MARIANO PERAZA
501	\N	01	150	BOLÍVAR
502	\N	02	150	ANZOÁTEGUI
503	\N	03	150	GUARICO
504	\N	04	150	HILARIO LUNA Y LUNA
505	\N	05	150	HUMOCARO ALTO
506	\N	06	150	HUMOCARO BAJO
507	\N	07	150	LA CANDELARIA
508	\N	08	150	MORÁN
509	\N	01	151	CABUDARE
510	\N	02	151	JOSÉ GREGORIO BASTIDAS
511	\N	03	151	AGUA VIVA
512	\N	01	152	SARARE
513	\N	02	152	BURÍA
514	\N	03	152	GUSTAVO VEGAS LEÓN
515	\N	01	153	TRINIDAD SAMUEL
516	\N	02	153	ANTONIO DÍAZ
517	\N	03	153	CAMACARO
518	\N	04	153	CASTAÑEDA
519	\N	05	153	CECILIO ZUBILLAGA
520	\N	06	153	CHIQUINQUIRÁ
521	\N	07	153	EL BLANCO
522	\N	08	153	ESPINOZA DE LOS MONTEROS
523	\N	09	153	LARA
524	\N	10	153	LAS MERCEDES
525	\N	11	153	MANUEL MORILLO
526	\N	12	153	MONTAÑA VERDE
527	\N	13	153	MONTES DE OCA
528	\N	14	153	TORRES
529	\N	15	153	HERIBERTO ARROYO
530	\N	16	153	REYES VARGAS
531	\N	17	153	ALTAGRACIA
532	\N	01	154	SIQUISIQUE
533	\N	02	154	MOROTURO
534	\N	03	154	SAN MIGUEL
535	\N	04	154	XAGUAS
536	\N	01	155	PRESIDENTE BETANCOURT
537	\N	02	155	PRESIDENTE PÁEZ
538	\N	03	155	PRESIDENTE RÓMULO GALLEGOS
539	\N	04	155	GABRIEL PICÓN GONZÁLEZ
540	\N	05	155	HÉCTOR AMABLE MORA
541	\N	06	155	JOSÉ NUCETE SARDI
542	\N	07	155	PULIDO MÉNDEZ
543	\N	01	156	LA AZULITA
544	\N	01	157	SANTA CRUZ DE MORA
545	\N	02	157	MESA BOLÍVAR
546	\N	03	157	MESA DE LAS PALMAS
547	\N	01	158	ARICAGUA
548	\N	02	158	SAN ANTONIO
549	\N	01	159	CANAGUÁ
550	\N	02	159	CAPURÍ
551	\N	03	159	CHACANTÁ
552	\N	04	159	EL MOLINO
553	\N	05	159	GUAIMARAL
554	\N	06	159	MUCUTUY
555	\N	07	159	MUCUCHACHÍ
556	\N	01	160	FERNÁNDEZ PEÑA
557	\N	02	160	MATRIZ
558	\N	03	160	MONTALBÁN
559	\N	04	160	ACEQUIAS
560	\N	05	160	JAJÍ
561	\N	06	160	LA MESA
562	\N	07	160	SAN JOSÉ DEL SUR
563	\N	01	161	TUCANÍ
564	\N	02	161	FLORENCIO RAMÍREZ
565	\N	01	162	SANTO DOMINGO
566	\N	02	162	LAS PIEDRAS
567	\N	01	163	GUARAQUE
568	\N	02	163	MESA DE QUINTERO
569	\N	03	163	RÍO NEGRO
570	\N	01	164	ARAPUEY
571	\N	02	164	PALMIRA
572	\N	01	165	TORONDOY
573	\N	02	165	SAN CRISTÓBAL DE TORONDOY
574	\N	01	166	ANTONIO SPINETTI DINI
575	\N	02	166	ARIAS
576	\N	03	166	CARACCIOLO PARRA PÉREZ
577	\N	04	166	DOMINGO PEÑA
578	\N	05	166	EL LLANO
579	\N	06	166	GONZALO PICÓN FEBRES
580	\N	07	166	JACINTO PLAZA
581	\N	08	166	JUAN RODRÍGUEZ SUÁREZ
582	\N	09	166	LASSO DE LA VEGA
583	\N	10	166	MARIANO PICÓN SALAS
584	\N	11	166	MILLA
585	\N	12	166	OSUNA RODRÍGUEZ
586	\N	13	166	SAGRARIO
587	\N	14	166	EL MORRO
588	\N	15	166	LOS NEVADOS
589	\N	01	167	TIMOTES
590	\N	02	167	ANDRÉS ELOY BLANCO
591	\N	03	167	LA VENTA
592	\N	04	167	PIÑANGO
593	\N	01	168	SANTA ELENA DE ARENALES
594	\N	02	168	ELOY PAREDES
595	\N	03	168	SAN RAFAEL DE ALCÁZAR
596	\N	01	169	SANTA MARÍA DE CAPARO
597	\N	01	170	PUEBLO LLANO
598	\N	01	171	MUCUCHÍES
599	\N	02	171	CACUTE
600	\N	03	171	LA TOMA
601	\N	04	171	MUCURUBÁ
602	\N	05	171	SAN RAFAEL
603	\N	01	172	BAILADORES
604	\N	02	172	GERÓNIMO MALDONADO
605	\N	01	173	TABAY
606	\N	01	174	LAGUNILLAS
607	\N	02	174	CHIGUARÁ
608	\N	03	174	ESTÁNQUEZ
609	\N	04	174	LA TRAMPA
610	\N	05	174	PUEBLO NUEVO DEL SUR
611	\N	06	174	SAN JUAN
612	\N	01	175	EL AMPARO
613	\N	02	175	EL LLANO
614	\N	03	175	SAN FRANCISCO
615	\N	04	175	TOVAR
616	\N	01	176	NUEVA BOLIVIA
617	\N	02	176	INDEPENDENCIA
618	\N	03	176	MARÍA DE LA CONCEPCIÓN PALACIOS BLANCO
619	\N	04	176	SANTA APOLONIA
620	\N	01	177	ZEA
621	\N	02	177	CAÑO EL TIGRE
622	\N	01	178	CAUCAGUA
623	\N	02	178	ARAGÜITA
624	\N	03	178	ARÉVALO GONZÁLEZ
625	\N	04	178	CAPAYA
626	\N	05	178	EL CAFÉ
627	\N	06	178	MARIZAPA
628	\N	07	178	PANAQUIRE
629	\N	08	178	RIBAS
630	\N	01	179	SAN JOSÉ DE BARLOVENTO
631	\N	02	179	CUMBO
632	\N	01	180	BARUTA
633	\N	02	180	EL CAFETAL
634	\N	03	180	LAS MINAS DE BARUTA
635	\N	01	181	HIGUEROTE
636	\N	02	181	CURIEPE
637	\N	03	181	TACARIGUA
638	\N	01	182	MAMPORAL
639	\N	01	183	CARRIZAL
640	\N	01	184	CHACAO
641	\N	01	185	CHARALLAVE
642	\N	02	185	LAS BRISAS
643	\N	01	186	EL HATILLO
644	\N	01	187	LOS TEQUES
645	\N	02	187	ALTAGRACIA DE LA MONTAÑA
646	\N	03	187	CECILIO ACOSTA
647	\N	04	187	EL JARILLO
648	\N	05	187	PARACOTOS
649	\N	06	187	SAN PEDRO
650	\N	07	187	TÁCATA
651	\N	01	188	SANTA TERESA DEL TUY
652	\N	02	188	EL CARTANAL
653	\N	01	189	OCUMARE DEL TUY
654	\N	02	189	LA DEMOCRACIA
655	\N	03	189	SANTA BÁRBARA
656	\N	01	190	SAN ANTONIO DE LOS ALTOS
657	\N	01	191	RÍO CHICO
658	\N	02	191	EL GUAPO
659	\N	03	191	TACARIGUA DE LA LAGUNA
660	\N	04	191	PAPARO
661	\N	05	191	SAN FERNANDO DEL GUAPO
662	\N	01	192	SANTA LUCÍA
663	\N	01	193	CÚPIRA
664	\N	02	193	MACHURUCUTO
665	\N	01	194	GUARENAS
666	\N	01	195	SAN FRANCISCO DE YARE
667	\N	02	195	SAN ANTONIO DE YARE
668	\N	01	196	PETARE
669	\N	02	196	CAUCAGÜITA
670	\N	03	196	FILA DE MARICHES
671	\N	04	196	LA DOLORITA
672	\N	05	196	LEONCIO MARTÍNEZ
673	\N	01	197	CÚA
674	\N	02	197	NUEVA CÚA
675	\N	01	198	GUATIRE
676	\N	02	198	BOLÍVAR
677	\N	01	199	SAN ANTONIO
678	\N	02	199	SAN FRANCISCO
679	\N	01	200	AGUASAY
680	\N	01	201	CARIPITO
681	\N	01	202	CARIPE
682	\N	02	202	EL GUÁCHARO
683	\N	03	202	LA GUANOTA
684	\N	04	202	SABANA DE PIEDRA
685	\N	05	202	SAN AGUSTÍN
686	\N	06	202	TERESÉN
687	\N	01	203	CAICARA
688	\N	02	203	AREO
689	\N	03	203	SAN FÉLIX
690	\N	04	203	VIENTO FRESCO
691	\N	01	204	PUNTA DE MATA
692	\N	02	204	EL TEJERO
693	\N	01	205	TEMBLADOR
694	\N	02	205	CHAGUARAMAS
695	\N	03	205	LAS ALHUACAS
696	\N	04	205	TABASCA
697	\N	01	206	MATURÍN
698	\N	02	206	ALTO DE LOS GODOS
699	\N	03	206	BOQUERÓN
700	\N	04	206	LAS COCUIZAS
701	\N	05	206	SAN SIMÓN
702	\N	06	206	SANTA CRUZ
703	\N	07	206	EL COROZO
704	\N	08	206	EL FURRIAL
705	\N	09	206	JUSEPÍN
706	\N	10	206	LA PICA
707	\N	11	206	SAN VICENTE
708	\N	01	207	ARAGUA
709	\N	02	207	APARICIO
710	\N	03	207	CHAGUARAMAL
711	\N	04	207	EL PINTO
712	\N	05	207	GUANAGUANA
713	\N	06	207	LA TOSCANA
714	\N	07	207	TAGUAYA
715	\N	01	208	QUIRIQUIRE
716	\N	02	208	CACHIPO
717	\N	01	209	SANTA BÁRBARA
718	\N	01	210	BARRANCAS
719	\N	02	210	LOS BARRANCOS DE FAJARDO
720	\N	01	211	URACOA
721	\N	01	212	LA PLAZA DE PARAGUACHÍ
722	\N	01	213	LA ASUNCIÓN
723	\N	01	214	SAN JUAN BAUTISTA
724	\N	02	214	ZABALA
725	\N	01	215	EL VALLE DEL ESPÍRITU SANTO
726	\N	02	215	FRANCISCO FAJARDO
727	\N	01	216	SANTA ANA
728	\N	02	216	BOLÍVAR
729	\N	03	216	GUEVARA
730	\N	04	216	MATASIETE
731	\N	05	216	SUCRE
732	\N	01	217	PAMPATAR
733	\N	02	217	AGUIRRE
734	\N	01	218	JUANGRIEGO
735	\N	02	218	ADRIÁN
736	\N	01	219	PORLAMAR
737	\N	01	220	BOCA DEL RÍO
738	\N	02	220	SAN FRANCISCO
739	\N	01	221	PUNTA DE PIEDRAS
740	\N	02	221	LOS BARALES
741	\N	01	222	SAN PEDRO DE COCHE
742	\N	02	222	VICENTE FUENTES
743	\N	01	223	AGUA BLANCA
744	\N	01	224	ARAURE
745	\N	02	224	RÍO ACARIGUA
746	\N	01	225	PÍRITU
747	\N	02	225	UVERAL
748	\N	01	226	GUANARE
749	\N	02	226	CÓRDOBA
750	\N	03	226	SAN JOSÉ DE LA MONTAÑA
751	\N	04	226	SAN JUAN DE GUANAGUANARE
752	\N	05	226	VIRGEN DE LA COROMOTO
753	\N	01	227	GUANARITO
754	\N	02	227	TRINIDAD DE LA CAPILLA
755	\N	03	227	DIVINA PASTORA
756	\N	01	228	PARAÍSO DE CHABASQUÉN
757	\N	02	228	PEÑA BLANCA
758	\N	01	229	OSPINO
759	\N	02	229	APARICIÓN
760	\N	03	229	LA ESTACIÓN
761	\N	01	230	ACARIGUA
762	\N	02	230	PAYARA
763	\N	03	230	PIMPINELA
764	\N	04	230	RAMÓN PERAZA
765	\N	01	231	PAPELÓN
766	\N	02	231	CAÑO DELGADITO
767	\N	01	232	BOCONOITO
768	\N	02	232	ANTOLÍN TOVAR
769	\N	01	233	SAN RAFAEL DE ONOTO
770	\N	02	233	SANTA FE
771	\N	03	233	THERMO MORLES
772	\N	01	234	EL PLAYÓN
773	\N	02	234	FLORIDA
774	\N	01	235	BISCUCUY
775	\N	02	235	CONCEPCIÓN
776	\N	03	235	SAN RAFAEL DE PALO ALZADO
777	\N	04	235	UVENCIO ANTONIO VELÁSQUEZ
778	\N	05	235	SAN JOSÉ DE SAGUAZ
779	\N	06	235	VILLA ROSA
780	\N	01	236	VILLA BRUZUAL
781	\N	02	236	CANELONES
782	\N	03	236	SANTA CRUZ
783	\N	04	236	SAN ISIDRO LABRADOR
784	\N	01	237	MARIÑO
785	\N	02	237	RÓMULO GALLEGOS
786	\N	01	238	SAN JOSÉ DE AEROCUAR
787	\N	02	238	TAVERA ACOSTA
788	\N	01	239	RÍO CARIBE
789	\N	02	239	ANTONIO JOSÉ DE SUCRE
790	\N	03	239	EL MORRO DE PUERTO SANTO
791	\N	04	239	PUERTO SANTO
792	\N	05	239	SAN JUAN DE LAS GALDONAS
793	\N	01	240	EL PILAR
794	\N	02	240	EL RINCÓN
795	\N	03	240	GENERAL FRANCISCO ANTONIO VÁSQUEZ
796	\N	04	240	GUARAÚNOS
797	\N	05	240	TUNAPUICITO
798	\N	06	240	UNIÓN
799	\N	01	241	BOLÍVAR
800	\N	02	241	MACARAPANA
801	\N	03	241	SANTA CATALINA
802	\N	04	241	SANTA ROSA
803	\N	05	241	SANTA TERESA
804	\N	01	242	MARIGÜITAR
805	\N	01	243	YAGUARAPARO
806	\N	02	243	EL PAUJIL
807	\N	03	243	LIBERTAD
808	\N	01	244	ARAYA
809	\N	02	244	CHACOPATA
810	\N	03	244	MANICUARE
811	\N	01	245	TUNAPUY
812	\N	02	245	CAMPO ELÍAS
813	\N	01	246	IRAPA
814	\N	02	246	CAMPO CLARO
815	\N	03	246	MARABAL
816	\N	04	246	SAN ANTONIO DE IRAPA
817	\N	05	246	SORO
818	\N	01	247	SAN ANTONIO DEL GOLFO
819	\N	01	248	CUMANACOA
820	\N	02	248	ARENAS
821	\N	03	248	ARICAGUA
822	\N	04	248	COCOLLAR
823	\N	05	248	SAN FERNANDO
824	\N	06	248	SAN LORENZO
825	\N	01	249	CARIACO
826	\N	02	249	CATUARO
827	\N	03	249	RENDÓN
828	\N	04	249	SANTA CRUZ
829	\N	05	249	SANTA MARÍA
830	\N	01	250	ALTAGRACIA
831	\N	02	250	AYACUCHO
832	\N	03	250	SANTA INÉS
833	\N	04	250	VALENTÍN VALIENTE
834	\N	05	250	SAN JUAN
835	\N	06	250	RAÚL LEONI
836	\N	07	250	SANTA FE
837	\N	01	251	GÜIRIA
838	\N	02	251	BIDEAU
839	\N	03	251	CRISTÓBAL COLÓN
840	\N	04	251	PUNTA DE PIEDRAS
841	\N	01	252	CORDERO
842	\N	01	253	LAS MESAS
843	\N	01	254	COLÓN
844	\N	02	254	RIVAS BERTI
845	\N	03	254	SAN PEDRO DEL RÍO
846	\N	01	255	SAN ANTONIO DEL TÁCHIRA
847	\N	02	255	PALOTAL
848	\N	03	255	JUAN VICENTE GÓMEZ
849	\N	04	255	ISAÍAS MEDINA ANGARITA
850	\N	01	256	TÁRIBA
851	\N	02	256	AMENODORO RANGEL LAMÚS
852	\N	03	256	LA FLORIDA
853	\N	01	257	SANTA ANA
854	\N	01	258	SAN RAFAEL DEL PIÑAL
855	\N	02	258	ALBERTO ADRIANI
856	\N	03	258	SANTO DOMINGO
857	\N	01	259	SAN JOSÉ DE BOLÍVAR
858	\N	01	260	LA FRÍA
859	\N	02	260	BOCA DE GRITA
860	\N	03	260	JOSÉ ANTONIO PÁEZ
861	\N	01	261	PALMIRA
862	\N	01	262	CAPACHO NUEVO
863	\N	02	262	JUAN GERMÁN ROSCIO
864	\N	03	262	ROMÁN CÁRDENAS
865	\N	01	263	LA GRITA
866	\N	02	263	EMILIO CONSTANTINO GUERRERO
867	\N	03	263	MONSEÑOR MIGUEL ANTONIO SALAS
868	\N	01	264	EL COBRE
869	\N	01	265	RUBIO
870	\N	02	265	LA PETRÓLEA
871	\N	03	265	QUINIMARÍ
872	\N	04	265	BRAMÓN
873	\N	01	266	CAPACHO VIEJO
874	\N	02	266	CIPRIANO CASTRO
875	\N	03	266	MANUEL FELIPE RUGELES
876	\N	01	267	ABEJALES
877	\N	02	267	EMETERIO OCHOA
878	\N	03	267	DORADAS
879	\N	04	267	SAN JOAQUÍN DE NAVAY
880	\N	01	268	LOBATERA
881	\N	02	268	CONSTITUCIÓN
882	\N	01	269	MICHELENA
883	\N	01	270	COLONCITO
884	\N	02	270	LA PALMITA
885	\N	01	271	UREÑA
886	\N	02	271	NUEVA ARCADIA
887	\N	01	272	DELICIAS
888	\N	01	273	LA TENDIDA
889	\N	02	273	BOCONÓ
890	\N	03	273	HERNÁNDEZ
891	\N	01	274	LA CONCORDIA
892	\N	02	274	PEDRO MARÍA MORANTES
893	\N	03	274	SAN JUAN BAUTISTA
894	\N	04	274	SAN SEBASTIÁN
895	\N	05	274	DR. FRANCISCO ROMERO LOBO
896	\N	01	275	SEBORUCO
897	\N	01	276	SAN SIMÓN
898	\N	01	277	QUENIQUEA
899	\N	02	277	ELEAZAR LÓPEZ CONTRERAS
900	\N	03	277	SAN PABLO
901	\N	01	278	SAN JOSECITO
902	\N	01	279	PREGONERO
903	\N	02	279	CÁRDENAS
904	\N	03	279	JUAN PABLO PEÑALOZA
905	\N	04	279	POTOSÍ
906	\N	01	280	UMUQUENA
907	\N	01	281	SANTA ISABEL
908	\N	02	281	ARAGUANEY
909	\N	03	281	EL JAGÜITO
910	\N	04	281	LA ESPERANZA
911	\N	01	282	BOCONÓ
912	\N	02	282	EL CARMEN
913	\N	03	282	MOSQUEY
914	\N	04	282	AYACUCHO
915	\N	05	282	BURBUSAY
916	\N	06	282	GENERAL RIVAS
917	\N	07	282	GUARAMACAL
918	\N	08	282	VEGA DE GUARAMACAL
919	\N	09	282	MONSEÑOR JÁUREGUI
920	\N	10	282	RAFAEL RANGEL
921	\N	11	282	SAN MIGUEL
922	\N	12	282	SAN JOSÉ
923	\N	01	283	SABANA GRANDE
924	\N	02	283	CHEREGÜÉ
925	\N	03	283	GRANADOS
926	\N	01	284	CHEJENDÉ
927	\N	02	284	ARNOLDO GABALDÓN
928	\N	03	284	BOLIVIA
929	\N	04	284	CARRILLO
930	\N	05	284	CEGARRA
931	\N	06	284	MANUEL SALVADOR ULLOA
932	\N	07	284	SAN JOSÉ
933	\N	01	285	CARACHE
934	\N	02	285	CUICAS
935	\N	03	285	LA CONCEPCIÓN
936	\N	04	285	PANAMERICANA
937	\N	05	285	SANTA CRUZ
938	\N	01	286	ESCUQUE
939	\N	02	286	LA UNIÓN
940	\N	03	286	SABANA LIBRE
941	\N	04	286	SANTA RITA
942	\N	01	287	EL SOCORRO
943	\N	02	287	ANTONIO JOSÉ DE SUCRE
944	\N	03	287	LOS CAPRICHOS
945	\N	01	288	CAMPO ELÍAS
946	\N	02	288	ARNOLDO GABALDÓN
947	\N	01	289	SANTA APOLONIA
948	\N	02	289	EL PROGRESO
949	\N	03	289	LA CEIBA
950	\N	04	289	TRES DE FEBRERO
951	\N	01	290	EL DIVIDIVE
952	\N	02	290	AGUA SANTA
953	\N	03	290	AGUA CALIENTE
954	\N	04	290	EL CENIZO
955	\N	05	290	VALERITA
956	\N	01	291	MONTE CARMELO
957	\N	02	291	BUENA VISTA
958	\N	03	291	SANTA MARÍA DEL HORCÓN
959	\N	01	292	MOTATÁN
960	\N	02	292	EL BAÑO
961	\N	03	292	JALISCO
962	\N	01	293	PAMPÁN
963	\N	02	293	FLOR DE PATRIA
964	\N	04	293	LA PAZ
965	\N	05	293	SANTA ANA
966	\N	01	294	PAMPANITO
967	\N	02	294	LA CONCEPCIÓN
968	\N	03	294	PAMPANITO II
969	\N	01	295	BETIJOQUE
970	\N	02	295	LA PUEBLITA
971	\N	03	295	LOS CEDROS
972	\N	04	295	JOSÉ GREGORIO HERNÁNDEZ
973	\N	01	296	CARVAJAL
974	\N	02	296	ANTONIO NICOLÁS BRICEÑO
975	\N	03	296	CAMPO ALEGRE
976	\N	04	296	JOSÉ LEONARDO SUÁREZ
977	\N	01	297	SABANA DE MENDOZA
978	\N	02	297	EL PARAÍSO
979	\N	03	297	JUNÍN
980	\N	04	297	VALMORE RODRÍGUEZ
981	\N	01	298	ANDRÉS LINARES
982	\N	02	298	CHIQUINQUIRÁ
983	\N	03	298	CRISTÓBAL MENDOZA
984	\N	04	298	CRUZ CARRILLO
985	\N	05	298	MATRIZ
986	\N	06	298	MONSEÑOR CARRILLO
987	\N	07	298	TRES ESQUINAS
988	\N	01	299	LA QUEBRADA
989	\N	02	299	CABIMBÚ
990	\N	03	299	JAJÓ
991	\N	04	299	LA MESA
992	\N	05	299	SANTIAGO
993	\N	06	299	TUÑAME
994	\N	01	300	JUAN IGNACIO MONTILLA
995	\N	02	300	LA BEATRIZ
996	\N	03	300	MERCEDES DÍAZ
997	\N	04	300	SAN LUIS
998	\N	05	300	LA PUERTA
999	\N	06	300	MENDOZA
1000	\N	01	301	SAN PABLO
1001	\N	01	302	AROA
1002	\N	01	303	CHIVACOA
1003	\N	02	303	CAMPO ELÍAS
1004	\N	01	304	COCOROTE
1005	\N	01	305	INDEPENDENCIA
1006	\N	01	306	SABANA DE PARRA
1007	\N	01	307	BORAURE
1008	\N	01	308	YUMARE
1009	\N	01	309	NIRGUA
1010	\N	02	309	SALOM
1011	\N	03	309	TEMERLA
1012	\N	01	310	YARITAGUA
1013	\N	02	310	SAN ANDRÉS
1014	\N	01	311	SAN FELIPE
1015	\N	02	311	ALBARICO
1016	\N	03	311	SAN JAVIER
1017	\N	01	312	GUAMA
1018	\N	01	313	URACHICHE
1019	\N	01	314	FARRIAR
1020	\N	02	314	EL GUAYABO
1021	\N	01	315	ISLA DE TOAS
1022	\N	02	315	MONAGAS
1023	\N	01	316	SAN TIMOTEO
1024	\N	02	316	GENERAL URDANETA
1025	\N	03	316	LIBERTADOR
1026	\N	04	316	MANUEL GUANIPA MATOS
1027	\N	05	316	MARCELINO BRICEÑO
1028	\N	06	316	PUEBLO NUEVO
1029	\N	01	317	AMBROSIO
1030	\N	02	317	CARMEN HERRERA
1031	\N	03	317	GERMÁN RÍOS LINARES
1032	\N	04	317	LA ROSA
1033	\N	05	317	JORGE HERNÁNDEZ
1034	\N	06	317	RÓMULO BETANCOURT
1035	\N	07	317	SAN BENITO
1036	\N	08	317	ARÍSTIDES CALVANI
1037	\N	09	317	PUNTA GORDA
1038	\N	01	318	ENCONTRADOS
1039	\N	02	318	UDÓN PÉREZ
1040	\N	01	319	SAN CARLOS DEL ZULIA
1041	\N	02	319	MORALITO
1042	\N	03	319	SANTA BÁRBARA
1043	\N	04	319	SANTA CRUZ DEL ZULIA
1044	\N	05	319	URRIBARRI
1045	\N	01	320	SIMÓN RODRÍGUEZ
1046	\N	02	320	CARLOS QUEVEDO
1047	\N	03	320	FRANCISCO JAVIER PULGAR
1048	\N	01	321	LA CONCEPCIÓN
1049	\N	02	321	JOSÉ RAMÓN YEPES
1050	\N	03	321	MARIANO PARRA LEÓN
1051	\N	04	321	SAN JOSÉ
1052	\N	01	322	JESÚS MARÍA SEMPRÚN
1053	\N	02	322	BARÍ
1054	\N	01	323	CONCEPCIÓN
1055	\N	02	323	ANDRÉS BELLO
1056	\N	03	323	CHIQUINQUIRÁ
1057	\N	04	323	EL CARMELO
1058	\N	05	323	POTRERITOS
1059	\N	01	324	ALONSO DE OJEDA
1060	\N	02	324	LIBERTAD
1061	\N	03	324	CAMPO LARA
1062	\N	04	324	ELEAZAR LÓPEZ CONTRERAS
1063	\N	05	324	VENEZUELA
1064	\N	01	325	LIBERTAD
1065	\N	02	325	BARTOLOMÉ DE LAS CASAS
1066	\N	03	325	RÍO NEGRO
1067	\N	04	325	SAN JOSÉ DE PERIJÁ
1068	\N	01	326	SAN RAFAEL
1069	\N	02	326	LA SIERRITA
1070	\N	03	326	LAS PARCELAS
1071	\N	04	326	LUIS DE VICENTE
1072	\N	05	326	MONSEÑOR MARCOS SERGIO GODOY
1073	\N	06	326	RICAURTE
1074	\N	07	326	TAMARE
1075	\N	01	327	ANTONIO BORJAS ROMERO
1076	\N	02	327	BOLÍVAR
1077	\N	03	327	CACIQUE MARA
1078	\N	04	327	CARACCIOLO PARRA PÉREZ
1079	\N	05	327	CECILIO ACOSTA
1080	\N	06	327	CRISTO DE ARANZA
1081	\N	07	327	COQUIVACOA
1082	\N	08	327	CHIQUINQUIRÁ
1083	\N	09	327	FRANCISCO EUGENIO BUSTAMANTE
1084	\N	10	327	IDELFONSO VÁSQUEZ
1085	\N	11	327	JUANA DE AVILA
1086	\N	12	327	LUIS HURTADO HIGUERA
1087	\N	13	327	MANUEL DAGNINO
1088	\N	14	327	OLEGARIO VILLALOBOS
1089	\N	15	327	RAÚL LEONI
1090	\N	16	327	SANTA LUCÍA
1091	\N	17	327	VENANCIO PULGAR
1092	\N	18	327	SAN ISIDRO
1093	\N	01	328	ALTAGRACIA
1094	\N	02	328	ANA MARÍA CAMPOS
1095	\N	03	328	FARÍA
1096	\N	04	328	SAN ANTONIO
1097	\N	05	328	SAN JOSÉ
1098	\N	01	329	SINAMAICA
1099	\N	02	329	ALTA GUAJIRA
1100	\N	03	329	ELÍAS SÁNCHEZ RUBIO
1101	\N	04	329	GUAJIRA
1102	\N	01	330	EL ROSARIO
1103	\N	02	330	DONALDO GARCÍA
1104	\N	03	330	SIXTO ZAMBRANO
1105	\N	01	331	SAN FRANCISCO
1106	\N	02	331	EL BAJO
1107	\N	03	331	DOMITILA FLORES
1108	\N	04	331	FRANCISCO OCHOA
1109	\N	05	331	LOS CORTIJOS
1110	\N	06	331	MARCIAL HERNÁNDEZ
1111	\N	01	332	SANTA RITA
1112	\N	02	332	EL MENE
1113	\N	03	332	JOSÉ CENOVIO URRIBARRI
1114	\N	04	332	PEDRO LUCAS URRIBARRI
1115	\N	01	333	MANUEL MANRIQUE
1116	\N	02	333	RAFAEL MARÍA BARALT
1117	\N	03	333	RAFAEL URDANETA
1118	\N	01	334	BOBURES
1119	\N	02	334	EL BATEY
1120	\N	03	334	GIBRALTAR
1121	\N	04	334	HERAS
1122	\N	05	334	MONSEÑOR ARTURO CELESTINO ALVAREZ
1123	\N	06	334	RÓMULO GALLEGOS
1124	\N	01	335	LA VICTORIA
1125	\N	02	335	RAFAEL URDANETA
1126	\N	03	335	RAÚL CUENCA
1127	\N	01	336	CARABALLEDA
1128	\N	02	336	CARAYACA
1129	\N	03	336	CARUAO
1130	\N	04	336	CATIA LA MAR
1131	\N	05	336	EL JUNKO
1132	\N	06	336	LA GUAIRA
1133	\N	07	336	MACUTO
1134	\N	08	336	MAIQUETÍA
1135	\N	09	336	NAIGUATÁ
1136	\N	10	336	RAÚL LEONI
1137	\N	11	336	CARLOS SOUBLETTE
\.


--
-- TOC entry 7624 (class 0 OID 186008)
-- Dependencies: 411
-- Data for Name: participante; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY participante (id_participante, id_plan_adiestramiento, asistencia, estatus, desempenio, evaluacion_instructor, evaluacion_contenido, id_personal) FROM stdin;
\.


--
-- TOC entry 7625 (class 0 OID 186016)
-- Dependencies: 412
-- Data for Name: partidauelespecifica; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY partidauelespecifica (id_partida_uel_especifica, id_uel_especifica, id_cuenta_presupuesto, id_fuente_financiamiento, anio) FROM stdin;
\.


--
-- TOC entry 7626 (class 0 OID 186019)
-- Dependencies: 413
-- Data for Name: pasantia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pasantia (id_pasantia, fecha_inicio, fecha_fin, instituto, proyecto, dependencia, id_personal, observaciones, id_sitp, tiempo_sitp, institucion) FROM stdin;
\.


--
-- TOC entry 7627 (class 0 OID 186027)
-- Dependencies: 414
-- Data for Name: pensioninvalidez; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pensioninvalidez (id_pension_invalidez, id_tipo_personal, porcentaje_maximo_pension, base, numero_meses, id_organismo, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7628 (class 0 OID 186035)
-- Dependencies: 415
-- Data for Name: pensionsobreviviviente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pensionsobreviviviente (id_pension_sobreviviente, id_tipo_personal, porcentaje_maximo_pension, base, numero_meses, id_organismo, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7629 (class 0 OID 186043)
-- Dependencies: 416
-- Data for Name: perfil; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY perfil (id_perfil, id_cargo, tipo_cargo, naturaleza, responsabilidades, propositos, aprobacion_mpd, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7630 (class 0 OID 186052)
-- Dependencies: 417
-- Data for Name: personal; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY personal (id_personal, anios_servicio_apn, cedula, cedula_conyugue, id_ciudad_nacimiento, id_ciudad_residencia, diestralidad, direccion_residencia, doble_nacionalidad, email, id_establecimiento_salud, estado_civil, estatura, fecha_nacimiento, fecha_nacionalizacion, gaceta_nacionalizacion, grado_licencia, grupo_sanguineo, maneja, marca_vehiculo, mismo_organismo_conyugue, modelo_vehiculo, nacionalidad, nacionalizado, nivel_educativo, nombre_conyugue, numero_libreta_militar, numero_rif, numero_sso, otra_normativa_nac, id_pais_nacionalidad, id_parroquia, peso, placa_vehiculo, primer_apellido, primer_nombre, reingresable, sector_trabajo_conyugue, segundo_apellido, segundo_nombre, sexo, telefono_celular, telefono_oficina, telefono_residencia, tenencia_vivienda, tiene_hijos, tiene_vehiculo, tipo_vivienda, zona_postal_residencia, id_sitp, tiempo_sitp, password, madre_padre, fecha_fallecimiento, dias_servicio_apn, meses_servicio_apn, deuda_regimen_derogado, credencial, puebloindigena, discapacidad, tipodiscapacidad) FROM stdin;
3496	1	18141986	0	1001	997	D	Calle Lourdes, Casa N° 20	N	orlanys86@gmail.com	\N	S	1.68999999999999995	1986-09-05	\N	\N	0	A+	N		N		V	N	N			v-18141986-1	18141986	\N	\N	\N	80		RODRIGUEZ 	VANESSA	S	N	TORTOZA	ORLANYS	F	04126348722	02125976615	02123361212	F	N	N	C	1162	0	\N	\N	S	\N	0	0	N	\N		N	
647	6	18528414	0	1	1	D	Propatria	N	hviloria@minmujer.gob.ve	\N	S	1.75	1989-04-06	\N	\N	3	A+	S		N		V	N	D			V-18528414-6		\N	\N	\N	75		VILORIA	HERNAN	S	P	PERNIA	DE JESUS	M	04129955664	02125976617		P	N	N	A	1030	0	\N	\N	N	\N	0	0	N	\N		N	
1401	4	16249561	0	205	999	D	Calle Principal Sector L Urbanismo Ciudad Hugo Chávez Frías Edf. L18 Piso 3 Apartamento Número 15	N	noel.aem1@gmail.com	\N	S	1.83000000000000007	1983-09-22	\N	\N	3	A+	S		N		V	N	N			v-16249561-1	1	\N	\N	\N	55		ESPINOZA	NOEL 	S	N	MARTINEZ	ALBERTO	M	04165812731	02125976615	04162170863	P	N	N	A	1010	0	\N	\N	S	\N	0	0	N	\N		N	
646	7	17269452	0	1	537	D	Calle Urdaneta con Guaicaipuro Edificio Pinela Piso 1 Apto 2 Urb. Bolívar 	N	deborah.torres13@gmail.com	\N	S	1.62999999999999989	1984-05-13	\N	\N	0	O+	N		N		V	N	D			V-17269452-3		\N	\N	\N	55		TORRES	DEBORAH	S	P			F	04242172234	02125976617	02122630797	A	N	N	A	1060	0	\N	\N	N	\N	0	0	N	\N		N	
4103	6	15911540	0	1	571	D	San José de Los Altos. Calle 2 del Prado. Casa Lai_Tsi.	N	andyloys@gmail.com	\N	U	1.64999999999999991	1984-02-11	\N	\N	3	A+	S		N		V	N	N			v-15911540-9		\N	\N	\N	69		LOYO	ANDREA	S	N	ROSADO	SALOME	F	04267652095	02125976602	02123751627	F	N	N	C	1210	0	\N	\N	N	\N	0	0	N	\N		N	
4528	8	12880477	0	559	559	D	PALO ALTO CALLE LAS BRISAS CASA # 48 LOS TEQUES	N	YELITZE.ALMENAR@GMAIL.COM	\N	S	167	1977-11-20	\N	\N	4	A+	S		N		V	N	N	\N		V-12880477-0		\N	\N	21	49		ALMENAR	YELITZE	S	N	GONZALEZ	DE LOS ANGELES	F	04169137599	02125976615	02129106252	F	N	N	C	0120	0	\N	\N	S	\N	0	0	N	\N		N	
4542	0	20328536	0	1	1	D	AV PPAL EL CEMENTERIO CALLE LA VEREDA, CASA N° 10	N	YOSSYANDRADE@GMAIL.COM	\N	S	1.65999999999999992	1993-06-21	\N	\N	0	A+	N		N		V	N	N	\N				\N	\N	19	60		ANDRADE	JOSELYN	S	N	CHAURAN	DEL VALLE	F	04263126488		02126331726	P	N	N	C	1040	0	\N	\N	N	\N	0	0	N	\N		N	
4611	0	21092594	0	1	1	D	LOS JARDINES DEL VALLE, CASA 189	N	JOELPALMA13@HOTMAIL.COM	\N	S	1.73999999999999999	1994-02-28	\N	\N	0	O+	N		N		V	N	N	\N		V-21092594-1		\N	\N	10	74		PALMA	JOEL	S	N	RODRIGUEZ	ALEJANDRO	M	04169306151	02125966615	02126713323	F	N	N	C	1090	0	\N	\N	N	\N	0	0	N	\N		N	
4612	0	21281617	0	1	1	D	CASA N°5, CALLEJON ROMERO, BRISAS  DE PROPATRIA 	N	NOOB.CARLOSVELASQUEZ@GMAIL.COM	\N	S	1.69999999999999996	1993-05-19	\N	\N	0	O+	N		N		V	N	N	\N		V-21281617-1		\N	\N	21	62		VELASQUEZ	CARLOS	S	N	QUINTERO	EDUARDO	M	04264061824		02128712958	F	N	N	C	1030	0	\N	\N	N	\N	0	0	N	\N		N	
4543	2	18712298	0	577	547	D	URB. DOS LAGUNAS, BLOQUE 45, EDIF. 1 APART 02-02, SANTA TERESA DEL TUY, EDO MIRANDA	N	JORBETRONDON@GMAIL.COM	\N	S	1.73999999999999999	1988-06-07	\N	\N	0	O+	N		N		V	N	N	\N				\N	\N	20	72		RONDON	JORBET	S	N	ASCANIO	SINAY	F	04242681541		02392314653	P	N	N	A	1215	0	\N	\N	N	\N	0	0	N	\N		N	
\.


--
-- TOC entry 7631 (class 0 OID 186102)
-- Dependencies: 418
-- Data for Name: personalorganismo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY personalorganismo (id_personal_organismo, id_personal, id_organismo) FROM stdin;
\.


--
-- TOC entry 7632 (class 0 OID 186105)
-- Dependencies: 419
-- Data for Name: planadiestramiento; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY planadiestramiento (id_plan_adiestramiento, anio, numero_plan, numero_participantes, duracion, costo_estimado, costo_aprobado, costo_real, trimestre, id_unidad_funcional, id_area_conocimiento, nombre_curso, unidad_tiempo, tipo_cargo, estatus, fecha_inicio, interno_externo, nombre_entidad, aprobacion_mpd, id_tipo_curso, id_plan_personal, nivel) FROM stdin;
\.


--
-- TOC entry 7633 (class 0 OID 186126)
-- Dependencies: 420
-- Data for Name: planillaarc; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY planillaarc (id_planilla_arc, id_trabajador, anio, devengado_enero, retencion_enero, porcentaje_enero, devengado_febrero, retencion_febrero, porcentaje_febrero, devengado_marzo, retencion_marzo, porcentaje_marzo, devengado_abril, retencion_abril, porcentaje_abril, devengado_mayo, retencion_mayo, porcentaje_mayo, devengado_junio, retencion_junio, porcentaje_junio, devengado_julio, retencion_julio, porcentaje_julio, devengado_agosto, retencion_agosto, porcentaje_agosto, devengado_septiembre, retencion_septiembre, porcentaje_septiembre, devengado_octubre, retencion_octubre, porcentaje_octubre, devengado_noviembre, retencion_noviembre, porcentaje_noviembre, devengado_diciembre, retencion_diciembre, porcentaje_diciembre, acumulado_sso, acumulado_spf, acumulado_lph, acumulado_hcm, acumulado_caja, acumulado_otros, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7634 (class 0 OID 186172)
-- Dependencies: 421
-- Data for Name: planillaari; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY planillaari (id_planilla_ari, id_trabajador, anio, remuneraciones, desgravamenes, total_cargas, porcentaje, remuneraciones_variacion1, desgravamenes_variacion1, total_cargas_variacion1, porcentaje_variacion1, remuneraciones_variacion2, desgravamenes_variacion2, total_cargas_variacion2, porcentaje_variacion2, remuneraciones_variacion3, desgravamenes_variacion3, total_cargas_variacion3, porcentaje_variacion3, remuneraciones_variacion4, desgravamenes_variacion4, total_cargas_variacion4, porcentaje_variacion4) FROM stdin;
\.


--
-- TOC entry 7635 (class 0 OID 186195)
-- Dependencies: 422
-- Data for Name: planpersonal; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY planpersonal (id_plan_personal, anio, version, fecha_preparacion, fecha_vigencia, estatus, aprobo_rrhh, aprobo_planificacion, aprobo_presupuesto, fecha_finalizacion, id_organismo) FROM stdin;
\.


--
-- TOC entry 7636 (class 0 OID 186208)
-- Dependencies: 423
-- Data for Name: planpoliza; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY planpoliza (id_plan_poliza, cod_plan_poliza, nombre, beneficiarios, prima_unica, monto_prima_unica, cobertura_unica, exceso, id_poliza) FROM stdin;
\.


--
-- TOC entry 7637 (class 0 OID 186219)
-- Dependencies: 424
-- Data for Name: poliza; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY poliza (id_poliza, cod_poliza, nombre, tipo, numero_poliza, aseguradora, fecha_inicio, fecha_fin, permite_exceso, id_organismo, id_sitp, tiempo_sitp, vigente) FROM stdin;
\.


--
-- TOC entry 7638 (class 0 OID 186228)
-- Dependencies: 425
-- Data for Name: postuladoconcurso; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY postuladoconcurso (id_postulado_concurso, id_concurso_cargo, id_personal, id_elegible, id_postulado_externo, cedula, estatus, origen, resultado, observacion) FROM stdin;
\.


--
-- TOC entry 7639 (class 0 OID 186236)
-- Dependencies: 426
-- Data for Name: postuladoexterno; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY postuladoexterno (id_postulado_externo, cedula, primer_apellido, primer_nombre, segundo_apellido, segundo_nombre, sexo, nacionalidad, estado_civil, fecha_nacimiento) FROM stdin;
\.


--
-- TOC entry 7640 (class 0 OID 186242)
-- Dependencies: 427
-- Data for Name: prestacionesmensuales; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY prestacionesmensuales (id_prestaciones_mensuales, id_tipo_personal, id_trabajador, anio, mes, dias_mensuales, dias_adicionales, base_mensual, base_adicional, monto_prestaciones, monto_adicional, fideicomiso, dias_cancelados, id_sitp, tiempo_sitp, id_personal) FROM stdin;
\.


--
-- TOC entry 7641 (class 0 OID 186253)
-- Dependencies: 428
-- Data for Name: prestacionesonapre; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY prestacionesonapre (id_prestaciones_onapre, id_tipo_personal, id_trabajador, anio, mes, fecha_prestaciones, sueldo_basico, compensacion, primas, bono_fin_anio, bono_vacacional, otros, sueldo_integral, dias_mensuales, dias_adicionales, abono_mensual, base_adicional, abono_adicional) FROM stdin;
\.


--
-- TOC entry 7642 (class 0 OID 186267)
-- Dependencies: 429
-- Data for Name: prestamo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY prestamo (id_prestamo, id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal, monto_prestamo, monto_cuota, monto_pagado, numero_cuotas, cuotas_pagadas, fecha_otorgo, fecha_comienzo_pago, fecha_registro, documento_soporte, estatus) FROM stdin;
\.


--
-- TOC entry 7643 (class 0 OID 186276)
-- Dependencies: 430
-- Data for Name: presupuestoespecifica; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY presupuestoespecifica (id_presupuesto_especifica, id_uel_especifica, id_cuenta_presupuesto, anio, monto_presupuestado, monto_ejecutado) FROM stdin;
\.


--
-- TOC entry 7644 (class 0 OID 186282)
-- Dependencies: 431
-- Data for Name: primaantiguedad; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY primaantiguedad (id_prima_antiguedad, id_tipo_personal, anios_servicio, tipo, operacion, monto, porcentaje, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7645 (class 0 OID 186293)
-- Dependencies: 432
-- Data for Name: primahijo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY primahijo (id_prima_hijo, id_tipo_personal, edad_minima, edad_maxima, edad_excepcional, monto, edad_estudiante, numero_maximo_hijos, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7646 (class 0 OID 186303)
-- Dependencies: 433
-- Data for Name: primascargo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY primascargo (id_primas_cargo, porcentaje_patron, porcentaje_trabajador, id_cargo, id_primas_plan) FROM stdin;
\.


--
-- TOC entry 7647 (class 0 OID 186308)
-- Dependencies: 434
-- Data for Name: primasplan; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY primasplan (id_primas_plan, parentesco, edad_minima, edad_maxima, prima_femenino, prima_masculino, porcentaje_patron, porcentaje_trabajador, cobertura_parentesco, maximo_beneficiarios, id_plan_poliza) FROM stdin;
\.


--
-- TOC entry 7648 (class 0 OID 186321)
-- Dependencies: 435
-- Data for Name: profesion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY profesion (id_profesion, cod_profesion, nombre, id_subgrupo_profesion) FROM stdin;
1	111131	PRESIDENTE O PRESIDENTA DE LA REPUBLICA	11
2	111132	VICEPRESIDENTE  O VICEPRESIDENTA DE LA REPÚBLICA	11
3	111133	MINISTRO O MINISTRA	11
4	111134	PROCURADOR GENERAL DE LA REPUBLICA	11
5	111135	FISCAL GENERAL DE LA REPUBLICA	11
6	111136	CONTRALOR GENERAL DE LA REPÚBLICA	11
7	111137	DIPUTADO  O  DIPUTADA	11
8	111138	EMBAJADOR  O  EMBAJADORA	11
9	111139	CONSUL	11
10	111231	GOBERNADOR  O  GOBERNADORA	11
11	111232	ALCALDE O ALCALDESA	11
12	111233	CONCEJAL	11
13	111234	PREFECTO	11
14	111235	JEFE CIVIL	11
15	111236	CAPITAN DE ETNIA (INDÍGENA)	11
16	111237	COMISARIO DE PUEBLO	11
17	111238	ALGUACIL	11
18	111239	SACERDOTE CATOLICO 	11
19	111240	SACRISTAN	11
20	111241	MONJA (CATOLICA)	11
21	111242	JUEZ	11
22	111243	JUEZ ESPECIALIZADO	11
23	111244	ARZOBISPO  	11
24	111245	OBISPO	11
25	111246	PASTOR EVANGÉLICO  	11
26	111247	DÍACONO	11
27	111331	PRESIDENTE DE EMPRESA	11
28	111332	DIRECTOR GENERAL DE EMPRESA	11
29	111333	DIRECTOR DE LINEA	11
30	111334	GERENTE GENERAL DE EMPRESA	11
31	111335	GERENTE DE LINEA	11
32	111336	JEFE DE DEPARTAMENTO	11
33	111337	RECTOR DE UNIVERSIDAD	11
34	111338	DECANO DE UNIVERSIDAD	11
35	111339	DIRECTOR DE UNIVERSIDAD	11
36	111340	JEFES DE SERVICIOS	11
37	111341	DIRECTOR DE ORQUESTA SINFONICA	11
38	111342	DIRECTOR MUSICAL	11
39	111343	DIRECTOR ADMINISTRATIVO	11
40	111344	DIRECTOR DE DPTO DE COMERCIALIZACION	11
41	111345	DIRECTOR DE DPTO DE COMPRAS	11
42	111346	DIRECTOR DE DPTO DE DISTRIBUCIÓN 	11
43	111347	DIRECTOR DE DPTO DE FINANZAS	11
44	111348	DIRECTOR DE DPTO DE INFORMATICA	11
45	111349	DIRECTOR DE DPTO DE INVESTIGACIÓN Y DESARROLLO	11
46	111350	DIRECTOR DE DPTO DE PERSONAL	11
47	111351	DIRECTOR DE DPTO DE PUBLICIDAD	11
48	111352	DIRECTOR DE DPTO DE RELACIONES LABORALES	11
49	111353	DIRECTOR DE DPTO DE RELACIONES PUBLICAS	11
50	111354	DIRECTOR DE DPTO DE VENTAS	11
52	111356	DIRECTOR DE DPTO PRODUCCIÓN Y OPERACIONES / AGRICULTURA	11
53	111357	DIRECTOR DE DPTO PRODUCCIÓN Y OPERACIONES / ALMACENAMIENTO	11
54	111358	DIRECTOR DE DPTO PRODUCCIÓN Y OPERACIONES   /  CAZA	11
55	111359	DIRECTOR DE DPTO PRODUCCIÓN Y OPERACIONES / COMERCIO MAYORISTA	11
56	111360	DIRECTOR DE DPTO PRODUCCIÓN Y  OPERACION/ COMERCIO  MINORISTA	11
58	111362	DIRECTOR DE DPTO PRODUCCIÓN Y  OPERACIONES  / CUIDADOS PERSONALES	11
59	111363	DIRECTOR DE DPTO PRODUCCIÓN Y OPERACIONES  / HOTELERIA	11
60	111364	DIRECTOR DE DPTO PRODUCCIÓN Y  OPERACIONES / INDUSTRIA MANUFACTURERA	11
62	111366	DIRECTOR DE DPTO PRODUCCIÓN Y OPERACIONES / LIMPIEZA	11
63	111367	DIRECTOR DE DPTO PRODUCCIÓN Y OPERACIONES  PESCA	11
64	111368	DIRECTOR DE DPTO PRODUCCIÓN Y OPERACIONES / RESTAURANTES	11
65	111369	DIRECTOR DE DPTO PRODUCCIÓN Y OPERACIONES / SERVICIOS 	11
66	111370	DIRECTOR DE DPTO PRODUCCIÓN Y OPERACIONES / SERVICIOS DE SANIDAD	11
67	111371	DIRECTOR DE DPTO PRODUCCIÓN Y OPERACIONES / SILVICULTURA	11
68	111372	DIRECTOR DE DPTO PRODUCCIÓN Y   OPERACIONES / TRANSPORTE	11
69	111373	DIRECTOR DE SEGUROS	11
70	111374	JEFE DE PERSONAL	11
71	111375	JEFE DE RELACIONES INDUSTRIALES	11
72	111376	JEFE DE RELACIONES PUBLICAS	11
73	111378	SUPERVISOR DE EDUCACIÓN	11
74	111379	PRESIDENTE DE ORGANIZACIÓN	11
75	111380	COORDINADOR DE PROYECTOS SOCIALES	11
76	111381	GERENTE SOCIAL	11
77	111382	PROMOTOR SOCIAL	11
78	111383	PROMOTOR SOCIOPRODUCTIVO     	11
79	111384	GERENTE COMUNITARIO	11
80	111431	DIRIGENTE DE  PARTIDO POLÍTICO	11
81	111432	DIRIGENTE DE JUNTA PARROQUIAL	11
82	111433	DIRIGENTE DE ASOCIACIONES DE VECINOS	11
83	111434	DIRIGENTE SINDICAL	11
84	111435	DIRIGENTE DE ORGANIZACIONES HUMANITARIAS O DE  BENEFICIENCIA	11
85	111436	DIRIGENTE DE ASOCIACIONES DEPORTIVAS	11
86	211131	LICENCIADO EN QUIMICA	21
87	211132	LICENCIADO EN  FISICA	21
88	211133	LICENCIADO EN MATEMATICA	21
89	211134	LICENCIADO EN BIOLOGIA	21
90	213231	PROGRAMADOR DE INFORMATICA	21
91	221131	INGENIERO EN MATERIALES	22
92	221132	INGENIERO METALÚRGICO	22
93	221133	INGENIERO EN MINAS	22
94	221134	INGENIERO GEOLOGO	22
95	221136	INGENIERO GEODESTA	22
96	221137	INGENIERO GEOFISICO	22
97	221138	INGENIERO PETROLERO	22
2077	921108	PESCADOR CON  ATARRAJA	92
98	221139	INGENIERO HIDROMETEREOLOGICO	22
99	221231	INGENIERO QUIMICO	22
100	221232	LIC. EN GEOQUIMICO	22
101	221233	INGENIERO EN PRODUCCIÓN	22
102	221234	INGENIERO INDUSTRIAL	22
103	221235	INGENIERO QUÍMICO PETROLEO Y GAS NATURAL	22
104	221236	INGENIERO QUÍMICO ESPECIALIZADO	22
105	221331	INGENIERO CIVIL	22
106	221332	INGENIERO DE ADMINISTRACIÓN DE OBRAS	22
107	221333	INGENIERO DE MANTENIMIENTO DE OBRAS	22
108	221334	INGENIERO EN DISEÑO INDUSTRIAL	22
109	221335	LIC. EN DISEÑO INDUSTRIAL	22
110	221336	LIC. EN DISEÑO GRÁFICO 	22
111	221337	ARQUITECTO	22
112	221338	URBANISTA	22
113	221431	INGENIERO EN SISTEMAS	22
114	221432	INGENIERO EN INFORMATICA	22
115	221433	INGENIERO EN COMPUTACIÓN	22
116	221434	LIC. EN COMPUTACIÓN	22
117	221435	LIC. EN INFORMÁTICA	22
118	221531	INGENIERO MECÁNICO	22
119	221532	INGENIERO EN MANTENIMIENTO INDUSTRIAL	22
120	221533	INGENIERO EN MANTENIMIENTO MECANICO	22
121	221534	INGENIERO MECANICO ESPECIALIZADO	22
122	221631	INGENIERO ELECTRICISTA	22
123	221632	INGENIERO ELECTRONICO	22
124	221633	INGENIERO ELECTRÓNICO EN COMPUTACIÓN	22
125	221634	INGENIERO EN TELECOMUNICACIONES	22
126	221635	INGENIERO ELECTRICISTA ESPECIALIZADO	22
127	221731	INGENIERO NAVAL	22
128	221732	INGENIERO AERONAUTICO	22
129	221733	LIC. EN CIENCIAS NAUTICAS	22
130	221734	INGENIERO DE VUELO	22
131	231131	INGENIERO AGRONOMO	23
132	231132	INGENIERO AGRICOLA 	23
133	231133	INGENIERO AGRÓNOMO EN PRODUCCIÓN ANIMAL	23
134	231134	INGENIERO EN PRODUCCIÓN AGROPECUARIA	23
135	231135	INGENIERO  AGROINDUSTRIAL	23
136	231136	INGENIERO AGRÓNOMO EN PRODUCCIÓN VEGETAL	23
137	231231	INGENIERO FORESTAL	23
138	231232	INGENIERO EN INDUSTRIA FORESTAL	23
139	231233	INGENIERO EN RECURSOS NATURALES RENOVABLES O  AMBIENTE	23
140	231234	LIC. EN ESTUDIOS AMBIENTALES	23
141	231331	INGENIERO DE ALIMENTOS 	23
142	231332	LIC. EN TECNOLOGÍA DE ALIMENTOS	23
143	231333	LIC. EN CIENCIAS Y CULTURA DE LA ALIMENTACIÓN	23
144	231431	LIC. EN GERENCIA AGROINDUSTRIAL	23
146	231433	LIC. EN ECONOMIA AGRÍCOLA O ECONOMISTA AGRICOLA	23
147	231434	LIC. EN ECONOMIA DE LA INDUSTRIA FORESTAL	23
148	231531	INGENIERO PESQUERO	23
149	231532	LIC. EN BIOLOGÍA MARINA	23
150	231533	LIC. EN ACUICULTURA	23
151	231534	LIC. EN BIOLOGÍA PESQUERA	23
152	231631	MEDICO VETERINARIO	23
153	231632	ZOOTECNISTA	23
154	241131	MEDICO CIRUJANO 	24
155	241132	LIC. EN ENFERMERIA	24
156	241133	LIC. EN BIOANALISIS	24
157	241134	LIC. EN NUTRICIÓN Y DIETETICA	24
158	241135	MEDICO (ESPECIALISTA)	24
159	241231	FARMACEUTICO	24
160	241232	ODONTOLOGO	24
161	251131	LIC. EN EDUCACIÓN	25
162	251132	PROFESOR EN EDUCACIÓN	25
163	251133	LIC. EN CIENCIAS PEDAGÓGICAS O PROFESOR EN PEDAGOGÍA SOCIAL	25
165	251135	LIC. EN EDUCACIÓN PRESCOLAR O PROFESOR  EDUCACIÓN  PRESCOLAR	25
166	251136	LIC. EN EDUCACIÓN ESPECIAL	25
167	251137	PROFESOR EN EDUCACIÓN ESPECIAL	25
168	251138	LIC. EN EDUCACIÓN CIENCIAS Y TECNOLOGÍA DE LA EDUCACIÓN	25
169	251139	LIC. EN EDUCACIÓN MENCIÓN ORIENTACIÓN	25
170	251231	LIC. EN EDUCACIÓN MENCIÓN CIENCIAS  BIOLÓGICAS O  BIOLOGÍA PROFESOR	25
171	251232	LIC. EN EDUCACIÓN MENCIÓN BIOLOGÍA Y QUIMICA	25
172	251233	LIC. EN EDUCACIÓN MENCIÓN QUÍMICA O PROFESOR  EN QUIMICA	25
173	251234	LIC. EN EDUCACIÓN MENCIÓN CIENCIAS SOCIALES	25
175	251236	LIC. EN EDUCACIÓN MENCIÓN GEOGRAFIA Y CIENCIAS DE    LA TIERRA	25
176	251237	LIC. EN EDUCACIÓN MENCIÓN FILOSOFIA	25
177	251238	LIC. EN EDUCACIÓN MENCIÓN TEOLOGIA O CIENCIA DE  LA RELIGIÓN	25
180	251333	LIC. EN EDUCACIÓN MENCIÓN LENGUAS MODERNAS	25
181	251334	LIC. EN EDUCACIÓN MENCIÓN INGLES O LENGUAS EXTRANJERAS	25
182	251335	PROFESOR EN INGLÉS Y FRANCES	25
183	251336	PROFESOR EN EDUCACIÓN INTERCULTURAL BILINGÜE	25
184	251337	LIC. EN IDIOMAS MODERNOS	25
185	251431	LIC. EN EDUCACIÓN MENCIÓN MATEMÁTICA O  PROFESOR EN  MATEMATICA	25
186	251432	LIC. EN EDUCACIÓN MENCIÓN INFORMATICA O MATEMATICA O COMPUTACION	25
187	251433	PROFESOR EN INFORMATICA	25
188	251434	LIC. EN EDUCACIÓN MENCIÓN FÍSICA Y  MATEMATICA	25
189	251435	LIC. EN EDUCACIÓN MENCIÓN FÍSICA O PROFESOR EN FISICA	25
190	251436	LIC. EN EDUCACIÓN MENCIÓN FISICO-NATURALES	25
192	251438	PROFESOR EN ELECTRONICA INDUSTRIAL	25
195	251531	LIC. EN EDUCACIÓN FÍSICA O PROFESOR DE EDUCACIÓN FÍSICA	25
196	251532	LIC. EN EDUCACIÓN MENCIÓN CULTURA, FISICA Y RECREACION	25
2078	921110	PEON DE VAQUERA	92
197	251533	LIC. EN EDUCACIÓN MENCIÓN CIENCIA DEL DEPORTE	25
198	251534	PROFESOR EN ARTES PLASTICAS Y MUSEOLOGIA	25
199	251535	PROFESOR DE ARTES ESCENICAS	25
200	251536	PROFESOR DE EDUCACIÓN MUSICAL	25
201	251537	PROFESOR DE ARTES INDUSTRIALES	25
202	251538	LIC. EN EDUCACIÓN MENCIÓN EDUCACIÓN PARA EL TRABAJO	25
203	251539	PROFESOR DE DIBUJO TÉCNICO	25
204	251631	LIC. EN EDUCACION  AGROPECUARIA	25
205	251632	PROFESOR EN EDUCACIÓN AGROPEQUARIA	25
206	251633	PROFESOR EN EDUCACIÓN RURAL	25
207	261131	SOCIOLÓGO O LIC. EN SOCIOLOGÍA O LIC  SOCIOLOGÍA  DEL  DESARROLLO	26
208	261132	ANTROPOLOGO	26
209	261133	LIC. EN GEOGRAFIA	26
210	261134	LIC. EN PLANIFICACIÓN	26
211	261231	PSICOLOGO	26
212	261232	LIC. EN TRABAJO SOCIAL	26
213	261233	LIC. EN RELACIONES INDUSTRIALES	26
214	261234	LIC. EN GERENCIA DE LOS RECURSOS HUMANOS	26
215	261235	PSICOLOGO ESPECIALISTA      	26
216	261331	ECONOMISTA	26
217	261332	ESTADISTICO	26
218	261333	LIC. EN CIENCIAS FISCALES	26
219	261334	LIC. EN ADMINISTRACIÓN DE EMPRESAS DE RIESGOS DE SEGUROS	26
220	261335	LIC. EN CIENCIAS ACTUARIALES	26
221	261336	LIC. EN COMERCIO EXTERNO O INTERNACIONAL	26
222	261337	LIC. EN ECONOMIA EMPRESARIAL	26
223	261338	ECONOMISTA ESPECIALIZADO	26
224	261431	ABOGADO	26
225	261432	CRIMINÓLOGO  O LIC. EN CRIMINALISTICA	26
226	261433	LIC. EN DERECHO CANONICO    	26
227	261434	LIC. EN CIENCIAS POLICIALES	26
228	261531	POLITOLOGO	26
229	261532	LIC. EN ESTUDIOS POLÍTICOS Y ADMINISTRATIVOS O LIC. EN CIENCIAS POLITICAS	26
230	261533	LIC. EN ESTUDIO INTERNACIONALES	26
231	261631	CONTADOR PÚBLICO  O LIC. EN CONTADURÍA PÚBLICA	26
232	261632	LIC. EN ADMINISTRACIÓN       	26
233	261633	LIC. EN ADMINISTRACIÓN COMERCIAL	26
234	261634	LIC. EN ADMINISTRACIÓN DE EMPRESAS	26
235	261635	LIC. EN CIENCIAS ADMINISTRATIVAS Y GERENCIALES	26
236	261636	LIC. EN ADMINISTRACIÓN INDUSTRIAL O GERENCIA INDUSTRIAL	26
237	261637	LIC. EN ADMINISTRACIÓN MENCION MATERIALES Y FINANCIEROS 	26
238	261731	LIC. EN HOTELERIA	26
239	261732	LIC. EN TURISMO	26
240	261733	LIC. EN EMPRESAS TURISTICAS	26
241	261831	LIC. EN COMUNICACIÓN	26
242	261832	LIC. EN PÚBLICIDAD	26
243	261833	LIC. ENEMPRESA DE DISEÑO	26
244	261834	LIC. EN MERCADEO O EN ADMINISTRACIÓN MENCIÓN MERCADEO	26
245	271131	LIC. EN FILOSOFIA	27
246	271132	LIC. EN TEOLOGIA	27
247	271133	LIC. EN LETRAS O LETRAS HISPANICAS	27
249	271135	LIC. EN LETRAS MENCIÓN LENGUA Y LITERATURA  MODERNA	27
250	271136	LIC. EN LETRAS EN LENGUAS Y LITERATURA CLÁSICA	27
251	271137	LIC. EN HISTORIA ECLESIATICA	27
252	271138	LIC. EN HISTORIA	27
253	271231	LIC. EN LETRAS HISTORIA DEL ARTE	27
254	271232	LIC. EN ARTES	27
255	271233	LIC. EN ARTES PLASTICAS Y MUSEOLOGIA	27
256	271234	LIC. EN ARTES VISUALES	27
257	271235	LIC. EN MUSICA MENCIÓN MUSICOLOGIA	27
258	271236	LIC. EN TEATRO	27
259	271237	LIC. EN DANZA	27
260	271238	LIC. EN MEDIOS AUDIO-VISUALES	27
261	271239	LIC. EN BIBLIOTECOLOGÍA Y ARCHIVOLOGIA	27
264	281133	OFICIAL DE LA ARMADA Y LIC. EN CIENCIAS  NAVALES	28
266	311111	TECNICO SUPERIOR UNIVERSITARIO EN QUIMICA	31
267	311112	TECNICO SUPERIOR UNIVERSITARIO EN PROCESO QUIMICO	31
268	311114	TECNICO SUPERIOR UNIVERSITARIO-TECNOLOGO EN PROCESOS INDUSTRIALES	31
269	311115	TECNICO SUPERIOR UNIVERSITARIO EN CONTROL DE CALIDAD	31
270	311116	TECNICO SUPERIOR UNIVERSITARIO EN PRODUCCCION INDUSTRIAL	31
271	311117	TECNICO SUPERIOR UNIVERSITARIO EN HIGIENE Y  SEGURIDAD INDUSTRIAL	31
274	311120	TECNICO SUPERIOR EN TECNOLOGIA TEXTIL	31
275	311133	TECNICO SUPERIOR UNIVERSITARIO EN QUÍMICA INDUSTRIAL	31
276	311191	TECNICO MEDIO EN QUIMICA	31
277	311192	TECNICO MEDIO EN QUIMICA INDUSTRIAL	31
278	311193	TECNICO MEDIO EN ORGANIZACIÓN ADMINISTRACION DE LA SEGUIRIDAD	31
279	311194	TECNICO MEDIO EN RESCATE Y SALVAMIENTO	31
280	311195	TECNICO MEDIO BOMBERO	31
282	311196	TECNICO MEDIO EN COMBATE DE INCENDIOS	31
283	311197	TECNICO MEDIO EN ASEGURAMIENTO DE LA CALIDAD	31
284	311198	TECNICO MEDIO EN PRODUCCION	31
285	311199	APRENDIZ INCE O PASANTES  (AREA QUIMICA)	31
286	311211	TECNICO SUPERIOR UNIVERSITARIO EN CONTRUCION CIVIL	31
287	311212	TECNICO SUPERIOR UNIVERSITARIO EN TOPOGRAFÍA	31
288	311213	TECNICO SUPERIOR UNIVERSITARIO EN DISEÑO DE OBRAS  CIVILES	31
289	311214	TECNICO SUPERIOR UNIVERSITARIO EN DISEÑO AMBIENTAL	31
290	311215	TECNICO SUPERIOR UNIVERSITARIO EN DISEÑO INDUSTRIAL	31
291	311291	TECNICO MEDIO EN CONSTRUCCION CIVIL	31
292	311292	TECNICO MEDIO EN TOPOGRAFIA	31
293	311299	APRENDIZ INCE  O PASANTES (AREA CONSTRUCCION)	31
294	311311	TECNICO SUPERIOR UNIVERSITARIO EN ELECTRICIDAD	31
295	311312	TECNICO SUPERIOR UNIVERSITARIO EN ELECTROTECNIA  	31
296	311313	TECNICO SUPERIOR UNIVERSITARIO  EN ELECTRONICA	31
297	311314	TECNICO SUPERIOR UNIVERSITARIO EN MANTENIMIENTO EQUIPOS ELECTRICOS	31
298	311315	TECNICO SUPERIOR UNIVERSITARIO EN MANTENIMIENTO INDUSTRIAL	31
299	311316	TECNICO SUPERIOR UNIVERSITARIO EN INSTRUMENTACIÓN Y CONTROL	31
301	311318	TECNICO SUPERIOR UNIVERSITARIO EN SERVICIOS  INDUSTRIALES	31
302	311319	TECNICO SUPERIOR UNIVERSITARIO EN CONTROLES AUTOMATICOS	31
303	311391	TECNICO MEDIO EN ELECTRICIDAD	31
304	311392	TECNICO MEDIO EN TRANSMISION	31
305	311393	TECNICO MEDIO EN COMPUTACION	31
306	311394	TECNICO MEDIO EN INSTRUMENTACION	31
281	311395	TECNICO MEDIO EN ELECTRONICA	31
307	311396	TECNICO MEDIO EN ACUMULACIONES ELECTRICOS	31
308	311397	TECNICO MEDIO EN INSTRUMENTACION    	31
309	311398	TECNICO MEDIO EN COMUNICACIONES Y ELECTRÓNICA	31
310	311399	APRENDIZ INCE  O PASANTES (AREA ELECTRICA)	31
313	311413	TECNICO SUPERIOR UNIVERSITARIO EN INFORMATICA	31
314	311414	TECNICO SUPERIOR UNIVERSITARIO EN SISTEMA DE INFORMACION	31
315	311499	APRENDIZ INCE O PASANTES (AREA COMPUTACION)	31
316	311511	TECNICO SUPERIOR UNIVERSITARIO EN MATENIMIENTO  MECANICO	31
318	311513	TECNICO SUPERIOR UNIVERSITARIO EN MECANICA	31
319	311514	TECNICO SUPERIOR UNIVERSITARIO EN MECANICA TERMICA	31
320	311515	TECNICO SUPERIOR UNIVERSITARIO EN TECNOLOGÍA FERROVIARIA	31
321	311591	TECNICO MEDIO EN MECANICA	31
322	311592	TECNICO MEDIO EN METALMECANICA	31
323	311593	TECNICO MEDIO EN CP CONTROL DE CALIDAD  METALMECANICA	31
324	311594	TECNICO MEDIO EN MECANICA DE MANTENIMIENTO	31
325	311599	APRENDIZ INCE O PASANTES (AREA MECANICA)	31
326	311611	TECNICO SUPERIOR UNIVERSITARIO EN GEOLOGIA Y MINAS	31
327	311612	TECNICO SUPERIOR  UNIVERSITARIO EN POLIMEROS	31
329	311614	TECNICO SUPERIOR UNIVERSITARIO EN METALURGIA  Y SIDERURGIA	31
330	311615	TECNICO SUPERIOR UNIVERSITARIO EN GEOLOGIA	31
331	311616	TECNICO SUPERIOR UNIVERSITARIO EN MINERIA O EN  TECNOLOGIA MINERA	31
333	311618	TECNICO SUPERIOR UNIVERSITARIO EN TECNOLOGIA DEL   GAS	31
334	311619	TECNICO SUPERIOR UNIVERSITARIO EN HIDROCARBUROS	31
335	311691	TECNICO MEDIO EN METALURGIA	31
336	311692	TECNICO MEDIO EN MECANICA DE MANTENIMIENTO DE  PETROLEO	31
337	311693	TECNICO MEDIO EN PROCESOS MINEROS	31
338	311694	TECNICO MEDIO EN  MANUFACTURA TERMOPLASTICO Y METALES	31
339	311699	APRENDIZ INCE O PASANTES (AREA PETROLEO Y MINAS)	31
341	311712	TECNICO SUPERIOR UNIVERSITARIO EN DISEÑO TEXTIL	31
342	311713	TECNICO SUPERIOR UNIVERSITARIO EN DISEÑO DE JOYAS Y FANTASIA	31
343	311714	TECNICO SUPERIOR UNIVERSITARIO EN DISEÑO INTERIOR	31
344	311791	TECNICO MEDIO EN TEJEDURIA	31
345	311792	TECNICO MEDIO EN HILANDERIA	31
346	311799	APRENDIZ INCE O PASANTES (DISEÑO GRAFICO)	31
347	311811	TECNICO SUPERIOR UNIVERSITARIO EN MANTENIMIENTO AERONAUTICO	31
348	311812	TECNICO SUPERIOR UNIVERSITARIO EN TECNOLOGIA NAVAL	31
349	311813	TECNICO SUPERIOR UNIVERSITARIO EN MECANICA NAVAL	31
350	311891	TECNICO MEDIO EN CONSTRUCCION NAVAL	31
351	311892	TECNICO MEDIO EN MANTENIMIENTO AERONAUTICO	31
352	311899	APRENDIZ INCE O PASANTES (AREA NAVAL Y AERONAUTICA)	31
353	311991	TECNICO MEDIO EN ARTES MENCION: AUDIO-VISUAL	31
354	311992	TECNICO MEDIO EN ARTES MENCION: ARTES PLASTICAS	31
355	311993	TECNICO MEDIO EN PRODUCCION DE PULPA DE PAPEL	31
356	311994	TECNICO MEDIO EN ARTES MENCION: ARTE PURO	31
357	311995	TECNICO MEDIO EN ARTES MENCION: ARTE DEL FUEGO	31
358	321111	TECNICO SUPERIOR UNIVERSITARIO EN AGROINDUSTRIAL	32
359	321112	TECNICO SUPERIOR UNIVERSITARIO EN TECNOLOGÍA  AGROPECUARIA O EN PRODUCCION AGROPECUARIA	32
360	321113	TECNICO SUPERIOR UNIVERSITARIO EN TECNOLOGIA AGRÍCOLA O EN AGROTECNICA	32
361	321114	TECNICO SUPERIOR UNIVERSITARIO EN MANTENIMIENTO DE  MAQUI NARIA AGRICOLA	32
362	321115	TECNICO SUPERIOR UNIVERSITARIO EN ADMINISTRACION MERCADEO AGRICOLA	32
363	321116	TECNICO SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN DE EMPRE SAS AGROPECUARIAS O DE FINCAS	32
364	321191	TECNICO MEDIO EN PRODUCCION AGRICOLA	32
365	321199	APRENDIZ INCE O PASANTES (AREA AGRICOLA)	32
366	321211	TECNICO SUPERIOR UNIVERSITARIO EN TECNOLOGÍA DE ALIMENTOS	32
367	321212	TECNICO SUPERIOR UNIVERSITARIO EN PROCESAMIENTO Y CONTROL DE CALIDAD DE LOS ALIMENTOS	32
368	321213	TECNICO SUPERIOR UNIVERSITARIO EN TECNOLOGÍA FORESTAL	32
369	321214	TECNICO SUPERIOR UNIVERSITARIO EN RECURSOS NATURALES RENOVABLES	32
371	321215	TECNICO SUPERIOR UNIVERSITARIO EN TECNOLOGÍA AGROFORESTAL	32
372	321216	TECNICO SUPERIOR UNIVERSITARIO EN TECNOLOGIA AMBIENTAL	32
373	321291	TECNICO MEDIO EN TECNICAS DE ALIMENTOS	32
374	321292	TECNICO MEDIO FORESTAL	32
375	321293	TECNICO MEDIO AGROECOLOGIA	32
376	321294	TECNICO MEDIO EN TECNOLOGIA DE ALIMENTO	32
2079	921111	OBRERO DE VIVERO	92
377	321295	TECNICO MEDIO EN PRODUCCION DE BEBIDAS	32
378	321296	TECNICO MEDIO EN MOLINERIA E INDUSTRIAS CEREALISTA	32
379	321299	APRENDIZ INCE O PASANTES (AMBIENTE)	32
380	321311	TECNICO SUPERIOR UNIVERSITARIO EN TECNOLOGÍA PECUARIA	32
381	321312	TECNICO SUPERIOR UNIVERSITARIO EN ACUICULTURA Y OCEANOGRAFIA	32
382	321313	TECNICO SUPERIOR UNIVERSITARIO EN TECNOLOGÍA PESQUERA	32
370	321314	TECNICO SUPERIOR UNIVERSITARIO EN PESCA CONTINENTAL	32
383	321315	TECNICO SUPERIOR UNIVERSITARIO EN NAVEGACION Y PESCA	32
384	321316	TECNICO SUPERIOR UNIVERSITARIO EN ASISTENTE VETERINARIO	32
385	321391	TECNICO MEDIO EN TECNOLOGIA PESQUERA	32
386	321392	TECNICO MEDIO EN PRODUCCION PECUARIA	32
387	331111	TECNICO SUPERIOR UNIVERSITARIO EN GERONTOLOGIA	33
388	331112	TENICO SUPERIOR UNIVERSITARIO EN CITOTECNOLOGO	33
389	331113	TECNICO SUPERIOR UNIVERSITARIO EN SALUD BUCAL  (MECANICA DENTAL)	33
390	331114	TECNICO SUPERIOR UNIVERSITARIO EN SALUD BUCAL (HIGIENE BUCAL)	33
391	331115	TECNICO SUPERIOR UNIVERSITARIO EN ENFERMERIA	33
392	331199	APRENDIZ INCE O PASANTES (AREA SALUD)	33
393	331211	TECNICO SUPERIOR UNIVERSITARIO EN TERAPIA DE LENGUAJE	33
394	331212	TECNICO SUPERIOR UNIVERSITARIO EN FISIOTERAPIA	33
395	331213	TECNICO SUPERIOR UNIVERSITARIO EN TERAPIA OCUPACIONAL	33
396	331214	TECNICO SUPERIOR UNIVERSITARIO EN RADIOLOGIA E IMAGENOLOGIA	33
397	331215	TECNICO SUPERIOR UNIVERSITARIO EN RADIODIAGNOSTICO	33
398	331216	TECNICO SUPERIOR UNIVERSITARIO EN ELECTROMEDICINA	33
399	331217	TECNICO SUPERIOR UNIVERSITARIO EN CARDIOPULMONAR	33
400	331291	TECNICO MEDIO EN ELECTROMEDICINA	33
401	331292	TEC. MEDIO EN TRAUMATOLOGIA Y ORTOPEDIA	33
402	331299	APRENDIZ INCE O PASANTES (TERAPIAS SALUD)	33
403	331311	TEC. SUPERIOR UNIVERSITARIO EN INSPECCION  SANITARIA	33
404	331312	TEC. SUPERIOR UNIVERSITARIO EN GERENCIA DE  PROCESOS HOSPITALARIOS SERVICIOS DE SALUD	33
405	331313	TEC. SUPERIOR UNIVERSITARIO EN LA INFORMACION DE  LA SALUD EN ESTADISTICA DE LA SALUD	33
406	331391	TEC. MEDIO EN REGISTROS Y ESTADISTICAS DE LA SALUD	33
407	331392	TEC. MEDIO EN INSPECCION SANITARIA	33
408	331393	TEC. MEDIO EN SERVICIOS DE SALUD	33
801	521208	ENCARGADO DE LAVANDERIA	52
409	331394	TEC. MEDIO EN ADMINISTRACION DE SERVICIOS	33
410	331395	TEC. MEDIO EN LABORATORIO CLINICO	33
411	331399	APRENDIZ INCE O PASNTES (AREA SANITARIA)	33
412	341111	TEC. SUPERIOR UNIVERSITARIO EN EDUCACIÓN	34
413	341112	TEC. SUPERIOR UNIVERSITARIO EN EDUCACIÓN PREESCOLAR	34
414	341113	TEC. SUPERIOR UNIVERSITARIO  EN PSICOPEDAGOGIA	34
415	341114	TEC. SUPERIOR UNIVERSITARIO EN EDU FISICA, DEPORTES Y RECREACION NECESIDADES ESPECIALES	34
416	341115	TEC. SUPERIOR UNIVERSITARIO EN DEPORTE O FISICA Y DEPORTE	34
417	341191	TEC. MEDIO AUXILIAR DOCENTE	34
2072	921103	ENCEBADOR  (CAZA CON TRAMPAS)	92
418	341192	TEC. MEDIO EN PROM SOC Y ATENCION A LA INFANCIA/ADOLESCENCIA CIRC ESPECIALMENTE DIFICIL	34
419	341193	TEC. MEDIO EN PUERICULTURA	34
420	341194	MAESTRO DE EDUCACIÓN PREESCOLAR O PRIMARIA	34
421	341195	ANALISTA OCUPACIONAL	34
422	341196	PLANIFICADOR EDUCATIVO	34
423	341197	ORIENTADOR EDUCATIVO	34
424	341198	ORIENTADOR OCUPACIONAL	34
425	341199	APRENDIZ INCE O PASANTES (AREA EDUCACION)	34
426	341211	TEC. SUPERIOR DOCENTE ESPECIALISTA EN ELECTRONICA INDUSTRIAL	34
427	341212	TEC. SUPERIOR DOCENTE ESPECIALISTA EN MECANICA INDUSTRIAL	34
428	341213	TEC. SUPERIOR DOCENTE ESPECIALISTA EN ELECTRICIDAD INDUSTRIAL	34
429	341991	TEC. MEDIO EN ARTES MENCION MUSICA       	34
430	341992	TEC. MEDIO EN ARTES MENCION DANZA	34
431	341993	TEC. MEDIO EN ARTES MENCION TEATRO	34
432	351111	TEC. SUPERIOR  UNIVERSITARIO EN ADMINISTRACION-CONTADURIA	35
433	351112	TEC. SUPERIOR UNIVERSITARIO EN CONTADURIA	35
434	351113	TEC. SUPERIOR UNIVERSITARIO EN CONTADURIA Y FINANZAS	35
435	351114	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION	35
436	351115	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN Y CIENCIAS COMERCIALES	35
437	351116	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN CONTABILIDAD Y FINANZAS	35
438	351117	TEC. SUPERIOR UNIVERSITARIO EN CONTABILIDAD	35
439	351118	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN CONTABILIDAD Y COSTOS	35
440	351119	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN  MENCION PRESUPUESTO	35
441	351120	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION DE  EMPRESAS	35
442	351191	TEC. MEDIO EN CONTABILIDAD	35
443	351192	TEC. MEDIO EN ADMINISTRACION ADUANERA	35
444	351193	TEC. MEDIO EN FINANZAS Y SEGURO	35
445	351194	TEC. MEDIO EN ASISTENCIA ADMINISTRATIVA	35
446	351199	APRENDIZ INCE O PASANTES (ADMINISTRACION Y FINANZAS)	35
447	351211	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION-MERCADEO	35
448	351212	TEC. SUPERIOR UNIVERSITARIO EN MERCADEO	35
449	351213	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION DE COMPRAS          	35
450	351214	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN DE VENTAS	35
451	351215	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION DE  EMPRE SAS TURÍSTICAS	35
452	351216	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN  HOTELERIA O EMPRESAS HOTELERAS	35
453	351217	TEC. SUPERIOR UNIVERSITARIO EN TURISMO	35
454	351218	TEC. SUPERIOR UNIVERSITARIO EN PUBLICIDAD	35
455	351219	TEC. SUPERIOR UNIVERSITARIO EN PUBLICIDAD Y MERCADEO	35
456	351220	TEC. SUPERIOR UNIVERSITARIO EN PUBLICIDAD Y RELACIONES PÚBLICAS	35
457	351221	TEC. SUPERIOR UNIVERSITARIO MENCION PUBLICIDAD	35
458	351222	TEC. SUPERIOR UNIVERSITARIO MENCION  MERCADOTECNIA	35
459	351223	TEC. SUPERIOR UNIVERSITARIO EN MERCADOTECNIA	35
460	351224	TEC. SUPERIOR UNIVERSITARIO EN RECREACION	35
461	351291	TEC. MEDIO EN SERVICIOS TURISTICOS	35
462	351292	TEC. MEDIO EN MERCADEO	35
463	351293	TEC. MEDIO EN TURISMO	35
464	351294	TEC. MEDIO EN PROMOCION DE DEPORTES Y RECREACION	35
465	351299	APRENDIZ INCE O PASANTES (MERCADEO Y VENTAS)	35
466	351311	TEC. SUPERIOR UNIVERSITARIO MENCION: RENTAS  Y ADUANAS	35
467	351312	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN BANCARIA Y FINANCIERA	35
468	351313	TEC. SUPERIOR UNIVERSITARIO EN BANCA Y FINANZAS	35
469	351314	TEC. SUPERIOR UNIVERSITARIO EN GERENCIA FINANCIERA	35
470	351315	TEC. SUPERIOR UNIVERSITARIO EN COMERCIO  EXTERIOR	35
471	351316	TEC. SUP. UNIVERSITARIO EN ADMINISTRACIÓN  ADUANERA	35
472	351317	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION  MUNICIPAL	35
473	351318	TEC. SUPERIOR UNIVERSITARIO EN GESTION FISCAL Y TRIBUITARIA	35
474	351319	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN  TRIBU TARIA	35
475	351399	APRENDIZ INCE O PASANTES (BANCOS E IMPUESTOS)	35
476	351411	TEC. SUPERIOR UNIVERSITARIO TECNOLOGO EN  ESTADISTICA	35
477	351412	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION- INFORMATICA	35
478	351413	TEC. SUPERIOR UNIVERSITARIO EN CONTABILIDAD  COMPUTARIZADA	35
479	351414	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION ORGANIZACION Y SISTEMAS   	35
480	351491	TEC. MEDIO EN INFORMATICA	35
481	351499	APRENDIZ INCE O PASANTES (ESTADISTICAS Y CONTABILIDAD)	35
482	351511	TEC. SUPERIOR UNIVERSITARIO EN RELACIONES  PÚBLICAS	35
483	351512	TEC. SUPERIOR UNIVERSITARIO  EN GERENCIA DE  OFICINA	35
484	351513	TEC. SUPERIOR UNIVERSITARIO EN GERENCIA PÚBLICA    	35
485	351514	TEC. SUPERIOR UNIVERSITARIO EN GERENCIA DE  CONDOMINIO	35
486	351515	TEC. SUPERIOR UNIVERSITARIO EN SECRETARIA	35
487	351516	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION DE PERSONAL O DE RECURSOS HUMANOS	35
488	351517	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION DE  RECUR SOS FISICOS Y FINANCIEROS	35
489	351591	TEC. MEDIO EN SECRETARIADO EJECUTIVO	35
490	351599	APRENDIZ INCE O PASANTES (RELACIONES PUBLICAS Y RECURSOS HUMANOS)	35
491	351611	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION DE  EMPRESAS PETROLERAS	35
492	351612	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN  DE HIDRO CARBUROS	35
493	351613	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN  INDUSTRIAL	35
494	351614	TEC. SUPERIOR UNIVERSITARIO EN RELACIONES  INDUSTRIALES	35
495	351615	TEC. SUPERIOR UNIVERSITARIO EN GERENCIA   INDUSTRIAL	35
496	351616	TEC. SUPERIOR UNIVERSITARIO EN LOGÍSTICA  INDUSTRIAL	35
497	351617	TEC. SUPERIOR UNIVERSITARIO EN SISTEMAS  DE  MANTENIMIENTO	35
498	351618	TEC. SUPERIOR UNIVERSITARIO EN ORGANIZACIÓN  EMPRESARIAL	35
499	351691	TEC. MEDIO EN EQUIPOS Y MANTENIMIENTO	35
500	351692	TEC. MEDIO EN MAQUINAS Y HERRAMIENTAS	35
501	351699	APRENDIZ INCE O PASANTES (INDUSTRIAL)	35
502	351711	TEC. SUPERIOR UNIVERSITARIO EN RIESGO Y SEGUROS	35
2073	921104	PREPARADOR DE SALSAS (CASERA)	92
503	351712	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION  DEL TRANSPORTE	35
504	351713	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN	35
505	351714	TEC. SUPERIOR UNIVERSITARIO DEL TRANSPORTE Y  DISTRIBUCION DE BIENES	35
506	351715	TEC. SUPERIOR UNIVERSITARIO EN SEGUROS  MERCANTILES	35
507	351716	TEC. SUPERIOR UNIVERSITARIO EN TRABAJO SOCIAL	35
508	351717	TEC. SUPERIOR UNIVERSITARIO EN ASISTENCIA ESPECIALIZADA	35
509	351791	TEC. MEDIO EN SEGUROS	35
510	351792	TEC. MEDIO EN RAMOS PATRIMONIALES	35
511	351799	APRENDIZ INCE O PASANTES (AREA PETROLERA)	35
512	351811	TEC. SUPERIOR UNIVERSITARIO EN CIENCIAS POLICIALES	35
513	351812	TEC. SUPERIOR UNIVERSITARIO EN POLICIA PREVENTIVA	35
514	351813	TEC. SUPERIOR UNIVERSITARIO EN ESTUDIO  PENITENCIARIOS	35
515	351814	TEC. SUPERIOR UNIVERSITARIO EN CRIMINALISTICA	35
516	351891	TEC. MEDIO POLICIAL	35
517	351892	TEC. MEDIO EN DEFENSA CIVIL	35
518	351899	APRENDIZ INCE O PASANTES (AREA POLICIAL)	35
519	351991	TEC. MEDIO EN COMERCIANTE INDUSTRIAL	35
520	351992	TEC. MEDIO EN EMPAQUE Y EXPEDICION	35
521	351993	TEC. MEDIO EN RECEPCION Y CONSERVACION DEL   MATERIA PRIMA	35
522	361111	TEC. SUPERIOR UNIVERSITARIO EN CIENCIAS  AUDIOVISUALES Y FOTOGRAFIA	36
523	361112	TEC. SUPERIOR UNIVERSITARIO EN DOCUMENTACION E  INFORMACION	36
524	361113	TEC. SUPERIOR UNIVERSITARIO EN IDIOMAS MENCION INGLES	36
525	361191	TEC. MEDIO EN INTERCULTURAL	36
526	361192	TEC. MEDIO EN BILINGUE	36
527	361193	TEC. MEDIO MENCION AUDIOVISUAL	36
528	411101	SECRETARIA EN GENERAL	41
530	411102	SECRETARIA ADMINISTRATIVA	41
531	411103	SECRETARIA BILINGÜE	41
532	411104	TRANSCRICTOR DE DATOS	41
533	411105	ASISTENTE DE OFICINA	41
534	411106	ARCHIVISTA	41
535	411107	KARDISTA	41
536	411108	ESCRIBIENTE PÚBLICO	41
537	411109	AUXILIAR DE BIBLIOTECA	41
538	411110	RECEPCIONISTA EN GENERAL	41
539	411111	ESCRITOR	41
540	411112	ESCRITOR ESPECIALIZADO PARA LOS MEDIOS DE  COMUNICACIÓN	41
541	411113	MECANOGROFO	41
542	411114	SECRETARIO DE GOBIERNO	41
543	411115	SECRETARIO DE TRIBUNALES 	41
544	411116	SECRETARIA DE EMBAJADA	41
545	411117	SECRETARIA ESPECIALIZADA	41
546	411199	APRENDIZ   INCE(OFICINA EN GENERAL)	41
547	421101	AUXILIAR DE CONTABILIDAD	42
548	421102	AUXILIAR DE CÁLCULO DE COSTOS	42
549	421103	AUXILIAR  DE CÁLCULO DE PRESUPUESTO	42
550	421104	AUXILIAR DE PAGO DE NÓMINA	42
551	421105	ASISTENTE DE ESTADÍSTICA	42
552	421199	APRENDIZ  INCE  (CONTABILIDAD, NOMINA)	42
553	431101	CONFRONTADOR DE FIRMAS (BANCARIAS)	43
529	431102	RECEPCIONISTA BANCARIA	43
554	431103	CAJERO DE BANCO	43
555	431104	OFICINISTA DE OPERACIONES DE CAMBIO	43
556	431105	OFICINISTA DE COBRANZAS	43
557	431106	OFICINISTA DE CRÉDITO (FIDEICOMISO)	43
558	431107	INFORMADOR COMERCIAL (BANCARIO)	43
559	431108	ASISTENTE ADMINISTRATIVO (BANCARIO)	43
560	431109	AUXILIAR DE CONTABILIDAD (BANCARIO)	43
562	431110	AGENTE BANCO  HIPOTECARIO	43
563	431111	CORREDOR DE BANCOS (PROMOTOR DE NEGOCIOS)	43
564	431112	FACTURADOR	43
561	431113	PROGRAMADOR DE BANCO DE DATOS	43
565	431114	OPERADOR DE MAQUINA CLASIFICADORA Y TABULADORA	43
566	431115	OPERADOR DE MAQUINA CONTABLE (BANCOS)	43
567	431116	OPERADOR DE MAQUINA DE CALCULAR	43
568	431117	OPERADOR DE MAQUINA DE TRATAMIENTO DE TEXTO	43
569	431118	OPERADOR DE MAQUINA REPRODUCTORA DE  DOCUMENTOS	43
570	431119	OPERARIO DE MAQUINA FLEXOWRITER  (REPRODUCTORA PERFORADORA)	43
571	431120	OPERADOR DE MAQUINA PERFORADORA VERIFICADORA	43
572	431199	APRENDIZ  INCE (AREA   BANCARIA)	43
573	511101	CHOFER	51
574	511102	CONDUCTOR  DE  VEHICULO DE PASAJEROS  (TAXISTA)	51
575	511103	CONDUCTOR  DE  AUTO DE CARRERAS	51
576	511104	CONDUCTOR  DE  AUTOBUS  (TRANSPORTE  COLECTIVO)	51
577	511105	CONDUCTOR DE CAMIONETA (AVANCE)	51
578	511106	CONDUCTOR DE CAMION  (TRANSPORTE  LARGA DISTANCIA)	51
579	511107	CONDUCTOR DE CAMION LANZADERAS / MINAS	51
581	511108	CONDUCTOR REPARTIDOR	51
582	511109	CONDUCTOR DE FURGONETA	51
583	511110	DESPACHADOR DE TRANSPORTE POR CARRETERA  (PASAJERO)	51
584	511111	CONDUCTOR DE EXCAVADORA	51
585	511112	CONDUCTOR DE BULLDOZER	51
586	511113	AGENTE DE OFICINA DE TRANSPORTE	51
587	511114	CONDUCTOR MARTINETE	51
588	511115	COORDINADOR DE TRANSPORTE POR CARRETERA (CARGA)	51
589	511116	MONTACARGUISTA	51
590	511117	CONTROLADOR   DE   MOVIMIENTO DE CAMIONES	51
591	511118	OPERADOR DE CARRETILLA ELEVADORA DE HORQUILLA	51
592	511119	FISCAL DE TRANSPORTE POR CARRETERA  (AUTOBUS)	51
593	511120	CONDUCTOR  DE TRACTOR  AGRÍCOLA  (OPERADOR DE COSECHADORA)	51
594	511121	MOTOCICLISTA REPARTIDOR	51
595	511122	CONDUCTOR DE MAQUINA AGRICOLA / MOTORIZADA	51
596	511123	CONDUCTOR DE MAQUINISTA LOCOMOTORA	51
597	511124	CONDUCTOR DE VEHICULOS  DE TRACCCION ANIMAL	51
598	511125	CONDUCTOR DE TREN	51
599	511126	COLECTOR DE AUTOBUS  (CARRETERA)	51
600	511127	CAJERO COBRADOR DE PEAJE	51
601	511128	PILOTO DE AVION  EN GENERAL	51
602	511129	CONDUCTOR  / MAQUISTA  LOCOMOTORA  (MINAS Y CANTERAS)	51
603	511131	PILOTO DE AVION ESPACIALIZADO	51
604	511132	COPILOTO DE AVION	51
605	511133	NAVEGANTE DE VUELO (AERONAVES)	51
606	511134	MECANICO NAVEGANTE DE AEREONAVES	51
607	511135	INSPECTOR DE OPERACIONES DE VUELO	51
608	511136	CONTROLADOR DE TRAFICO AEREO  (CONTROL DE VUELO)	51
609	511137	COORDINADOR DE CARGA  (TRANSPORTE AEREO)	51
610	511138	SUPERVISOR DE TRANSPORTE AEREO	51
611	511139	JEFE DE SERVICIO DE TRANSPORTE AEREO	51
612	511141	ENTRENADOR DE AEROMOZA	51
613	511140	PORTER  (AVIACION)	51
614	511142	INSTRUCTOR DE SIMULADOR  (AVIADOR)	51
615	511143	CONDUCTOR DE MAQUINA CONTINUA DE ARRANQUE	51
616	511144	CONDUCTOR DE MAQUINA ROZADORA ( MINAS)	51
617	511145	CAJERO - COBRADOR PEAJE	51
618	511146	INSPECTOR DE SERVICIOS DE TRANSPORTE POR CARRETERAS	51
619	511147	SUPERVISOR DE MANTEMINIENTO (TRANSPORTE)	51
620	511201	CAPITAN DE BUQUE	51
621	511202	CAPITAN DE MUELLE	51
622	511203	CAPITAN COSTERO	51
623	511204	CAPITAN REMOLCADOR	51
624	511205	PRIMER PILOTO DE NAVEGACION	51
625	511207	TERCER PILOTO DE NAVEGACION	51
626	511208	PILOTO PRÁCTICO DE NAVEGACIÓN	51
627	511209	PILOTO REMOLCADOR (TRANSPORTADOR DE CHALANA  SALINA NATURAL)	51
628	511210	PATRON REMOLCADOR (DIQUES)	51
629	511211	TIMONEL	51
630	511212	MAQUINISTA EN GENERAL	51
631	511213	JEFE DE MAQUINAS	51
632	511214	CONTRAMAESTRE	51
633	511215	MAYORDOMO DE BUQUE	51
634	511216	MARINERO EN GENERAL	51
635	511217	PAÑOLERO  (BARCOS)	51
636	511218	MOTORISTA A BORDO	51
637	511219	FOGONERO A BORDO ( A VAPOR )	51
638	511220	OPERARIO MECANICO  (BUQUE)	51
639	511221	SOBRECARGO (BUQUE)	51
640	511222	DESPACHADOR DE BUQUES	51
641	511224	CABO DE VIDA  (MAR)	51
642	511225	APAREJADOR  DE BARCOS	51
643	511227	CARPINTERO  (BUQUE)	51
644	511228	ACEITERO  (BUQUE)	51
645	511229	COCINERO  (BUQUE)	51
646	511230	AYUDANTE DE COCINA  (BUQUE)	51
647	511231	CAMARERO DE BUQUE	51
648	511232	RADIO OPERADOR DE BUQUE	51
649	511301	JEFE DE ESTACION FERROCARRIL	51
650	511302	JEFE DE MOVIMIENTO DE TRENES	51
651	511303	CONTROLADOR  DE  MOVIMIENTOS  DE  TRENES  (TRENISTA)	51
652	511304	INSPECTOR DE SERVICIOS DE TRANSPORTE FERROVIARIO	51
653	511305	DESPACHADOR  DE  TRENES (CONROL DE  TRÁFICO CENTRALIZADO)	51
654	511306	JEFE DE SERVICIOS DE TRANSPORTE FERROVIARIO	51
655	511307	JEFE DE TREN DE PASAJEROS	51
656	511308	JEFE DE TREN DE CARGA	51
657	511309	MAQUINISTA DE TREN	51
658	511310	MAQUINISTA DE LOCOMOTORAS  MINAS Y CANTERAS	51
659	511311	AYUDANTE DE MAQUINISTA DE TREN	51
660	511312	CAMBIADOR  DE  VIAS  GUARDAGUJAS (FERROCARRIL)	51
661	511313	REPARADOR DE  VAGONES (VAGONERO)	51
662	511314	COLECTOR DE TREN DE PASAJEROS	51
663	511315	GUARDAFRENO   (FERROCARRIL)	51
664	511316	AGENTE DE MANIOBRAS DE TRENES	51
666	511317	ENCARGADO DE MANTENIMIENTO DE UNIDADES MOTRICES	51
667	511318	MAESTRO DE VIAS  (FERROCARRIL)	51
668	511319	SUPERVISOR DE PERSONAL DE ESTACIONES FERREAS	51
669	511320	FISCAL DE VIAS Y OBRAS	51
670	511321	INSPECTOR DE VIAS	51
671	511322	FISCAL DE MOVIMIENTOS  (FERROCARRILES)	51
672	511323	AGENTE DE SERVICIOS DE CARGA  (FERROCARILES)	51
673	511324	JEFE DE MANTENIMIENTO DE TRENES	51
674	511401	AYUDANTE DE REPARADOR DE TELEFONOS	51
675	511402	AYUDANTE DE TÉCNICO DE TELECOMUNICACIONES	51
676	511403	AYUDANTE DE TEC. DE TELEFONOS AUTOMÁTICOS	51
677	511404	OPERARIO DE CENTRAL TELEFONICA PRIVADA	51
678	511405	EMPALMADOR DE CABLES DE TELEFONOS	51
679	511406	OPERADOR  DE TRAFICO  (TELEFONIA)	51
680	511407	REPARADOR DE TERMINALES TELEFONICAS	51
681	511408	OPERADOR  DE TRÁFICO BILINGÜE (TELEFONIA)	51
682	511409	OPERADOR  DE TELEX	51
683	511410	OPERARIO DE MANTENIMIENTO DE TENDIDO TELEFONICO	51
684	511411	AGENTE  DE  ATENCION EN  AVERIAS   TELEFÓNICAS	51
685	511412	FISCAL DE ALUMBRADO  (LINEAS DE DISTRIBUCION CABLISTA-TELEFONICO	51
686	511413	RADIOTELEFONISTA DE ATENCION TERRESTRE	51
687	511414	OPERADOR  DE TELEFAX	51
688	511415	RADIO OPERADOR DE NAVEGACION DE AREAS	51
665	511416	CRIPTOGRAFO	51
689	511417	JEFE DE CRIPTOGRAFO	51
690	511418	JEFE DE INFORMACION	51
691	511419	JEFE DE PÁGINAS Y SECCIONES	51
692	511420	REDACTOR DE PERIODICO Y REVISTA	51
693	511421	REPORTERO	51
694	511422	FOTOGRAFO DE PRENSA	51
695	511423	JEFE DE ARCHIVO   (PRENSA)	51
696	511424	JEFE DE PREGON	51
697	511425	RECEPTOR DE AVISOS	51
698	511426	JEFE DE DPTO DE CIRCULACION	51
699	511427	DIRECTOR DE CIRCULACION DE PERIODICOS	51
700	511428	CABLISTA TELEFONICO	51
701	511429	FOTOGRAFO PUBLICITARIO	51
702	511430	INSTALADOR DE TELEFONOS Y TELEGRAFOS	51
703	511431	JEFE DE INSTALACIÓN Y REPARACIÓN  DE TELEFONOS	51
704	511432	REPARADOR DE INSTALACIONES TELEGRAFICAS	51
705	511433	SUPERVISOR DE RED DE CABLES TELEFONICOS 	51
706	511434	OPERADOR DE MAQUINA PARA REVELAR FOTOGRAFIAS	51
707	511435	PROGRAMADOR DE PUBLICIDAD	51
708	511436	OPERARIO DE LABORATORIO FOTOGRAFICO ESPECIALIZADO	51
709	511501	DIRECTOR DE FILMACION (CINE)	51
710	511502	DIRECTOR DE FOTOGRAFIA  (PELICULAS)	51
711	511503	FILMADOR DE PELICULAS	51
712	511504	DIRECTOR  DE PRODUCCION COMERCIAL PARA RADIO  Y TELEVISION	51
713	511505	DIRECTOR ARTISTICO DE RADIO Y TELEVISION	51
714	511506	REDACTOR JEFE DE GUIONES DE CINE, RADIO Y TELEVISION	51
2075	921106	RASTRILLERO               	92
715	511507	JEFE DE DPTO DE NOTICIAS DE RADIO Y  TELEVISION	51
716	511508	LOCUTOR DE RADIO Y TELEVISION	51
717	511509	PRESENTADOR-ANIMADOR	51
718	511510	COMENTARISTA DE RADIO Y TELEVISION	51
719	511511	ESCENOGRAFO	51
720	511512	OPERADOR DE PLANTA DE TRANSMISION DE RADIO	51
721	511513	OPERADOR DE PLANTA TRANSMISORA DE TELEVISION	51
722	511514	OPERADOR DE MASTER  (TELEVISION)	51
723	511515	OPERADOR DE ESTUDIO DE RADIO DIFUSION	51
724	511516	OPERADOR DE CAMARA DE CINE	51
725	511517	OPERADOR DE AUDIO  (TELEVISION)	51
726	511518	CAMAROGRAFO DE CINE Y TELEVISIÓN	51
727	511519	AYUDANTE DE CAMARA DE  CINE Y TELEVISIÓN	51
728	511520	OPERADOR DE TELE-CINE	51
729	511521	AYUDANTE DE EQUIPO DE TELEVISIÓN	51
730	511522	OPERADOR DE  VIDEO-TAPE	51
731	511523	OPERADOR DE VIDEO  (TELEVISION)	51
732	511524	OPERADOR DE CONTROL MAESTRO (TELEVISIÓN Y RADIO)	51
733	511525	OPERADOR DE CINE  (PROYECCION CINEMATOGRAFICA)	51
734	511526	LUMINOTECNICO	51
735	511527	REVISOR DE PELICULAS	51
736	511528	AYUDANTE DE MECANICO AJUSTADOR DE  ELECTRONICA	51
737	511529	OPERADOR DE EQUIPO DE AMPLIFICACION DE SONIDO	51
738	511530	OPERADOR DE EQUIPO DE REGISTRO DE SONIDO	51
739	511531	COMPAGINADOR DE PELICULA	51
740	511532	OPERADOR DE GRABADORA DE SONIDO	51
741	511533	ACTOR / ACTRIZ ( CINE, TEATRO Y TV)	51
742	511535	DIRECTOR DE COREOGRAFIA	51
743	511536	DIRECTOR DE TEATRO	51
744	511537	DIRECTOR DE ESCENA / CINE	51
745	511538	DIRECTOR CREATIVO	51
746	511539	DIRECTOR DE ARTE	51
747	511540	JEFE DE MEDIOS	51
748	511541	JEFE DE PROPAGANDA	51
749	511542	MONTADOR DE ANTENAS RECEPTORAS	51
750	511544	OPERADOR DE CAMARA DE TELEVISIÓN 	51
751	511601	EMBALADOR A MANO	51
752	511602	EMBALADOR A MAQUINA	51
753	511603	OPERADOR DE MAQUINA DE EMPACAR	51
754	511604	OPERADOR DE MAQUINA DE ENSAMBLAR  (CAJAS)	51
755	511605	OPERADOR  DE TRANSPORTADORA DE BUQUES	51
756	511606	AYUDANTE DE SERVICIOS DE CARGA  (FERROCARRILES)	51
757	511607	OPERADOR DE MONTACARGA	51
758	511608	LLENADOR DE GANDOLAS DE  CERVEZAS	51
759	511609	MACETERO	51
760	511610	ENCARGADO DE ABASTECIMIENTO DE MATERIALES 	51
761	511612	CARGADOR DE AVIONES	51
762	511613	EMPLEADO DE ALMACEN EN GENERAL	51
763	511614	JEFE DE ALMACEN	51
764	511615	RESIBIDOR- DESPACHADOR DE PEDIDOS	51
765	511616	AYUDANTE DE ALMACEN	51
766	511617	CONTROLADOR DE EXISTENCIA	51
767	511618	AYUDANTE CONTROLADOR DE EXISTENCIA	51
768	511619	INSPECTOR DE CALIDAD (PRODUCTOS)	51
769	511620	INSPECTOR DE CONTROL DE PRECIOS	51
770	511621	SUPERVISOR DE ALMACEN 	51
771	511622	SUPERVISOR DE CONTROL Y PROCESOS (ACEITES Y GRASAS)	51
772	511701	JEFE DE SERVICIOS POSTALES	51
773	511702	JEFE DE OFICINA DE CORREOS	51
774	511703	MENSAJERO	51
775	511704	CARTERO	51
776	511705	TAQUILLERO DE CORREOS	51
777	511706	CLASIFICADOR Y DISTRIBUCION DE CORRESPONDENCIA	51
778	511707	SUPERVISOR DE CORREO	51
779	511708	EMPLEADO DE OFICINA IMPUESTOS, SELLOS Y TIMBRES	51
780	521101	PELUQUERO	52
781	521102	BARBERO	52
782	521103	COSMETOLOGO	52
783	521104	MAQUILLADOR  (A)	52
784	521105	ESPECIALISTA EN TRATAMIENTO DE BELLEZA	52
785	521106	MANICURISTA	52
786	521107	PEDICURISTA	52
580	521108	ASISTENTE DE BAÑO  (SAUNA)	52
787	521109	QUIROPEDISTA	52
788	521110	FOTOGRAFO EN GENERAL	52
789	521111	AUXILIAR DE FOTOGRAFO	52
790	521112	MODELO EN GENERAL	52
791	521113	MASAJISTA	52
792	521114	RETRATISTA	52
793	521199	APENDIZ INCE (BELLEZA)	52
794	521201	CONSERJE DE EDIFICIO	52
795	521202	PORTERO	52
796	521203	SUPERVISOR DE EMSAMBLAJE DE COCINA	52
797	521204	AMA DE LLAVES	52
798	521205	NIÑERA DOMESTICA	52
799	521206	NIÑERA ESCOLAR	52
800	521207	AYUDANTE DE GUARDERIA ESCOLAR	52
802	521209	LAVANDERO EN GENERAL  (LAVANDERIA)	52
803	521210	OPERARIO DE LIMPIEZA EN GENERAL	52
804	521211	FUMIGADOR EN GENERAL	52
805	521212	ASCENSORISTA	52
806	521213	JEFE DE SERVICIOS ASCENSORES Y ANALOGOS	52
807	521214	SUPERVISOR DE MONTAJE DE ASCENSORES	52
808	521215	AYUDANTE DE INSTALADOR DE ASCENSORES	52
809	521216	DETECTIVE	52
810	521217	DAMA DE COMPAÑÍA	52
812	521218	DECORADOR	52
813	521219	DECORADOR ESPECIALIZADO	52
814	521220	INSTALADOR DE ASCENSORES	52
815	521221	SUPERVISOR DE ZONA DE RECOLECCION  (LAVANDERIA)	52
816	521222	PLANCHADOR A MANO	52
817	521226	LIMPIADOR   (BUQUE)	52
818	521227	BAILARIN	52
819	521301	GUIA SAFARI	52
820	521302	GUIA DE MUSEO	52
821	521303	RECREADORES  	52
822	521304	PAYASO	52
823	521305	BABY SISTER	52
824	521306	DISCJOKEY	52
825	521307	SALVAVIDAS	52
826	521308	ATLETA	52
827	521309	ENTRENADOR DEPORTIVO	52
828	521310	INSTRUCTOR DE PATINADORES	52
829	521311	ÁRBITRO  DE  DEPORTES	52
830	521312	COMISARIO DE PISTAS  (HIPODROMO)	52
831	521313	PREPARADOR DE CABALLOS	52
832	521314	JINETE	52
833	521315	MONITOR	52
834	521316	AUXILIAR DE SORTEO	52
835	521317	JEFE DE PIZARRA  (HIPODROMO)	52
836	521318	JEFE DE INSPECTOR DE JUEGOS  (5 Y 6)	52
837	521319	CABINERO  (TELEFERICO)	52
838	521320	CONTROLADOR DE TIEMPO  (TELEFERICO)	52
839	521321	CONTROLADOR DE ESTACION  (TELEFERICO)	52
840	521322	ACOMODADOR  (ESPECTACULOS PUBLICOS)	52
841	521323	SUPERVISOR DE PISTAS DE CARRERAS	52
842	521324	CABALLERICERO	52
843	521325	PRONOSTICADOR HIPICO	52
844	521326	TAQUILLERO	52
845	521327	RECEPTOR DE APUESTAS	52
846	521329	B0XEADOR	52
847	521330	ACROBATA             	52
848	521332	GUARDIAN DE MUSEO	52
849	521333	CRIADOR DE ANIMALES DE LABORATORIO	52
850	521334	INPECTOR TURÍSTICO	52
851	521335	JUEZ DE SALIDA (HIPÓDROMO)	52
852	521336	NUMEROLOGO	52
853	521337	MUSICO DE CABARET	52
854	521338	MAESTRO DE BALLET	52
855	521339	MIMO (MIMICO)	52
856	521340	METEOROLOGO (PREVISIÓN DEL TIEMPO)	52
857	521341	LUCHADOR	52
858	521342	SUBASTADOR 	52
859	521343	SUBASTADOR DE CABALLOS DE CARRERAS	52
860	521344	PAGADOR DE APUESTAS EN TAQUILLA (HIPÓDROMO)	52
861	521345	PRESTIDIGITADOR	52
862	521346	PROMOTOR TURÍSTICO  JEFE	52
863	521347	VIGILANTE DE ESTACIONAMIENTO	52
864	521348	VIGILANTE DE AREAS RECREATIVAS	52
865	521401	VIGILANTE DE SEGURIDAD	52
866	521402	VIGILANTE PRIVADO	52
867	521403	INSPECTOR DE SEGURIDAD	52
868	521404	GUARDIAN DE PRISION  (CELADOR)	52
869	521405	AYUDANTE DE PRISIÓN	52
870	521406	GUARDAESPALDAS	52
871	521407	GUARDA  BOSQUE	52
872	521408	BOMBERO (FORESTAL Y AERONÁUTICO)	52
873	521409	AUXILIAR DE BOMBEROS	52
874	521410	FISCAL DE TRANSITO	52
875	521411	AGENTE DE POLICIA	52
876	521412	INSPECTOR DE SINIESTROS	52
877	521501	COCINERO	52
878	521502	COCINERO ESPECIALIZADO	52
879	521503	JEFE DE COCINA	52
880	521504	AYUDANTE DE COCINA	52
881	521505	JEFE DE MESONERO	52
882	521506	MESONERO EN GENERAL	52
883	521507	AYUDANTE DE  MESONERO	52
884	521508	PIZZERO	52
885	521509	PARRILLERO  (POLLO Y CARNE A LA BRAZA)	52
886	521510	LUNCHERO	52
887	521511	ANFITRIONA	52
888	521512	BARMAN	52
889	521513	MAYORDOMO	52
890	521514	GUIA TURISTICA	52
891	521515	GUIA DE VIAJES	52
892	521516	AGENTE DE  TURISMO	52
893	521517	PROMOTOR TURISTICO	52
894	521518	BOTONES	52
895	521519	ENCARGADO DE LENCERIA	52
896	521520	AUXILIAR DE LENCERÍA	52
897	521521	CAMARERA	52
898	521522	MESONERA  (FICHERA)	52
899	521523	EMPLEADO DE AGENCIAS DE VIAJES	52
900	521524	CAJERO DE CAJA REGISTRADORA	52
901	521525	CAJERO DE HOTEL	52
902	521526	RECEPCIONISTA DE HOTEL	52
903	521527	PASTELERO DE HOTEL	52
904	521528	PASTELERO DE RESTAURANT	52
905	521529	ORGANIZADOR DE VIAJES	52
906	521543	PRODUCTOR DE PELÍCULAS	52
907	521599	APRENDIZ INCE O PASANTES ( TURISMO, COMIDAS Y BEBIDAS)	52
908	521601	CAMILLERO	52
909	521602	AYUDANTE DE ENFERMERIA	52
910	521603	ASISTENTE DENTAL	52
911	521604	EMPLEADO DE MANICOMIO	52
912	521605	AUXILIAR DE FARMACIA	52
913	521606	ASISTENTE SOCIAL A DOMICILIO	52
914	521607	ASISTENTE DE VETERINARIO	52
915	521608	EMBALSAMADOR	52
916	521609	EMPLEADO DE POMPAS FUNEBRES	52
917	521610	MAQUILLADOR DE CADAVERES	52
918	521611	AGENTE DE POMPAS FÚNEBRES	52
919	521613	HIGIENISTA	52
920	521614	INSPECTOR DE SALUD PÚBLICA	52
1132	721111	ENCOFRADOR DE MADERA	72
921	521615	INSPECTOR DE SEGURIDAD Y SALUD / CONTAMINACIÓN DEL MEDIO AMBIENTE	52
922	521616	INSPECTOR DE SEGURIDAD Y SALUD / PROTECCIÓN DE LOS CONSUMIDORES	52
811	521617	INSPECTOR DE SEGURIDAD Y SALUD / TRABAJO 	52
923	521618	JEFE DE ENFERMERA	52
924	521619	LABORATORISTA CLINICO	52
925	521620	REGENTE DE FARMACIA	52
926	521621	RECEPCIONISTA DE HOSPITAL	52
927	521622	PARTERA	52
928	531101	VENDEDOR EN GENERAL	53
929	531102	VENDEDOR A DOMICILIO (ELECTRODOMESTICO)	53
930	531103	VENDEDOR ESPECIALIZADO	53
931	531104	VENDEDOR AL POR MAYOR	53
932	531105	VENDEDOR AL POR MENOR	53
933	531106	VENDEDOR DE MOSTRADOR	53
934	531107	VENDEDOR DE PUESTO  (MERCADO)	53
935	531108	VENDEDOR DE QUIOSKO	53
936	531109	VENDEDOR DE TIENDAS POR DPTOS	53
937	531110	VENDEDOR DE PUBLICIDAD	53
938	531111	AGENTE VIAJERO	53
939	531112	VENDEDOR  (MERCHANDAINT) (CAJERO)	53
940	531201	ASESOR DE VENTAS  (JUNIOR)	53
941	531202	EJECUTIVO DE VENTAS  (SENIOR)	53
942	531203	SUPERVISOR DE VISITADORES MEDICOS	53
943	531204	VISITADOR  MEDICO	53
944	531205	SUPERVISOR DE VENTAS	53
945	531206	VENDEDOR INMOBILIARIO  (BIENES Y RAICES)	53
946	531207	VENDEDOR DE SEGUROS	53
947	531208	AGENTE DE SEGUROS	53
948	531209	CORREDOR DE BOLSA	53
949	531210	NEGOCIADOR DE SEGUROS	53
950	531211	INSPECTOR DE RIESGO Y SEGUROS	53
951	531212	PERITO EVALUADOR DE BIENES  (TASADOR)	53
952	531213	AGENTE DE CAMBIO	53
953	531216	DECLARANTE DE ADUANA	53
954	531217	INSPECTOR DE  PESAS Y MEDIDAS	53
955	531218	INSPECTOR DE PREVENCIÓN DE INCENDIOS	53
956	531219	JEFE DE CREDITO Y COBRANZAS	53
957	531220	JEFE DE SEGURIDAD Y PREVENCIÓN DE INCENDIOS	53
958	531221	JEFE VENTAS (COMERCIO AL POR MAYOR)	53
959	531222	JEFE VENTAS (COMERCIO AL POR MENOR)	53
960	531223	RECAUDADOR DE IMPUESTOS	53
961	531224	SUPERVISOR DE ENTRENAMIENTO DE PERSONAL	53
962	531225	SUPERVISOR GENERAL DE TIENDAS POR DPTOS	53
963	531226	SUPERVISOR DE VENTAS (TIENDAS POR DPTOS)	53
964	531227	SUPERVISOR DE PROMOTORES DE SEGUROS	53
965	531228	PRESTAMISTA DE DINERO	53
966	531230	PROMOTOR DE SEGUROS	53
967	531329	PRESTAMISTA (PRENDAS DE VALOR)	53
968	541101	OPERADOR DE SUBESTACIONES  (GENERACIÓN ELECTRICA)	54
969	541102	OPERADOR DE TURBINAS CENTRAL ELECTRICA	54
970	541103	OPERADOR DE CONDENSACION	54
971	541104	JEFE DE PLANTA  (ELECTRICIDAD)	54
972	541105	TABLERISTA DE PATIO	54
973	541106	OPERADOR DE INSTALACIONES DE CENTRAL  TERMOELECTRICA (OPERADOR DE BANCO)	54
974	541199	APRENDIZ INCE O PASANATES (AREA ELECTRICIDAD)	54
975	541201	CAPORAL CABLISTA DE TRANSMISIÓN	54
976	541202	JEFE DE GRUPO DE OPERACIONES	54
977	541203	CABLISTA DE TRANSMISION  (LINIERO)	54
978	541204	EMPALMADOR DE CABLES ELECTRICOS	54
979	541205	CAPORAL DE LINEA EN FRIO  (AEREAS)	54
980	541206	LINIERO DE CABLES ELECTRONICOS	54
981	541207	OPERADOR DE SUBESTACION  (TRANSMISIÓN ELECTRICA)	54
982	541208	OPERADOR DE CUADRO DE DISTRIBUCION / CENTRAL ELECTRICA	54
983	541209	REPARTIDOR DE CARGA DE ENERGIA ELECTRICA	54
984	541210	AYUDANTE DE ELECTRICIDAD	54
985	541211	PROGRAMADOR DE TRANSMISIONES	54
986	541212	OPERADOR DE TRANSMISIÓN (CONTROL Y  MANTENIMIENTO)	54
987	541299	APRENDIZ INCE O PASANTES ( AREA ELECTRICIDAD)	54
988	541301	AFERIDOR (JEFE)	54
989	541302	FISCAL DE ALUMBRADO (ELECTRICIDAD)	54
990	541303	JEFE DE DISTRIBUCION	54
991	541304	JEFE DE DISTRITO  (DISTRIBUCION)	54
992	541305	LINIERO DE ACOMETIDAS	54
993	541306	INSPECTOR DE ALUMBRADO PÚBLICO	54
994	541307	CAPORAL DE LINEA EN FRIO  (ELECTRICIDAD)	54
995	541308	CORPORAL INSTALADOR	54
996	541309	JEFE DE SECCION DE UNIDADES	54
997	541310	CONTROLADOR DE MEDIDORES	54
998	541311	CORTADOR DE SERVICIOS ELECTRICO	54
999	541312	INSTALADOR DE MEDIDORES	54
1000	541313	LECTOR DE MEDIDORES	54
1001	541314	AJUSTADOR DE ELECTRICIDAD EN GENERAL	54
1002	541315	AJUSTADOR ELECTRICISTA ESPECIALIZADO	54
1003	541316	INSTALADOR DE LINEAS ELECTRICAS	54
1004	541317	CAPATAZ  ELECTRICISTA	54
1005	541318	INSTALADOR  DE LINEAS ELECTRICAS ESPECIALIZADO	54
1006	541319	AYUDANTE DE  MONTADOR DE LINEA DE ENERGIA  ELECTRICA	54
1007	541399	APRENDIZ INCE O PASANTES (AREA ELECTRICIDAD)	54
1008	541401	OPERADOR DE INSTALACIONES DE CENTRAL HIDROELECTRICA	54
2080	921112	PEON PESQUERO	92
1009	541402	OPERADOR DE PLANTA TRATAMIENTO DE AGUA	54
1010	541403	OPERADOR DE PLANTA HIDROELECTRICA	54
1011	541404	SUPERVISOR DE GAS DUCTOS	54
1012	541405	OPERADOR DE INSTALACIONES  DE  DEPURACION DE AGUA	54
1013	541406	OPERADOR DE INSTALACIONES DE ESTACION DE BOMBEO DE AGUA	54
1014	541407	AUXILIAR DE  HIDROMETERIOLOGIA	54
1015	541408	MEDIDOR DE AGUA	54
1016	541409	OPERADOR DE COMBUSTIBLE  Y GAS	54
1017	541410	INSTALADOR DE GAS DOMICILIARIO	54
1018	541411	INSTALADOR Y REPARTIDOR DE BOMBONAS DE GAS	54
1019	541412	REPARADOR DE TUBERIAS DE AGUA	54
1020	541413	INSTALADOR DE MEDIDORES DE AGUA	54
1021	541414	COBRADOR DE SERVICIO DE AGUA POTABLE	54
1022	541415	COBRADOR DE SERVICIO DE GAS DOMESTICO	54
1023	541416	INSTALADOR DE GAS DOMESTICO  (EDIFICIOS)	54
1024	541417	SUPERVISOR DE INSTALACIONES DE GAS DIRECTOS	54
1025	541418	REPARADOR DE TUBERÍAS DE AGUA	54
1026	541419	SUPERVISOR DE OLEODUCTOS	54
1027	611101	PRODUCTOR AGRÍCOLA EN GENERAL	61
1028	611102	PRODUCTOR DE CULTIVO DE ÁRBOLES Y ÁRBUSTOS	61
1029	611103	FRUTICULTOR EN GENERAL	61
1030	611104	HORTICULTOR	61
1031	611105	MAESTRO JARDINERO	61
1032	611106	JARDINERO EN GENERAL	61
1033	611107	AGENTE  FORESTAL	61
1034	611108	ARADOR  CON  TRACCIÓN ANIMAL	61
1035	611199	APRENDIZ INCE O PASANTES (FORESTAL Y AGRICULTURA)	61
1036	611201	TALADOR Y PODADOR DE ÁRBOLES	61
1037	611202	ESCALADOR DE ÁRBOLES	61
1038	611203	TROZADOR	61
1039	611204	CLASIFICADOR DE TRONCOS	61
1040	611205	CUBICADOR Y MARCADOR DE ÁRBOLES	61
1041	611206	LEÑADOR EN GENERAL	61
1042	611207	CARBONERO	61
1043	611208	DESTILADOR DE MADERA ESPECIALIZADO	61
1044	611209	RESINERO	61
1045	621101	GANADERO EN GENERAL	62
1046	621102	CAPORAL DE OBRERO (PEÓN DE GANADERIA)	62
1047	621103	OBRERO / PEÓN DE GANADERIA	62
1048	621104	CRIADOR DE GANADO (BOVINO LECHERO)	62
1049	621105	MANTEQUILLERO	62
1050	621106	QUESERO	62
1051	621107	MOLDEADOR DE QUESOS	62
1052	621108	OPERADOR DE MAQUINA DESCREMADORA	62
1053	621109	PROBADOR DE ACIDEZ DE LECHE CRUDA	62
1054	621110	ESTANDARIZADOR DE TANQUES DE LECHE	62
1055	621111	OPERADOR DE MAQUINA CONDENSADORA DE LECHE	62
1056	621112	OPERADOR PULVERIZADORA DE LECHE	62
1057	621113	OPERADOR DE LLENADORA DE TAPADORA DE LATAS DE  LECHE	62
1058	621114	OPERADOR DE MAQUINA DE PARAFINO DE QUESO	62
1059	621115	OPERADOR DE MAQUINA EMPALETADORA Y LLENADORA DE HELADOS	62
1060	621116	OPERADOR DE PRENSA  (QUESOS)	62
1061	621117	OPERADOR DE MAQUINAS FUNDIDORAS DE QUESOS	62
1062	621118	OPERADOR DE MOLINO REFINACION  DE MANTEQUILLA	62
1063	621119	OPERADOR DE MAQUINA CLASIFICADORA GASIFICADORA DE LECHE	62
1064	621120	OPERADOR DE MAQUINA PASTEURIZADORA DE LECHE  Y   PRODUCTOS LACTEOS	62
1065	621121	OPERADOR DE MAQUINA LAVADORA DE CANTAROS DE  LECHE	62
1066	621122	OPERARIO EN LA PREPARACION DE PRODUCTOS LACTEOS	62
1067	621123	HELADERO	62
1068	621124	AVICULTOR EN GENERAL	62
1069	621125	CRIADOR DE POLLOS	62
1070	621126	CLASIFICADOR  Y  SEXADOR  DE POLLOS	62
1071	621127	CRIADOR DE CERDOS	62
1072	621128	CRIADOR DE OVEJAS	62
1073	621129	ESQUILADOR	62
1074	621130	ORDEÑADOR  (VACAS  Y  CABRAS)	62
1075	621131	CUNICULTOR	62
1076	621132	CUIDADOR DE ANIMALES	62
1077	621133	PRODUCTOR AGROPECUARIO	62
1078	621134	PRODUCTOR DE CULTIVOS EXTENSIVOS	62
1079	621135	OPERADOR DE COSECHADORA	62
1080	621199	APRENDIZ INCE O PASANTES (GANADERIA Y CRIA)	62
1081	621201	APICULTOR         	62
1082	621202	SERICICULTOR	62
1083	621301	CRIADOR DE ANIMALES (PARQUES  ZOOLÓGICOS)	62
1084	621302	GUARDIÁN DE PARQUES ZOOLÓGICOS	62
1085	621303	ENTRENADOR GENERAL DE ANIMALES	62
1086	621304	ENTRENADOR DE CABALLOS DE CARRERA	62
1087	621305	ENTRENADOR DE PERROS	62
1088	631101	PESCADOR EN GENERAL (ESPECIES ACUATICAS)	63
1089	631102	CRIADOR EN GENERAL  (ESPECIES  ACUATICAS)	63
1090	631103	PISICULTOR	63
1091	631104	OSTRICULTOR	63
1092	631105	CAMARONERO	63
1093	631106	TRUCHICULTOR	63
1094	631107	PESCADOR DE ESPONJAS Y PERLAS	63
1095	631108	COCEDOR-CONSERVERO DE PESCADO	63
1096	631109	AHUMADOR DE PESCADO	63
1097	631110	ENLATADOR DE PESCADO  (EMPACADORA)	63
1098	631111	FRIGORISTA DE PESCADO	63
1099	631112	OPERADOR DE MAQUINA ESCAMADORA DE PESCADO	63
1100	631113	OPERADOR DE HORNO TOSTADOR DE PESCADO	63
1101	631114	OPERADOR DE MAQUINA LLENADORA DE LATAS DE ATUN	63
1102	631115	OPERADOR DE PRENSA DE MOLDES DE ATUN	63
1103	631116	CULTIVADOR  DE   MEJILLONES	63
1104	631199	APRENDIZ INCE O PASANTES (AREA PESQUERA)	63
1105	631201	CAZADOR	63
1106	631202	TRAMPERO	63
1107	711101	MINERO	71
1108	711102	CANTERO	71
1109	711103	CONTRAMAESTRE DE MINAS Y CANTERAS	71
1110	711104	ESTIBADOR DE MINAS	71
1111	711105	COLECTOR DE MUESTRAS  DE MINAS	71
1112	711106	PREPARADOR DE CAL	71
1113	711107	BARRENDERO DE CANTERAS  Y  MINAS	71
1114	711108	CLASIFICADOR DE PIEDRAS	71
1115	711109	CORTADOR DE PIEDRAS	71
1116	711110	GRABADOR DE INSCRIPCIONES A MANO	71
1117	711111	LABRANTE- TALLADOR DE PIEDRAS	71
1118	711112	TORNERO LABRADOR DE PIEDRAS	71
1119	711130	BOBINADOR	71
1120	711142	INSPECTOR DE OBRAS Y EDIFICIOS	71
1121	711199	APRENDIZ INCE(AREA MINERIA)	71
1122	721101	ALBAÑIL	72
1123	721102	PAVIMENTERO	72
1124	721103	GRANITERO	72
1125	721104	MAESTRO DE OBRAS   (MATERIALES TRADICIONALES)	72
1126	721105	MANPOSTERO DE MOVIMIENTO  (ADORNISTA)	72
1127	721106	CONSTRUCTOR DE CERCAS PARA BOVINOS	72
1128	721107	CONSTRUCTOR DE CORRALES PARA ANIMALES DOMESTICOS	72
1129	721108	CONSTRUCTOR DE ESTRUCTURAS CON HORMIGON ARMADO	72
1130	721109	CABILLERO  (ARMADOR DE HOMIGON)	72
1131	721110	MAESTRO CABILLERO	72
1133	721113	OPERARIO DE CEMENTO ARMADO  (ENFOSCADOR)	72
1134	721114	CONSTRUCTOR REPARADOR DE OBRAS DE GRAN ALTURA	72
1135	721115	OPERARIO DE DEMOLICION	72
1136	721116	TECHADOR	72
1137	721117	IMPERMEABILIZADOR DE TECHOS O PAVIMENTOS	72
1138	721118	TECHADOR DE MATERIAL SINTETICO	72
1139	721119	TECHADOR EN METAL	72
1140	721120	TECHADOR EN ASFALTO Y MATERIALES ANALOGOS	72
1141	721121	TECHADOR DE PIZARRAS, TEJAS Y MATERIALES	72
1142	721122	PARQUETERO	72
1143	721123	COLOCADOR DE MOSAICOS	72
1144	721124	MARMOLISTA	72
1145	721125	ENLOSADOR EN GENERAL	72
1146	721126	ENLOSADOR  (BALDOSAS DE MATERIAL SINTETICO)	72
1147	721128	ESTUQUISTA	72
1148	721129	ESCAYOLISTA  (YESERO ORNAMENTAL)	72
1149	721130	TRAZADOR DE ARMAZONES METALICAS	72
1150	721131	MONTADOR DE ESTRUCTURAS DE ACERO	72
1151	721132	REMACHADOR A MANO	72
1152	721133	REMACHADOR CON MARTILLO NEUMATICO	72
1153	721134	OPERADOR DE MAQUINA DE CORTAR LADRILLOS Y TEJAS	72
1154	721135	OPERADOR DE HORNO DE TEJAS Y LADRILLOS	72
1155	721136	MONTADOR DE ARMAZONES METALICAS DE BUQUES	72
1156	721137	ENSAMBLADOR DE TANQUES	72
1157	721138	APAREJADOR DE APARATOS DE ELEVACIÓN (CONSTRUCCION)	72
1158	721139	EMPALMADOR DE CABLES Y CUERDAS	72
1159	721140	PREPARADOR DE MOLDES SOBRE BANCO	72
1160	721141	PREPARADOR  DE  MOLDES EN EL SUELO Y FOSAS	72
1161	721143	MAESTRO DE OBRA	72
1162	721144	LABORATORISTA DE CONCRETO	72
1163	721199	APRENDIZ  INCE(AREA CONSTRUCCION)	72
1164	731101	CARPINTERO	73
1165	731102	EBANISTA	73
1166	731103	CARPINTERO DE BANCO DE TALLER	73
1167	731104	CAPORAL  (CARPINTERO DE RIVERA)	73
1168	731105	CARPINTERO  DE DECORADOS	73
1169	731106	CARPINTERO  CONSTRUCTOR DE BARCOS	73
1170	731107	CARPINTERO REPARADOR DE MADERA  (NAVEGANTE)	73
1171	731108	CARPINTERO DE AVION	73
1172	731109	AYUDANTE DE CARPINTERO	73
1173	731110	CARPINTERO DE CONSTRUCCION	73
1174	731111	CARRETERO   (CARPINTERO)	73
1175	731112	CARROCERO  (CARRROCERIA DE MADERA)	73
1176	731113	CHAPEADOR DE MUEBLES DE MADERA	73
1177	731114	MARQUETISTA	73
1178	731115	MOLDEADOR DE MADERA	73
1179	731116	TALLISTA  (MADERA)	73
1180	731117	TROZADOR DE MADERA	73
1181	731118	ASERRADOR DE MADERA EN GENERAL	73
1182	731119	ENSAMBLADOR DE ESPIGADORA	73
1183	731120	OPERARIO DE LIJADO DE MADERA	73
1184	731121	OPERADOR DE TORNO  (TRABAJO DE MADERA)	73
1185	731122	OPERADOR DE TALADRO DE CARPINTERIA	73
1186	731123	OPERADOR DE SIERRA CIRCULAR	73
1187	731124	OPERADOR DE MAQUINA LIJADORA EN RODILLOS	73
1188	731125	AJUSTADOR DE MAQUINA CEPILLADORA PARA MADERA	73
1189	731126	CESTERO	73
1190	731127	CONFECCIONADOR DE MUEBLES DE CAÑA O JUNCO	73
1191	731128	ARMADOR DE ESCOBAS	73
1192	731129	AYUDANTE DE TEJEDOR DE MIMBRE	73
1193	731130	IMPREGNADOR DE MADERA	73
1194	731132	CLASIFICADOR DE MADERA	73
1195	731133	ACABADOR  DE  MADERA	73
1196	731134	BARRILERO	73
1197	731135	MONTADOR DE PRODUCTOS DE MADERA	73
1198	731136	OPERADOR DE MAQUINA INTERCALADORA / CONTRAENCHAPADO	73
2076	921107	MOTORISTA DE LANCHA  (PESCA)	92
1199	731137	OPERADOR DE PRENSA CONTRAENCHAPADO / MADERA	73
1200	731138	OPERADOR DE MAQUINA LABRA/ MADERA	73
1201	731139	OPERADOR DE MAQUINA CORTADORA DE MADERA	73
1202	731140	OPERADOR DE MAQUINA RECORREDORA  (ASERRADERO)	73
1203	731141	AJUSTADOR-OPERADOR  DESFRESADORA  DE  MADERA	73
1204	731142	AJUSTADOR-OPERADOR  DE  DEBASTADORA DE MADERA	73
1205	731143	ARRUMADOR DE  SERRERIA  (MADERA)	73
1206	731144	ASERRADOR DE  MADERA  (CORTADOR DE BORDES)	73
1207	731145	OPERADOR DE SIERRA DE CINTA	73
1208	731146	OPERADOR- DESFIBRADOR- RASPADOR DE MADERA	73
1209	731147	OPERADOR DE PRENSA DE MADERA	73
1210	731148	AYUDANTE  DE  TEC.  DE   MADERA  PRENSADA	73
1211	731149	TORNERO PATOGRAFISTA PARA MADERA	73
1212	731150	OPERADOR DE MOLINO PARA MADERA	73
1213	731151	CARPINTERO DE RIBERA	73
1214	731152	MONTADOR DE MAQUINAS DE OFICINA	73
1215	731153	SECADOR DE MADERA	73
1216	731154	SOLADOR EN TERRAZA (PAVIMENTO  CONTINUO)	73
1217	731199	APRENDIZ  INCE(CARPINTERIA Y EBANISTERIA)	73
1218	733132	FABRICANTE DE VELAS (CANDELERO) 	73
1219	741101	INSTALADOR DE MATERIAL AISLANTE A MANO	74
1220	741102	INSTALADOR DE INSONORIZACION	74
1221	741103	INSTALADOR DE MATERIAL AISLANTE A MAQUINA	74
1222	741104	INSTALADOR DE MATERIAL AISLANTE PARA CLIMATIZACION	74
1223	741105	VIDRIERO EN CONSTRUCCION  (INSTALADOR DE CRISTALES)	74
1224	741106	PLOMERO  (FONTANERO)	74
1225	741107	AJUSTADOR DE TUBOS	74
1226	741108	INSTALADOR DE TUBOS	74
1227	741109	COLOCADOR DE TUBOS DE CONDUCCIONES	74
1228	741110	LIMPIADOR DE TUBERIAS	74
1229	741111	PINTOR DE BROCHA GORDA	74
1230	741112	EMPAPELADOR	74
1231	741113	PINTOR DE CONSTRUCCIONES METALICAS Y CASCOS DE BUQUE	74
1232	741114	PINTOR A PISTOLA	74
1234	741115	HERRERO	74
1233	741116	FUNDIDOR DE VIDRIO	74
1235	741117	GALVANIZADOR	74
1236	741118	CRISTALERO (INSTALACIÓN SIN MASILLA)	74
1237	741119	CUBICADOR	74
1238	741120	INSTALADOR DE MATERIAL AISLANTE DE CALDERAS Y  TUBERÍAS	74
1239	741121	JEFE DE TALLER (FABRICACION MUEBLES DE ACERO)	74
1240	741140	JEFE DE TALLER MECANICO AUTOMOTRIZ	74
1241	741199	APRENDIZ  INCE(CONTRUCCION Y PLOMERIA)	74
1242	751101	ELECTRICISTA	75
1243	751102	ELECTRICISTA DE CONSTRUCCION	75
1244	751103	ELECTRICISTA DE EDIFICIOS (MANTENIENTO DE  INSTALACIONES)	75
1245	751104	ELECTRICISTA DE BUQUES	75
1246	751105	ELECTRICISTA DE AEREONAVES	75
1247	751106	FUNDIDOR MOLDEADOR  (CONSTRUCCION)	75
1248	751107	MACHERO DE FUNDICION  (CONSTRUCCION)	75
1249	751108	SOLDADOR CON SOPLETE (SOLDADURA AUTOGENA)	75
1250	751109	OXICORTADOR  (CONSTRUCCION)	75
1251	751110	SOLDADOR DE ARCO ELECTRICO A MANO	75
1252	751111	SOLDADOR DE ARCO ELECTRICO A MAQUINA (CONSTRUCCION)	75
1253	751112	SOLDADOR CONTERNISTA (CONSTRUCCION)	75
1254	751113	SOLDADOR POR RESISTENCIA ELECTRICA (CONSTRUCCION)	75
1255	751114	SOLDADOR CON CAUTIN (CONSTRUCCION)	75
1256	751115	SOLDADOR CON PLOMO (CONSTRUCCION)	75
1257	751116	MONTADOR DE CABLES PUENTE COLGANTE	75
1258	751117	BUZO	75
1259	751118	ELECTRICISTA DE ESTRUCTURAS	75
1260	751119	ELECTRONISISTA (REPARADOR)	75
1261	751120	SOLDADOR  (SOLDADURA  DURA)	75
1262	751199	APRENDIZ  INCE(CONSTRUCCION Y ELECTRICIDAD)	75
1263	761101	TRONQUELISTA MODELISTA	76
1264	761102	AYUDANTE  TROQUELISTA(MODELISTA)	76
1265	761103	AJUSTADOR DE MANDRILES, CALIBRADORES	76
1266	761104	CERRAJERO	76
1267	761105	ARMERO	76
1268	761106	AJUSTADOR-OPERADOR DE TORNO	76
1269	761107	AJUSTADOR-OPERADOR DE FRESADORA	76
1270	761108	AJUSTADOR-OPERADOR DE CEPILLADORA	76
1271	761109	AJUSTADOR-OPERADOR DE MANDRILADORA	76
1272	761110	AJUSTADOR-OPERADOR DE TALADRADORA	76
1273	761111	AJUSTADOR-OPERADOR DE RECTIFICADORA	76
1274	761112	AJUSTADOR-OPERADORA DE ESMERILADORA	76
1275	761113	AJUSTADOR-OPERADOR DE MAQUINA MECANISMO  NUMERICO DE CONTROL	76
1276	761114	AFILADOR ( MAQUINAS Y HERRAMIENTAS)	76
1277	761115	SUPERVISOR DE OFFSET	76
1278	761116	OPERADOR DE MAQUINA PARA HACER TAPAS	76
1279	761199	APRENDIZ  INCE(HERRAMIENTAS)	76
1280	771101	MECANICO EN GENERAL	77
1281	771102	MECANICO ESPECIALIZADO	77
1282	771103	JEFE DE TALLER MECANICO	77
1283	771104	AFINADOR DE MOTORES	77
1284	771105	AJUSTADOR DE MOTORES	77
1285	771106	AJUSTADOR  DE  MOTORES  DE  COMBUSTION	77
1286	771107	ELECTRICISTA DE VEHICULOS A MOTOR	77
1287	771108	PROBADOR DE AUTOMOVILES	77
1288	771109	REPARADOR DE BICICLETA	77
1289	771110	AYUDANTE DE MECANICO DE  TREN  DELANTERO	77
1290	771111	AYUDANTE DE TECNOMECANICA EN CAJAS AUTOMATICAS	77
1291	771112	MECANICO DE AVION EN GENERAL	77
1292	771113	MECANICO DE AVION ESPECIALIZADO	77
1293	771114	AJUSTADOR DE MOTORES DE AVION	77
1294	771115	AYUDANTE DE MECANICO DE MANTENIMIENTO DE TURBINAS	77
1295	771116	AYUDANTE DE MECANICO DE INSTRUMENTOS	77
1296	771117	AYUDANTE DE MECANICO DE HIDRAULICA  (AVION)	77
1297	771118	MECANICO AJUSTADOR ESPECIALISTA EN HERRAMIENTAS Y  MATRICES/ METALES	77
1298	771119	MECANICO EN FABRICACION DE PIEZAS METALICAS	77
1299	771120	MECANICO INSTRUMENTISTA	77
1300	771121	MECANICO AJUSTADOR- MONTADOR DE MAQUINARIAS Y HERRAMIENTAS	77
1301	771122	JEFE DE MECANICA DE TELARES	77
1302	771123	ACEITADOR Y ENGRASADOR DE  MAQUINAS ESTACIONARIAS	77
1303	771124	ENGRASADOR DE MOLINOS  (MOLIENDA)	77
1304	771125	MONTADOR INSTALADOR DE MAQUINARIAS	77
1305	771126	REPARADOR DE MAQUINAS EN GENERAL	77
1306	771127	AYUDANTE  MECANICO EN GENERAL	77
1307	771128	MECANICO DE MAQUINA DE OFICINA	77
1308	771129	AYUDANTE  DE  REPARADOR DE  MAQUINAS  DE   OFICINAS	77
1309	771131	AYUDANTE  DE ELECTOMECANICO	77
1310	771132	AYUDANTE  DE ELECTRONICISTA EN GENERAL	77
1311	771133	AJUSTADOR  ELECTRONICISTA ESPECIALIZADO	77
1312	771134	CONTROLADOR DE TABLERO ELECTRONICO	77
1313	771135	MECANICO DE COMPUTADORA	77
1314	771136	LATONERO EN CARROCERIA	77
1315	771137	PINTOR DE AUTOMOVIL	77
1316	771138	OPERADOR/ MONTADOR  DE MAQUINA DE OFICINA	77
1317	771139	AFILADOR DE CUCHILLERÍA	77
1318	771141	MECANICO ELECTRICISTA DE SISTEMA DE SEÑALES	77
1319	771142	MECANICO ELECTRONICISTA EN GENERAL	77
1320	771143	MECANICO ELECTRONICISTA ESPECIALIZADO	77
1321	771144	MECANICO AJUSTADOR	77
1322	771199	APRENDIZ INCE  (AREA MECANICA)	77
1323	781101	MECANICO REPARADOR DE INSTRUMENTOS DE PRECISION  (ESPECIALIZADO)	78
1324	781102	AYUDANTE REPARADOR DE INSTRUMENTOS DE PRECISION	78
1325	781103	CALIBRADOR DE INSTRUMENTOS DE PRECISION	78
1326	781105	AYUDANTE DE MICROMECANICA	78
1327	781106	MECANICO REPARADOR DE OPTICA DE PRECISION	78
1328	781107	AYUDANTE DE MECANICO OPTICO DE PRECISION	78
1329	781108	JEFE TALLER DE OPTICA	78
1330	781109	MODELADOR DE LENTES	78
1331	781110	ACABADOR DE BORDES DE CRISTALES	78
1332	781111	AJUSTADOR DE VIDRIOS DE OPTICA	78
1333	781112	PULIDOR DE CRISTALES Y VIDRIOS	78
1334	781113	ESMERILADOR DE LENTES	78
1335	781114	TALLADOR DE CRISTALES OPTICOS	78
1336	781115	CONSTRUCTOR DE  INSTRUMENTOS  MUSICALES EN GENERAL	78
1337	781116	CONSTRUCTOR DE  INSTRUMENTOS  MUSICALES  ESPECIALIZADOS	78
1338	781117	AFINADOR DE INSTRUMENTOS MUSICALES	78
1339	781118	REGULADOR DE INSTRUMENTOS MUSICALES	78
1340	781119	REPARADOR DE INSTRUMENTOS MUSICALES	78
1341	781120	AYUDANTE  DE REPARADOR  DE  INSTRUMENTOS MUSICALES	78
1342	781121	AFINADOR DE  ORGANO	78
1343	781122	AFINADOR  DE  PIANO	78
1344	781123	JOYERO DE BISUTERIA	78
1345	781124	AYUDANTE  DE   JOYERO	78
1346	781125	ORFEBRE	78
1347	781126	PLATERO	78
1348	781127	BATIDOR  DE  ORO	78
1349	781128	ENGASTADOR  (JOYAS)	78
1350	781129	LAMINADOR DE METALES PRECIOSOS	78
1351	781130	TALLADOR Y PULIDOR DE PIEDRAS PRECIOSAS	78
1352	781132	MATRICERO DE METALES PRECIOSOS	78
1353	781133	MECANICO DE CONSERVACION DE INSTRUMENTOS DE PRECISION	78
1354	781134	GRABADOR DE JOYERIA Y PLATERIA	78
1355	781135	CINCELADOR-REPUJADOR DE JOYERIA	78
1356	781136	ESMALTADOR DE JOYERIA	78
1357	781137	FILIGRANISTA	78
1358	781138	GRABADOR DE VIDRIO EN GENERAL	78
1359	781139	SOPLADOR DE VIDRIO	78
1360	781140	GRABADOR DE VIDRIO ESPECIALIZADO	78
1361	781141	CAPATAZ DE HORNO  (VIDRIO)	78
1362	781142	ESMERILADOR DE VIDRIO DECORATIVO	78
1363	781143	PINTOR DECORADOR EN GENERAL  (VIDRIO)	78
1364	781144	PINTOR DECORADOR ESPECIALIZADO (VIDRIO)	78
1365	781145	MESMALTADOR DE VIDRIO	78
1366	781146	ENCORVADOR DE TUBOS DE VIDRIO	78
1367	781147	AZOGADOR  (ESPEJOS)	78
1368	781148	VIDRIERO (CRISTALES CILINDRICOS)	78
1369	781149	INSTALADOR CRISTALERO  (SIN MASILLA)	78
1370	781150	OPERADOR DE HORNO DE RECOCIDO / VIDRIO	78
1371	781151	OPERADOR DE MAQUINA DE ESTIRAR VARILLA Y TUBOS DE  VIDRIO	78
1372	781152	EXTRUSADOR DE HILOS DE FIBRAS DE VIDRIOS	78
1373	781153	OPERADOR DE TEMPLEO / VIDRIO	78
1374	781154	MONTADOR DE PIEZAS DENTALES	78
1375	781155	ENSERADOR DE PIEZAS DENTALES	78
1376	781156	DISEÑADOR DENTAL	78
1377	781157	MECANICO- REPARADOR DE APARATOS Y EQUIPOS  DENTALES	78
1378	781158	AYUDANTE  DE  REPARADOR  DE  EQUIPOS  DENTALES	78
1379	781159	MECANICO DE PROTESIS DENTALES	78
1380	781160	AYUDANTE  REPARADOR  DE  PRÓTESIS  DENTAL	78
1381	781161	COLOCADOR DE METALES  (PROTESIS DENTAL)	78
1382	781162	TRABAJADOR EN ACRILICO  (PROTESIS DENTAL)	78
1383	781163	MECANICO DE METALES  (PROTESIS DENTAL)	78
1384	781164	CALIBRADOR DE APARATOS Y EQUIPOS DE LABORATORIO  (PRECISION)	78
1385	781165	MONTADOR- REPARADOR  ELECTRONICA DE APARATOS  MEDICOS-RADIOLOGO	78
1386	781166	RELOJERO ESPECIALIZADO	78
1387	781167	REPARADOR DE RELOJES	78
1388	781168	CORTADOR DE VIDRIO	78
1389	781169	MICROMECANICO	78
1390	781170	SOPLADOR  (SAMBLESTEO)	78
1391	781171	PREPARADOR DE PLANCHAS DE IMPRENTA BRAILLE	78
1392	781172	PULIDOR DE CRISTALES ÓPTICOS	78
1393	781173	OPERADOR DE ESCANER OPTICO 	78
1394	781174	PULIDOR DE VIDRIOS (CRISTALES)	78
1395	781175	OPTOMETRISTA	78
1396	781176	OPERADOR DE AUDIOMETRIA	78
1397	781177	OPERADOR  DE ELECTRO ENCEFALOGRAMA	78
1398	781178	OPERADOR DE TOMÓGRAFO	78
1399	781199	APRENDIZ INCE( INSTRUMENTOS DE PRECISION)	78
1400	791101	CERAMISTA	79
1401	791102	MODELISTA DE CERAMICA Y PORCELANA	79
1402	791103	ACABADOR DE CERÁMICA	79
1403	791104	ALFARERO  (TORNERO)	79
1404	791105	BOTIJERO	79
1405	791106	CINCELADOR DE CERAMICA	79
1406	791107	ESMALTADOR DE CERAMICA	79
1407	791108	EXTRUSOR DE ARCILLA	79
1408	791109	MODELADOR DE TORNO CON TARRAJA	79
1409	791110	MOLDEADOR VACIADOR DE CERAMICA Y PORCELANA	79
1410	791111	PRENSADOR DE CERAMICA	79
1411	791112	PREPARADOR DE MOLDES A MANO	79
1412	791113	TALLADISTA DE CERAMICA	79
1413	791114	PINTOR DE CERAMICA A MANO	79
1414	791115	ESMALTADOR DE CERAMICA POR INMERSIÓN	79
1415	791116	DECORADOR DE CERÁMICA	79
1416	791117	ILUMINADOR DE LOZAS	79
1417	791118	PINTOR DE CERAMICA A PISTOLA	79
1418	791119	LITOGRAFO DE CERAMICA DECORATIVA	79
1419	791120	DECORADOR ESTAMADOR  DE CERAMICAS	79
1420	791121	PINTOR- DECORADOR DE FIGURAS DE ESCAYOLA Y SIMILARES	79
1421	791122	CANDELERO  (FABRICANTE DE VELAS)	79
1422	791123	ARTESANO DE ARTICULOS  DE MADERA	79
1423	791124	ARTESANO DE ARTICULOS DE PAPEL  O  CARTÓN	79
1424	791125	ARTESANOS DE ARTICULOS DE CUERO EN GENERAL	79
1425	791126	ARTESANO TEJEDOR DE ALFOMBRAS	79
1426	791127	ARTESANO TEJEDOR DE TELA	79
1427	791128	OPERADOR DE HORNO CONTINUO DE LOZA Y PORCELANA	79
1428	791129	PREPARADOR DE PASTA DE ARCILLA	79
1429	791130	PREPARADOR DE LECHADA DE ARCILLA	79
1430	791131	ESCULTOR	79
1431	791132	TAPICERO	79
1432	791199	APRENDIZ  INCE(AREA DE LA ARCILLA , CERAMICA,PORCELANA)	79
1433	791415	ZAPATERO DE ORTOPEDISTA	79
1434	792101	OPERADOR DE MAQUINA DE IMPRENTA	79
1435	792102	OPERADOR DE PRENSA TIPOGRAFIA  (IMPRENTA)	79
1436	792103	OPERADOR DE PRENSA TIPOGRAFIA  (ROTATIVA)	79
1437	792104	OPERADOR DE PRENSA TIPOGRAFIA  (OFFSET)	79
1438	792105	OPERADOR DE PRENSA TIPOGRAFICA DE IMPRESIÓN DIRECTA	79
1439	792106	OPERADOR DE PRENSA DE ROTOGRABADO	79
1440	792108	AFILADOR DE CUCHILLAS  (ARTES GRAFICAS)	79
1441	792109	AFILADOR DE SCRATH  (ARTES GRAFICAS)	79
1442	792110	AFILADOR MINERVISTA	79
1443	792111	JEFE DE TALLER DE TIPOGRAFIA	79
1444	792113	LINOTIPISTA	79
1445	792114	AJUSTADOR  DE MAQUINA DE FOTOCOPIA	79
1446	792115	FUNDIDOR DE TIPOS	79
1447	792116	ARMADOR  DE PAGINAS  (COMPAGINADOR)	79
1448	792117	OPERADOR DE TECLADO MONOTIPIA  (MONOTIPISTA)	79
1449	792118	OPERADOR DE PLANCHAS IMPRENTAS BRAILLE	79
1450	792119	CAJISTA (LITOGRAFIA)	79
1451	792120	AYUDANTE  DE  CAJISTA	79
1452	792121	ESTEROTIPISTA DE IMPRENTA	79
1453	792122	CLISADOR  (ELECTROLIPISTA)	79
1454	792123	MATRICERO DE IMPRENTA	79
1455	792124	FOTOGRAFO DE IMPRENTA	79
1456	792125	FOTOGRAFO DE FOTOGRABADOR  	79
1457	792126	FOTOIMPRESOR DE PLANCHAS DE IMPRESION (FOTOGRABADO)	79
1458	792127	GRABADOR   (FOTOGRABADO)	79
1459	792128	RETOCADOR DE PLANCHAS DE IMPRECION (FOTOGRABADO)	79
1460	792129	GRABADOR DE PIEDRAS LITOGRAFICAS  (BURIL  O  CALCOGRAFICO)	79
1461	792130	GRABADOR A MANO DE CLISES DE MADERA, CAUCHO/LINOLEO	79
1462	792131	GRABADOR DE CILINDROS METALICOS DE IMPRESIÓN	79
1463	792132	GRABADOR CON PANTOGRAFO	79
1464	792133	TRANSPORTADOR  (LITOGRAFIA)	79
1465	792134	GRABADOR DE IMPRENTA AL AGUA FUERTE	79
1466	792135	AYUDANTE  DE  IMPRESORA  DE  TAMIGRAFIA   (SILK  SCREEN)	79
1467	792136	PREPARADOR DE BASTIDORES (SARIGRAFIA)	79
1468	792137	IMPRESOR   (SERIGRAFIA)	79
1469	792138	ESTAMPADOR DE TELAS, PAPELES PINTADOS	79
1470	792139	ESTAMPADOR DE TEXTILES	79
1471	792140	PREPARADOR DE MARCOS PARA ESTAMPADOS	79
1472	792141	OPERADOR  DE  MAQUINA ENCUADERNADORA	79
1473	792142	ENCUADERNADOR A MANO	79
1474	792143	OPERADOR  DE  MAQUINA ESTAMPADORA DE ENCUADERNACION	79
1475	792144	JEFE DE LABORATORIO FOTOGRAFICO	79
1476	792145	REVELADOR DE PELICULA FOTOGRAFICA EN COLOR	79
1477	792146	LABORATORISTA FOTOGRAFICO  (BLANCO Y NEGRO)	79
1478	792147	PRENSISTA  PARA MAQUINA DE ALTO RELIEVE	79
1479	792148	AYUDANTE  DE  PRENSISTA  PARA  MAQUINA  DE  ALTO RELIEVE	79
1480	792149	OPERADOR  DE  MAQUINA COPIADORA  (HELIOGRAFICA)	79
1481	792150	REVELADOR DE PAPEL PIGMENTO DE CILINDROS ( ARTES GRAFICAS)	79
1482	792151	AYUDANTE  DE  LABORATORIO  FOTOGRAFICO	79
1483	792152	OPERADOR DE  MAQUINA PARA AMPLIACION DE FOTOGRAFIAS	79
1484	792153	GUILLOTINERO	79
1485	792154	AYUDANTE  DE  GUILLOTINERO	79
1486	792155	OPERARIO  DE  CONVERTIDORA DE BOBINAS	79
1487	792156	TROQUELADOR MANUAL	79
1488	792157	TROQUELISTA DE MOLDE DE ACERO	79
1489	792158	OPERADOR  DE  EQUIPO DE FOTOCOMPOSICION	79
1490	792159	MECANOGRAFO-TIPIADOR  (TIPOGRAFIA)	79
1491	792160	PASADOR DE CINTAS  (TIPOGRAFIA)	79
1492	792161	TITULAR  (TIPOGRAFIA)	79
1493	792162	CORRECTOR DE PRUEBAS	79
1494	792163	SECADOR DE PRUEBAS	79
1495	792164	DIBUJANTE ESPECIALIZADO	79
1496	792165	DIBUJANTE BOCETISTA (ARQUITECTURA)	79
1497	792166	DIBUJANTE CARTOGRAFIA	79
1498	792167	DIAGRAMADOR DE SEMANARIOS, QUINCENARIOS	79
1499	792168	PLANCHISTA  (TIPOGRAFIA)	79
1500	792169	OPERADOR  DE  FOTOCOMPOSICION ELECTRICA	79
1501	792170	OPERADOR  DE  FOTOCOMPOSICION MECANICA	79
1502	792171	MECANICO DE ARTES GRAFICAS	79
1503	792172	AYUDANTE  DE  MECANICO  DE  ARTES  GRAFICAS	79
1504	792173	PANTOGRAFISTA  (TIPOGRAFIA)	79
1505	792174	TIMBRADOR  (TIPOGRAFIA)	79
1506	792175	IMPRESOR (MINERVISTA)	79
1507	792176	OPERADOR DE MAQUINAS DE HACER CARPETAS	79
1508	792177	OPERADOR DE AQUINA PARA FABRICAR  PESTAÑAS TRANSPARENTES (CARPETAS)	79
1509	792178	OPERADOR DE  MAQUINARIA ESTIRADORA	79
1510	792179	OPERADOR DE PRENSA DE IMPRESIÓN / PAPELES PINTADOS	79
1511	792180	OPERADOR DE MAQUINA REBOBINADORA DE ROLLOS Y TELEX	79
1512	792181	OPERADOR DE MAQUINARIA COSEDORA DE LIBRETAS	79
1513	792182	OPERTADOR DE MAQUINARIA REFILADORA	79
1514	792183	OPERADOR DE MAQUINA RAYADORA DE DOS CUERPOS	79
1515	792184	RETOCADOR DE PLANCHAS DE IMPRESIÓN (FOTO GRABADO)	79
1516	792185	OPERADOR DE MAQUINARIA ETIQUETADORA	79
1517	792186	OPERADOR DE MAQUINA DOBLADORA DE GUARDAS	79
1518	792187	OPERADOR DE MAQUINAS PARA FABRICAR ROLLOS DE  MAQUINARIA SUMADORAS	79
1519	792188	OPERADOR DE MAQUINA PARA PEGAR PARTES METALICAS A LOS ARCHIVADORES	79
1520	792189	TROQUELADOR PARA FABRICAR GANCHOS DE CARPETAS	79
1521	792190	OPERADOR DE MAQUINA PEGADORA DE ANGULOS	79
1522	792191	OPERADOR DE MAQUINA ENSAMBLADORA DE CARPETAS  COLGANTES	79
1523	792192	AYUDANTE DE DISEÑADOR  GRAFICO	79
1524	792194	CARICATURISTA	79
1525	792195	COMEDIANTE	79
1526	792196	COMPOSITOR MUSICAL	79
1527	792197	COPISTA DE DIBUJO PARA CARTONES JACQUARD	79
1528	792198	GRABADOR DE ENCUADERNACIÓN	79
1529	792199	APRENDIZ INCE(AREA ARTES GRAFICAS)	79
1530	793101	ABRIDOR  DE  FIBRAS  TEXTILES	79
1531	793102	ALIMENTADOR  DE  CARDAS	79
1532	793103	ALIMENTADOR  DE  MAQUINAS  DESFIBRADORA	79
1533	793104	OPERADOR  DE  MAQUINA DE DIVIDIR CON CUEROS  (HENDEDOR)	79
1534	793105	BATIDOR  DE  FIBRAS  TEXTILES	79
1535	793106	CLASIFICADOR DE FIRBRAS TEXTILES	79
1536	793107	DESFIBRADOR DE LINO	79
1537	793108	ESTIRADOR DE FIBRAS	79
1538	793109	MEZCLADOR DE FIBRAS	79
1539	793110	NAPADOR DE FIBRAS	79
1540	793111	PEINADOR DE FIBRAS TEXTIBLES	79
1541	793112	TORCEDOR DE FIBRAS	79
1542	793113	HILANDERO	79
1543	793114	TEJEDOR DE ALFOMBRAS A MANO	79
1544	793115	PASADOR DE HILOS URDIMBRE	79
1545	793116	GANCHILLERO A MANO	79
1546	793118	REGULADOR DE TELAS / JAQUARQ	79
1547	793119	VERIFICADOR DE TELAR	79
1548	793120	TEJEDOR DE TELAS A MANO	79
1549	793121	TEJEDOR DE PUNTO EN MAQUINA ACCIONADORA  A MANO	79
1550	793122	SASTRE (TRAJES A LA MEDIDA)	79
1551	793123	MODISTO  (A)	79
1552	793125	COSTURERA DE CAMISAS	79
1553	793126	CHALEQUERO	79
1554	793127	PANTALONERO  (SASTRE CONFECCIONADOR EN SERIE)	79
1555	793128	BORDADOR (A)	79
1556	793129	CORSETERO	79
1557	793130	OPERADOR  DE  MAQUINA DE TEJER	79
1558	793131	MODELISTA-PATRONISTA	79
1559	793132	REGULADOR DE MAQUINA DE TEJER	79
1560	793133	TRAZADOR DE PRENDAS DE VESTIR	79
1561	793134	COSTURERO (A)  A MANO Y MAQUINA	79
1562	793135	OPERADOR  DE  MAQUINARIA DE PREPARACION DE FIBRAS  TEXTILES	79
2081	921113	PEON FORESTAL	92
1563	793136	OPERADOR  DE  MAQUINA ACONDICIONADORA DE FIBRAS	79
1564	793137	OPERADOR  DE  MAQUINARIA DE DOBLAJE / HILO E HILAZA	79
1566	793138	BOBINADOR DE HILO O HILAZA	79
1567	793139	OPERADOR  DE  MAQUINA TEJEDORA  (TEJEDOR DE REDES)	79
1568	793140	OPERADOR  DE  TELAR	79
1569	793141	OPERADOR  DE  MAQUINA BORDADORA (SIN DIBUJOS O  ADORNO)	79
1570	793142	TEJIDO A MAQUINA DE TEJIDO CIRCULAR TEJEDOR	79
1571	793143	OPERADOR  DE  MAQUINA DE COSER	79
1572	793144	OPERADOR  DE  MAQUINA DE BORDAR	79
1573	793145	BLANQUEADOR DE  PRODUCTOS TEXTILES	79
1574	793146	OPERADOR  DE  MAQUINA PLANCHADORA DE TELA	79
1575	793147	TINTORERO DE TEJIDOS	79
1576	793148	AYUDANTE  DE  TINTORERO  DE  TEJIDOS	79
1577	793149	OPERADOR DE MAQUINA PARA FABRICAR PATRONES  TEXTILES	79
1578	793150	PASAMANERO EN GENERAL	79
1579	793151	OPERADOR  DE  MAQUINA PARA FABRICAR SOMBREROS	79
1580	793152	DISEÑADOR DE ALFOMBRAS	79
1581	793153	MONTADOR DE PRODUCTOS TEXTILES	79
1582	793154	DIBUJANTE TEXTIL	79
1583	793155	TINTORERO DE ALGODÓN	79
1584	793156	BLANQUEADOR  DE  ALGODÓN	79
1585	793157	OPERADOR  DE  MAQUINA DE PROCESAR ALGODÓN	79
1586	793158	AJUSTADOR  DE  FIBRAS  IPACKS (POLIESTER)	79
1587	793159	OPERADOR  DE  INSTALACIONES PRODUCCIÓN DE  ARTICULOS DE ALGODON	79
1588	793160	COLCHONERO	79
1589	793161	OPERADOR  DE  MAQUINA PARA FABRICAR  ALFOMBRAS	79
1590	793162	EDITOR HISTORICO	79
1591	793163	JEFE DE CONTROL (ALGODÓN Y MEZCLA)	79
1592	793164	SOMBRERERO  	79
1593	793165	SUPERVISOR  DEL DPTO DE NYLON 	79
1594	793166	PICADOR DE CARTONES JACQUARD	79
1595	793199	APRENDIZ INCE(AREA TEXTIL)	79
1596	794101	ALISADOR  DE  PIELES	79
1597	794102	ADOBADOR  DE  CUEROS	79
1598	794103	PELADOR/ DESCARNADOR DE CUEROS A MAQUINA	79
1599	794104	CLASIFICADOR DE CUEROS Y PELLEJOS	79
1600	794105	CURTIDOR	79
1601	794106	DESCARNADOR DE CUEROS A MANO	79
1602	794107	HENDEDOR DE CUEROS	79
1603	794108	IGUALADOR DE PELO  (PIELES)	79
1604	794109	PELETERO  	79
1605	794110	TEÑIDOR DE CUEROS	79
1606	794111	TINTORERO DE PIELES	79
1607	794112	CORTADOR DE CUERO  (TALABARTERO)	79
1608	794113	ARTESANO  DE  CUERO  EN  GENERAL	79
1609	794114	ZAPATERO (CALZADO A LA MEDIDA)	79
1610	794116	ZAPATERO DE REMENDON	79
1611	794117	PATRONISISTA DE CALZADO	79
1612	794118	CORTADOR DE PALAS DE CALZADO A MANO	79
1613	794119	PREPARADOR- MONTADOR DE PALAS DE CALZADO	79
1614	794120	CORTADOR DE SUELAS	79
1615	794121	PREPARADOR DE SUELAS  (SOLETERO)	79
1616	794122	ARMADOR  DE  CALZADO  (HORMERO)	79
1617	794123	COSEDOR DE CALZADO A MAQUINA  (DESPUNTEADOR)	79
1618	794124	ACABADOR  DE  CALZADO  (REMATADOR)	79
1619	794125	GUARICIONERO  (CONFECCIONADOR DE SILLAS Y ARNESES/ CUERO)	79
1620	794126	OPERADOR  DE  MAQUINA CURTIDORA	79
1621	794127	OPERADOR  DE  MAQUINA DE FABRICAR CALZADO	79
1622	794128	MONTADOR DE PRODUCTOS DE CUERO	79
1623	794131	COSEDOR A MANO DE PRENDAS DE CUERO Y PIEL 	79
1624	794132	COSEDOR A MANO DE PRENDAS DE PELETERÍA	79
1625	794133	DESINCRUSTADOR	79
1626	794199	APRENDIZ  INCE(ZAPATERIA)	79
1627	795101	CLASIFICADOR DE TABACO  (HOJAS)	79
1628	795102	MEZCLADOR DE TABACO	79
1629	795103	DESPALILLADOR DE TABACO A MANO	79
1630	795104	TABAQUERO A MAQUINA	79
1631	795105	TABAQUERO A MANO  (ROLERO)	79
1632	795106	CIGARRERO A MANO	79
1633	795107	PREPARADOR DE RAPE	79
1634	795108	ACONDICIONADOR DE  TABACO	79
1635	795109	OPERADOR  DE  MAQUINA DE TRATAMIENTO DE TABACO	79
1636	795110	OPERADOR  DE  MAQUINA PICADORA DE TABACO	79
1637	795111	OPERADOR  DE  MAQUINA PARA FABRICAR TABACO	79
1638	795112	PRENSADOR DE TABACO PARA FUMAR	79
1639	795113	OPERADOR  DE  MAQUINA PARA FABRICAR CIGARRILLO	79
1640	795114	OPERADOR  DE  MAQUINA RESECADORA DE TABACO	79
1641	795115	OPERADOR  DE  MAQUINA AL VACIO  (TABACO)	79
1642	795116	OPERADOR  DE  CAVA PARA CONSERVAR TABACO	79
1643	795117	OPERADOR  DE  MAQUINA EMPAQUETADORA DE  CIGARRILLOS	79
1644	795118	ESTIRADOR DE CHIMO A MAQUINA	79
1645	795119	PREPARADOR DE CHIMO	79
1646	795120	PRENSADOR DE TABACO A MAQUINA  (TABACO PARA  MASTICAR)	79
1647	795121	OPERADOR  DE  MAQUINA TRITURADORA DE HOJAS DE  TABACO	79
1648	795122	PREPARADOR DE LIQUIDO PARA TABACO	79
1649	795123	OPERADOR  DE  PRENSA MANUAL CORTADORA DE CHIMO	79
1650	795124	EMPAREJADOR  (CHIMO)	79
1651	795126	TORCEDOR DE TABACO PARA MASTICAR	79
1652	795199	APRENDIZ  INCE( AREA DE CALIFICADORES)	79
1653	796101	CARNICERO	79
1654	796102	CARNICERO MATARIFE	79
1655	796103	SALCHICHERO	79
1656	796104	SALADOR DE ALIMENTOS	79
1657	796105	AHUMADOR DE CARNES Y PESCADO	79
1658	796106	PELADOR Y LIMPIADOR DE CAMARONES	79
1659	796107	AYUDANTE  DE  TEC.  EN  LA FABRICACION  DE JAMONES	79
1660	796108	EMPACADOR EN GENERAL  (CHARCUTERIA)	79
1661	796109	AYUDANTE  DE  EMPACADOR	79
1662	796110	CHARCUTERO	79
1663	796111	ASISTENTE  DE  CHARCUTERO	79
1664	796112	CARNICERO DE  DESPOSTE  (CHARCUTERIA)	79
1665	796113	AYUDANTE  DE  CARNICERIA  DE   DESPOSTE	79
1666	796114	CARNICERO INDUSTRIAL  (CHARCUTERIA)	79
1667	796115	INYECTOR DE CARNES MAGRAS	79
1668	796116	EMBUTIDOR	79
1669	796117	OPERADOR DE MAQUINA DE EMPACAR AL VACIO  (CHARCUTERIA)	79
1670	796118	OPERADOR DE  MAQUINA PARA FABRICAR  SALCHICHAS	79
1671	796119	OPERADOR  MOLDEADORA DE CARNE	79
1672	796120	OPERADOR DE MAQUINA PARA MOLER CEREALES	79
1673	796121	OPERADOR DE MAQUINA PARA MOLER ESPECIES	79
1674	796122	OPERADOR PARA CONGELAR ALIMENTOS	79
1675	796123	OPERADOR DE MAQUINA SECADORA DE ALIMENTOS	79
1676	796124	OPERADOR DE MAQUINA ELABORADORA DE PASTAS ALIMENTICIAS	79
1677	796125	OPERADOR DE HORNO PARA SECAR PASTAS ALIMENTICIAS	79
1678	796126	OPERADOR DE MAQUINA EMPACADORA DE PASTAS	79
1679	796127	OPERADOR DE MAQUINA MEZCLADORA DE CHICLES	79
1680	796128	OPERADOR DE MAQUINA LAMINADORA DE RESINA  (CHICLE)	79
1681	796129	OPERADOR DE MAQUINA CORTADORA DE RESINA  (CHICLE)	79
1682	796130	OPERADOR DE MAQUINA MEZCLADORA DE SOPAS	79
1683	796131	OPERADOR DE PRENSA PARA FRUTAS	79
1684	796132	OPERADOR DE MAQUINA DESTILADORA DE ALIMENTOS	79
1685	796133	OPERADOR DE MAQUINA PARA PREPARAR CARNES PESCADO  Y  MARISCOS	79
1686	796136	OPERADOR DE MAQUINA DE FABRICAR RAVIOLES	79
1687	796135	OPERADOR DE MAQUINA PARA FABRICAR PASTAS  ALIMENTICIAS	79
1688	796137	OPERADOR DE MAQUINA CORTADORA DE PASTAS  ALIMENTICIAS	79
1689	796141	PRACTICO CAFETERO	79
1690	796142	AYUDANTE DEL TEC. EN PASTAS ALIMENTICIAS	79
1691	796199	APRENDIZ  INCE(AREA FABRICACION DE ALIMENTOS)	79
1692	797101	OPERADOR DE MAQUINA PARA FABRICAR PRODUCTOS DE  CARTON	79
1693	797102	OPERADOR DE MAQUINA PARA FABRICAR ARTICULOS DE  CARTON  (PAPEL ACARTONADO)	79
1694	797103	OPERADOR DE MAQUINA PARA FABRICAR SOBRES Y BOLSAS DE PAPEL	79
1695	797104	OPERADOR DE MAQUINA TRITURADORA DE MADERA/ PASTA PARA PAPEL	79
1696	797105	OPERADOR DE BLANQUEADORA PARA PASTA DE PAPEL	79
1697	797106	OPERADOR DE MAQUINA BATIDORA/ PASTA DE PAPEL	79
1698	797107	OPERADOR DE INSTALACIONES Y FABRICACION DE PAPEL	79
1699	797108	ENCOLADOR DE PAPEL	79
1700	797109	OPERADOR DE MAQUINA DE FABRICAR PAPEL (FASE  HUMEDA)	79
1701	797110	OPERADOR DE MAQUINA DE FABRICAR PAPEL  (FASE SECA)	79
1702	797111	OPERADOR DE MAQUINA EMBOBINADORA DE PAPEL	79
1703	797112	OPERADOR DE REBOBINADORA DE PAPEL	79
1704	797113	OPERADOR DE MAQUINA PARA ESTIRAR PAPEL	79
1705	797114	OPERADOR DE CALANDRADORA PARA EL ACABADO DEL  PAPEL	79
1706	797115	REFINADOR DE PULPA DE PAPEL	79
1707	797116	OPERADOR DE DIGESTOR PARA PULPA DE PAPEL (CAÑA DE AZUCAR)	79
1708	797118	OPERADOR DE PULPADORA DE PAPEL  (CALDERA)	79
1709	797119	AYUDANTE DE  OPERADOR  DE  PULPADORA DE PAPEL  ( CALDERA)	79
1710	797120	CORTADOR DE VIRUTA PARA PULPA DE MADERA	79
1711	797121	LAVADOR DE PULPA DE PAPEL	79
1712	797122	OPERADOR DE CORTADORA DE CILINDROS  DE CARTULINA (PAPEL SANITARIO)	79
1713	797123	OPERADOR DE CORTADORA Y REBOBINADORA DE PAPEL  (FABRICACION DE VELILLAS DE FOSFORO)	79
1714	797124	OPERADOR DE MAQUINA CORTADORA DE FOSFOROS	79
1715	797125	OPERADOR DE MAQUINA PARA FABRICAR  PEINES DE  FOSFOROS	79
1716	797126	OPERADOR DE MAQUINA DE ENCABEZAR FOSFOROS	79
1717	797127	OPERADOR DE MAQUINA EMBOBINADORA DE VELILLAS	79
1718	797128	OPERADOR DE MAQUINA PARAFINADORA DE VELILLAS DE FOSFORO	79
1719	797129	BLANQUEADOR DE PASTA PARA PAPEL	79
1720	797130	MONTADOR DE PRODUCTOS DE CARTÓN 	79
1721	797131	OPERADOR DE MAQUINA RECICLADOR	79
1722	797199	APRENDIZ  INCE(DERIVADOS DEL CARTÓN Y EL PAPEL)	79
1723	798101	PANADERO	79
1724	798102	PASTELERO	79
1725	798103	PANADERO-PATELERO	79
1726	798104	AYUDANTE  DE  PANADERIA Y PASTELERIA	79
1727	798105	MAESTRO PASTELERO	79
1728	798106	HORNEADOR DE PAN	79
1729	798107	HORNEADOR DE PAN PASTELES Y TORTAS	79
1730	798108	REPOSTERO (PASTELES Y TORTA)	79
1731	798109	CHOCOLATERO	79
1732	798110	PAILERO	79
1733	798111	CONFITERO	79
1734	798112	AYUDANTE   DE  CONFITERO	79
1735	798113	COCEDOR DE JALEAS  (CONFITERIA)	79
1736	798114	PREPARADOR DE RELLENOS DE GALLETAS	79
1737	798115	CONTROLADOR DE CALIDAD  (GALLETAS)	79
1738	798116	CORTADOR DE GALLETAS RELLENAS	79
1739	798117	SELLADOR DE LATAS Y BOLSAS DE GALLETAS	79
1740	798118	EMPAQUETADOR DE GALLETAS	79
1741	798119	EMBALADOR DE GALLLETAS	79
1742	798120	OPERADOR DE MAQUINA PARA FABRICAR PAN	79
1743	798121	OPERADOR DE MAQUINA PARA REPOSTERIA Y PASTELERIA	79
1744	798122	OPERADOR DE MAQUINA PARA ELABORAR PRODUCTOS DE CHOCOLATE	79
1745	798123	OPERADOR EN LA FABRICACION DE LEVADURA	79
1746	798124	OPERADOR DE MOLINO DE CACAO  (REPOSTERIA)	79
1747	798125	OPERADOR DE MAQUINA PREPARADORA DE JARABE  (CONFITERIA)	79
1748	798126	OPERADOR DE HORNO DE PANADERIA	79
1749	798127	OPERADOR DE MAQUINA BATIDORA DE CREMA  (PASTELERA)	79
1750	798128	OPERADOR DE GLOBO GRAGEADOR	79
1751	798129	OPERADOR DE MAQUINA CUBRIDORA  (PASTELERA)	79
1752	798130	OPERADOR DE MAQUINA TROQUELADORA DE MASA  (GALLETAS)	79
1753	798131	OPERADOR DE MAQUINA EMPAQUETADORA DE GALLETAS	79
1754	798132	OPERADOR DE MAQUINA ENVOLVEDORA DE BOMBONES	79
1755	798199	APRENDIZ  INCE(AREA DE LA PANIFICACIÓN)	79
1756	811101	OPERADOR DE TRITURADORA DE MINERAL	81
1757	811102	OPERADOR DE MAQUINA TRITURADORA DE PIEDRAS	81
1758	811103	OPERADOR DE APARATO DE PRECIPITACION	81
1759	811104	OPERADOR DE CRIBAS HIDRAULICAS	81
1760	811105	OPERADOR DE INSTALACION DE FLOTACION	81
1761	811106	OPERADOR DE MAQUINA CONO DE SEPARACION MINAS	81
1762	811107	OPERADOR DE MAQUINA PERFORADORA  (MINAS Y CANTERAS)	81
1763	811108	SONDISTA DE POZOS (EXCEPTO POZOS DE PETROLEO Y GAS)	81
1764	811109	OPERADOR DE MAQUINA DE FABRICACION DE PIEDRA ARTIFICIAL	81
1765	811110	JEFE DE CANTERA	81
1766	811111	LABORATORISTA DE GEOLOGIA	81
1767	811112	LABORATORISTA DE SUELO	81
1768	811199	APRENDIZ  INCE(MINERALES Y ROCAS)	81
1769	811201	FUNDIDOR  (SIDERURGICA)	81
1770	811202	ASISTENTE  DE  COLADA  (SIDERURGIA)	81
1771	811203	OPERADOR DE HORNO  (SIDERURGIA)	81
1772	811204	CONTROLADOR DE ELECTRODOS  (SIDERURGIA)	81
1773	811205	AYUDANTE  DE  FUNDICION  (SIDERURGIA)	81
1774	811206	OPERADOR ALTERNO DE HORNO  (AYUDANTE DE  SIDERURGIA)	81
1775	811207	OPERADOR DE HORNOS ELECTRICOS  (SIDERURGIA)	81
1776	811208	FUNDIDOR DE HORNOS ELECTRICOS  (REFINO DE ACERO)	81
1777	811209	PREPARADOR DE LINGOTERAS  (SIDERURGIA)	81
1778	811210	AUXILIAR DE  FOSO DE  COLADA  (SIDERURGIA)	81
1779	811211	LINGOTERO DE ACERO	81
1780	811212	COLADOR DE HORNO	81
1781	811214	AYUDANTE  DE  LINGOTEADORA  (SIDERUGIA)	81
1782	811215	OPERADOR DE MAQUINA LINGOTEADORA (SIDERURGIA)	81
1783	811216	OPERADOR DE APARATOS DE PRECIPITACION	81
1784	811217	OPERADOR DE APARATO DE CIANURACION	81
1785	811218	COMPROBADOR  DE CALIDAD  (SIDERURGIA)	81
1786	811219	SUPERVISIOR PRODUCCION EN EL AREA SIDERURGICA	81
1787	811220	PESADOR CARGA DE HORNO  (SIDERURGIA)	81
1788	811221	PESADOR (MINERAL)	81
1789	811222	SUPERVISOR HORNO A FOSO Y DESMOLDEO  (SIDERURGIA)	81
1790	811223	OPERADOR DE MAQUINA ROTULADORA	81
1791	811293	CONTROLADOR DE ARRABIO	81
1792	811299	APRENDIZ   INCE (SIDERURGIA MAQUINAS)	81
1793	811301	OPERADOR DE HORNO DE PRIMERA FUSION/ METALES	81
1794	811302	OPERADOR DE HORNO DE AFINO/ ACERO  (MARTIN-SIEMENS)	81
1795	811303	FUNDIDOR EN ALTO HORNO / PRIMERA FUSION	81
1796	811304	OPERADOR DE CONVERTIDOR/ ACERO AL OXIGENO	81
1797	811305	OPERADOR DE CONVERTIDOR/ ACERO  (PROCEDIMIENTO BESSEMER)	81
1798	811306	OPERADOR DE HORNO DE AFINO  (HORNO ELECTRICO DE  ARCO -ACERO)	81
1799	811307	FUNDIDOR EN EL AFINO Y REFINO DE METALES  (NO FERREOS)	81
1800	811308	OPERADOR DE LAMINADORA DE ACERO EN CALIENTE	81
1801	811309	OPERADOR DE LAMINADOR DE ACERO TREN CONTINUO	81
1802	811310	OPERADOR DE LAMINADORA DE ACERO EN FRIO	81
1803	811311	OPERADOR DE LAMINADORA DE METALES NO FERREOS	81
1804	811312	OPERADOR DE LAMINADORA DE TUBOS SIN SOLDADURA	81
1805	811313	OPERADOR DE TREN DE LAMINACION (SIDERURGIA)	81
1806	811314	OPERADOR DE MAQUINA CENTRIFUGADORA COLADA  PRODUCTOS CILINDRICOS DE METAL	81
1807	811315	OPERADOR DE MAQUINA DE COLAR A PRESION/ METALES  FERROSOS	81
1808	811316	OPERADOR DE HORNO DE RECOCIDO DE METALES	81
1809	811317	OPERADOR DE INSTALACIONES DE TRATAMIENTOS TERMICOS / METALES	81
1810	811318	OPERADOR DE HORNO DE CARBOCEMENTACION/ METALES	81
1811	811319	NORMALIZADOR DE METALES	81
1812	811320	OPERADOR   MAQUINA EXTRUSADORA/ METALES	81
1813	811321	OPERADOR DE MAQUINA ESTIRADORA DE TUBOS SIN SOLDADURA	81
1814	811322	TREFILADOR A MAQUINA	81
1815	811323	AJUSTADOR / OPERADOR  DE  LIMADORES  (MINERALES)	81
1816	811324	OPERADOR  DE MAQUINA FRESADORA DE METAL	81
1817	811325	OPERADOR DE MAQUINA Y HERRAMIENTAS	81
1818	811326	OPERADOR DE INSTALACIONES DE INCINERACION/ RESIDUOS	81
1819	811327	OPERADOR DE MAQUINA DE PRODUCTOS PREFABRICADOS DE HORMIGON  (SIDERURGICA)	81
1820	811328	OPERADOR DE MAQUINA LIMPIADORA DE METALES (DECAPADOR)	81
1821	811329	OPERADOR DE MAQUINA RECUBRIDORA DE METALES	81
1822	811330	AJUSTADOR / OPERADOR  DE  LIMADORES  (METAL)	81
1823	811331	AJUSTADOR / OPERADOR  DE  FRESADORA DE METAL	81
1824	811332	HERRERO EN GENERAL  (METALES)	81
1825	811333	MARTILLADOR DE METALES	81
1826	811334	MAESTRO DE TALLER METALURGICO	81
1827	811335	OPERADOR DE PRENSA PARA FABRICAR PIEZAS METALICAS	81
1828	811336	OPERADOR DE PRENSA  FUSION PARA LA  FABRICACION DE  INODOROS  (METALES)	81
1829	811337	OPERADOR DE MAQUINA ESTAMPADORA DE PALAS	81
1830	811338	FORJADOR DE PRENSA	81
1831	811339	OPERADOR DE PRENSA FORJADORA DE PICO DE CAVAR	81
1832	811340	CALDERERO DE CHAPAS DE ACERO	81
1833	811341	HOJALATERO	81
1834	811342	TREFILADOR A MANO	81
1835	811343	PULIDOR DE PIEZAS DE METAL A MANO	81
1836	811344	PULIDOR DE PIEZAS DE METAL A MAQUINA	81
1837	811345	REBABADOR DE LINGOTES	81
1838	811346	ALIGADOR  DE  SUPERFICIE  METALICA	81
1839	811347	MODELISTA DE METALURGIA	81
1840	811348	AJUSTADOR MODELISTA  (FUNDIDOR DE METALES)	81
1841	811349	AFILADOR DE KARDAS	81
1842	811350	AFILADOR  DE  MAQUINA  Y  HERRAMIENTAS	81
1843	811351	OPERADOR DE MAQUINA FORJADORA  (GRIFOS)	81
1844	811353	MAESTRO DE TALLER METALURGICO	81
1845	811354	LABORATORISTA INDUSTRIAL	81
1846	811355	PROGRAMADOR DE PRODUCION EN EL AREA  SIDERURGIA	81
1847	811356	PULIDOR DE PIEZAS EN METAL COLADO 	81
1848	811357	OPERADOR DE MAQUINA PARA FABRICAR MUEBLES	81
1849	811399	APRENDIZ INCE(METALES A MAQUINA)	81
1850	811401	PREPARADOR DE ESNCIAS EN GENERAL	81
1851	811402	PREPARADOR DE FORMULAS	81
1852	811403	MEZCLADOR DE ESENCIAS  (PERFUMES)	81
1853	811404	MEZCLADOR DE INSECTICIDA (LIQUIDO)	81
1854	811405	OPERADOR DE PLANTA PARA LA ELABORACION DE  ACETILENO	81
1855	811406	OPERADOR DE FILTRO	81
1856	811407	MEZCLADOR  (PREPARADOR DE FIJADORES PARA EL CABELLO)	81
1857	811408	OPERADOR DE MAQUINA MEZCLADORA DE PASTA DE JABON	81
1858	811409	OPERADOR DE MEZCLADORA DE DETERGENTE  (PREPARADOR)	81
1859	811410	OPERADOR DE BATIDORA EN SECO  (JABON)	81
1860	811411	OPERADOR DE MAQUINA CORTADORA DE JABON	81
1861	811412	OPERADOR DE MAQUINA AMALGAMADORA	81
1862	811413	OPERADOR DE MAQUINA PARA FABRICAR COSMESTICOS	81
1863	811414	OPERADOR DE MAQUINA PARA FABRICAR DETERGENTES	81
1864	811415	MEZCLADOR DE ESPUMA LATEX	81
1865	811416	OPERADOR DE MAQUINA AMASADORA Y MEZCLADORA/CAUCHO	81
1866	811417	MONTADOR DE PRODUCTOS DE CAUCHO	81
1867	811418	OPERADOR DE MAQUINA EXTRUSORA/ CAUCHOS	81
1868	811419	OPERADOR DE CALANDRA/ CAUCHO	81
1869	811420	OPERADOR DE MAQUINA DE FABRICACION NEUMATICOS	81
1870	811421	OPERADOR DE MAQUINA MOLDEADORA DE CAUCHO	81
1871	811422	LABORATORISTA QUIMICO	81
1872	811423	ANALISTA DE PRUEBAS  (QUIMICO)	81
1873	811424	AYUDANTE DE LABORATORISTA	81
1874	811425	MEZCLADOR DE PINTURAS PARA AUTOS	81
1875	811426	MOLINERO DE PINTURAS	81
1876	811427	ENCARGADO  DE  PLEXOS Y BARNICES	81
1877	811428	HORNERO SECADOR DE PINTURA	81
1878	811429	FABRICANTE DE PLASTICOS	81
1879	811430	MONTADOR DE PRODUCTOS DE MATERIAL PLASTICO	81
1880	811431	OPERADOR DE MAQUINA AL VACIO PARA MOLDEAR LAMINAS PLASTICAS	81
1881	811432	MOLDEADOR PLASTICO POR INYECCION	81
1882	811433	SOLDADOR  PLASTICO	81
1883	811434	OPERADOR DE MAQUINA DE ESTIRAR MATERIAL PLASTICO	81
1884	811435	OPERADOR DE MAQUINA MOLDEADORA  DE PLANCHAS DE ESPUMA PLASTICA	81
1885	811436	EXTRUSOR DE PLASTICO	81
1886	811437	MOLDEADOR PLASTICO POR COMPRENSION  	81
1887	811438	LABORATORISTA DE LICORES	81
1888	811439	OPERADOR DE ALAMBIQUE (BEBIDAS ALCOHOLICAS)	81
1889	811440	ENCARGADO DE DILUCION DE ALCOHOL	81
1890	811441	OPERADOR DE FILTROS  (LICORES)	81
1891	811442	CATADOR DE VINOS Y LICORES	81
1892	811443	OPERADOR DE MAQUINA DE DESTILACION DE BEBIDAS  ALCOHOLICAS	81
1893	811444	SUPERVISOR EN LA ELABORACION DE BEBIDAS ALCOHOLICAS	81
1894	811445	PREPARADOR DE ESMALTE	81
1895	811447	OPERADOR DE MAQUINA MOLDEADORA DE MATERIAL PLASTICO (COMPRESIÓN) 	81
1896	811448	OPERADOR DE MAQUINA PARA ELABORAR BEBIDAS SIN ALCOHOL	81
1897	811449	OPERADOR DE MAQUINA MOLDEADORA DE MATERIAL PLASTICO (INYECCIÓN)	81
1898	811499	APRENDIZ INCE (PINTURAS, CAUCHOS)	81
1899	811501	OPERADOR DE MAQUINA QUEBRANTADORA/ TRATAMIENTOS  QUIMICOS	81
1900	811502	MOLINERO  (TRATAMIENTOS QUIMICOS)	81
1901	811503	OPERADOR DE MAQUINA MEZCLADORA  (TRATAMIENTOS QUIMICOS)	81
1902	811505	OPERADOR DE HORNO DE CALCINACION (TRATAMIENTOS  QUIMICOS)	81
1903	811506	OPERADOR DE INSTALACIONES DE TRATAMIENTOS DE  PETROLEO CRUDO	81
1904	811507	OPERADOR DE MAQUINA SEPARADORA CENTRIFUGADORA/  TRATAMIENTOS QUIMICOS	81
1905	811508	OPERADOR DE FILTRO- PRENSA/ SUSTANCIAS QUIMICAS	81
1906	811509	DESTILADOR PRODUCTOS QUIMICOS  (EXCEPTO PETROLEO)	81
1907	811510	OP APARATO RADIACION Y CONVERSION PROD QUIMICOS  (EXC PETROLEO Y  GAS NATURAL)	81
1908	811511	OPERADOR DE EVAPORADOR  (EXCEPTO PETROLEO Y GAS)	81
1909	811512	OPERADOR DE INSTALACIONES DE BLANQUEAMIENTO QUIMICO	81
1910	811513	OPERADOR DE INSTALACIONES PRODUCCION DE FIBRAS SINTETICAS	81
1911	811514	OPERADOR DE MAQUINA PARA FABRICAR COSMETICOS/ TRATAMIENTO QUÍMICO	81
1912	811515	OPERADOR DE MAQUINA PARA FABRICAR DETERGENTE (PROCESOS QUIMICOS)	81
1913	811516	OPERADOR DE MAQUINA PARA FABRICAR PRODUCTOS FARMACEUTICOS	81
1914	811517	OPERADOR DE MAQUINA PARA FABRICAR BUJIAS	81
1915	811518	OPERADOR DE MAQUINA PARA FABRICAR LINOLEO	81
1916	811519	OPERADOR DE MAQUINA PARA PREPARAR CERILLAS	81
1917	811520	OPERADOR DE MAQUINA PARA PREPARAR EXPLOSIVOS	81
1918	811521	DESULFURADOR  (REFINACION DE PETROLEO)	81
1919	811522	OPERADOR DE MAQUINA DE GALVANOSPLASTIA (GALVANIZADOR)	81
1920	811523	OPERADOR DE MAQUINA MEZCLADORA DE  MATERIALES ABRASIVOS	81
1921	811599	APRENDIZ INCE(AREA DE TRATAMIENTOS QUÍMICOS)	81
1922	811601	MONTADOR DE MECANISMOS MECANICOS	81
1923	811602	MONTADOR DE MAQUINAS Y HERRAMIENTAS	81
1924	811603	MONTADOR DE MOTORES DE AVION	81
1925	811604	MONTADOR DE EQUIPOS ELECTRICOS	81
1926	811605	OPERADOR DE CADENAS DE MONTAJE AUTOMATIZADO	81
1927	811606	MONTADOR DE MAQUINA BOBINADORA DE FILAMENTO	81
1928	811607	MONTADOR DE PIEZAS A MANO DE COMPONENTES	81
1929	811608	OPERADOR DE MAQUINA BOBINADORA DE TRANSFORMADORES	81
1930	811609	ENSAMBLADOR DE EQUIPOS ELECTONICO	81
1931	811610	MONTADOR DE INSTRUMENTOS DE PRECISION/ ELECTRONICOS	81
1932	811611	MONTADOR  DE INSTALACIONES DE CENTRAL TERMOELECTRICA	81
1933	811612	AYUDANTE REPARADOR DE EQUIPOS ELECTRONICOS	81
1934	811613	JEFE DE ENSAMBLAJE DE COCINAS A GAS Y KEROSENE	81
1935	811614	OPERADOR DE EQUIPOS ELECTRÓNICOS 	81
1936	811615	OPERADOR DE ORDENADOR ELECTRÓNICO 	81
1937	811616	OPERADOR DE ROBOTS INDUSTRIALES 	81
1938	811617	OPERADOR DE APARATOS PARA IZAR	81
1939	811618	PROGRAMADOR DE SISTEMAS ELECTRÓNICOS	81
1940	811699	APRENDIZ INCE (OPERADORES DE MAQUINA)	81
1941	821101	OPERADOR DE TREN DE SONDEO/ POZOS DE PETROLEO Y GAS NATURAL	82
1942	821102	OPERADOR DE TREN DE SONDEO/ ROTACION POZOS DE PETROLEO Y GAS NATURAL)	82
1943	821103	OPERADOR DE MAQUINA DE EXTRACCION POZOS DE   PETROLEO Y GAS	82
1944	821104	OPERADOR DE PERFORADORA/ PERCUSION (POZOS DE  PETROLEO Y GAS	82
1945	821105	OPERADOR DE INSTALACIONES DE PETROLEO CRUDO	82
1946	821106	DESULFURADOR (REFINO DE PETROLEO)	82
1947	821107	DESTILADOR DE PETROLEO	82
1948	821108	OPERADOR DE  CUADRO DE CONTROL (REFINO DE  PETROLEO)	82
1949	821109	MEZCLADOR   (REFINO DE PETROLEO)	82
1950	821110	OPERADOR DE INSTALACIONES DE SEP  PARAFINA/ REFINACION DE PETROLEO Y GAS NATURAL	82
1951	821111	MEDIDOR  AFERIDOR  PETROLERO	82
1952	821112	OPERADOR DE PATIOS DE TANQUES (PETROLEO)	82
1953	821113	OPERADOR DE ALMACENAJE Y EMBARQUE DE PETROLEO CRUDO	82
1954	821114	AFORADOR MEDIDOR  (PETROLEO)	82
1955	821115	OPERADOR MAYOR DE REFINACION PETROLEO  (ALAMBIQUES)	82
1956	821116	OPERADOR DE REFINACION  (PLANTA DE TRATAMIENTO Y PURIFICACION DE PETROLEO)	82
1957	821117	OPERADOR DE REFINACION (COMPRESORES Y RECUPERACION) PETROLEO	82
1958	821118	CHEQUEADOR DE POZOS PETROLEROS	82
1959	821119	ENCARGADO DE TRATAMIENTO DE PETROLEO CRUDO	82
1960	821120	OPERADOR PRODUCCION  (PETROLEO)	82
1961	821121	OPERADOR DE RECUPERACION Y MANTENIMIENTO DE  CILINDROS DE POZOS  (PETROLEO Y GAS)	82
1962	821122	LIMPIADOR DE POZOS PETROLEROS	82
1963	821123	OPERARIO DE EQUIPOS DE LIMPIEZA DE POZOS (PETROLEO)	82
1964	821124	OPERADOR DE ACIDIFICACION (PETROLEO Y GAS)	82
1965	821125	OPERADOR DE INSTRUMENTOS EN POZOS PRODUCCIÓN (PETROLEO)	82
1966	821126	SOBRESTANTE PRODUCCION PETROLERA	82
1967	821127	SUPERVISOR AUXILIAR DE PERFORACION (PETROLEO)	82
1968	821128	REVISOR DE BOMBAS E INSTRUMENTOS PRODUCCIÓN PETROLERA	82
1969	821129	OPERADOR DE EQUIPO DE SUBSUELO (GAS)	82
1970	821130	CEMENTADOR  (PETROLEO Y GAS)	82
1971	821131	REPARADOR DE POZOS PRODUCCION (PETROLEO)	82
1972	821132	OPERADOR DE EQUIPOS DE SUBSUELO (PETROLEO)	82
1973	821133	APAREJADOR DE  TORRES  DE  PERFORACION  (PETROLEO)	82
1974	821134	ENCUELLADOR  PETROLERO	82
1975	821135	AYUDANTE DE PERFORADOR PETROLERO	82
1976	821136	OBRERO DE TALADRO PERFORACION (PETROLEO)	82
1977	821137	PERFORADOR CON APARATOS DE CABLE  (PETROLEO Y GAS)	82
1978	821138	PERFORADOR CON APARATO ROTATIVO, PETROLEO Y GAS	82
1979	821139	LUBRICADOR CON EQUIPO MOVIL (MECANICA GENERAL)	82
1980	821140	ARMADOR  DE  CABRIAS  DE  PERFORACION  (PETROLEO)	82
1981	821143	AFERIDOR  MEDIDOR (PETROLEO)	82
1982	821144	JEFE DE OPERACIONES DE GAS LPG (PETROLEO)	82
1983	821145	JEFE TEC. DE MANTENIMIENTO DE COCINAS  INDUSTRIALES	82
1984	821146	SUPERVISOR DE MOVIMIENTO DE PETROLEO (PATIO DE  MEZCLA GASOLINA)	82
1985	821147	SUPERVISOR DE PLANTA (PETROLEO)	82
1986	821148	SUPERVISOR DE MOVIMIENTO DE PETROLEO (MUELLES)	82
1987	821149	SUPERIVISOR DE MANEJO DE CRUDO	82
1988	821150	SUPERVISOR DE CONVERSIÓN DE REFINACIÓN (PETROLEO) 	82
1989	821151	SUPERVISOR DE PLANTA DE DISTRITO (PETROLEO)	82
1990	821152	SUPERVISOR DE PLANTA DE REFINACIÓN (PETROLEO)	82
1991	821153	SUPERVISOR - DESPACHADOR DE PETROLEO 	82
1992	821154	OPERADOR DE ESTACION DE BOMBEO / REFINACIÓN DE PETROLEO Y GAS	82
1993	821199	APRENDIZ INCE(AREA  DE PETROLEO)	82
1994	831101	AYUDANTE TEC.  DE DENSIDAD  DE AGUA  (SALINAS)	83
1995	831102	ENCARGADO DE MANTENIMIENTO DE PROCESO DE REFINACION	83
1996	831103	OPERADOR DE MAQUINA EXTRACTIVA O COSECHADORA DE  SALINA  (SALINA NATURAL)	83
1997	831104	ENCARGADO SECC EXTRACCION Y TRANSPORTE DE SAL  (SALINA NATURAL)	83
1998	831105	ENCARGADO SECC DE LAVADO DE SAL (SALINA NATURAL)	83
1999	831106	OPERADOR DE CUADRO DE MANDO (EXTRACCION DE SAL)	83
2000	831107	ENCARGADO SECC  DE LAVADO DE SAL (SALINA ARTIFICIAL)	83
2001	831108	OPERADOR DE MAQUINA DE BOMBEO DE AGUA DE MAR  ARTIFICIAL)	83
2002	831109	OPERADOR DE MAQUINA COSECHADORA DE SAL  (SALINA  ARTIFICIAL)	83
2003	831110	OPERADOR DE MAQUINA LAVADORA DE SAL	83
2004	831111	OPERARIO DE CONTROL ESPECIALIZADO EN TERMICA  (REFINACION DE SAL)	83
2005	831112	OPERADOR DE REFINACION DE SAL  (CENTRIFUGAS)	83
2006	831113	OPERARIO DE CONTROL DE CENTRIFUGAS Y LAVANDEROS  (REFINACION SAL)	83
2007	831114	OPERARIO DE CONTROL DE  TAMICES  Y PRODUCTOS  QUÍMICOS (REFINACION DE SAL)	83
2008	831115	TOLVERO  (MAQUINA EXTRACTORA DE SAL)	83
2009	831116	OPERADOR DE MOLINOS DE SAL (REFINACION DE SAL)	83
2010	831117	OPERADOR DE MAQUINA VOLCADORA DE CHALANA (SALINA)	83
2011	831118	OPERADOR DE MAQUINA ENSACADORA	83
2012	831119	OPERADOR DE MAQUINA COSEDORA DE SACOS DE SAL	83
2013	831120	OPERADOR DE CONTROLES (REFINACION DE SAL)	83
2014	831121	OPERADOR DE TOLVA DE ALMACENAMIENTO DE SAL REFINADA	83
2015	831122	OPERADOR DE MAQUINA EMPAQUETADORA DE SAL REFINADA	83
2016	831123	PEON SALINERO  (SALINA ARTIFICIAL)	83
2017	831124	RECEPTOR Y ESTIBADOR DE SACOS DE SAL	83
2018	831125	OPERADOR DE CINTA TRANSPORTADORA DE SAL	83
2019	831199	APRENDIZ INCE  (EXTRACCIÓN DE SAL)	83
2020	841101	OPERADOR DE MAQUINARIAS AGRICOLAS A MOTOR	84
2021	841102	TRACTORISTA AGRICOLA	84
2022	841103	OPERADOR DE EQUIPOS  DE FUMIGACION	84
2023	841104	OPERADOR DE MAQUINA PICADORA DE CAÑA DE AZUCAR	84
2024	841105	OPERADOR DE ORDEÑADORA MECANICA	84
2025	841106	OPERADOR DE MAQUINA LIMPIADORA DE CACAO	84
2026	841107	OPERADOR DE MAQUINAS PARA SEMILLAS DE AJONJOLI	84
2027	841108	OPERADOR DE CALDERA (AVICULTURA)	84
2028	841109	OPERADOR DE MAQUINA DESPLUMADORA DE AVES	84
2029	841110	OPERADOR DE MAQUINA TRATAMIENTO DE CACAO EN GRANOS	84
2030	841111	OPERADOR DE MAQUINA DESFIBRADORA DE ALGODÓN	84
2031	841112	OPERADOR DE MAQUINA DE TRATAMIENTO DEL ARROZ, MAIZ, MANI Y OTROS CEREALES	84
2032	841113	OPERADOR DE EQUIPOS DE HIDROGENEACION DE ACEITES Y GRASAS	84
2033	841114	OPERADOR DE PRENSA HIDRAULICA DE EXTRACCION  (ACEITES COMESTIBLES)	84
2034	841115	OPERADOR DE MAQUINA REFINADORA DE ACEITES Y GRASAS	84
2035	841116	OPERADOR DE MAQUINA MOLDEADORA DE SEMILLAS OLEAGINOSAS	84
2036	841117	OPERADOR DE MAQUINA DE TRATAMIENTO DE CAFÉ EN GRANOS	84
2037	841118	OPERADOR DE MAQUINA DE TRATAMIENTO DE HOJAS DE TE	84
2038	841119	OPERADOR DE MAQUINA CLASIFICADORA DE GRANOS	84
2039	841120	OPERADOR DE MOLINO DE DISCO  (CAFÉ)	84
2040	841121	OPERADOR DE MAQUINA TOSTADORA DE CAFÉ	84
2041	841122	MOLINERO DE CAFÉ	84
2042	841123	TOSTADOR DE CAFÉ	84
2043	841124	MEZCLADOR DE CAFE	84
2044	841125	OPERADOR DE MAQUINA TOSTADORA DE CACAO	84
2045	841126	OPERADOR DE MAQUINA MEZCLADORA DE CHOCOLATE	84
2046	841127	PRACTICO CACAOTERO	84
2047	841129	SECADOR DE CAFE	84
2048	841130	OPERADOR DE MAQUINA  PARA PRODUCIR AZUCAR	84
2049	841131	OPERADOR DE MAQUINA PARA MOLER ARROZ	84
2050	841199	APRENDIZ INCE(OPERARIOS DE  MAQUINARIAS AGROPECUARIAS)	84
2051	911102	VENDEDOR DE PERIODICOS	91
2052	911105	LAVADOR AMBULANTE DE CRISTALES DE AUTOMOVIL	91
2053	911106	PEGADOR DE CARTELES	91
2054	911107	LAVANDERO Y PLANCHADOR A MANO	91
2055	911108	DOMESTICA DE CASA DE FAMILIA	91
2056	911109	LAVADOR DE AUTOMOVILES	91
2057	911110	MUJER DE LIMPIEZA O MOZO DE LIMPIEZA	91
2058	911111	BARRENDERO DE CALLES Y PLAZAS	91
2059	911112	RECOLECTOR DE BASURA (ASEO URBANO)	91
2060	911113	VENDEDOR DE CAFÉ	91
2061	911114	PULIDOR	91
2062	911115	MALETERO EN GENERAL	91
2063	911116	RECOLECTOR DE LATAS	91
2064	911117	LIMPIABOTAS	91
2065	911119	CUIDADOR DE VEHICULOS	91
2066	911120	PISCINERO	91
2067	911122	BUHONERO	91
2068	911123	LIMPIADOR DE VENTANAS	91
2069	911124	RECOLECTOR DE MONEDAS (APARATOS DE VENTAS  AUTOMATICAS)	91
2070	921101	PEON CAZADOR	92
2071	921102	RECOLECTOR DE ALGAS MARINAS	92
2074	921105	FABRICADOR DE DULCES CASEROS	92
2082	921114	OBRERO FORESTAL	92
2083	921115	DESYERBADOR	92
2084	921116	PEON AGRICOLA, COCECHADOR  DE FRUTAS	92
2085	931101	AHOYADOR DE CANTERAS	93
2086	931102	PEON DE CANTERAS	93
2087	931103	PEON DE MINAS	93
2088	931104	CAVADOR DE ZANJAS  Y ACEQUIAS	93
2089	931105	OBRERO DE MANTENIMIENTO DE CANTERAS 	93
2090	931106	PEON DE INDUSTRIA MANUFACTURERA	93
2091	931107	PEGADOR DE ETIQUETAS A MANO  (ROTULADOR)	93
2092	931108	CARGADOR DE AVIONES	93
2093	931109	BOMBERO DE GASOLINA	93
2094	931110	CARRETERO  (PETROLEO)	93
2095	931111	PEON DE ALBAÑILERIA	93
2096	931112	PEON DE CAZA	93
2097	931113	ARRUMADOR  DE  ALMACEN	93
2098	931114	CONFECCIONADOR DE COHETES Y FUEGOS  ARTIFICIALES  (MANUAL)	93
2099	931115	CARGADOR	93
2100	931116	CARGADOR DE BUQUES	93
2101	931117	CARGADOR  DE BUQUES CISTERNAS / GASES	93
2102	931118	CARGADOR DE BUQUES  CISTERNAS / LIQUIDOS	93
2103	931119	CARGADOR DE CAMIONES	93
2104	931120	CARGADOR DE TRENES	93
2106	931122	OBRERO EN GENERAL 	93
2107	931123	OBRERO DE CONSTRUCCIÓN 	93
2108	911101	VENDEDOR AMBULANTE	93
2109	911103	VENDEDOR A DOMICILIO	93
2110	911104	VENDEDOR AMBULANTE DE DULCES	93
2105	931121	CARGADOR DE VEHÍCULOS  (TRANS. POR CARRETERA Y  FERROVIARIO)	93
61	111365	DIRECTOR DE DPTO PRODUCCIÓN Y  OPERACIONES / INST. EXTRATERRITORIALES	11
57	111361	DIRECTOR DE DPTO PRODUCCIÓN Y OPERACIONES / CONST. Y OBRAS PUBLICAS	11
51	111355	DIRECTOR DE DPTO PRODUCCIÓN Y  OPERACIONES ACT. RECREATIVAS	11
145	231432	LIC. EN ADM. DE EMPRESAS  AGROPECUARIAS O  ADMON  DE FINCAS	23
164	251134	LIC. EDUCACIÓN BÁSICA INTEGRAL EDUC. INTEGRAL O PROF. EDUC. INTEGRAL	25
178	251331	LIC. EN EDUC. MENCIÓN CASTELLANO Y LITERATURA  O LENGUA O LITERATURA	25
174	251235	LIC. EN EDUCACION MENCIÓN HISTORIA O GEOG E HIST O  PROF  GEOG E HIST	25
193	251439	LIC. EN EDUCACIÓN MENCIÓN INDUSTRIAL O PROF DE  ELECTRICIDAD IND	25
191	251437	LIC. EN EDUCACIÓN MENCIÓN INDUSTRIAL O PROF DE MECANICA IND	25
194	251441	LIC. EN EDUCACIÓN MENCIÓN TÉC MERCANTIL O PROF EN EDUC COMERCIAL	25
179	251332	PROFESOR EN LENGUA Y LITERATURA Y LATIN O PROF DE LENGUA Y LIT	25
248	271134	LIC. EN LETRAS MENCIÓN LENGUA Y LITERATURA HISPANOAMERICANA Y VZLNA	27
262	281131	OFICIAL EFECT DEL EJCTO Y LIC. EN CCIA  Y ARTES MILITARES OPC TERRESTRE	28
263	281132	SUBTENIENTE DE LA REPUBLICA Y  LIC CCIA Y ARTES  MILITARES OPC GN	28
265	281134	SUBTENIENTE DE LA REPÚBLICA Y LIC  CCIAS Y ARTES MILITARES OPC  AERON	28
340	311711	TECNICO SUPERIOR UNIV EN DISEÑO GRAFICO  PUBLICIT O EN DISEÑO GRAFICO	31
312	311412	TECNICO SUP UNIV EN ANALISIS Y DISEÑO DE SISTEMAS O ANALISTA DE SIST	31
311	311411	TECNICO SUPERIOR UNIV EN COMPUTACION O  TECNOLOGO EN COMP 	31
300	311317	TECNICO SUPERIOR UNIV  CONTROL DE PROCESOS DE TELECOMUNICACIONES	31
272	311118	TECNICO SUP UNIV  MANEJO DE EMERGENCIAS Y ACCION CONTRA DESASTRES	31
328	311613	TECNICO SUPERIOR UNIV EN METALURGICA Y EN CCIA DE LOS METALES	31
332	311617	TECNICO SUPERIOR UNIV PETROLEO O EN PROCESOS DE REFINACION DE PET	31
317	311512	TECNICO SUPERIOR UNIV EN TEC  AUTOMOTRIZ O  MECANICA AUTOMOTRIZ	31
273	311119	TECNICO SUPERIOR UNIV EN TECNOLOGIA DE INCENDIOS O TEC BOMBERIL	31
2111	100101	ESTUDIANTES	10
2112	100102	AMA DE CASA	10
\.


--
-- TOC entry 7649 (class 0 OID 186324)
-- Dependencies: 436
-- Data for Name: profesioncargo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY profesioncargo (id_profesion_cargo, id_cargo, id_profesion, anios_graduado, peso, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7650 (class 0 OID 186330)
-- Dependencies: 437
-- Data for Name: profesiontrabajador; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY profesiontrabajador (id_profesion_trabajador, id_profesion, id_personal, actualmente, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7651 (class 0 OID 186336)
-- Dependencies: 438
-- Data for Name: programa; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY programa (id_programa, id_organismo, cod_programa, nombre, id_sitp, tiempo_sitp, id_unidad_administradora) FROM stdin;
10	11	10	GENERICO	0	\N	10
\.


--
-- TOC entry 7652 (class 0 OID 186340)
-- Dependencies: 439
-- Data for Name: proveedorregion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY proveedorregion (id_proveedor_region, id_proveedor_ticket, id_region, cod_ticket) FROM stdin;
\.


--
-- TOC entry 7653 (class 0 OID 186345)
-- Dependencies: 440
-- Data for Name: proveedorticket; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY proveedorticket (id_proveedor_ticket, cod_proveedor_ticket, nombre, direccion) FROM stdin;
11	01	SODEXO PASS	LA CASTELLANA
\.


--
-- TOC entry 7654 (class 0 OID 186351)
-- Dependencies: 441
-- Data for Name: proveedorubicacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY proveedorubicacion (id_proveedor_ubicacion, id_proveedor_ticket, codigo_ubicacion, observaciones) FROM stdin;
\.


--
-- TOC entry 7655 (class 0 OID 186357)
-- Dependencies: 442
-- Data for Name: proyeccion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY proyeccion (id_aplicar_tabulador, fecha_proceso, grado_actual, paso_actual, sueldo_actual, ajuste_actual, compensacion_actual, paso_nuevo, sueldo_nuevo, ajuste_nuevo, compensacion_nueva, id_trabajador, monto_retroactivo, dias_retroactivo, base_aumento, prima_profesional_actual, prima_profesional_nueva, prima_razones_servicio_actual, prima_razones_servicio_nueva, bono_comp_jext1_actual, bono_comp_jext1_nueva, bono_comp_jext2_actual, bono_comp_jext2_nueva, bono_comp_jext3_actual, bono_comp_jext3_nueva, retroactivo_sueldo, retroactivo_compensacion, cedula, primer_apellido, primer_nombre, coduel) FROM stdin;
\.


--
-- TOC entry 7656 (class 0 OID 186372)
-- Dependencies: 443
-- Data for Name: proyecto; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY proyecto (id_proyecto, anio, cod_proyecto, enunciado, descripcion, objetivo_estrategico, objetivos_especificos, resultado, meta, estatus, fecha_inicio, fecha_fin, fecha_suspension, id_ciudad, id_municipio, id_organismo) FROM stdin;
\.


--
-- TOC entry 7657 (class 0 OID 186381)
-- Dependencies: 444
-- Data for Name: pruebapreseleccionado; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pruebapreseleccionado (id_prueba_preseleccionado, id_postulado_concurso, id_prueba_seleccion, resultado, entrevistador, fecha, observaciones) FROM stdin;
\.


--
-- TOC entry 7658 (class 0 OID 186388)
-- Dependencies: 445
-- Data for Name: pruebaseleccion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pruebaseleccion (id_prueba_seleccion, cod_prueba, nombre) FROM stdin;
\.


--
-- TOC entry 7659 (class 0 OID 186391)
-- Dependencies: 446
-- Data for Name: publicacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY publicacion (id_publicacion, anio_publicacion, editorial, propiedad_intelectual, titulo, id_personal, observaciones, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7660 (class 0 OID 186399)
-- Dependencies: 447
-- Data for Name: puebloindigena; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY puebloindigena (id_pueblo_indigena, cod_pueblo_indigena, descripcion) FROM stdin;
1	I1	Baniva
2	I2	Baré
3	I3	Kubeo
4	I4	Jiwi
5	I5	Hoti
6	I6	Curripako
7	I7	Piapoco
8	I8	Purinave
9	I9	Sáliva
10	I10	Sanemá/shirianá
11	I11	Wotjuja
12	I12	Yanomami
13	I13	Warekena
14	I14	Yabarana/Mako
15	I15	Ñengatu/Yeral
16	I16	Kariña
17	I17	Cumanagoto
18	I18	Pumé
19	I19	Kumba
20	I20	Uruak/Arrutan
21	I21	Akawayo
22	I22	Arawak
23	I23	Eñepá
24	I24	Pemón
25	I25	Sape
26	I26	Wanai/Mapoyo
27	I27	Warao
28	I28	Chaima
29	I29	Wayuu
30	I30	Añu
31	I31	Bari
32	I32	Yukpa
33	I33	Japreira
34	I34	Ayamán
35	I35	Amorua
36	I36	Inga
37	I37	Yekwana
38	I38	Quinaroe
39	I39	Guazabara
40	I40	Gayón
41	I41	Camentza
42	I42	Guanomo
43	I43	Timotes
44	I44	Mako
\.


--
-- TOC entry 7661 (class 0 OID 186402)
-- Dependencies: 448
-- Data for Name: ramoocupacional; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ramoocupacional (id_ramo_ocupacional, cod_ramo_ocupacional, nombre, id_sitp, tiempo_sitp) FROM stdin;
31	2	VICEMINISTRA	0	\N
32	3	AUDITORA O AUDITOR	0	\N
33	4	CONSULTORA O CONSULTOR JURIDICO	0	\N
34	5	DIRECTORA O DIRECTOR GENERAL	0	\N
20	1	MINISTRA	0	\N
\.


--
-- TOC entry 7662 (class 0 OID 186406)
-- Dependencies: 449
-- Data for Name: reconocimiento; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY reconocimiento (id_reconocimiento, observaciones, fecha, id_personal, id_tipo_reconocimiento, id_organismo, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7663 (class 0 OID 186410)
-- Dependencies: 450
-- Data for Name: region; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY region (id_region, cod_region, id_organismo, nombre) FROM stdin;
10	01	11	REGION CENTRAL
23	02	11	ESTADO ARAGUA
24	03	11	ESTADO AMAZONAS
25	04	11	ESTADO ANZOATEGUI
26	05	11	ESTADO APURE
28	06	11	ESTADO BARINAS
29	07	11	ESTADO BOLIVAR
30	08	11	ESTADO CARABOBO
31	09	11	ESTADO COJEDES
32	10	11	DISTRITO CAPITAL
33	11	11	ESRADO DELTA AMACURO
34	12	11	ESTADO FALCON
35	13	11	ESTADO GUARICO
36	14	11	ESTADO LARA
37	15	11	ESTADO MERIDA
38	16	11	ESTADO MIRANDA
39	17	11	ESTADO MONAGAS
40	18	11	ESTADO NUEVA ESPARTA
41	19	11	ESTADO PORTUGUESA
42	20	11	ESTADO SUCRE
43	21	11	ESTADO TACHIRA
44	22	11	ESTADO TRUJILLO
45	23	11	ESTADO VARGAS
46	24	11	ESTADO YARACUY
47	25	11	ESTADO ZULIA
\.


--
-- TOC entry 7664 (class 0 OID 186413)
-- Dependencies: 451
-- Data for Name: regioncontinente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY regioncontinente (id_region_continente, abreviatura, cod_region_continente, nombre, id_continente) FROM stdin;
1	AMN	AN	AMERICA DEL NORTE (NORTEAMERICA)	2
2	AMC	AC	AMERICA CENTRAL (CENTROAMERICA)	2
3	AMS	AS	AMERICA DEL SUR (SUDAMERICA)	2
\.


--
-- TOC entry 7665 (class 0 OID 186416)
-- Dependencies: 452
-- Data for Name: registro; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY registro (id_registro, numero_registro, nombre, aprobacion_mpd, id_grupo_organismo, id_organismo, id_sitp, tiempo_sitp, anio, fecha_vigencia) FROM stdin;
11	1	REGISTRO UNICO	N	11	11	0	\N	2008	2006-06-30
\.


--
-- TOC entry 7666 (class 0 OID 186423)
-- Dependencies: 453
-- Data for Name: registrocargos; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY registrocargos (id_registro_cargos, id_registro, codigo_nomina, situacion, estatus, condicion, fecha_creacion, horas, reporta_rac, id_trabajador, convenio_gremial, id_gremio, id_cargo, id_dependencia, id_sede, id_sitp, tiempo_sitp, sueldo_basico, compensacion, primas_cargo, primas_trabajador, aprobado_mpd) FROM stdin;
4	11	203	V	3	1	2011-02-14	8	1	\N	N	\N	15	55	12	0	\N	0	0	0	0	N
13	11	541	V	3	1	2011-02-14	8	1	\N	N	\N	111	16	12	0	\N	0	0	0	0	N
14	11	544	V	3	1	2011-02-14	8	1	\N	N	\N	32	41	12	0	\N	0	0	0	0	N
17	11	508	V	3	1	2011-02-14	8	1	\N	N	\N	14	16	12	0	\N	0	0	0	0	N
18	11	510	V	3	1	2011-02-14	8	1	\N	N	\N	28	16	12	0	\N	0	0	0	0	N
21	11	11	V	3	1	2011-02-14	8	1	\N	N	\N	240	16	12	0	\N	0	0	0	0	N
22	11	13	V	3	1	2011-02-14	8	1	\N	N	\N	244	16	12	0	\N	0	0	0	0	N
30	11	26	V	3	1	2011-02-14	8	1	\N	N	\N	115	16	12	0	\N	0	0	0	0	N
34	11	512	V	3	1	2011-02-14	8	1	\N	N	\N	244	16	12	0	\N	0	0	0	0	N
3640	11	2966	V	3	1	\N	8	1	\N	N	\N	1072	17	12	0	\N	0	0	0	0	N
46	11	55	V	3	1	2011-02-14	8	1	\N	N	\N	229	35	12	0	\N	0	0	0	0	N
55	11	134	V	3	1	2011-02-14	8	1	\N	N	\N	115	39	12	0	\N	0	0	0	0	N
64	11	75	V	3	1	2011-02-14	8	1	\N	N	\N	118	37	12	0	\N	0	0	0	0	N
67	11	81	V	3	1	2011-02-14	8	1	\N	N	\N	118	37	12	0	\N	0	0	0	0	N
32	11	489	V	3	1	2011-02-14	8	1	\N	N	\N	246	16	12	0	\N	0	0	0	0	N
3	11	191	V	3	1	2011-02-14	8	1	\N	N	\N	15	54	12	0	\N	0	0	0	0	N
39	11	45	V	3	1	2011-02-14	8	1	\N	N	\N	116	34	12	0	\N	0	0	0	0	N
36	11	527	V	3	1	2011-02-14	8	1	\N	N	\N	222	16	12	0	\N	0	0	0	0	N
45	11	54	V	3	1	2011-02-14	8	1	\N	N	\N	244	35	12	0	\N	0	0	0	0	N
7	11	217	V	3	1	2011-02-14	8	1	\N	N	\N	15	52	12	0	\N	0	0	0	0	N
56	11	540	V	3	1	2011-02-14	8	1	\N	N	\N	28	37	12	0	\N	0	0	0	0	N
44	11	518	V	3	1	2011-02-14	8	1	\N	N	\N	28	35	12	0	\N	0	0	0	0	N
20	11	5	V	3	1	2011-02-14	8	1	\N	N	\N	183	16	12	0	\N	0	0	0	0	N
53	11	63	V	3	1	2011-02-14	8	1	\N	N	\N	188	52	12	0	\N	0	0	0	0	N
9	11	376	V	3	1	2011-02-14	8	1	\N	N	\N	15	69	12	0	\N	0	0	0	0	N
15	11	552	V	3	1	2011-02-14	8	1	\N	N	\N	219	16	12	0	\N	0	0	0	0	N
8	11	271	V	3	1	2011-02-14	8	1	\N	N	\N	15	61	12	0	\N	0	0	0	0	N
47	11	56	V	3	1	2011-02-14	8	1	\N	N	\N	187	64	12	0	\N	0	0	0	0	N
29	11	25	V	3	1	2011-02-14	8	1	\N	N	\N	108	16	12	0	\N	0	0	0	0	N
57	11	68	V	3	1	2011-02-14	8	1	\N	N	\N	214	37	12	0	\N	0	0	0	0	N
10	11	590	V	3	1	2011-02-14	8	1	\N	N	\N	244	16	12	0	\N	0	0	0	0	N
2	11	183	V	3	1	2011-02-14	8	1	\N	N	\N	15	53	12	0	\N	0	0	0	0	N
35	11	523	V	3	1	2011-02-14	8	1	\N	N	\N	229	16	12	0	\N	0	0	0	0	N
6	11	212	V	3	1	2011-02-14	8	1	\N	N	\N	141	55	12	0	\N	0	0	0	0	N
54	11	583	V	3	1	2011-02-14	8	1	\N	N	\N	188	39	12	0	\N	0	0	0	0	N
49	11	520	V	3	1	2011-02-14	8	1	\N	N	\N	187	35	12	0	\N	0	0	0	0	N
38	11	562	V	3	1	2011-02-14	8	1	\N	N	\N	16	34	12	0	\N	0	0	0	0	N
11	11	591	V	3	1	2011-02-14	8	1	\N	N	\N	222	16	12	0	\N	0	0	0	0	N
5	11	211	V	3	1	2011-02-14	8	1	\N	N	\N	141	55	12	0	\N	0	0	0	0	N
40	11	49	V	3	1	2011-02-14	8	1	\N	N	\N	108	34	12	0	\N	0	0	0	0	N
12	11	535	V	3	1	2011-02-14	8	1	\N	N	\N	109	16	12	0	\N	0	0	0	0	N
1	11	587	V	3	1	2011-02-14	8	1	\N	N	\N	15	17	12	0	\N	0	0	0	0	N
71	11	85	V	3	1	2011-02-14	8	1	\N	N	\N	249	37	12	0	\N	0	0	0	0	N
72	11	87	V	3	1	2011-02-14	8	1	\N	N	\N	224	37	12	0	\N	0	0	0	0	N
74	11	90	V	3	1	2011-02-14	8	1	\N	N	\N	189	37	12	0	\N	0	0	0	0	N
83	11	569	V	3	1	2011-02-14	8	1	\N	N	\N	245	37	12	0	\N	0	0	0	0	N
87	11	64	V	3	1	2011-02-14	8	1	\N	N	\N	118	37	12	0	\N	0	0	0	0	N
91	11	97	V	3	1	2011-02-14	8	1	\N	N	\N	116	42	12	0	\N	0	0	0	0	N
3641	11	2967	V	0	1	\N	8	1	\N	N	\N	1250	40	12	0	\N	0	0	0	0	N
109	11	115	V	3	1	2011-02-14	8	1	\N	N	\N	189	38	12	0	\N	0	0	0	0	N
111	11	120	V	3	1	2011-02-14	8	1	\N	N	\N	189	38	12	0	\N	0	0	0	0	N
114	11	122	V	3	1	2011-02-14	8	1	\N	N	\N	28	40	12	0	\N	0	0	0	0	N
119	11	127	V	3	1	2011-02-14	8	1	\N	N	\N	118	40	12	0	\N	0	0	0	0	N
124	11	135	V	3	1	2011-02-14	8	1	\N	N	\N	118	36	12	0	\N	0	0	0	0	N
129	11	138	V	3	1	2011-02-14	8	1	\N	N	\N	108	41	12	0	\N	0	0	0	0	N
131	11	140	V	3	1	2011-02-14	8	1	\N	N	\N	195	41	12	0	\N	0	0	0	0	N
133	11	142	V	3	1	2011-02-14	8	1	\N	N	\N	196	41	12	0	\N	0	0	0	0	N
134	11	143	V	3	1	2011-02-14	8	1	\N	N	\N	196	41	12	0	\N	0	0	0	0	N
135	11	144	V	3	1	2011-02-14	8	1	\N	N	\N	244	41	12	0	\N	0	0	0	0	N
128	11	137	V	3	1	2011-02-14	8	1	\N	N	\N	28	41	12	0	\N	0	0	0	0	N
96	11	522	V	3	1	2011-02-14	8	1	\N	N	\N	28	14	12	0	\N	0	0	0	0	N
113	11	500	V	3	1	2011-02-14	8	1	\N	N	\N	189	38	12	0	\N	0	0	0	0	N
98	11	104	V	3	1	2011-02-14	8	1	\N	N	\N	190	14	12	0	\N	0	0	0	0	N
80	11	533	V	3	1	2011-02-14	8	1	\N	N	\N	213	35	12	0	\N	0	0	0	0	N
118	11	126	V	3	1	2011-02-14	8	1	\N	N	\N	330	40	12	0	\N	0	0	0	0	N
82	11	568	V	3	1	2011-02-14	8	1	\N	N	\N	245	37	12	0	\N	0	0	0	0	N
122	11	532	V	3	1	2011-02-14	8	1	\N	N	\N	28	36	12	0	\N	0	0	0	0	N
97	11	103	V	3	1	2011-02-14	8	1	\N	N	\N	29	14	12	0	\N	0	0	0	0	N
105	11	521	V	3	1	2011-02-14	8	1	\N	N	\N	28	38	12	0	\N	0	0	0	0	N
112	11	121	V	3	1	2011-02-14	8	1	\N	N	\N	189	38	12	0	\N	0	0	0	0	N
99	11	105	V	3	1	2011-02-14	8	1	\N	N	\N	191	14	12	0	\N	0	0	0	0	N
106	11	526	V	3	1	2011-02-14	8	1	\N	N	\N	189	38	12	0	\N	0	0	0	0	N
137	11	118	V	3	1	2011-02-14	8	1	\N	N	\N	32	38	12	0	\N	0	0	0	0	N
81	11	77	V	3	1	2011-02-14	8	1	\N	N	\N	238	37	12	0	\N	0	0	0	0	N
126	11	576	V	3	1	2011-02-14	8	1	\N	N	\N	217	36	12	0	\N	0	0	0	0	N
125	11	136	V	3	1	2011-02-14	8	1	\N	N	\N	194	36	12	0	\N	0	0	0	0	N
88	11	573	V	3	1	2011-02-14	8	1	\N	N	\N	28	42	12	0	\N	0	0	0	0	N
138	11	145	V	3	1	2011-02-14	8	1	\N	N	\N	132	41	12	0	\N	0	0	0	0	N
139	11	146	V	3	1	2011-02-14	8	1	\N	N	\N	116	41	12	0	\N	0	0	0	0	N
140	11	476	V	3	1	2011-02-14	8	1	\N	N	\N	195	41	12	0	\N	0	0	0	0	N
141	11	487	V	3	1	2011-02-14	8	1	\N	N	\N	195	41	12	0	\N	0	0	0	0	N
146	11	157	V	3	1	2011-02-14	8	1	\N	N	\N	28	17	12	0	\N	0	0	0	0	N
92	11	98	V	3	1	2011-02-14	8	1	\N	N	\N	189	42	12	0	\N	0	0	0	0	N
73	11	89	V	3	1	2011-02-14	8	1	\N	N	\N	189	37	12	0	\N	0	0	0	0	N
136	11	114	V	3	1	2011-02-14	8	1	\N	N	\N	223	38	12	0	\N	0	0	0	0	N
120	11	128	V	3	1	2011-02-14	8	1	\N	N	\N	226	40	12	0	\N	0	0	0	0	N
121	11	130	V	3	1	2011-02-14	8	1	\N	N	\N	193	40	12	0	\N	0	0	0	0	N
100	11	106	V	3	1	2011-02-14	8	1	\N	N	\N	109	14	12	0	\N	0	0	0	0	N
154	11	166	V	3	1	2011-02-14	8	1	\N	N	\N	139	18	12	0	\N	0	0	0	0	N
159	11	509	V	3	1	2011-02-14	8	1	\N	N	\N	29	11	12	0	\N	0	0	0	0	N
160	11	519	V	3	1	2011-02-14	8	1	\N	N	\N	15	20	12	0	\N	0	0	0	0	N
164	11	507	V	3	1	2011-02-14	8	1	\N	N	\N	189	20	12	0	\N	0	0	0	0	N
167	11	188	V	3	1	2011-02-14	8	1	\N	N	\N	228	53	12	0	\N	0	0	0	0	N
168	11	190	V	3	1	2011-02-14	8	1	\N	N	\N	234	53	12	0	\N	0	0	0	0	N
171	11	194	V	3	1	2011-02-14	8	1	\N	N	\N	108	54	12	0	\N	0	0	0	0	N
175	11	199	V	3	1	2011-02-14	8	1	\N	N	\N	228	54	12	0	\N	0	0	0	0	N
177	11	201	V	3	1	2011-02-14	8	1	\N	N	\N	141	54	12	0	\N	0	0	0	0	N
179	11	204	V	3	1	2011-02-14	8	1	\N	N	\N	205	55	12	0	\N	0	0	0	0	N
183	11	210	V	3	1	2011-02-14	8	1	\N	N	\N	228	55	12	0	\N	0	0	0	0	N
184	11	215	V	3	1	2011-02-14	8	1	\N	N	\N	234	55	12	0	\N	0	0	0	0	N
185	11	216	V	3	1	2011-02-14	8	1	\N	N	\N	141	55	12	0	\N	0	0	0	0	N
186	11	218	V	3	1	2011-02-14	8	1	\N	N	\N	235	52	12	0	\N	0	0	0	0	N
191	11	224	V	3	1	2011-02-14	8	1	\N	N	\N	234	52	12	0	\N	0	0	0	0	N
192	11	225	V	3	1	2011-02-14	8	1	\N	N	\N	236	52	12	0	\N	0	0	0	0	N
197	11	231	V	3	1	2011-02-14	8	1	\N	N	\N	235	56	12	0	\N	0	0	0	0	N
202	11	237	V	3	1	2011-02-14	8	1	\N	N	\N	232	56	12	0	\N	0	0	0	0	N
178	11	202	V	3	1	2011-02-14	8	1	\N	N	\N	230	54	12	0	\N	0	0	0	0	N
151	11	163	V	3	1	2011-02-14	8	1	\N	N	\N	28	18	12	0	\N	0	0	0	0	N
144	11	155	V	3	1	2011-02-14	8	1	\N	N	\N	28	17	12	0	\N	0	0	0	0	N
196	11	230	V	3	1	2011-02-14	8	1	\N	N	\N	188	56	12	0	\N	0	0	0	0	N
189	11	221	V	3	1	2011-02-14	8	1	\N	N	\N	188	52	12	0	\N	0	0	0	0	N
165	11	184	V	3	1	2011-02-14	8	1	\N	N	\N	116	53	12	0	\N	0	0	0	0	N
187	11	219	V	3	1	2011-02-14	8	1	\N	N	\N	199	52	12	0	\N	0	0	0	0	N
152	11	164	V	3	1	2011-02-14	8	1	\N	N	\N	28	18	12	0	\N	0	0	0	0	N
156	11	168	V	3	1	2011-02-14	8	1	\N	N	\N	189	62	12	0	\N	0	0	0	0	N
148	11	159	V	3	1	2011-02-14	8	1	\N	N	\N	29	17	12	0	\N	0	0	0	0	N
203	11	238	V	3	1	2011-02-14	8	1	\N	N	\N	229	56	12	0	\N	0	0	0	0	N
204	11	239	V	3	1	2011-02-14	8	1	\N	N	\N	141	56	12	0	\N	0	0	0	0	N
205	11	240	V	3	1	2011-02-14	8	1	\N	N	\N	234	56	12	0	\N	0	0	0	0	N
215	11	538	V	3	1	2011-02-14	8	1	\N	N	\N	141	58	12	0	\N	0	0	0	0	N
188	11	220	V	3	1	2011-02-14	8	1	\N	N	\N	118	52	12	0	\N	0	0	0	0	N
182	11	208	V	3	1	2011-02-14	8	1	\N	N	\N	241	55	12	0	\N	0	0	0	0	N
150	11	162	V	3	1	2011-02-14	8	1	\N	N	\N	29	18	12	0	\N	0	0	0	0	N
206	11	241	V	3	1	2011-02-14	8	1	\N	N	\N	31	57	12	0	\N	0	0	0	0	N
162	11	175	V	3	1	2011-02-14	8	1	\N	N	\N	189	20	12	0	\N	0	0	0	0	N
163	11	177	V	3	1	2011-02-14	8	1	\N	N	\N	189	20	12	0	\N	0	0	0	0	N
3643	11	2969	V	0	1	\N	8	1	\N	N	\N	333	36	12	0	\N	0	0	0	0	N
216	11	262	V	3	1	2011-02-14	8	1	\N	N	\N	31	59	12	0	\N	0	0	0	0	N
217	11	263	V	3	1	2011-02-14	8	1	\N	N	\N	195	59	12	0	\N	0	0	0	0	N
221	11	267	V	3	1	2011-02-14	8	1	\N	N	\N	234	59	12	0	\N	0	0	0	0	N
223	11	269	V	3	1	2011-02-14	8	1	\N	N	\N	141	59	12	0	\N	0	0	0	0	N
224	11	270	V	3	1	2011-02-14	8	1	\N	N	\N	228	59	12	0	\N	0	0	0	0	N
226	11	273	V	3	1	2011-02-14	8	1	\N	N	\N	235	61	12	0	\N	0	0	0	0	N
227	11	274	V	3	1	2011-02-14	8	1	\N	N	\N	195	61	12	0	\N	0	0	0	0	N
230	11	277	V	3	1	2011-02-14	8	1	\N	N	\N	202	61	12	0	\N	0	0	0	0	N
231	11	278	V	3	1	2011-02-14	8	1	\N	N	\N	141	61	12	0	\N	0	0	0	0	N
232	11	279	V	3	1	2011-02-14	8	1	\N	N	\N	229	61	12	0	\N	0	0	0	0	N
233	11	280	V	3	1	2011-02-14	8	1	\N	N	\N	229	61	12	0	\N	0	0	0	0	N
239	11	293	V	3	1	2011-02-14	8	1	\N	N	\N	141	60	12	0	\N	0	0	0	0	N
240	11	294	V	3	1	2011-02-14	8	1	\N	N	\N	141	60	12	0	\N	0	0	0	0	N
242	11	296	V	3	1	2011-02-14	8	1	\N	N	\N	188	62	12	0	\N	0	0	0	0	N
243	11	297	V	3	1	2011-02-14	8	1	\N	N	\N	235	62	12	0	\N	0	0	0	0	N
246	11	300	V	3	1	2011-02-14	8	1	\N	N	\N	115	62	12	0	\N	0	0	0	0	N
249	11	303	V	3	1	2011-02-14	8	1	\N	N	\N	228	62	12	0	\N	0	0	0	0	N
250	11	304	V	3	1	2011-02-14	8	1	\N	N	\N	228	62	12	0	\N	0	0	0	0	N
251	11	305	V	3	1	2011-02-14	8	1	\N	N	\N	229	62	12	0	\N	0	0	0	0	N
258	11	314	V	3	1	2011-02-14	8	1	\N	N	\N	229	63	12	0	\N	0	0	0	0	N
259	11	315	V	3	1	2011-02-14	8	1	\N	N	\N	234	63	12	0	\N	0	0	0	0	N
264	11	321	V	3	1	2011-02-14	8	1	\N	N	\N	235	64	12	0	\N	0	0	0	0	N
266	11	323	V	3	1	2011-02-14	8	1	\N	N	\N	232	64	12	0	\N	0	0	0	0	N
267	11	324	V	3	1	2011-02-14	8	1	\N	N	\N	229	64	12	0	\N	0	0	0	0	N
268	11	325	V	3	1	2011-02-14	8	1	\N	N	\N	234	64	12	0	\N	0	0	0	0	N
270	11	329	V	3	1	2011-02-14	8	1	\N	N	\N	31	65	12	0	\N	0	0	0	0	N
257	11	313	V	3	1	2011-02-14	8	1	\N	N	\N	199	63	12	0	\N	0	0	0	0	N
260	11	316	V	3	1	2011-02-14	8	1	\N	N	\N	141	63	12	0	\N	0	0	0	0	N
272	11	335	V	3	1	2011-02-14	8	1	\N	N	\N	228	65	12	0	\N	0	0	0	0	N
273	11	336	V	3	1	2011-02-14	8	1	\N	N	\N	141	65	12	0	\N	0	0	0	0	N
274	11	340	V	3	1	2011-02-14	8	1	\N	N	\N	31	66	12	0	\N	0	0	0	0	N
277	11	346	V	3	1	2011-02-14	8	1	\N	N	\N	232	66	12	0	\N	0	0	0	0	N
279	11	349	V	3	1	2011-02-14	8	1	\N	N	\N	228	66	12	0	\N	0	0	0	0	N
281	11	351	V	3	1	2011-02-14	8	1	\N	N	\N	205	66	12	0	\N	0	0	0	0	N
282	11	352	V	3	1	2011-02-14	8	1	\N	N	\N	116	66	12	0	\N	0	0	0	0	N
283	11	353	V	3	1	2011-02-14	8	1	\N	N	\N	235	67	12	0	\N	0	0	0	0	N
262	11	318	V	3	1	2011-02-14	8	1	\N	N	\N	31	64	12	0	\N	0	0	0	0	N
213	11	249	V	3	1	2011-02-14	8	1	\N	N	\N	228	91	12	0	\N	0	0	0	0	N
219	11	265	V	3	1	2011-02-14	8	1	\N	N	\N	116	59	12	0	\N	0	0	0	0	N
241	11	295	V	3	1	2011-02-14	8	1	\N	N	\N	31	62	12	0	\N	0	0	0	0	N
254	11	308	V	3	1	2011-02-14	8	1	\N	N	\N	31	63	12	0	\N	0	0	0	0	N
263	11	319	V	3	1	2011-02-14	8	1	\N	N	\N	227	64	12	0	\N	0	0	0	0	N
3647	11	2972	V	3	1	\N	8	1	\N	N	\N	189	20	12	0	\N	0	0	0	0	N
285	11	355	V	3	1	2011-02-14	8	1	\N	N	\N	195	67	12	0	\N	0	0	0	0	N
291	11	363	V	3	1	2011-02-14	8	1	\N	N	\N	229	67	12	0	\N	0	0	0	0	N
292	11	364	V	3	1	2011-02-14	8	1	\N	N	\N	31	68	12	0	\N	0	0	0	0	N
296	11	368	V	3	1	2011-02-14	8	1	\N	N	\N	188	68	12	0	\N	0	0	0	0	N
299	11	371	V	3	1	2011-02-14	8	1	\N	N	\N	141	68	12	0	\N	0	0	0	0	N
300	11	372	V	3	1	2011-02-14	8	1	\N	N	\N	229	68	12	0	\N	0	0	0	0	N
302	11	375	V	3	1	2011-02-14	8	1	\N	N	\N	234	68	12	0	\N	0	0	0	0	N
306	11	381	V	3	1	2011-02-14	8	1	\N	N	\N	228	69	12	0	\N	0	0	0	0	N
307	11	382	V	3	1	2011-02-14	8	1	\N	N	\N	228	69	12	0	\N	0	0	0	0	N
310	11	386	V	3	1	2011-02-14	8	1	\N	N	\N	31	70	12	0	\N	0	0	0	0	N
312	11	390	V	3	1	2011-02-14	8	1	\N	N	\N	116	70	12	0	\N	0	0	0	0	N
314	11	392	V	3	1	2011-02-14	8	1	\N	N	\N	141	70	12	0	\N	0	0	0	0	N
316	11	394	V	3	1	2011-02-14	8	1	\N	N	\N	229	70	12	0	\N	0	0	0	0	N
319	11	397	V	3	1	2011-02-14	8	1	\N	N	\N	235	71	12	0	\N	0	0	0	0	N
323	11	401	V	3	1	2011-02-14	8	1	\N	N	\N	236	71	12	0	\N	0	0	0	0	N
326	11	404	V	3	1	2011-02-14	8	1	\N	N	\N	228	71	12	0	\N	0	0	0	0	N
327	11	405	V	3	1	2011-02-14	8	1	\N	N	\N	229	71	12	0	\N	0	0	0	0	N
328	11	406	V	3	1	2011-02-14	8	1	\N	N	\N	236	71	12	0	\N	0	0	0	0	N
329	11	407	V	3	1	2011-02-14	8	1	\N	N	\N	234	71	12	0	\N	0	0	0	0	N
330	11	408	V	3	1	2011-02-14	8	1	\N	N	\N	141	71	12	0	\N	0	0	0	0	N
335	11	413	V	3	1	2011-02-14	8	1	\N	N	\N	235	72	12	0	\N	0	0	0	0	N
338	11	416	V	3	1	2011-02-14	8	1	\N	N	\N	116	72	12	0	\N	0	0	0	0	N
278	11	347	V	3	1	2011-02-14	8	1	\N	N	\N	236	66	12	0	\N	0	0	0	0	N
309	11	385	V	3	1	2011-02-14	8	1	\N	N	\N	299	69	12	0	\N	0	0	0	0	N
275	11	341	V	3	1	2011-02-14	8	1	\N	N	\N	188	66	12	0	\N	0	0	0	0	N
337	11	415	V	3	1	2011-02-14	8	1	\N	N	\N	188	72	12	0	\N	0	0	0	0	N
286	11	356	V	3	1	2011-02-14	8	1	\N	N	\N	116	67	12	0	\N	0	0	0	0	N
332	11	410	V	3	1	2011-02-14	8	1	\N	N	\N	141	71	12	0	\N	0	0	0	0	N
294	11	366	V	3	1	2011-02-14	8	1	\N	N	\N	116	68	12	0	\N	0	0	0	0	N
290	11	362	V	3	1	2011-02-14	8	1	\N	N	\N	141	67	12	0	\N	0	0	0	0	N
344	11	422	V	3	1	2011-02-14	8	1	\N	N	\N	228	72	12	0	\N	0	0	0	0	N
345	11	423	V	3	1	2011-02-14	8	1	\N	N	\N	237	72	12	0	\N	0	0	0	0	N
353	11	434	V	3	1	2011-02-14	8	1	\N	N	\N	141	74	12	0	\N	0	0	0	0	N
355	11	437	V	3	1	2011-02-14	8	1	\N	N	\N	31	75	12	0	\N	0	0	0	0	N
318	11	396	V	3	1	2011-02-14	8	1	\N	N	\N	31	71	12	0	\N	0	0	0	0	N
3649	11	2973	V	3	1	\N	8	1	\N	N	\N	1252	20	12	0	\N	0	0	0	0	N
334	11	412	V	3	1	2011-02-14	8	1	\N	N	\N	31	72	12	0	\N	0	0	0	0	N
331	11	409	V	3	1	2011-02-14	8	1	\N	N	\N	202	71	12	0	\N	0	0	0	0	N
362	11	451	V	3	1	2011-02-14	8	1	\N	N	\N	188	73	12	0	\N	0	0	0	0	N
368	11	459	V	3	1	2011-02-14	8	1	\N	N	\N	234	73	12	0	\N	0	0	0	0	N
371	11	463	V	3	1	2011-02-14	8	1	\N	N	\N	235	43	12	0	\N	0	0	0	0	N
373	11	465	V	3	1	2011-02-14	8	1	\N	N	\N	124	43	12	0	\N	0	0	0	0	N
377	11	472	V	3	1	2011-02-17	8	1	\N	N	\N	186	34	12	0	\N	0	0	0	0	N
378	11	531	V	3	1	2011-02-17	8	1	\N	N	\N	32	16	12	0	\N	0	0	0	0	N
381	11	571	V	3	1	2011-02-17	8	1	\N	N	\N	32	42	12	0	\N	0	0	0	0	N
383	11	107	V	3	1	2011-02-17	8	1	\N	N	\N	32	14	12	0	\N	0	0	0	0	N
387	11	185	V	3	1	2011-02-17	8	1	\N	N	\N	33	53	12	0	\N	0	0	0	0	N
391	11	291	V	3	1	2011-02-17	8	1	\N	N	\N	33	60	12	0	\N	0	0	0	0	N
400	11	418	V	3	1	2011-02-17	8	1	\N	N	\N	33	72	12	0	\N	0	0	0	0	N
403	11	560	V	3	1	2011-02-21	8	1	\N	N	\N	239	37	12	0	\N	0	0	0	0	N
404	11	555	V	3	1	2011-02-21	8	1	\N	N	\N	28	41	12	0	\N	0	0	0	0	N
3714	11	2977	V	0	1	\N	8	1	\N	N	\N	451	60	12	0	\N	0	0	0	0	N
365	11	455	V	3	1	2011-02-14	8	1	\N	N	\N	237	73	12	0	\N	0	0	0	0	N
369	11	475	V	3	1	2011-02-14	8	1	\N	N	\N	195	73	12	0	\N	0	0	0	0	N
354	11	435	V	3	1	2011-02-14	8	1	\N	N	\N	299	74	12	0	\N	0	0	0	0	N
374	11	466	V	3	1	2011-02-14	8	1	\N	N	\N	115	43	12	0	\N	0	0	0	0	N
343	11	421	V	3	1	2011-02-14	8	1	\N	N	\N	229	72	12	0	\N	0	0	0	0	N
399	11	402	V	3	1	2011-02-17	8	1	\N	N	\N	33	71	12	0	\N	0	0	0	0	N
346	11	424	V	3	1	2011-02-14	8	1	\N	N	\N	31	74	12	0	\N	0	0	0	0	N
370	11	461	V	3	1	2011-02-14	8	1	\N	N	\N	28	43	12	0	\N	0	0	0	0	N
361	11	447	V	3	1	2011-02-14	8	1	\N	N	\N	229	75	12	0	\N	0	0	0	0	N
401	11	444	V	3	1	2011-02-17	8	1	\N	N	\N	33	75	12	0	\N	0	0	0	0	N
342	11	420	V	3	1	2011-02-14	8	1	\N	N	\N	234	72	12	0	\N	0	0	0	0	N
402	11	464	V	3	1	2011-02-17	8	1	\N	N	\N	32	43	12	0	\N	0	0	0	0	N
376	11	3	V	3	1	2011-02-17	8	1	\N	N	\N	32	16	12	0	\N	0	0	0	0	N
382	11	572	V	3	1	2011-02-17	8	1	\N	N	\N	32	42	12	0	\N	0	0	0	0	N
77	11	514	V	3	1	2011-02-14	8	1	\N	N	\N	215	37	12	0	\N	0	0	0	0	N
417	11	603	V	3	1	\N	8	1	\N	N	\N	186	34	12	0	\N	0	0	0	0	N
419	11	605	V	3	1	\N	8	1	\N	N	\N	189	42	12	0	\N	0	0	0	0	N
420	11	606	V	3	1	\N	8	1	\N	N	\N	189	42	12	0	\N	0	0	0	0	N
422	11	608	V	3	1	\N	8	1	\N	N	\N	238	42	12	0	\N	0	0	0	0	N
424	11	610	V	3	1	\N	8	1	\N	N	\N	249	11	12	0	\N	0	0	0	0	N
431	11	611	V	3	1	\N	8	1	\N	N	\N	194	36	12	0	\N	0	0	0	0	N
432	11	614	V	3	1	\N	8	1	\N	N	\N	126	60	12	0	\N	0	0	0	0	N
433	11	617	V	3	1	\N	8	1	\N	N	\N	194	36	12	0	\N	0	0	0	0	N
435	11	615	V	3	1	\N	8	1	\N	N	\N	126	60	12	0	\N	0	0	0	0	N
363	11	452	V	3	1	2011-02-14	8	1	\N	N	\N	199	73	12	0	\N	0	0	0	0	N
393	11	311	V	3	1	2011-02-17	8	1	\N	N	\N	33	113	12	0	\N	0	0	0	0	N
388	11	235	V	3	1	2011-02-17	8	1	\N	N	\N	33	56	12	0	\N	0	0	0	0	N
390	11	276	V	3	1	2011-02-17	8	1	\N	N	\N	33	61	12	0	\N	0	0	0	0	N
392	11	302	V	3	1	2011-02-17	8	1	\N	N	\N	33	62	12	0	\N	0	0	0	0	N
394	11	322	V	3	1	2011-02-17	8	1	\N	N	\N	33	64	12	0	\N	0	0	0	0	N
395	11	358	V	3	1	2011-02-17	8	1	\N	N	\N	33	67	12	0	\N	0	0	0	0	N
397	11	380	V	3	1	2011-02-17	8	1	\N	N	\N	33	69	12	0	\N	0	0	0	0	N
398	11	393	V	3	1	2011-02-17	8	1	\N	N	\N	33	70	12	0	\N	0	0	0	0	N
490	11	612	V	3	1	\N	8	1	\N	N	\N	271	58	12	0	\N	0	0	0	0	N
384	11	112	V	3	1	2011-02-17	8	1	\N	N	\N	32	38	12	0	\N	0	0	0	0	N
367	11	458	V	3	1	2011-02-14	8	1	\N	N	\N	141	73	12	0	\N	0	0	0	0	N
421	11	607	V	3	1	\N	8	1	\N	N	\N	238	42	12	0	\N	0	0	0	0	N
3711	11	2975	V	0	1	\N	8	1	\N	N	\N	143	16	12	0	\N	0	0	0	0	N
386	11	123	V	3	1	2011-02-17	8	1	\N	N	\N	32	40	12	0	\N	0	0	0	0	N
578	11	628	V	3	1	\N	8	1	\N	N	\N	188	39	12	0	\N	0	0	0	0	N
439	11	618	V	3	1	\N	8	1	\N	N	\N	31	54	12	0	\N	0	0	0	0	N
143	11	154	V	3	1	2011-02-14	8	1	\N	N	\N	15	17	12	0	\N	0	0	0	0	N
495	11	620	V	3	1	\N	8	1	\N	N	\N	249	37	12	0	\N	0	0	0	0	N
498	11	621	V	3	1	\N	8	1	\N	N	\N	32	35	12	0	\N	0	0	0	0	N
499	11	622	V	3	1	\N	8	1	\N	N	\N	272	34	12	0	\N	0	0	0	0	N
502	11	623	V	0	1	\N	8	1	\N	N	\N	80	36	12	0	\N	0	0	0	0	N
51	11	539	V	3	1	2011-02-14	8	1	\N	N	\N	222	35	12	0	\N	0	0	0	0	N
716	11	641	V	0	1	\N	8	1	\N	N	\N	80	20	12	0	\N	0	0	0	0	N
425	11	601	V	3	1	\N	8	1	\N	N	\N	262	39	12	0	\N	0	0	0	0	N
493	11	619	V	3	1	\N	8	1	\N	N	\N	262	34	12	0	\N	0	0	0	0	N
718	11	642	V	0	1	\N	8	1	\N	N	\N	80	16	12	0	\N	0	0	0	0	N
579	11	627	V	0	1	\N	8	1	\N	N	\N	291	39	12	0	\N	0	0	0	0	N
701	11	638	V	3	1	\N	8	1	\N	N	\N	248	43	12	0	\N	0	0	0	0	N
631	11	629	V	0	1	\N	8	1	\N	N	\N	217	36	12	0	\N	0	0	0	0	N
781	11	653	V	3	1	\N	8	1	\N	N	\N	28	37	12	0	\N	0	0	0	0	N
513	11	624	V	3	1	\N	8	1	\N	N	\N	32	37	12	0	\N	0	0	0	0	N
633	11	631	V	0	1	\N	8	1	\N	N	\N	80	39	12	0	\N	0	0	0	0	N
635	11	632	V	0	1	\N	8	1	\N	N	\N	188	39	12	0	\N	0	0	0	0	N
638	11	625	V	3	1	\N	8	1	\N	N	\N	293	20	12	0	\N	0	0	0	0	N
639	11	633	V	0	1	\N	8	1	\N	N	\N	195	20	12	0	\N	0	0	0	0	N
721	11	645	V	3	1	\N	8	1	\N	N	\N	32	42	12	0	\N	0	0	0	0	N
693	11	636	V	3	1	\N	8	1	\N	N	\N	141	20	12	0	\N	0	0	0	0	N
573	11	626	V	3	1	\N	8	1	\N	N	\N	31	67	12	0	\N	0	0	0	0	N
515	11	0	V	3	1	\N	8	1	\N	N	\N	291	39	12	0	\N	0	0	0	0	N
212	11	248	V	3	1	2011-02-14	8	1	\N	N	\N	229	91	12	0	\N	0	0	0	0	N
703	11	640	V	3	1	\N	8	1	\N	N	\N	292	52	12	0	\N	0	0	0	0	N
719	11	643	V	0	1	\N	8	1	\N	N	\N	80	16	12	0	\N	0	0	0	0	N
722	11	646	V	3	1	\N	8	1	\N	N	\N	249	37	12	0	\N	0	0	0	0	N
723	11	647	V	0	1	\N	8	1	\N	N	\N	80	16	12	0	\N	0	0	0	0	N
725	11	649	V	3	1	\N	8	1	\N	N	\N	32	41	12	0	\N	0	0	0	0	N
726	11	650	V	0	1	\N	8	1	\N	N	\N	80	75	12	0	\N	0	0	0	0	N
786	11	648	V	3	1	\N	8	1	\N	N	\N	313	11	12	0	\N	0	0	0	0	N
793	11	655	O	3	1	\N	8	1	811	N	\N	321	40	12	0	\N	0	0	0	0	N
798	11	659	V	3	1	\N	8	1	\N	N	\N	28	35	12	0	\N	0	0	0	0	N
799	11	657	V	3	1	\N	8	1	\N	N	\N	323	40	12	0	\N	0	0	0	0	N
800	11	658	V	3	1	\N	8	1	\N	N	\N	324	40	12	0	\N	0	0	0	0	N
117	11	125	V	3	1	2011-02-14	8	1	\N	N	\N	331	40	12	0	\N	0	0	0	0	N
806	11	661	V	3	1	\N	8	1	\N	N	\N	333	16	12	0	\N	0	0	0	0	N
807	11	662	V	0	1	\N	8	1	\N	N	\N	227	64	12	0	\N	0	0	0	0	N
804	11	660	V	3	1	\N	8	1	\N	N	\N	332	43	12	0	\N	0	0	0	0	N
808	11	663	V	3	1	\N	8	1	\N	N	\N	332	43	12	0	\N	0	0	0	0	N
809	11	664	V	0	1	\N	8	1	\N	N	\N	291	39	12	0	\N	0	0	0	0	N
863	11	665	V	3	1	\N	8	1	\N	N	\N	337	11	12	0	\N	0	0	0	0	N
954	11	683	V	3	1	\N	8	1	\N	N	\N	364	38	12	0	\N	0	0	0	0	N
935	11	674	V	3	1	\N	8	1	\N	N	\N	187	35	12	0	\N	0	0	0	0	N
973	11	693	V	3	1	\N	8	1	\N	N	\N	376	35	12	0	\N	0	0	0	0	N
211	11	247	V	3	1	2011-02-14	8	1	\N	N	\N	232	91	12	0	\N	0	0	0	0	N
389	11	246	V	3	1	2011-02-17	8	1	\N	N	\N	33	91	12	0	\N	0	0	0	0	N
720	11	644	V	3	1	\N	8	1	\N	N	\N	248	20	12	0	\N	0	0	0	0	N
877	11	670	V	3	1	\N	8	1	\N	N	\N	346	116	12	0	\N	0	0	0	0	N
3770	11	2980	V	0	1	\N	8	1	\N	N	\N	1263	17	12	0	\N	0	0	0	0	N
727	11	651	V	3	1	\N	8	1	\N	N	\N	189	14	12	0	\N	0	0	0	0	N
632	11	630	V	3	1	\N	8	1	\N	N	\N	291	39	12	0	\N	0	0	0	0	N
948	11	680	V	3	1	\N	8	1	\N	N	\N	292	58	12	0	\N	0	0	0	0	N
797	11	656	V	3	1	\N	8	1	\N	N	\N	328	39	12	0	\N	0	0	0	0	N
941	11	675	V	3	1	\N	8	1	\N	N	\N	352	43	12	0	\N	0	0	0	0	N
942	11	676	V	0	1	\N	8	1	\N	N	\N	28	37	12	0	\N	0	0	0	0	N
947	11	679	V	3	1	\N	8	1	\N	N	\N	229	20	12	0	\N	0	0	0	0	N
932	11	673	V	3	1	\N	8	1	\N	N	\N	223	11	12	0	\N	0	0	0	0	N
951	11	681	V	3	1	\N	8	1	\N	N	\N	362	37	12	0	\N	0	0	0	0	N
953	11	4	V	3	1	\N	8	1	\N	N	\N	363	37	12	0	\N	0	0	0	0	N
955	11	684	V	3	1	\N	8	1	\N	N	\N	115	38	12	0	\N	0	0	0	0	N
958	11	686	V	3	1	\N	8	1	\N	N	\N	365	37	12	0	\N	0	0	0	0	N
959	11	687	V	3	1	\N	8	1	\N	N	\N	366	38	12	0	\N	0	0	0	0	N
864	11	666	V	3	1	\N	8	1	\N	N	\N	222	43	12	0	\N	0	0	0	0	N
971	11	691	V	0	1	\N	8	1	\N	N	\N	80	11	12	0	\N	0	0	0	0	N
975	11	695	V	3	1	\N	8	1	\N	N	\N	378	35	12	0	\N	0	0	0	0	N
976	11	696	V	3	1	\N	8	1	\N	N	\N	378	35	12	0	\N	0	0	0	0	N
977	11	697	V	3	1	\N	8	1	\N	N	\N	367	35	12	0	\N	0	0	0	0	N
978	11	698	V	3	1	\N	8	1	\N	N	\N	379	35	12	0	\N	0	0	0	0	N
980	11	700	V	0	1	\N	8	1	\N	N	\N	80	16	12	0	\N	0	0	0	0	N
946	11	678	V	3	1	\N	8	1	\N	N	\N	356	36	12	0	\N	0	0	0	0	N
984	11	703	V	3	1	\N	8	1	\N	N	\N	431	35	12	0	\N	0	0	0	0	N
986	11	705	V	3	1	\N	8	1	\N	N	\N	296	69	12	0	\N	0	0	0	0	N
988	11	706	V	3	1	\N	8	1	\N	N	\N	249	37	12	0	\N	0	0	0	0	N
989	11	707	V	0	1	\N	8	1	\N	N	\N	80	11	12	0	\N	0	0	0	0	N
1040	11	708	V	0	1	\N	8	1	\N	N	\N	80	11	12	0	\N	0	0	0	0	N
1041	11	709	V	0	1	\N	8	1	\N	N	\N	80	11	12	0	\N	0	0	0	0	N
981	11	701	V	3	1	\N	8	1	\N	N	\N	430	20	12	0	\N	0	0	0	0	N
1052	11	711	V	3	1	\N	8	1	\N	N	\N	117	20	12	0	\N	0	0	0	0	N
961	11	689	V	3	1	\N	8	1	\N	N	\N	212	35	12	0	\N	0	0	0	0	N
1055	11	714	V	3	1	\N	8	1	\N	N	\N	189	37	12	0	\N	0	0	0	0	N
1056	11	715	V	3	1	\N	8	1	\N	N	\N	189	35	12	0	\N	0	0	0	0	N
1059	11	718	V	3	1	\N	8	1	\N	N	\N	333	20	12	0	\N	0	0	0	0	N
1125	11	721	V	3	1	\N	8	1	\N	N	\N	272	34	12	0	\N	0	0	0	0	N
1127	11	723	V	0	1	\N	8	1	\N	N	\N	142	111	12	0	\N	0	0	0	0	N
1128	11	724	V	0	1	\N	8	1	\N	N	\N	346	114	12	0	\N	0	0	0	0	N
1131	11	722	V	0	1	\N	8	1	\N	N	\N	127	16	12	0	\N	0	0	0	0	N
1136	11	129	V	0	1	\N	8	1	\N	N	\N	210	52	12	0	\N	0	0	0	0	N
1137	11	131	V	0	1	\N	8	1	\N	N	\N	198	52	12	0	\N	0	0	0	0	N
1193	11	725	V	0	1	\N	8	1	\N	N	\N	442	17	12	0	\N	0	0	0	0	N
1195	11	726	V	3	1	\N	8	1	\N	N	\N	29	17	12	0	\N	0	0	0	0	N
1196	11	727	V	0	1	\N	8	1	\N	N	\N	441	35	12	0	\N	0	0	0	0	N
1198	11	729	V	0	1	\N	8	1	\N	N	\N	187	35	12	0	\N	0	0	0	0	N
1203	11	731	V	3	1	\N	8	1	\N	N	\N	31	58	12	0	\N	0	0	0	0	N
979	11	699	V	3	1	\N	8	1	\N	N	\N	292	74	12	0	\N	0	0	0	0	N
1112	11	719	V	3	1	\N	8	1	\N	N	\N	300	91	12	0	\N	0	0	0	0	N
161	11	173	V	3	1	2011-02-14	8	1	\N	N	\N	118	35	12	0	\N	0	0	0	0	N
974	11	694	V	3	1	\N	8	1	\N	N	\N	377	35	12	0	\N	0	0	0	0	N
1217	11	736	V	3	1	\N	8	1	\N	N	\N	136	38	12	0	\N	0	0	0	0	N
3781	11	2982	V	0	1	\N	8	1	\N	N	\N	861	18	12	0	\N	0	0	0	0	N
1051	11	710	V	3	1	\N	8	1	\N	N	\N	189	20	12	0	\N	0	0	0	0	N
333	11	411	V	3	1	2011-02-14	8	1	\N	N	\N	209	65	12	0	\N	0	0	0	0	N
784	11	654	V	3	1	\N	8	1	\N	N	\N	189	36	12	0	\N	0	0	0	0	N
3771	11	2981	V	3	1	\N	8	1	\N	N	\N	1264	17	12	0	\N	0	0	0	0	N
104	11	110	V	3	1	2011-02-14	8	1	\N	N	\N	191	14	12	0	\N	0	0	0	0	N
1221	11	737	V	3	1	\N	8	1	\N	N	\N	29	17	12	0	\N	0	0	0	0	N
3791	11	2983	V	0	1	\N	8	1	\N	N	\N	354	14	12	0	\N	0	0	0	0	N
3801	11	2984	V	0	1	\N	8	1	\N	N	\N	1271	39	12	0	\N	0	0	0	0	N
1225	11	739	V	3	1	\N	8	1	\N	N	\N	250	11	12	0	\N	0	0	0	0	N
1226	11	740	V	3	1	\N	8	1	\N	N	\N	132	38	12	0	\N	0	0	0	0	N
1228	11	732	V	0	1	\N	8	1	\N	N	\N	250	52	12	0	\N	0	0	0	0	N
1463	11	757	V	3	1	\N	8	1	\N	N	\N	493	37	12	0	\N	0	0	0	0	N
222	11	268	V	3	1	2011-02-14	8	1	\N	N	\N	229	59	12	0	\N	0	0	0	0	N
3803	11	2985	V	3	1	\N	8	1	\N	N	\N	1272	39	12	0	\N	0	0	0	0	N
1501	11	789	V	0	1	\N	8	1	\N	N	\N	29	20	12	0	\N	0	0	0	0	N
1395	11	772	V	3	1	\N	8	1	\N	N	\N	189	20	12	0	\N	0	0	0	0	N
1280	11	742	V	3	1	\N	8	1	\N	N	\N	132	11	12	0	\N	0	0	0	0	N
1291	11	743	V	0	1	\N	8	1	\N	N	\N	292	55	12	0	\N	0	0	0	0	N
1327	11	748	V	3	1	\N	8	1	\N	N	\N	484	37	12	0	\N	0	0	0	0	N
1533	11	786	V	0	1	\N	8	1	\N	N	\N	194	36	12	0	\N	0	0	0	0	N
1296	11	749	V	0	1	\N	8	1	\N	N	\N	472	34	12	0	\N	0	0	0	0	N
692	11	635	V	3	1	\N	8	1	\N	N	\N	295	20	12	0	\N	0	0	0	0	N
1308	11	745	V	3	1	\N	8	1	\N	N	\N	126	75	12	0	\N	0	0	0	0	N
1401	11	774	V	3	1	\N	8	1	\N	N	\N	189	14	12	0	\N	0	0	0	0	N
1502	11	872	V	3	1	\N	8	1	\N	N	\N	31	70	12	0	\N	0	0	0	0	N
1310	11	746	V	3	1	\N	8	1	\N	N	\N	249	37	12	0	\N	0	0	0	0	N
1326	11	755	V	3	1	\N	8	1	\N	N	\N	481	11	12	0	\N	0	0	0	0	N
1312	11	752	V	3	1	\N	8	1	\N	N	\N	249	37	12	0	\N	0	0	0	0	N
1311	11	750	V	3	1	\N	8	1	\N	N	\N	115	17	12	0	\N	0	0	0	0	N
41	11	474	V	3	1	2011-02-14	8	1	\N	N	\N	186	34	12	0	\N	0	0	0	0	N
1313	11	751	V	3	1	\N	8	1	\N	N	\N	113	17	12	0	\N	0	0	0	0	N
157	11	480	V	3	1	2011-02-14	8	1	\N	N	\N	188	18	12	0	\N	0	0	0	0	N
356	11	438	V	3	1	2011-02-14	8	1	\N	N	\N	235	75	12	0	\N	0	0	0	0	N
1328	11	756	V	3	1	\N	8	1	\N	N	\N	486	37	12	0	\N	0	0	0	0	N
1380	11	758	V	3	1	\N	8	1	\N	N	\N	132	16	12	0	\N	0	0	0	0	N
1381	11	759	V	0	1	\N	8	1	\N	N	\N	357	68	12	0	\N	0	0	0	0	N
1384	11	761	V	3	1	\N	8	1	\N	N	\N	238	38	12	0	\N	0	0	0	0	N
1465	11	790	V	3	1	\N	8	1	\N	N	\N	222	37	12	0	\N	0	0	0	0	N
1387	11	773	V	3	1	\N	8	1	\N	N	\N	248	18	12	0	\N	0	0	0	0	N
1413	11	778	V	0	1	\N	8	1	\N	N	\N	241	75	12	0	\N	0	0	0	0	N
1421	11	779	V	3	1	\N	8	1	\N	N	\N	184	37	12	0	\N	0	0	0	0	N
1422	11	780	V	3	1	\N	8	1	\N	N	\N	346	58	12	0	\N	0	0	0	0	N
1391	11	775	V	0	1	\N	8	1	\N	N	\N	346	66	12	0	\N	0	0	0	0	N
1394	11	776	V	3	1	\N	8	1	\N	N	\N	364	58	12	0	\N	0	0	0	0	N
1432	11	781	V	3	1	\N	8	1	\N	N	\N	248	16	12	0	\N	0	0	0	0	N
1471	11	791	V	3	1	\N	8	1	\N	N	\N	451	58	12	0	\N	0	0	0	0	N
1442	11	783	V	0	1	\N	8	1	\N	N	\N	249	37	12	0	\N	0	0	0	0	N
1451	11	784	V	3	1	\N	8	1	\N	N	\N	249	37	12	0	\N	0	0	0	0	N
1473	11	792	V	3	1	\N	8	1	\N	N	\N	222	73	12	0	\N	0	0	0	0	N
1481	11	793	V	0	1	\N	8	1	\N	N	\N	136	34	12	0	\N	0	0	0	0	N
1482	11	794	V	3	1	\N	8	1	\N	N	\N	28	42	12	0	\N	0	0	0	0	N
1491	11	991	V	0	1	\N	8	1	\N	N	\N	487	37	12	0	\N	0	0	0	0	N
1521	11	639	V	3	1	\N	8	1	\N	N	\N	292	60	12	0	\N	0	0	0	0	N
1532	11	785	V	0	1	\N	8	1	\N	N	\N	222	41	12	0	\N	0	0	0	0	N
1541	11	795	V	3	1	\N	8	1	\N	N	\N	17	39	12	0	\N	0	0	0	0	N
1551	11	879	V	3	1	\N	8	1	\N	N	\N	136	37	12	0	\N	0	0	0	0	N
1552	11	880	V	3	1	\N	8	1	\N	N	\N	229	39	12	0	\N	0	0	0	0	N
1562	11	881	V	3	1	\N	8	1	\N	N	\N	502	37	12	0	\N	0	0	0	0	N
1660	11	808	V	3	1	\N	8	1	\N	N	\N	248	16	12	0	\N	0	0	0	0	N
1576	11	799	V	0	1	\N	8	1	\N	N	\N	117	20	12	0	\N	0	0	0	0	N
1692	11	818	V	0	1	\N	8	1	\N	N	\N	244	39	12	0	\N	0	0	0	0	N
1703	11	821	V	0	1	\N	8	1	\N	N	\N	222	37	12	0	\N	0	0	0	0	N
1683	11	814	V	0	1	\N	8	1	\N	N	\N	247	75	12	0	\N	0	0	0	0	N
1753	11	833	V	0	1	\N	8	1	\N	N	\N	108	16	12	0	\N	0	0	0	0	N
1596	11	74	V	3	1	\N	8	1	\N	N	\N	513	37	12	0	\N	0	0	0	0	N
1713	11	824	V	3	1	\N	8	1	\N	N	\N	132	16	12	0	\N	0	0	0	0	N
1792	11	920	V	0	1	\N	8	1	\N	N	\N	140	91	12	0	\N	0	0	0	0	N
1641	11	806	V	3	1	\N	8	1	\N	N	\N	541	35	12	0	\N	0	0	0	0	N
1621	11	804	V	0	1	\N	8	1	\N	N	\N	331	42	12	0	\N	0	0	0	0	N
1744	11	831	V	3	1	\N	8	1	\N	N	\N	622	11	12	0	\N	0	0	0	0	N
3812	11	2987	V	0	1	\N	8	1	\N	N	\N	1281	37	12	0	\N	0	0	0	0	N
1631	11	805	V	3	1	\N	8	1	\N	N	\N	531	42	12	0	\N	0	0	0	0	N
1743	11	830	V	3	1	\N	8	1	\N	N	\N	481	11	12	0	\N	0	0	0	0	N
1581	11	677	V	3	1	\N	8	1	\N	N	\N	18	38	12	0	\N	0	0	0	0	N
1592	11	801	V	3	1	\N	8	1	\N	N	\N	512	16	12	0	\N	0	0	0	0	N
1651	11	807	V	3	1	\N	8	1	\N	N	\N	248	16	12	0	\N	0	0	0	0	N
1722	11	826	V	3	1	\N	8	1	\N	N	\N	602	35	12	0	\N	0	0	0	0	N
1661	11	809	V	3	1	\N	8	1	\N	N	\N	248	16	12	0	\N	0	0	0	0	N
1662	11	810	V	3	1	\N	8	1	\N	N	\N	551	17	12	0	\N	0	0	0	0	N
1671	11	811	V	3	1	\N	8	1	\N	N	\N	562	16	12	0	\N	0	0	0	0	N
1765	11	905	V	0	1	\N	8	1	\N	N	\N	216	20	12	0	\N	0	0	0	0	N
1672	11	812	V	0	1	\N	8	1	\N	N	\N	248	16	12	0	\N	0	0	0	0	N
1741	11	829	V	3	1	\N	8	1	\N	N	\N	621	14	12	0	\N	0	0	0	0	N
1681	11	813	V	0	1	\N	8	1	\N	N	\N	139	17	12	0	\N	0	0	0	0	N
1721	11	825	V	3	1	\N	8	1	\N	N	\N	248	17	12	0	\N	0	0	0	0	N
1731	11	827	V	3	1	\N	8	1	\N	N	\N	611	37	12	0	\N	0	0	0	0	N
1732	11	828	V	3	1	\N	8	1	\N	N	\N	249	37	12	0	\N	0	0	0	0	N
1752	11	832	V	3	1	\N	8	1	\N	N	\N	631	17	12	0	\N	0	0	0	0	N
1770	11	907	V	0	1	\N	8	1	\N	N	\N	189	37	12	0	\N	0	0	0	0	N
1773	11	910	V	3	1	\N	8	1	\N	N	\N	192	40	12	0	\N	0	0	0	0	N
1780	11	917	V	3	1	\N	8	1	\N	N	\N	357	38	12	0	\N	0	0	0	0	N
1775	11	912	V	0	1	\N	8	1	\N	N	\N	140	34	12	0	\N	0	0	0	0	N
1811	11	930	V	0	1	\N	8	1	\N	N	\N	115	37	12	0	\N	0	0	0	0	N
1814	11	933	V	0	1	\N	8	1	\N	N	\N	136	17	12	0	\N	0	0	0	0	N
1820	11	937	O	0	1	\N	8	1	138	N	\N	127	40	12	0	\N	0	0	0	0	N
1822	11	939	V	0	1	\N	8	1	\N	N	\N	127	36	12	0	\N	0	0	0	0	N
1843	11	955	V	0	1	\N	8	1	\N	N	\N	300	111	12	0	\N	0	0	0	0	N
1829	11	945	V	0	1	\N	8	1	\N	N	\N	330	40	12	0	\N	0	0	0	0	N
1869	11	973	V	0	1	\N	8	1	\N	N	\N	236	114	12	0	\N	0	0	0	0	N
1812	11	931	V	0	1	\N	8	1	\N	N	\N	222	16	12	0	\N	0	0	0	0	N
1840	11	952	V	0	1	\N	8	1	\N	N	\N	119	56	12	0	\N	0	0	0	0	N
1830	11	946	V	0	1	\N	8	1	\N	N	\N	119	73	12	0	\N	0	0	0	0	N
1848	11	960	V	0	1	\N	8	1	\N	N	\N	133	54	12	0	\N	0	0	0	0	N
1851	11	963	V	0	1	\N	8	1	\N	N	\N	212	35	12	0	\N	0	0	0	0	N
1818	11	935	V	0	1	\N	8	1	\N	N	\N	143	41	12	0	\N	0	0	0	0	N
1867	11	971	V	3	1	\N	8	1	\N	N	\N	346	64	12	0	\N	0	0	0	0	N
1899	11	990	V	0	1	\N	8	1	\N	N	\N	218	41	12	0	\N	0	0	0	0	N
1900	11	992	V	0	1	\N	8	1	\N	N	\N	227	41	12	0	\N	0	0	0	0	N
1850	11	962	V	0	1	\N	8	1	\N	N	\N	133	56	12	0	\N	0	0	0	0	N
1923	11	1000	V	3	1	\N	8	1	\N	N	\N	112	20	12	0	\N	0	0	0	0	N
1779	11	916	V	0	1	\N	8	1	\N	N	\N	357	67	12	0	\N	0	0	0	0	N
1920	11	996	V	0	1	\N	8	1	\N	N	\N	132	17	12	0	\N	0	0	0	0	N
2093	11	1042	V	3	1	\N	8	1	\N	N	\N	189	14	12	0	\N	0	0	0	0	N
3512	11	2900	V	0	1	\N	8	1	\N	N	\N	1171	16	12	0	\N	0	0	0	0	N
1922	11	999	V	3	1	\N	8	1	\N	N	\N	115	41	12	0	\N	0	0	0	0	N
1941	11	1003	V	0	1	\N	8	1	\N	N	\N	681	37	12	0	\N	0	0	0	0	N
2083	11	1033	V	0	1	\N	8	1	\N	N	\N	198	61	12	0	\N	0	0	0	0	N
2113	11	1049	V	0	1	\N	8	1	\N	N	\N	223	16	12	0	\N	0	0	0	0	N
1931	11	1001	V	3	1	\N	8	1	\N	N	\N	216	17	12	0	\N	0	0	0	0	N
2112	11	1048	V	0	1	\N	8	1	\N	N	\N	109	37	12	0	\N	0	0	0	0	N
1963	11	1014	V	0	1	\N	8	1	\N	N	\N	369	40	12	0	\N	0	0	0	0	N
1943	11	1005	V	0	1	\N	8	1	\N	N	\N	482	37	12	0	\N	0	0	0	0	N
1799	11	928	V	3	1	\N	8	1	\N	N	\N	357	39	12	0	\N	0	0	0	0	N
1968	11	1019	V	0	1	\N	8	1	\N	N	\N	346	60	12	0	\N	0	0	0	0	N
1952	11	1008	V	3	1	\N	8	1	\N	N	\N	692	41	12	0	\N	0	0	0	0	N
2020	11	1020	V	0	1	\N	8	1	\N	N	\N	126	58	12	0	\N	0	0	0	0	N
2023	11	1023	V	0	1	\N	8	1	\N	N	\N	208	59	12	0	\N	0	0	0	0	N
2024	11	1024	V	0	1	\N	8	1	\N	N	\N	198	71	12	0	\N	0	0	0	0	N
1965	11	1015	V	0	1	\N	8	1	\N	N	\N	369	40	12	0	\N	0	0	0	0	N
2085	11	1035	V	0	1	\N	8	1	\N	N	\N	126	60	12	0	\N	0	0	0	0	N
2088	11	1038	V	0	1	\N	8	1	\N	N	\N	198	64	12	0	\N	0	0	0	0	N
2091	11	1040	V	3	1	\N	8	1	\N	N	\N	702	37	12	0	\N	0	0	0	0	N
2101	11	1044	V	3	1	\N	8	1	\N	N	\N	246	41	12	0	\N	0	0	0	0	N
2110	11	1046	V	0	1	\N	8	1	\N	N	\N	216	42	12	0	\N	0	0	0	0	N
2114	11	1050	V	0	1	\N	8	1	\N	N	\N	249	37	12	0	\N	0	0	0	0	N
2121	11	1054	V	3	1	\N	8	1	\N	N	\N	223	42	12	0	\N	0	0	0	0	N
2130	11	1055	V	3	1	\N	8	1	\N	N	\N	223	42	12	0	\N	0	0	0	0	N
2234	11	1084	V	3	1	\N	8	1	\N	N	\N	112	16	12	0	\N	0	0	0	0	N
2131	11	1056	V	3	1	\N	8	1	\N	N	\N	631	17	12	0	\N	0	0	0	0	N
2166	11	1075	V	3	1	\N	8	1	\N	N	\N	732	20	12	0	\N	0	0	0	0	N
2133	11	1058	V	0	1	\N	8	1	\N	N	\N	223	16	12	0	\N	0	0	0	0	N
2324	11	1099	V	3	1	\N	8	1	\N	N	\N	765	20	12	0	\N	0	0	0	0	N
2144	11	1065	V	3	1	\N	8	1	\N	N	\N	109	16	12	0	\N	0	0	0	0	N
2137	11	1061	V	0	1	\N	8	1	\N	N	\N	364	16	12	0	\N	0	0	0	0	N
2235	11	1085	V	3	1	\N	8	1	\N	N	\N	357	16	12	0	\N	0	0	0	0	N
2337	11	1105	V	3	1	\N	8	1	\N	N	\N	772	16	12	0	\N	0	0	0	0	N
2145	11	1066	V	0	1	\N	8	1	\N	N	\N	113	16	12	0	\N	0	0	0	0	N
2134	11	1057	V	3	1	\N	8	1	\N	N	\N	136	20	12	0	\N	0	0	0	0	N
2343	11	1107	V	3	1	\N	8	1	\N	N	\N	369	41	12	0	\N	0	0	0	0	N
2333	11	1103	V	3	1	\N	8	1	\N	N	\N	112	20	12	0	\N	0	0	0	0	N
2350	11	1112	V	3	1	\N	8	1	\N	N	\N	781	20	12	0	\N	0	0	0	0	N
2161	11	1073	V	3	1	\N	8	1	\N	N	\N	222	20	12	0	\N	0	0	0	0	N
2159	11	1072	V	3	1	\N	8	1	\N	N	\N	723	20	12	0	\N	0	0	0	0	N
3521	11	2903	V	3	1	\N	8	1	\N	N	\N	1182	17	12	0	\N	0	0	0	0	N
2155	11	1070	V	3	1	\N	8	1	\N	N	\N	631	17	12	0	\N	0	0	0	0	N
2335	11	1104	V	3	1	\N	8	1	\N	N	\N	771	20	12	0	\N	0	0	0	0	N
2331	11	1101	V	3	1	\N	8	1	\N	N	\N	357	20	12	0	\N	0	0	0	0	N
2346	11	1110	V	3	1	\N	8	1	\N	N	\N	189	17	12	0	\N	0	0	0	0	N
2239	11	1086	V	3	1	\N	8	1	\N	N	\N	357	16	12	0	\N	0	0	0	0	N
2315	11	1095	V	3	1	\N	8	1	\N	N	\N	250	16	12	0	\N	0	0	0	0	N
2163	11	1074	V	3	1	\N	8	1	\N	N	\N	364	17	12	0	\N	0	0	0	0	N
2306	11	1090	V	0	1	\N	8	1	\N	N	\N	751	37	12	0	\N	0	0	0	0	N
2141	11	1063	V	0	1	\N	8	1	\N	N	\N	364	42	12	0	\N	0	0	0	0	N
2167	11	1076	V	3	1	\N	8	1	\N	N	\N	357	16	12	0	\N	0	0	0	0	N
2158	11	1071	V	3	1	\N	8	1	\N	N	\N	189	17	12	0	\N	0	0	0	0	N
2168	11	1077	V	3	1	\N	8	1	\N	N	\N	112	16	12	0	\N	0	0	0	0	N
2169	11	1078	V	3	1	\N	8	1	\N	N	\N	357	16	12	0	\N	0	0	0	0	N
2146	11	1067	V	3	1	\N	8	1	\N	N	\N	109	16	12	0	\N	0	0	0	0	N
2221	11	1080	V	3	1	\N	8	1	\N	N	\N	357	16	12	0	\N	0	0	0	0	N
2354	11	1115	V	0	1	\N	8	1	\N	N	\N	751	16	12	0	\N	0	0	0	0	N
2231	11	1081	V	3	1	\N	8	1	\N	N	\N	357	16	12	0	\N	0	0	0	0	N
2232	11	1082	V	3	1	\N	8	1	\N	N	\N	741	20	12	0	\N	0	0	0	0	N
2138	11	1062	V	3	1	\N	8	1	\N	N	\N	364	16	12	0	\N	0	0	0	0	N
2220	11	1079	V	3	1	\N	8	1	\N	N	\N	112	41	12	0	\N	0	0	0	0	N
2233	11	1083	V	3	1	\N	8	1	\N	N	\N	109	16	12	0	\N	0	0	0	0	N
2290	11	1087	V	3	1	\N	8	1	\N	N	\N	357	16	12	0	\N	0	0	0	0	N
2323	11	1097	V	3	1	\N	8	1	\N	N	\N	764	35	12	0	\N	0	0	0	0	N
2332	11	1102	V	3	1	\N	8	1	\N	N	\N	249	37	12	0	\N	0	0	0	0	N
2341	11	1106	V	3	1	\N	8	1	\N	N	\N	229	16	12	0	\N	0	0	0	0	N
2347	11	1111	V	3	1	\N	8	1	\N	N	\N	781	20	12	0	\N	0	0	0	0	N
2353	11	1114	V	3	1	\N	8	1	\N	N	\N	791	39	12	0	\N	0	0	0	0	N
2361	11	1116	V	0	1	\N	8	1	\N	N	\N	793	20	12	0	\N	0	0	0	0	N
2362	11	1117	V	0	1	\N	8	1	\N	N	\N	801	16	12	0	\N	0	0	0	0	N
3523	11	2905	V	0	1	\N	8	1	\N	N	\N	357	37	12	0	\N	0	0	0	0	N
2365	11	1120	V	0	1	\N	8	1	\N	N	\N	32	17	12	0	\N	0	0	0	0	N
3573	11	2929	V	0	1	\N	8	1	\N	N	\N	1211	17	12	0	\N	0	0	0	0	N
2366	11	1121	V	0	1	\N	8	1	\N	N	\N	246	39	12	0	\N	0	0	0	0	N
75	11	91	V	3	1	2011-02-14	8	1	\N	N	\N	114	37	12	0	\N	0	0	0	0	N
2450	11	1162	V	3	1	\N	8	1	\N	N	\N	862	122	12	0	\N	0	0	0	0	N
2373	11	1122	V	3	1	\N	8	1	\N	N	\N	113	37	12	0	\N	0	0	0	0	N
2449	11	1161	V	3	1	\N	8	1	\N	N	\N	109	122	12	0	\N	0	0	0	0	N
2375	11	1125	V	3	1	\N	8	1	\N	N	\N	357	41	12	0	\N	0	0	0	0	N
2408	11	1137	V	3	1	\N	8	1	\N	N	\N	189	17	12	0	\N	0	0	0	0	N
2386	11	1127	V	3	1	\N	8	1	\N	N	\N	248	41	12	0	\N	0	0	0	0	N
2452	11	1155	V	3	1	\N	8	1	\N	N	\N	863	101	12	0	\N	0	0	0	0	N
2466	11	1166	V	0	1	\N	8	1	\N	N	\N	112	119	12	0	\N	0	0	0	0	N
2390	11	1131	V	3	1	\N	8	1	\N	N	\N	820	17	12	0	\N	0	0	0	0	N
2423	11	1139	V	3	1	\N	8	1	\N	N	\N	249	37	12	0	\N	0	0	0	0	N
2371	11	1123	V	0	1	\N	8	1	\N	N	\N	246	39	12	0	\N	0	0	0	0	N
2446	11	1160	V	0	1	\N	8	1	\N	N	\N	862	122	12	0	\N	0	0	0	0	N
2401	11	1132	V	3	1	\N	8	1	\N	N	\N	832	58	12	0	\N	0	0	0	0	N
2431	11	1148	V	3	1	\N	8	1	\N	N	\N	189	52	12	0	\N	0	0	0	0	N
2402	11	1520830	V	3	1	\N	8	1	\N	N	\N	29	37	12	0	\N	0	0	0	0	N
2411	11	1140	V	3	1	\N	8	1	\N	N	\N	250	16	12	0	\N	0	0	0	0	N
2405	11	1134	V	3	1	\N	8	1	\N	N	\N	248	20	12	0	\N	0	0	0	0	N
2415	11	1144	V	3	1	\N	8	1	\N	N	\N	109	17	12	0	\N	0	0	0	0	N
2409	11	1138	V	3	1	\N	8	1	\N	N	\N	229	17	12	0	\N	0	0	0	0	N
2384	11	1126	V	3	1	\N	8	1	\N	N	\N	112	41	12	0	\N	0	0	0	0	N
2412	11	1141	V	0	1	\N	8	1	\N	N	\N	643	38	12	0	\N	0	0	0	0	N
2413	11	1142	V	3	1	\N	8	1	\N	N	\N	352	16	12	0	\N	0	0	0	0	N
2425	11	1145	V	3	1	\N	8	1	\N	N	\N	249	37	12	0	\N	0	0	0	0	N
2426	11	1146	V	3	1	\N	8	1	\N	N	\N	842	37	12	0	\N	0	0	0	0	N
2427	11	1147	V	3	1	\N	8	1	\N	N	\N	842	37	12	0	\N	0	0	0	0	N
2434	11	1150	V	3	1	\N	8	1	\N	N	\N	246	37	12	0	\N	0	0	0	0	N
2444	11	1151	V	3	1	\N	8	1	\N	N	\N	860	16	12	0	\N	0	0	0	0	N
2443	11	1158	V	3	1	\N	8	1	\N	N	\N	861	20	12	0	\N	0	0	0	0	N
2445	11	1159	V	3	1	\N	8	1	\N	N	\N	230	122	12	0	\N	0	0	0	0	N
2447	11	1152	V	3	1	\N	8	1	\N	N	\N	230	101	12	0	\N	0	0	0	0	N
2453	11	1163	V	3	1	\N	8	1	\N	N	\N	249	37	12	0	\N	0	0	0	0	N
2461	11	1156	V	3	1	\N	8	1	\N	N	\N	230	101	12	0	\N	0	0	0	0	N
2462	11	1165	V	0	1	\N	8	1	\N	N	\N	238	38	12	0	\N	0	0	0	0	N
2464	11	1164	V	0	1	\N	8	1	\N	N	\N	116	54	12	0	\N	0	0	0	0	N
2467	11	1170	V	3	1	\N	8	1	\N	N	\N	871	16	12	0	\N	0	0	0	0	N
2476	11	1173	V	3	1	\N	8	1	\N	N	\N	881	20	12	0	\N	0	0	0	0	N
2474	11	1172	V	3	1	\N	8	1	\N	N	\N	223	17	12	0	\N	0	0	0	0	N
2747	11	1246	V	3	1	\N	8	1	\N	N	\N	249	135	12	0	\N	0	0	0	0	N
2508	11	1191	V	3	1	\N	8	1	\N	N	\N	109	17	12	0	\N	0	0	0	0	N
2601	11	2100	V	0	1	\N	8	1	\N	N	\N	369	60	12	0	\N	0	0	0	0	N
2574	11	1195	V	3	1	\N	8	1	\N	N	\N	248	16	12	0	\N	0	0	0	0	N
2507	11	1190	V	3	1	\N	8	1	\N	N	\N	112	37	12	0	\N	0	0	0	0	N
2746	11	1245	V	3	1	\N	8	1	\N	N	\N	250	20	12	0	\N	0	0	0	0	N
2509	11	1192	V	3	1	\N	8	1	\N	N	\N	250	16	12	0	\N	0	0	0	0	N
2595	11	1209	V	3	1	\N	8	1	\N	N	\N	369	37	12	0	\N	0	0	0	0	N
2671	11	1228	V	3	1	\N	8	1	\N	N	\N	33	107	12	0	\N	0	0	0	0	N
2502	11	1187	V	0	1	\N	8	1	\N	N	\N	189	20	12	0	\N	0	0	0	0	N
2668	11	1227	V	3	1	\N	8	1	\N	N	\N	862	123	12	0	\N	0	0	0	0	N
2596	11	1210	V	0	1	\N	8	1	\N	N	\N	241	41	12	0	\N	0	0	0	0	N
2735	11	1237	V	3	1	\N	8	1	\N	N	\N	902	64	12	0	\N	0	0	0	0	N
2748	11	1248	V	3	1	\N	8	1	\N	N	\N	189	120	12	0	\N	0	0	0	0	N
2743	11	1242	V	3	1	\N	8	1	\N	N	\N	357	14	12	0	\N	0	0	0	0	N
2498	11	1185	V	0	1	\N	8	1	\N	N	\N	891	36	12	0	\N	0	0	0	0	N
2575	11	1194	V	3	1	\N	8	1	\N	N	\N	32	14	12	0	\N	0	0	0	0	N
2503	11	1188	V	3	1	\N	8	1	\N	N	\N	292	53	12	0	\N	0	0	0	0	N
2577	11	1200	V	3	1	\N	8	1	\N	N	\N	189	16	12	0	\N	0	0	0	0	N
2578	11	1201	V	3	1	\N	8	1	\N	N	\N	223	20	12	0	\N	0	0	0	0	N
2594	11	1208	V	3	1	\N	8	1	\N	N	\N	248	20	12	0	\N	0	0	0	0	N
2663	11	1222	V	3	1	\N	8	1	\N	N	\N	109	64	12	0	\N	0	0	0	0	N
2497	11	1182	V	3	1	\N	8	1	\N	N	\N	112	17	12	0	\N	0	0	0	0	N
2582	11	1204	V	3	1	\N	8	1	\N	N	\N	223	17	12	0	\N	0	0	0	0	N
2506	11	1189	V	3	1	\N	8	1	\N	N	\N	223	20	12	0	\N	0	0	0	0	N
2592	11	1205	V	3	1	\N	8	1	\N	N	\N	352	16	12	0	\N	0	0	0	0	N
2737	11	1239	V	3	1	\N	8	1	\N	N	\N	250	17	12	0	\N	0	0	0	0	N
2736	11	1238	V	0	1	\N	8	1	\N	N	\N	227	60	12	0	\N	0	0	0	0	N
2602	11	2101	V	3	1	\N	8	1	\N	N	\N	223	39	12	0	\N	0	0	0	0	N
2603	11	2102	V	3	1	\N	8	1	\N	N	\N	346	53	12	0	\N	0	0	0	0	N
2662	11	1221	V	3	1	\N	8	1	\N	N	\N	863	118	12	0	\N	0	0	0	0	N
2666	11	1224	V	0	1	\N	8	1	\N	N	\N	141	53	12	0	\N	0	0	0	0	N
2665	11	1225	V	0	1	\N	8	1	\N	N	\N	371	14	12	0	\N	0	0	0	0	N
2667	11	1226	V	3	1	\N	8	1	\N	N	\N	223	20	12	0	\N	0	0	0	0	N
2678	11	1233	V	3	1	\N	8	1	\N	N	\N	32	37	12	0	\N	0	0	0	0	N
2679	11	1234	V	3	1	\N	8	1	\N	N	\N	126	64	12	0	\N	0	0	0	0	N
2745	11	1244	V	0	1	\N	8	1	\N	N	\N	487	37	12	0	\N	0	0	0	0	N
2752	11	1247	V	0	1	\N	8	1	\N	N	\N	487	37	12	0	\N	0	0	0	0	N
3574	11	2930	V	0	1	\N	8	1	\N	N	\N	1211	18	12	0	\N	0	0	0	0	N
2763	11	1251	V	3	1	\N	8	1	\N	N	\N	862	109	12	0	\N	0	0	0	0	N
2764	11	1252	V	0	1	\N	8	1	\N	N	\N	791	39	12	0	\N	0	0	0	0	N
2890	11	2318	V	3	1	\N	8	1	\N	N	\N	842	16	12	0	\N	0	0	0	0	N
2771	11	1253	V	3	1	\N	8	1	\N	N	\N	335	43	12	0	\N	0	0	0	0	N
2772	11	1254	V	0	1	\N	8	1	\N	N	\N	113	43	12	0	\N	0	0	0	0	N
2773	11	1255	V	3	1	\N	8	1	\N	N	\N	189	43	12	0	\N	0	0	0	0	N
2851	11	2303	V	3	1	\N	8	1	\N	N	\N	188	57	12	0	\N	0	0	0	0	N
2853	11	2305	V	3	1	\N	8	1	\N	N	\N	863	117	12	0	\N	0	0	0	0	N
2782	11	1300	V	3	1	\N	8	1	\N	N	\N	451	55	12	0	\N	0	0	0	0	N
2760	11	1249	V	0	1	\N	8	1	\N	N	\N	32	123	12	0	\N	0	0	0	0	N
2855	11	2307	V	3	1	\N	8	1	\N	N	\N	141	57	12	0	\N	0	0	0	0	N
2785	11	2301	V	0	1	\N	8	1	\N	N	\N	239	16	12	0	\N	0	0	0	0	N
2774	11	1256	V	0	1	\N	8	1	\N	N	\N	862	103	12	0	\N	0	0	0	0	N
2789	11	2011	V	0	1	\N	8	1	\N	N	\N	915	39	12	0	\N	0	0	0	0	N
2840	11	2012	V	0	1	\N	8	1	\N	N	\N	917	39	12	0	\N	0	0	0	0	N
2860	11	2308	V	3	1	\N	8	1	\N	N	\N	430	117	12	0	\N	0	0	0	0	N
2852	11	2304	V	3	1	\N	8	1	\N	N	\N	141	64	12	0	\N	0	0	0	0	N
2854	11	2306	V	3	1	\N	8	1	\N	N	\N	141	62	12	0	\N	0	0	0	0	N
2783	11	1301	V	3	1	\N	8	1	\N	N	\N	451	54	12	0	\N	0	0	0	0	N
2899	11	2325	V	0	1	\N	8	1	\N	N	\N	296	55	12	0	\N	0	0	0	0	N
1229	11	741	V	3	1	\N	8	1	\N	N	\N	333	18	12	0	\N	0	0	0	0	N
3001	11	2330	V	3	1	\N	8	1	\N	N	\N	189	14	12	0	\N	0	0	0	0	N
2963	11	2340	V	0	1	\N	8	1	\N	N	\N	941	35	12	0	\N	0	0	0	0	N
2950	11	2326	V	3	1	\N	8	1	\N	N	\N	109	41	12	0	\N	0	0	0	0	N
2897	11	2324	V	3	1	\N	8	1	\N	N	\N	236	54	12	0	\N	0	0	0	0	N
2862	11	2309	V	3	1	\N	8	1	\N	N	\N	333	34	12	0	\N	0	0	0	0	N
2892	11	2320	V	3	1	\N	8	1	\N	N	\N	842	16	12	0	\N	0	0	0	0	N
2993	11	2353	V	3	1	\N	8	1	\N	N	\N	109	37	12	0	\N	0	0	0	0	N
2448	11	1153	V	3	1	\N	8	1	\N	N	\N	189	18	12	0	\N	0	0	0	0	N
2872	11	2310	V	0	1	\N	8	1	\N	N	\N	113	42	12	0	\N	0	0	0	0	N
2875	11	2312	V	3	1	\N	8	1	\N	N	\N	357	42	12	0	\N	0	0	0	0	N
2894	11	2322	V	3	1	\N	8	1	\N	N	\N	932	16	12	0	\N	0	0	0	0	N
149	11	160	V	3	1	2011-02-14	8	1	\N	N	\N	116	17	12	0	\N	0	0	0	0	N
2982	11	2345	V	3	1	\N	8	1	\N	N	\N	951	35	12	0	\N	0	0	0	0	N
2968	11	2344	V	3	1	\N	8	1	\N	N	\N	199	53	12	0	\N	0	0	0	0	N
2971	11	2030	V	0	1	\N	8	1	\N	N	\N	366	142	12	0	\N	0	0	0	0	N
2985	11	2328	V	3	1	\N	8	1	\N	N	\N	711	11	12	0	\N	0	0	0	0	N
2986	11	2329	V	3	1	\N	8	1	\N	N	\N	109	35	12	0	\N	0	0	0	0	N
3526	11	2908	V	0	1	\N	8	1	\N	N	\N	487	20	12	0	\N	0	0	0	0	N
3149	11	2052	V	0	1	\N	8	1	\N	N	\N	1033	35	12	0	\N	0	0	0	0	N
3002	11	2348	V	3	1	\N	8	1	\N	N	\N	109	17	12	0	\N	0	0	0	0	N
3018	11	2031	V	3	1	\N	8	1	\N	N	\N	248	16	12	0	\N	0	0	0	0	N
3020	11	2032	V	3	1	\N	8	1	\N	N	\N	981	37	12	0	\N	0	0	0	0	N
3031	11	2354	V	3	1	\N	8	1	\N	N	\N	189	17	12	0	\N	0	0	0	0	N
3272	11	2447	V	3	1	\N	8	1	\N	N	\N	223	41	12	0	\N	0	0	0	0	N
3205	11	2034	V	0	1	\N	8	1	\N	N	\N	1035	37	12	0	\N	0	0	0	0	N
3134	11	2400	V	3	1	\N	8	1	\N	N	\N	1021	35	12	0	\N	0	0	0	0	N
3111	11	2370	V	0	1	\N	8	1	\N	N	\N	1012	20	12	0	\N	0	0	0	0	N
3135	11	2401	V	3	1	\N	8	1	\N	N	\N	189	17	12	0	\N	0	0	0	0	N
3037	11	2362	V	3	1	\N	8	1	\N	N	\N	631	18	12	0	\N	0	0	0	0	N
3038	11	2363	O	3	1	\N	8	1	3048	N	\N	321	40	12	0	\N	0	0	0	0	N
3091	11	2365	V	3	1	\N	8	1	\N	N	\N	995	35	12	0	\N	0	0	0	0	N
3114	11	2372	V	3	1	\N	8	1	\N	N	\N	109	37	12	0	\N	0	0	0	0	N
3103	11	2767	V	3	1	\N	8	1	\N	N	\N	33	106	12	0	\N	0	0	0	0	N
3253	11	2432	V	0	1	\N	8	1	\N	N	\N	1071	37	12	0	\N	0	0	0	0	N
3104	11	2768	V	3	1	\N	8	1	\N	N	\N	33	119	12	0	\N	0	0	0	0	N
3258	11	2437	V	3	1	\N	8	1	\N	N	\N	1072	18	12	0	\N	0	0	0	0	N
3105	11	2769	V	3	1	\N	8	1	\N	N	\N	33	119	12	0	\N	0	0	0	0	N
3281	11	2450	V	3	1	\N	8	1	\N	N	\N	763	35	12	0	\N	0	0	0	0	N
3121	11	2000	V	0	1	\N	8	1	\N	N	\N	32	14	12	0	\N	0	0	0	0	N
3242	11	2043	V	3	1	\N	8	1	\N	N	\N	248	16	12	0	\N	0	0	0	0	N
3148	11	2051	V	3	1	\N	8	1	\N	N	\N	1033	35	12	0	\N	0	0	0	0	N
3115	11	2373	V	3	1	\N	8	1	\N	N	\N	430	18	12	0	\N	0	0	0	0	N
3137	11	2403	V	3	1	\N	8	1	\N	N	\N	189	17	12	0	\N	0	0	0	0	N
3264	11	2442	V	3	1	\N	8	1	\N	N	\N	337	16	12	0	\N	0	0	0	0	N
3147	11	2050	V	3	1	\N	8	1	\N	N	\N	223	41	12	0	\N	0	0	0	0	N
3250	11	2047	V	3	1	\N	8	1	\N	N	\N	109	37	12	0	\N	0	0	0	0	N
3260	11	2439	V	3	1	\N	8	1	\N	N	\N	1075	18	12	0	\N	0	0	0	0	N
3138	11	2404	V	3	1	\N	8	1	\N	N	\N	223	17	12	0	\N	0	0	0	0	N
3243	11	2046	V	3	1	\N	8	1	\N	N	\N	1061	41	12	0	\N	0	0	0	0	N
3113	11	2371	V	3	1	\N	8	1	\N	N	\N	369	38	12	0	\N	0	0	0	0	N
3265	11	2443	V	3	1	\N	8	1	\N	N	\N	369	41	12	0	\N	0	0	0	0	N
3213	11	2036	V	3	1	\N	8	1	\N	N	\N	246	41	12	0	\N	0	0	0	0	N
3215	11	2038	V	0	1	\N	8	1	\N	N	\N	1041	16	12	0	\N	0	0	0	0	N
3221	11	2039	V	3	1	\N	8	1	\N	N	\N	1051	17	12	0	\N	0	0	0	0	N
3241	11	2059	V	0	1	\N	8	1	\N	N	\N	487	16	12	0	\N	0	0	0	0	N
3256	11	2435	V	0	1	\N	8	1	\N	N	\N	223	20	12	0	\N	0	0	0	0	N
3259	11	2438	V	0	1	\N	8	1	\N	N	\N	1074	18	12	0	\N	0	0	0	0	N
3261	11	2440	V	3	1	\N	8	1	\N	N	\N	241	11	12	0	\N	0	0	0	0	N
3262	11	2441	V	3	1	\N	8	1	\N	N	\N	241	11	12	0	\N	0	0	0	0	N
3270	11	2445	V	0	1	\N	8	1	\N	N	\N	1061	41	12	0	\N	0	0	0	0	N
3271	11	2446	V	0	1	\N	8	1	\N	N	\N	881	35	12	0	\N	0	0	0	0	N
3527	11	2909	V	0	1	\N	8	1	\N	N	\N	487	20	12	0	\N	0	0	0	0	N
3302	11	2550	V	0	1	\N	8	1	\N	N	\N	1091	16	12	0	\N	0	0	0	0	N
3303	11	2551	V	0	1	\N	8	1	\N	N	\N	115	18	12	0	\N	0	0	0	0	N
3453	11	2775	V	3	1	\N	8	1	\N	N	\N	222	42	12	0	\N	0	0	0	0	N
3292	11	2448	V	3	1	\N	8	1	\N	N	\N	1081	18	12	0	\N	0	0	0	0	N
3495	11	2793	V	0	1	\N	8	1	\N	N	\N	901	37	12	0	\N	0	0	0	0	N
3360	11	2556	V	0	1	\N	8	1	\N	N	\N	195	60	12	0	\N	0	0	0	0	N
3308	11	2554	V	0	1	\N	8	1	\N	N	\N	230	60	12	0	\N	0	0	0	0	N
3438	11	2669	V	3	1	\N	8	1	\N	N	\N	1122	16	12	0	\N	0	0	0	0	N
3485	11	2788	V	3	1	\N	8	1	\N	N	\N	486	37	12	0	\N	0	0	0	0	N
3372	11	2558	V	0	1	\N	8	1	\N	N	\N	364	37	12	0	\N	0	0	0	0	N
3454	11	2776	V	3	1	\N	8	1	\N	N	\N	1132	42	12	0	\N	0	0	0	0	N
3431	11	2756	V	3	1	\N	8	1	\N	N	\N	430	18	12	0	\N	0	0	0	0	N
3491	11	2789	V	3	1	\N	8	1	\N	N	\N	1161	41	12	0	\N	0	0	0	0	N
3480	11	850	V	0	1	\N	8	1	\N	N	\N	1151	37	12	0	\N	0	0	0	0	N
3411	11	2751	V	0	1	\N	8	1	\N	N	\N	493	41	12	0	\N	0	0	0	0	N
3494	11	2792	V	3	1	\N	8	1	\N	N	\N	1162	40	12	0	\N	0	0	0	0	N
3457	11	2780	V	3	1	\N	8	1	\N	N	\N	118	39	12	0	\N	0	0	0	0	N
3309	11	2555	V	0	1	\N	8	1	\N	N	\N	364	60	12	0	\N	0	0	0	0	N
3433	11	2667	V	3	1	\N	8	1	\N	N	\N	250	17	12	0	\N	0	0	0	0	N
3400	11	2572	V	3	1	\N	8	1	\N	N	\N	862	20	12	0	\N	0	0	0	0	N
3403	11	2574	V	0	1	\N	8	1	\N	N	\N	1111	38	12	0	\N	0	0	0	0	N
3435	11	2668	V	0	1	\N	8	1	\N	N	\N	1121	36	12	0	\N	0	0	0	0	N
3421	11	2579	V	3	1	\N	8	1	\N	N	\N	346	64	12	0	\N	0	0	0	0	N
3423	11	2580	V	3	1	\N	8	1	\N	N	\N	32	20	12	0	\N	0	0	0	0	N
3455	11	2779	V	0	1	\N	8	1	\N	N	\N	115	39	12	0	\N	0	0	0	0	N
3461	11	2790	V	3	1	\N	8	1	\N	N	\N	1141	18	12	0	\N	0	0	0	0	N
3463	11	2781	V	3	1	\N	8	1	\N	N	\N	751	17	12	0	\N	0	0	0	0	N
3472	11	2783	V	0	1	\N	8	1	\N	N	\N	1071	37	12	0	\N	0	0	0	0	N
3501	11	2794	V	0	1	\N	8	1	\N	N	\N	751	11	12	0	\N	0	0	0	0	N
3825	11	2991	V	3	1	\N	8	1	\N	N	\N	842	16	12	0	\N	0	0	0	0	N
3532	11	2913	V	3	1	\N	8	1	\N	N	\N	1184	20	12	0	\N	0	0	0	0	N
3413	11	2578	V	3	1	\N	8	1	\N	N	\N	241	41	12	0	\N	0	0	0	0	N
1601	11	802	V	3	1	\N	8	1	\N	N	\N	189	16	12	0	\N	0	0	0	0	N
37	11	570	V	3	1	2011-02-14	8	1	\N	N	\N	246	16	12	0	\N	0	0	0	0	N
3827	11	2999	V	0	1	\N	8	1	\N	N	\N	1293	37	12	0	\N	0	0	0	0	N
3831	11	3004	V	0	1	\N	8	1	\N	N	\N	1300	65	12	0	\N	0	0	0	0	N
3550	11	2920	V	0	1	\N	8	1	\N	N	\N	541	18	12	0	\N	0	0	0	0	N
3829	11	3002	V	0	1	\N	8	1	\N	N	\N	333	17	12	0	\N	0	0	0	0	N
3589	11	1922	V	3	1	\N	8	1	\N	N	\N	188	39	12	0	\N	0	0	0	0	N
3572	11	2928	V	0	1	\N	8	1	\N	N	\N	1211	18	12	0	\N	0	0	0	0	N
3542	11	2917	V	3	1	\N	8	1	\N	N	\N	1190	20	12	0	\N	0	0	0	0	N
3531	11	2912	V	0	1	\N	8	1	\N	N	\N	193	20	12	0	\N	0	0	0	0	N
3535	11	2915	V	3	1	\N	8	1	\N	N	\N	1185	20	12	0	\N	0	0	0	0	N
3605	11	2953	V	3	1	\N	8	1	\N	N	\N	249	20	12	0	\N	0	0	0	0	N
3629	11	2964	V	3	1	\N	8	1	\N	N	\N	250	20	12	0	\N	0	0	0	0	N
3528	11	2910	V	3	1	\N	8	1	\N	N	\N	248	20	12	0	\N	0	0	0	0	N
3607	11	2954	V	3	1	\N	8	1	\N	N	\N	1231	59	12	0	\N	0	0	0	0	N
3544	11	2918	V	0	1	\N	8	1	\N	N	\N	1191	17	12	0	\N	0	0	0	0	N
3609	11	2955	V	3	1	\N	8	1	\N	N	\N	430	20	12	0	\N	0	0	0	0	N
3824	11	2990	V	3	1	\N	8	1	\N	N	\N	369	20	12	0	\N	0	0	0	0	N
3540	11	2916	V	3	1	\N	8	1	\N	N	\N	1185	20	12	0	\N	0	0	0	0	N
3630	11	2965	V	3	1	\N	8	1	\N	N	\N	1222	20	12	0	\N	0	0	0	0	N
3563	11	2923	V	3	1	\N	8	1	\N	N	\N	1201	40	12	0	\N	0	0	0	0	N
3626	11	2961	V	3	1	\N	8	1	\N	N	\N	1243	17	12	0	\N	0	0	0	0	N
3575	11	2931	V	0	1	\N	8	1	\N	N	\N	18	18	12	0	\N	0	0	0	0	N
3611	11	2957	V	3	1	\N	8	1	\N	N	\N	1212	18	12	0	\N	0	0	0	0	N
3624	11	2960	V	3	1	\N	8	1	\N	N	\N	1242	17	12	0	\N	0	0	0	0	N
3530	11	2911	V	3	1	\N	8	1	\N	N	\N	1183	40	12	0	\N	0	0	0	0	N
3596	11	2944	V	3	1	\N	8	1	\N	N	\N	1224	20	12	0	\N	0	0	0	0	N
3565	11	2925	V	3	1	\N	8	1	\N	N	\N	1203	66	12	0	\N	0	0	0	0	N
3564	11	2924	V	3	1	\N	8	1	\N	N	\N	1202	75	12	0	\N	0	0	0	0	N
3822	11	2988	V	3	1	\N	8	1	\N	N	\N	1291	68	12	0	\N	0	0	0	0	N
3582	11	2935	V	0	1	\N	8	1	\N	N	\N	921	39	12	0	\N	0	0	0	0	N
3584	11	2936	V	0	1	\N	8	1	\N	N	\N	921	39	12	0	\N	0	0	0	0	N
3585	11	2937	V	0	1	\N	8	1	\N	N	\N	921	39	12	0	\N	0	0	0	0	N
3587	11	2938	V	0	1	\N	8	1	\N	N	\N	921	39	12	0	\N	0	0	0	0	N
3588	11	1921	V	0	1	\N	8	1	\N	N	\N	921	39	12	0	\N	0	0	0	0	N
3567	11	2926	V	3	1	\N	8	1	\N	N	\N	1205	18	12	0	\N	0	0	0	0	N
2571	11	1198	V	3	1	\N	8	1	\N	N	\N	189	14	12	0	\N	0	0	0	0	N
3594	11	2942	V	0	1	\N	8	1	\N	N	\N	1223	20	12	0	\N	0	0	0	0	N
3595	11	2943	V	0	1	\N	8	1	\N	N	\N	1223	20	12	0	\N	0	0	0	0	N
3602	11	2951	V	3	1	\N	8	1	\N	N	\N	1222	20	12	0	\N	0	0	0	0	N
3578	11	2933	V	3	1	\N	8	1	\N	N	\N	1212	18	12	0	\N	0	0	0	0	N
3610	11	2956	V	0	1	\N	8	1	\N	N	\N	1232	17	12	0	\N	0	0	0	0	N
3622	11	2958	V	0	1	\N	8	1	\N	N	\N	1241	42	12	0	\N	0	0	0	0	N
3628	11	2963	V	3	1	\N	8	1	\N	N	\N	248	20	12	0	\N	0	0	0	0	N
127	11	579	V	3	1	2011-02-14	8	1	\N	N	\N	115	36	12	0	\N	0	0	0	0	N
3942	11	3034	V	3	1	\N	8	1	\N	N	\N	247	20	12	0	\N	0	0	0	0	N
3931	11	3028	V	3	1	\N	8	1	\N	N	\N	189	20	12	0	\N	0	0	0	0	N
3838	11	3010	V	0	1	\N	8	1	\N	N	\N	113	20	12	0	\N	0	0	0	0	N
3916	11	3022	V	3	1	\N	8	1	\N	N	\N	1313	20	12	0	\N	0	0	0	0	N
3892	11	3013	V	3	1	\N	8	1	\N	N	\N	1303	40	12	0	\N	0	0	0	0	N
3982	11	3056	V	3	1	\N	8	1	\N	N	\N	1331	74	12	0	\N	0	0	0	0	N
3951	11	3035	V	3	1	\N	8	1	\N	N	\N	1212	38	12	0	\N	0	0	0	0	N
2878	11	2314	V	3	1	\N	8	1	\N	N	\N	902	55	12	0	\N	0	0	0	0	N
3911	11	3017	V	0	1	\N	8	1	\N	N	\N	1311	20	12	0	\N	0	0	0	0	N
3912	11	3018	V	0	1	\N	8	1	\N	N	\N	1311	20	12	0	\N	0	0	0	0	N
3837	11	3009	V	3	1	\N	8	1	\N	N	\N	32	17	12	0	\N	0	0	0	0	N
396	11	370	V	3	1	2011-02-17	8	1	\N	N	\N	33	68	12	0	\N	0	0	0	0	N
3823	11	2989	V	3	1	\N	8	1	\N	N	\N	1292	70	12	0	\N	0	0	0	0	N
690	11	634	V	3	1	\N	8	1	\N	N	\N	139	20	12	0	\N	0	0	0	0	N
3935	11	3032	V	3	1	\N	8	1	\N	N	\N	189	20	12	0	\N	0	0	0	0	N
2352	11	1113	V	3	1	\N	8	1	\N	N	\N	790	20	12	0	\N	0	0	0	0	N
3835	11	3007	V	3	1	\N	8	1	\N	N	\N	118	17	12	0	\N	0	0	0	0	N
3902	11	3016	V	3	1	\N	8	1	\N	N	\N	294	55	12	0	\N	0	0	0	0	N
3994	11	2757	V	3	1	\N	8	1	\N	N	\N	189	57	12	0	\N	0	0	0	0	N
3975	11	3053	V	0	1	\N	8	1	\N	N	\N	1222	40	12	0	\N	0	0	0	0	N
3893	11	3014	V	3	1	\N	8	1	\N	N	\N	863	66	12	0	\N	0	0	0	0	N
3932	11	3029	V	3	1	\N	8	1	\N	N	\N	189	20	12	0	\N	0	0	0	0	N
1846	11	958	V	0	1	\N	8	1	\N	N	\N	298	74	12	0	\N	0	0	0	0	N
1511	11	733	V	3	1	\N	8	1	\N	N	\N	241	43	12	0	\N	0	0	0	0	N
347	11	426	V	3	1	2011-02-14	8	1	\N	N	\N	188	74	12	0	\N	0	0	0	0	N
1953	11	1009	V	3	1	\N	8	1	\N	N	\N	109	37	12	0	\N	0	0	0	0	N
3646	11	2971	V	0	1	\N	8	1	\N	N	\N	1222	52	12	0	\N	0	0	0	0	N
3913	11	3019	V	3	1	\N	8	1	\N	N	\N	249	20	12	0	\N	0	0	0	0	N
3890	11	3012	V	3	1	\N	8	1	\N	N	\N	249	20	12	0	\N	0	0	0	0	N
3914	11	3020	V	3	1	\N	8	1	\N	N	\N	249	20	12	0	\N	0	0	0	0	N
3933	11	3030	V	3	1	\N	8	1	\N	N	\N	333	20	12	0	\N	0	0	0	0	N
3941	11	3033	V	3	1	\N	8	1	\N	N	\N	241	20	12	0	\N	0	0	0	0	N
3971	11	3050	V	0	1	\N	8	1	\N	N	\N	241	16	12	0	\N	0	0	0	0	N
3977	11	3055	V	0	1	\N	8	1	\N	N	\N	1185	40	12	0	\N	0	0	0	0	N
3839	11	3011	V	3	1	\N	8	1	\N	N	\N	1222	20	12	0	\N	0	0	0	0	N
3101	11	2364	V	3	1	\N	8	1	\N	N	\N	109	41	12	0	\N	0	0	0	0	N
3901	11	3015	V	3	1	\N	8	1	\N	N	\N	661	55	12	0	\N	0	0	0	0	N
3834	11	3006	V	3	1	\N	8	1	\N	N	\N	1252	20	12	0	\N	0	0	0	0	N
3996	11	2759	V	0	1	\N	8	1	\N	N	\N	1222	61	12	0	\N	0	0	0	0	N
3923	11	3025	V	0	1	\N	8	1	\N	N	\N	915	39	12	0	\N	0	0	0	0	N
3915	11	3021	V	3	1	\N	8	1	\N	N	\N	1312	17	12	0	\N	0	0	0	0	N
3973	11	3051	V	0	1	\N	8	1	\N	N	\N	1322	16	12	0	\N	0	0	0	0	N
4051	11	2763	V	3	1	\N	8	1	\N	N	\N	189	60	12	0	\N	0	0	0	0	N
3976	11	3054	V	0	1	\N	8	1	\N	N	\N	1184	40	12	0	\N	0	0	0	0	N
4157	11	3090	V	3	1	\N	8	1	\N	N	\N	1351	56	12	0	\N	0	0	0	0	N
4154	11	3088	V	3	1	\N	8	1	\N	N	\N	369	66	12	0	\N	0	0	0	0	N
4076	11	3071	V	0	1	\N	8	1	\N	N	\N	33	59	12	0	\N	0	0	0	0	N
4061	11	3061	V	0	1	\N	8	1	\N	N	\N	33	66	12	0	\N	0	0	0	0	N
4147	11	3083	V	0	1	\N	8	1	\N	N	\N	352	20	12	0	\N	0	0	0	0	N
4224	11	3101	V	3	1	\N	8	1	\N	N	\N	1352	166	12	0	\N	0	0	0	0	N
4246	11	3113	V	3	1	\N	8	1	\N	N	\N	1363	16	12	0	\N	0	0	0	0	N
4156	11	3089	V	3	1	\N	8	1	\N	N	\N	1351	57	12	0	\N	0	0	0	0	N
4152	11	3086	V	3	1	\N	8	1	\N	N	\N	184	20	12	0	\N	0	0	0	0	N
4226	11	3103	V	0	1	\N	8	1	\N	N	\N	430	37	12	0	\N	0	0	0	0	N
4228	11	3105	V	0	1	\N	8	1	\N	N	\N	115	61	12	0	\N	0	0	0	0	N
170	11	193	V	3	1	2011-02-14	8	1	\N	N	\N	195	54	12	0	\N	0	0	0	0	N
4211	11	2778	V	0	1	\N	8	1	\N	N	\N	31	153	12	0	\N	0	0	0	0	N
4212	11	3092	V	0	1	\N	8	1	\N	N	\N	1352	155	12	0	\N	0	0	0	0	N
4067	11	3065	V	0	1	\N	8	1	\N	N	\N	33	53	12	0	\N	0	0	0	0	N
4227	11	3104	V	0	1	\N	8	1	\N	N	\N	1252	37	12	0	\N	0	0	0	0	N
4066	11	3064	V	0	1	\N	8	1	\N	N	\N	33	57	12	0	\N	0	0	0	0	N
4073	11	3068	V	0	1	\N	8	1	\N	N	\N	33	65	12	0	\N	0	0	0	0	N
4153	11	3087	V	3	1	\N	8	1	\N	N	\N	1222	54	12	0	\N	0	0	0	0	N
4245	11	3112	V	3	1	\N	8	1	\N	N	\N	1362	16	12	0	\N	0	0	0	0	N
4057	11	2772	V	3	1	\N	8	1	\N	N	\N	1222	74	12	0	\N	0	0	0	0	N
4143	11	3079	V	0	1	\N	8	1	\N	N	\N	33	71	12	0	\N	0	0	0	0	N
4131	11	3076	V	0	1	\N	8	1	\N	N	\N	33	75	12	0	\N	0	0	0	0	N
4151	11	3085	V	3	1	\N	8	1	\N	N	\N	842	20	12	0	\N	0	0	0	0	N
4214	11	3094	V	3	1	\N	8	1	\N	N	\N	1352	155	12	0	\N	0	0	0	0	N
153	11	165	V	3	1	2011-02-14	8	1	\N	N	\N	189	18	12	0	\N	0	0	0	0	N
4244	11	3111	V	3	1	\N	8	1	\N	N	\N	1361	16	12	0	\N	0	0	0	0	N
4450	11	3159	V	3	1	\N	8	1	\N	N	\N	294	34	12	0	\N	0	0	0	0	N
4268	11	3122	V	3	1	\N	8	1	\N	N	\N	1363	17	12	0	\N	0	0	0	0	N
4283	11	3130	V	3	1	\N	8	1	\N	N	\N	1383	40	12	0	\N	0	0	0	0	N
4282	11	3129	V	3	1	\N	8	1	\N	N	\N	1382	35	12	0	\N	0	0	0	0	N
4249	11	3115	V	3	1	\N	8	1	\N	N	\N	1205	37	12	0	\N	0	0	0	0	N
4284	11	3131	O	3	1	\N	8	1	4422	N	\N	1384	40	12	0	\N	0	0	0	0	N
4362	11	3144	V	0	1	\N	8	1	\N	N	\N	296	159	12	0	\N	0	0	0	0	N
4369	11	3151	V	0	1	\N	8	1	\N	N	\N	296	164	12	0	\N	0	0	0	0	N
4289	11	3136	O	3	1	\N	8	1	4338	N	\N	1389	40	12	0	\N	0	0	0	0	N
4351	11	3142	V	0	1	\N	8	1	\N	N	\N	296	174	12	0	\N	0	0	0	0	N
4466	11	3164	V	3	1	\N	8	1	\N	N	\N	1462	160	12	0	\N	0	0	0	0	N
4271	11	3125	V	3	1	\N	8	1	\N	N	\N	1376	17	12	0	\N	0	0	0	0	N
4288	11	3135	V	3	1	\N	8	1	\N	N	\N	1388	41	12	0	\N	0	0	0	0	N
4340	11	3137	V	3	1	\N	8	1	\N	N	\N	1440	39	12	0	\N	0	0	0	0	N
4367	11	3149	V	0	1	\N	8	1	\N	N	\N	1294	164	12	0	\N	0	0	0	0	N
4431	11	3155	V	0	1	\N	8	1	\N	N	\N	296	163	12	0	\N	0	0	0	0	N
4343	11	3140	V	3	1	\N	8	1	\N	N	\N	1442	20	12	0	\N	0	0	0	0	N
4467	11	3165	V	0	1	\N	8	1	\N	N	\N	487	37	12	0	\N	0	0	0	0	N
4341	11	3138	V	3	1	\N	8	1	\N	N	\N	1441	18	12	0	\N	0	0	0	0	N
4464	11	3163	V	0	1	\N	8	1	\N	N	\N	113	160	12	0	\N	0	0	0	0	N
4463	11	3162	V	0	1	\N	8	1	\N	N	\N	643	16	12	0	\N	0	0	0	0	N
4561	11	3273	V	0	1	\N	8	1	\N	N	\N	229	169	12	0	\N	0	0	0	0	N
4468	11	3166	V	0	1	\N	8	1	\N	N	\N	487	37	12	0	\N	0	0	0	0	N
4441	11	3156	V	3	1	\N	8	1	\N	N	\N	249	16	12	0	\N	0	0	0	0	N
4267	11	3121	V	3	1	\N	8	1	\N	N	\N	1373	20	12	0	\N	0	0	0	0	N
4543	11	2801	V	3	1	\N	8	1	\N	N	\N	249	16	12	0	\N	0	0	0	0	N
4287	11	3134	V	3	1	\N	8	1	\N	N	\N	1387	18	12	0	\N	0	0	0	0	N
4363	11	3145	V	0	1	\N	8	1	\N	N	\N	296	157	12	0	\N	0	0	0	0	N
4562	11	3274	V	3	1	\N	8	1	\N	N	\N	229	169	12	0	\N	0	0	0	0	N
4614	11	3278	V	3	1	\N	8	1	\N	N	\N	1494	18	12	0	\N	0	0	0	0	N
4582	11	3263	V	0	1	\N	8	1	\N	N	\N	1471	40	12	0	\N	0	0	0	0	N
4734	11	3319	V	3	1	\N	8	1	\N	N	\N	1552	40	12	0	\N	0	0	0	0	N
4814	11	3331	V	0	1	\N	8	1	\N	N	\N	357	18	12	0	\N	0	0	0	0	N
4595	11	3268	V	3	1	\N	8	1	\N	N	\N	1222	41	12	0	\N	0	0	0	0	N
4815	11	3332	V	3	1	\N	8	1	\N	N	\N	1569	16	12	0	\N	0	0	0	0	N
4592	11	3265	V	3	1	\N	8	1	\N	N	\N	1222	41	12	0	\N	0	0	0	0	N
4571	11	3260	V	3	1	\N	8	1	\N	N	\N	1033	35	12	0	\N	0	0	0	0	N
4573	11	3262	V	3	1	\N	8	1	\N	N	\N	1351	165	12	0	\N	0	0	0	0	N
4643	11	3302	V	3	1	\N	8	1	\N	N	\N	1494	17	12	0	\N	0	0	0	0	N
4647	11	3305	V	0	1	\N	8	1	\N	N	\N	451	174	12	0	\N	0	0	0	0	N
4648	11	3304	V	0	1	\N	8	1	\N	N	\N	487	174	12	0	\N	0	0	0	0	N
4700	11	3307	O	0	1	\N	8	1	4135	N	\N	1522	40	12	0	\N	0	0	0	0	N
4622	11	3284	V	0	1	\N	8	1	\N	N	\N	138	34	12	0	\N	0	0	0	0	N
4596	11	3269	V	3	1	\N	8	1	\N	N	\N	1222	41	12	0	\N	0	0	0	0	N
4715	11	3311	V	0	1	\N	8	1	\N	N	\N	238	16	12	0	\N	0	0	0	0	N
4625	11	3286	V	3	1	\N	8	1	\N	N	\N	1364	16	12	0	\N	0	0	0	0	N
4811	11	3328	V	3	1	\N	8	1	\N	N	\N	1569	17	12	0	\N	0	0	0	0	N
4736	11	3320	O	3	1	\N	8	1	4410	N	\N	1553	40	12	0	\N	0	0	0	0	N
4616	11	3281	V	0	1	\N	8	1	\N	N	\N	189	163	12	0	\N	0	0	0	0	N
4835	11	3338	V	3	1	\N	8	1	\N	N	\N	1573	16	12	0	\N	0	0	0	0	N
4713	11	3309	V	3	1	\N	8	1	\N	N	\N	1531	39	12	0	\N	0	0	0	0	N
4748	11	3325	V	3	1	\N	8	1	\N	N	\N	1566	159	12	0	\N	0	0	0	0	N
4742	11	3321	V	3	1	\N	8	1	\N	N	\N	1562	17	12	0	\N	0	0	0	0	N
4594	11	3267	V	0	1	\N	8	1	\N	N	\N	189	41	12	0	\N	0	0	0	0	N
4591	11	3264	V	3	1	\N	8	1	\N	N	\N	1364	35	12	0	\N	0	0	0	0	N
4836	11	3339	V	3	1	\N	8	1	\N	N	\N	249	16	12	0	\N	0	0	0	0	N
4843	11	3342	V	0	1	\N	8	1	\N	N	\N	902	160	12	0	\N	0	0	0	0	N
4863	11	3356	V	0	1	\N	8	1	\N	N	\N	1573	16	12	0	\N	0	0	0	0	N
4866	11	3359	V	0	1	\N	8	1	\N	N	\N	1569	35	12	0	\N	0	0	0	0	N
4869	11	3361	O	3	1	\N	8	1	4488	N	\N	1604	40	12	0	\N	0	0	0	0	N
4993	11	3399	O	0	1	\N	8	1	4359	N	\N	226	40	12	0	\N	0	0	0	0	N
4912	11	3368	V	3	1	\N	8	1	\N	N	\N	1631	18	12	0	\N	0	0	0	0	N
4892	11	3365	V	3	1	\N	8	1	\N	N	\N	216	18	12	0	\N	0	0	0	0	N
4841	11	3340	V	3	1	\N	8	1	\N	N	\N	1571	11	12	0	\N	0	0	0	0	N
4913	11	3371	V	3	1	\N	8	1	\N	N	\N	1632	36	12	0	\N	0	0	0	0	N
4964	11	3385	V	0	1	\N	8	1	\N	N	\N	487	37	12	0	\N	0	0	0	0	N
4970	11	3389	V	0	1	\N	8	1	\N	N	\N	487	37	12	0	\N	0	0	0	0	N
4855	11	3352	V	3	1	\N	8	1	\N	N	\N	1593	17	12	0	\N	0	0	0	0	N
4893	11	3366	V	3	1	\N	8	1	\N	N	\N	1604	40	12	0	\N	0	0	0	0	N
\.


--
-- TOC entry 7667 (class 0 OID 186442)
-- Dependencies: 454
-- Data for Name: registrocargosaprobado; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY registrocargosaprobado (id_registro_cargos_aprobado, id_registro, id_plan_personal, codigo_nomina, accion, estatus, fecha_accion, horas, id_cargo, id_dependencia, id_region) FROM stdin;
\.


--
-- TOC entry 7668 (class 0 OID 186448)
-- Dependencies: 455
-- Data for Name: registrodocente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY registrodocente (id_registro_docente, id_trabajador, id_cargo, id_dependencia, id_apertura_escolar, situacion, origen, horas_administrativas, horas_docente, total_horas, horas_restante) FROM stdin;
\.


--
-- TOC entry 7669 (class 0 OID 186455)
-- Dependencies: 456
-- Data for Name: registropersonal; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY registropersonal (id_registro_personal, id_registro, id_tipo_personal, id_sitp, tiempo_sitp) FROM stdin;
11	11	15	0	\N
21	11	14	0	\N
22	11	31	0	\N
23	11	33	0	\N
\.


--
-- TOC entry 7670 (class 0 OID 186459)
-- Dependencies: 457
-- Data for Name: registrositp; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY registrositp (id_registro_sitp, fecha_registro, fecha_movimiento, codigo_nomina, sueldo, compensacion, primas_cargo, primas_trabajador, grado, paso, cod_dependencia, cod_sede, tipo_personal, nombre_tipo_personal, id_clasificacion_personal, id_causa_movimiento, cod_causa_movimiento, cod_manual_cargo, cod_cargo, descripcion_cargo, cod_tabulador, afecta_sueldo, documento_soporte, localidad, numero_movimiento, cedula, apellidos_nombres, id_personal, id_remesa, estatus, nombre_dependencia, nombre_sede, id_organismo, cod_organismo, cod_organismo_mpd, nombre_organismo, observaciones, id_usuario, estatus_mpd, codigo_devolucion, analista_mpd, id_analista_mpd, fecha_inicio_mpd, fecha_fin_mpd, observaciones_mpd, cod_region, nombre_region, id_sitp, tiempo_sitp, fecha_punto_cuenta, punto_cuenta, anio, anterior_cod_manual_cargo, anterior_cod_cargo, anterior_descripcion_cargo, anterior_codigo_nomina, anterior_cod_sede, anterior_nombre_sede, anterior_cod_dependencia, anterior_nombre_dependencia, anterior_sueldo, anterior_compensacion, anterior_primas_cargo, anterior_primas_trabajador, anterior_grado, anterior_paso, anterior_cod_region, anterior_nombre_region, cod_concurso, fecha_ingreso, id_turno, fecha_culminacion) FROM stdin;
\.


--
-- TOC entry 7671 (class 0 OID 186488)
-- Dependencies: 458
-- Data for Name: relacionpersonal; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY relacionpersonal (id_relacion_personal, cod_relacion, desc_relacion) FROM stdin;
1	1	FIJOS/PERMANENTES
2	2	CONTRATADOS
3	3	COMISION SERVICIO
4	4	JUBILADOS
5	5	PENSIONADOS
6	6	SUPLENTES
7	7	SERVICIO EXTERIOR
8	8	SERVICIO INTERNO
9	9	ENCARGADURIAS
10	0	OTROS
\.


--
-- TOC entry 7672 (class 0 OID 186491)
-- Dependencies: 459
-- Data for Name: remesa; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY remesa (id_remesa, anio, numero, fecha_creacion, fecha_cierre, fecha_envio, estatus, observaciones, id_organismo, id_usuario, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7673 (class 0 OID 186497)
-- Dependencies: 460
-- Data for Name: rendicionmensual; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY rendicionmensual (id_rendicion_mensual, id_unidad_administradora, id_encabezado_rendicion_mensual, id_uel_especifica, id_cuenta_presupuesto, id_unidad_ejecutora, id_concepto_tipo_personal, monto, quincena, porcentaje, categoria_presupuesto, cod_concepto, cod_unidad_ejecutora, cod_presupuesto) FROM stdin;
\.


--
-- TOC entry 7674 (class 0 OID 186503)
-- Dependencies: 461
-- Data for Name: restringido; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY restringido (id_restringido, id_tipo_personal, id_personal_restringido) FROM stdin;
13	15	41
\.


--
-- TOC entry 7675 (class 0 OID 186506)
-- Dependencies: 462
-- Data for Name: resultadoevaluacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY resultadoevaluacion (id_resultado_evaluacion, id_tipo_personal, anio, cod_resultado_evaluacion, descripcion, rango_minimo, rango_maximo, porcentaje_aumento, numero_pasos, monto_aumentar, monto_unico) FROM stdin;
\.


--
-- TOC entry 7676 (class 0 OID 186516)
-- Dependencies: 463
-- Data for Name: resumenmensual; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY resumenmensual (id_resumen_mensual, id_unidad_administradora, id_encabezado_resumen_mensual, id_uel_especifica, id_cuenta_presupuesto, id_unidad_ejecutora, id_concepto_tipo_personal, monto, quincena, porcentaje, categoria_presupuesto, cod_concepto, cod_unidad_ejecutora, cod_presupuesto) FROM stdin;
\.


--
-- TOC entry 7677 (class 0 OID 186522)
-- Dependencies: 464
-- Data for Name: resumennuevoregimen; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY resumennuevoregimen (id_resumen_nuevo_regimen, id_trabajador, monto_prestaciones_acumuladas, monto_interes_acumulado, monto_anticipo_acumulado, monto_fideicomiso_acumulado, dias_mensuales, dias_adicionales) FROM stdin;
\.


--
-- TOC entry 7678 (class 0 OID 186531)
-- Dependencies: 465
-- Data for Name: resumenviejoregimen; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY resumenviejoregimen (id_resumen_viejo_regimen, id_trabajador, sueldo_transferencia, aniosservicios, monto_prestaciones, monto_interes_acumulado, monto_anticipo_acumulado, monto_transferencia, saldo_al_18061997) FROM stdin;
\.


--
-- TOC entry 7679 (class 0 OID 186541)
-- Dependencies: 466
-- Data for Name: retroactivoticket; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY retroactivoticket (id_retroactivo_ticket, anio, mes, anio_proceso, mes_proceso, numero_tickets, observaciones, id_trabajador, id_denominacion_ticket, pagado) FROM stdin;
\.


--
-- TOC entry 7680 (class 0 OID 186552)
-- Dependencies: 467
-- Data for Name: rol; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY rol (id_rol, codigo_rol, nombre) FROM stdin;
11	01	CARGA DE EXPEDIENTES
21	02	BIENESTAR SOCIAL
\.


--
-- TOC entry 7681 (class 0 OID 186555)
-- Dependencies: 468
-- Data for Name: rolopcion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY rolopcion (id_rol_opcion, id_rol, id_opcion, consultar, agregar, modificar, eliminar, ejecutar) FROM stdin;
11	11	157	S	S	S	N	N
12	11	183	S	S	S	N	N
13	11	158	S	S	S	N	N
14	11	159	S	S	S	N	N
15	11	160	S	S	S	N	N
16	11	161	S	S	S	N	N
17	11	163	S	S	S	N	N
18	11	164	S	S	S	N	N
19	11	165	S	S	S	N	N
20	11	166	S	S	S	N	N
21	11	167	S	S	S	N	N
22	11	196	S	S	S	N	N
23	11	168	S	S	S	N	N
24	11	169	S	S	S	N	N
25	11	170	S	S	S	N	N
26	11	171	S	S	S	N	N
30	11	173	S	S	S	N	N
31	11	172	S	S	S	N	N
32	11	135	S	S	S	N	N
33	11	174	S	S	S	N	N
34	11	180	S	S	S	N	N
36	11	182	S	S	S	N	N
37	11	176	S	S	S	N	N
38	11	178	S	S	S	N	N
39	11	179	S	S	S	N	N
40	11	220	S	S	S	N	N
41	11	137	S	S	S	N	N
42	11	138	S	S	S	N	N
44	11	186	S	S	S	N	N
49	11	140	S	S	S	N	N
50	11	162	S	S	S	N	N
51	11	175	S	S	S	N	N
52	11	185	S	S	S	N	N
53	11	187	S	S	S	N	N
54	11	386	S	S	S	N	N
56	11	145	S	S	S	N	N
57	11	143	S	S	S	N	N
59	11	144	S	S	S	N	N
60	11	149	S	S	S	N	N
61	11	139	S	S	S	N	N
82	11	432	S	S	S	N	N
62	11	360	S	S	S	N	N
46	11	132	S	S	S	N	N
64	11	133	S	S	S	N	N
65	11	134	S	S	S	N	N
66	11	136	S	S	S	N	N
58	11	142	S	S	S	N	N
68	11	148	S	S	S	N	N
69	11	146	S	S	S	N	N
70	11	147	S	S	S	N	N
72	11	177	S	S	S	N	N
73	11	190	S	S	S	N	N
83	11	371	S	S	S	N	N
74	11	150	S	S	S	N	N
88	11	200	S	S	S	N	N
89	11	184	S	S	S	N	N
77	11	222	S	S	S	N	N
78	11	189	S	S	S	N	N
79	11	188	S	S	S	N	N
80	11	230	S	S	S	N	N
646	21	64	S	S	S	S	S
647	21	66	S	S	S	S	S
93	21	341	S	S	S	S	S
94	21	183	N	N	N	N	N
465	21	425	S	S	S	S	N
466	21	426	S	S	S	S	N
96	21	279	S	S	N	N	S
467	21	52	S	S	S	S	N
97	21	343	S	N	N	N	N
98	21	342	S	N	N	N	N
101	21	157	S	N	N	N	N
102	21	163	N	N	N	N	N
103	21	160	S	N	N	N	N
105	21	159	S	N	N	N	N
106	21	158	S	N	N	N	N
108	21	567	S	N	N	N	N
109	21	190	S	N	N	N	N
160	21	161	S	N	N	N	N
163	21	164	S	N	N	N	N
164	21	165	S	N	N	N	N
165	21	166	S	N	N	N	N
166	21	167	S	N	N	N	N
167	21	196	S	N	N	N	N
168	21	168	S	N	N	N	N
169	21	169	S	N	N	N	N
220	21	170	S	N	N	N	N
221	21	171	S	N	N	N	N
222	21	173	S	N	N	N	N
223	21	172	S	N	N	N	N
224	21	135	S	N	N	N	N
225	21	174	S	N	N	N	N
226	21	176	S	N	N	N	N
227	21	178	S	N	N	N	N
228	21	179	S	N	N	N	N
229	21	220	S	N	N	N	N
280	21	180	S	N	N	N	N
281	21	137	S	N	N	N	N
282	21	138	S	N	N	N	N
283	21	182	S	N	N	N	N
284	21	186	S	N	N	N	N
285	21	140	S	N	N	N	N
286	21	162	S	N	N	N	N
287	21	175	S	N	N	N	N
288	21	185	S	N	N	N	N
289	21	187	S	N	N	N	N
340	21	386	S	N	N	N	N
341	21	401	S	N	N	N	N
342	21	184	S	N	N	N	N
343	21	141	S	N	N	N	N
344	21	432	S	N	N	N	N
345	21	230	S	N	N	N	N
346	21	188	S	N	N	N	N
347	21	189	S	N	N	N	N
348	21	222	S	N	N	N	N
349	21	132	S	N	N	N	N
400	21	133	S	N	N	N	N
401	21	134	S	N	N	N	N
402	21	136	S	N	N	N	N
403	21	146	S	N	N	N	N
404	21	147	S	N	N	N	N
405	21	148	S	N	N	N	N
406	21	139	S	N	N	N	N
407	21	142	S	N	N	N	N
408	21	149	S	N	N	N	N
409	21	144	S	N	N	N	N
460	21	150	S	N	N	N	N
461	21	143	S	N	N	N	N
462	21	145	S	N	N	N	N
463	21	177	S	N	N	N	N
468	21	427	S	S	S	S	N
469	21	424	S	S	S	S	N
520	21	429	S	S	S	S	N
521	21	428	S	S	S	S	N
522	21	54	S	S	S	S	N
523	21	430	S	S	S	S	N
525	21	55	S	S	S	S	S
526	21	65	S	S	N	N	N
528	21	51	S	S	S	S	S
529	21	509	S	S	S	S	S
580	21	508	S	S	S	S	S
581	21	48	S	S	S	S	S
582	21	565	S	S	S	S	S
583	21	507	S	S	S	S	S
584	21	49	S	S	S	S	S
585	21	561	S	S	S	S	S
586	21	562	S	S	S	S	S
587	21	560	S	S	S	S	S
588	21	566	S	S	S	S	S
589	21	568	S	S	S	S	S
640	21	569	S	S	S	S	S
641	21	660	S	S	S	S	S
642	21	661	S	S	S	S	S
643	21	621	S	S	S	S	S
644	21	620	S	S	S	S	S
645	21	622	S	S	S	S	S
941	11	645	S	N	N	N	N
943	21	323	S	N	N	N	N
648	21	422	S	S	S	S	S
649	21	57	S	S	S	S	S
700	21	421	S	S	S	S	S
701	21	385	S	S	S	N	N
702	21	387	S	S	S	N	N
703	21	384	S	S	S	N	N
704	21	383	S	S	S	N	N
705	21	382	S	S	S	N	N
706	21	388	S	S	S	N	N
707	21	390	S	S	S	N	N
708	21	63	S	S	S	N	N
709	21	381	S	S	S	N	N
760	21	378	S	S	S	N	N
761	21	431	S	S	S	N	N
762	21	377	S	S	S	N	N
763	21	376	S	S	S	N	N
764	21	280	S	N	N	N	N
765	21	284	S	N	N	N	N
766	21	281	S	N	N	N	N
767	21	282	S	N	N	N	N
768	21	283	S	N	N	N	N
769	21	285	S	N	N	N	N
820	21	286	S	N	N	N	N
821	21	242	S	N	N	N	N
824	21	644	S	N	N	N	N
825	21	632	S	N	N	N	N
826	21	251	S	N	N	N	N
827	21	258	S	N	N	N	N
828	21	259	S	N	N	N	N
829	21	260	S	N	N	N	N
881	21	645	S	N	N	N	N
882	21	641	S	N	N	N	N
894	21	226	S	N	N	N	N
895	21	193	S	N	N	N	N
896	21	194	S	N	N	N	N
897	21	195	S	N	N	N	N
898	21	207	S	N	N	N	N
902	21	319	S	N	N	N	N
903	21	233	S	N	N	N	S
904	21	330	S	N	N	N	S
905	21	336	S	N	N	N	S
912	11	224	S	N	N	N	N
922	11	286	S	N	N	N	N
934	21	224	S	N	N	N	N
\.


--
-- TOC entry 7682 (class 0 OID 186563)
-- Dependencies: 469
-- Data for Name: sancion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY sancion (id_sancion, acta, fecha, observaciones, id_personal, id_tipo_amonestacion, nombre_supervisor, cargo_supervisor, cargo_trabajador, nombre_dependencia, id_organismo, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7683 (class 0 OID 186570)
-- Dependencies: 470
-- Data for Name: sede; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY sede (id_sede, id_ciudad, cod_cesta, cod_sede, direccion, id_organismo, nombre, id_region, id_lugar_pago, id_turno, riesgo, regimen, codigo_patronal) FROM stdin;
12	1	\N	101-1	AV. LECUNA TORRE ESTE DE PARQUE CENTRAL, PISO 4 OFICINA DE RECURSOS HUMANOS	11	SEDE,TORRE ESTE DE PARQUE CENTRAL 	10	11	1	1	I	O60830540
\.


--
-- TOC entry 7684 (class 0 OID 186575)
-- Dependencies: 471
-- Data for Name: sedediplomatica; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY sedediplomatica (id_sede_diplomatica, id_ciudad, cod_sede, nombre, id_tipo_sede, cod_viejo, cod_biblio, direccion, telefono1, telefono2, fax, email, observacion) FROM stdin;
\.


--
-- TOC entry 7685 (class 0 OID 186581)
-- Dependencies: 472
-- Data for Name: seguridadaniversario; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY seguridadaniversario (id_seguridad_aniversario, fecha_ultimo, fecha_proceso, usuario, id_tipo_personal, id_concepto) FROM stdin;
\.


--
-- TOC entry 7686 (class 0 OID 186586)
-- Dependencies: 473
-- Data for Name: seguridadausencia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY seguridadausencia (id_seguridad_ausencia, id_grupo_ticket, anio, mes) FROM stdin;
\.


--
-- TOC entry 7687 (class 0 OID 186591)
-- Dependencies: 474
-- Data for Name: seguridaddocente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY seguridaddocente (id_seguridad_docente, mes, anio, cerrado, fecha_cierre) FROM stdin;
\.


--
-- TOC entry 7688 (class 0 OID 186595)
-- Dependencies: 475
-- Data for Name: seguridadespecial; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY seguridadespecial (id_seguridad_especial, anio, mes, fecha_inicio, fecha_fin, semana_quincena, fecha_proceso, usuario, id_nomina_especial, id_grupo_nomina) FROM stdin;
\.


--
-- TOC entry 7689 (class 0 OID 186603)
-- Dependencies: 476
-- Data for Name: seguridadguarderia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY seguridadguarderia (id_seguridad_guarderia, anio, mes, fecha_proceso, usuario, id_tipo_personal) FROM stdin;
\.


--
-- TOC entry 7690 (class 0 OID 186609)
-- Dependencies: 477
-- Data for Name: seguridadinteresadicional; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY seguridadinteresadicional (id_seguridad_interes_adicional, id_tipo_personal, anio, mes, tasa_aplicada, fecha_proceso, usuario) FROM stdin;
\.


--
-- TOC entry 7691 (class 0 OID 186614)
-- Dependencies: 478
-- Data for Name: seguridadnuevoregimen; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY seguridadnuevoregimen (id_seguridad_nuevo_regimen, id_tipo_personal, anio, mes, tasa_aplicada, fecha_proceso, usuario) FROM stdin;
\.


--
-- TOC entry 7692 (class 0 OID 186619)
-- Dependencies: 479
-- Data for Name: seguridadordinaria; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY seguridadordinaria (id_seguridad_ordinaria, anio, mes, fecha_inicio, fecha_fin, semana_quincena, fecha_proceso, usuario, id_grupo_nomina, cierre_diplomatico) FROM stdin;
\.


--
-- TOC entry 7693 (class 0 OID 186627)
-- Dependencies: 480
-- Data for Name: seguridadprestaciones; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY seguridadprestaciones (id_seguridad_prestaciones, anio, mes, fecha_proceso, usuario, id_tipo_personal) FROM stdin;
\.


--
-- TOC entry 7694 (class 0 OID 186633)
-- Dependencies: 481
-- Data for Name: seguridadpresupuesto; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY seguridadpresupuesto (id_seguridad_presupuesto, anio, mes, fecha_cierre, usuario, id_categoria_presupuesto) FROM stdin;
\.


--
-- TOC entry 7695 (class 0 OID 186639)
-- Dependencies: 482
-- Data for Name: seguridadticket; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY seguridadticket (id_seguridad_ticket, anio, mes, especial, fecha_proceso, usuario, id_grupo_ticket) FROM stdin;
\.


--
-- TOC entry 7696 (class 0 OID 186646)
-- Dependencies: 483
-- Data for Name: seguridadvacacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY seguridadvacacion (id_seguridad_vacacion, fecha_ultimo, fecha_proceso, usuario, id_tipo_personal) FROM stdin;
\.


--
-- TOC entry 7697 (class 0 OID 186650)
-- Dependencies: 484
-- Data for Name: semana; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY semana (id_semana, anio, semana_anio, semana_mes, mes, fecha_inicio, fecha_fin, id_grupo_nomina) FROM stdin;
\.


--
-- TOC entry 7698 (class 0 OID 186655)
-- Dependencies: 485
-- Data for Name: seriecargo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY seriecargo (id_serie_cargo, cod_serie_cargo, nombre, id_grupo_ocupacional, id_sitp, tiempo_sitp) FROM stdin;
11	261	SERIE DE INFORMATICA	\N	0	\N
12	262	SERIE ADELANTADA MINISTRA	\N	0	\N
21	20	AUDITOR INTERNO (E)	\N	0	\N
\.


--
-- TOC entry 7699 (class 0 OID 186660)
-- Dependencies: 486
-- Data for Name: servicioexterior; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY servicioexterior (id_servicio_exterior, id_cargo, fecha_fin, fecha_inicio, id_personal, id_sede_diplomatica, id_sitp, tiempo_sitp) FROM stdin;
\.


--
-- TOC entry 7700 (class 0 OID 186664)
-- Dependencies: 487
-- Data for Name: sindicato; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY sindicato (id_sindicato, cod_sindicato, nombre, id_concepto) FROM stdin;
\.


--
-- TOC entry 7701 (class 0 OID 186668)
-- Dependencies: 488
-- Data for Name: siniestro; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY siniestro (id_siniestro, fecha_siniestro, fecha_reporte, fecha_recepcion, fecha_cierre, estatus, monto_reclamo, monto_pagado, observaciones, id_plan_poliza, id_beneficiario, id_titular, id_personal, id_establecimiento_salud) FROM stdin;
\.


--
-- TOC entry 7702 (class 0 OID 186676)
-- Dependencies: 489
-- Data for Name: sobreviviente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY sobreviviente (id_sobreviviente, id_personal, id_familiar, fecha_pension, porcentaje_pension_original, monto_pension_original, monto_pension_actual, situacion, observacion) FROM stdin;
\.


--
-- TOC entry 7703 (class 0 OID 186682)
-- Dependencies: 490
-- Data for Name: subgrupoprofesion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY subgrupoprofesion (id_subgrupo_profesion, id_grupo_profesion, cod_subgrupo_profesion, nombre, descripcion) FROM stdin;
11	1	11	SECTOR PUBLICO Y PERSONAL DIRECTIVO DE EMPRESAS PRIVADAS	MIEMBROS DEL PODER EJECUTIVO Y DE LOS CUERPOS LEGISLATIVOS Y PERSONAL DIRECTIVO DE LA ADMINISTRACIÓN PÚBLICA, DE LAS EMPRESAS PÚBLICAS, PRIVADAS Y DE LAS ORGANIZACIONES ESPECIALIZADAS
21	2	21	ÁREA DE LAS CIENCIAS BÁSICAS	ÁREA DE LAS CIENCIAS BÁSICAS
22	2	22	ÁREA DE INGENIERÍA Y ARQUITECTURA	ÁREA DE INGENIERÍA Y ARQUITECTURA
23	2	23	AREA DE CIENCIAS DEL AGRO Y DEL MAR	AREA DE CIENCIAS DEL AGRO Y DEL MAR
24	2	24	ÁREA DE SALUD	ÁREA DE SALUD
25	2	25	CIENCIAS DE LA EDUCACIÓN	CIENCIAS DE LA EDUCACIÓN
27	2	27	ÁREA DE HUMANIDADES, LETRAS Y ARTES	ÁREA DE HUMANIDADES, LETRAS Y ARTES
28	2	28	ÁREA DE CIENCIAS Y ARTES MILITARES	ÁREA DE CIENCIAS Y ARTES MILITARES
31	3	31	AREA DE INGENIERIA Y ARQUITECTURA	ÁREA DE CIENCIAS BÁSICAS, INGENIERÍA, ARQUITECTURA, TECNOLOGÍA Y PROFESIONALES DEL NIVEL MEDIO
32	3	32	AREA DEL AGRO Y MAR	ÁREA DE AGRO Y DEL MAR Y PROFESIONALES DEL NIVEL MEDIO
33	3	33	ÁREA DE LAS CIENCIAS DE LA SALUD	ÁREA DE LAS CIENCIAS DE LA SALUD Y PROFESIONALES DEL NIVEL MEDIO
34	3	34	AREA DE LAS CIENCIAS DE LA EDUCACIÓN	AREA DE LAS CIENCIAS DE LA EDUCACIÓN Y PROFESIONALES DEL NIVEL MEDIO
35	3	35	ÁREA DE LAS CIENCIAS SOCIALES	ÁREA DE LAS CIENCIAS SOCIALES Y PROFESIONALES DEL NIVEL MEDIO
36	3	36	ÁREA DE LAS CIENCIAS DE HUMANIDADES, LETRAS, ARTES	ÁREA DE LAS CIENCIAS DE HUMANIDADES, LETRAS, ARTES Y PROFESIONALES DEL NIVEL MEDIO
41	4	41	ÁREA DE SECRETARIA Y OFICINA EN GENERAL	ÁREAS DE SECRETARIA Y OFICINA EN GENERAL
42	4	42	ÁREA DE CONTABILIDAD FINANCIERA	ÁREA DE CONTABILIDAD FINANCIERA
43	4	43	ÁREA BANCARIA	ÁREA BANCARIA
51	5	51	TRANSPORTE TERRESTRE , AÉREO, MARÍTIMO	TRANSPORTE TERRESTRE , AÉREO, MARÍTIMO, FLUVIAL, FERROVIARIO, CARGA Y DESCARGA DE MERCANCÍAS Y COMUNICACIONES
52	5	52	CUIDADOS PERSONALES, FOTOGRAFIA Y LIMPIEZA	CUIDADOS PERSONALES DE BELLEZA, MODELAJE, FOTOGRAFÍA, SERVICIOS PARTICULARES, Y DE LIMPIEZA, DIVERSIÓN, RECREACIÓN, DEPORTES, SEGURIDAD, PREVENCIÓN, ALIMENTOS, BEBIDAS, HOTELERIA, TURISMO, Y SERVICIOS ASISTENCIALES- SANITARIOS
53	5	53	COMERCIO, VENTAS, BIENES Y RAÍCES, VALORES Y SEGUROS	COMERCIO, VENTAS, BIENES Y RAÍCES, VALORES Y SEGUROS
54	5	54	ELECTRICIDAD, AGUA POTABLE Y GAS 	ELECTRICIDAD, AGUA POTABLE Y GAS 
61	6	61	AGRICULTORES, EXPLOTACIONES FORESTALES Y PESQUERAS	AGRICULTORES TRABAJADORES CALIFICADOS DE EXPLOTACIONES AGROPECUARIAS, FORESTALES Y PESQUERAS PARA LA COMERCIALIZACIÓN 
62	6	62	CRIADORES Y TRABAJADORES PECUARIOS DE CRÍA DE ANIMALES	CRIADORES Y TRABAJADORES PECUARIOS DE CRÍA DE ANIMALES PARA LA COMERCIALIZACIÓN
63	6	63	ÁREA PESQUERA, CRIADORES, PESCADORES	ÁREA PESQUERA, CRIADORES, PESCADORES,  CAZADORES  Y  TRAMPEROS
71	7	71	AREA DE INDUSTRIAS EXTRACTIVAS (MINERIA)	AREA DE LAS INDUSTRIAS EXTRACTIVAS (MINERIA)
72	7	72	AREA DE CONSTRUCCIÓN CIVIL Y METALICA	AREA DE LA CONSTRUCCIÓN CIVIL Y METALICA
73	7	73	AREA DE CARPINTERÍA Y EBANISTERÍA 	AREA DE CARPINTERÍA Y EBANISTERÍA 
74	7	74	SERVICIOS DE CONSTRUCCIÓN 	SERVICIOS DE CONSTRUCCIÓN 
75	7	75	AREA DE ELECTRICIDAD Y SOLDADURAS METALICAS	AREA DE LA ELECTRICIDAD Y SOLDADURAS DE LAS CONSTRUCCIONES METALICAS
76	7	76	AREA DE OPERADORES Y AJUSTADORES DE HERRAMIENTAS	AREA DE LOS OPERADORES Y AJUSTADORES DE HERRAMIENTAS Y OTROS OFICIOS
77	7	77	AREA DE MECANICA AUTOMOTRIZ, AVIACIÓN, NAVAL	AREA DE LA MECANICA AUTOMOTRIZ, AVIACIÓN, NAVAL Y AJUSTADORES DE MAQUINAS
78	7	78	AREA DE MECANICA E INSTRUMENTOS DE PRECISION	AREA DE LA MECANICA E INSTRUMENTOS DE PRECISION (OPTICA, JOYERIA)
79	7	79	AREA DE ARTESANIA, ARTES GRAFICAS, TEXTILES, ALIMENTOS	AREA DE LA ARTESANIA, ARTES GRAFICAS, TEXTILES, ALIMENTOS, PAPELERIA Y OTROS OFICIOS 
81	8	81	INSTALACIÓN DE MAQUINARIAS INDUSTRIALES Y AGROPECUARIAS	INSTALACIÓN DE MAQUINARIAS INDUSTRIALES Y AGROPECUARIAS
82	8	82	AREA DE PETROLEO: PERFORADORES	AREA DE PETROLEO: PERFORADORES Y SONDISTAS DE POZOS
83	8	83	AREA DE LAS MAQUINARIAS DE EXTRACCIÓN DE SAL 	AREA DE LAS MAQUINARIAS DE EXTRACCIÓN DE SAL 
84	8	84	OPERADORES MAQUINARIAS INDUSTRIALES Y AGROPECUARIAS	INSTALADORES, MONTADORES DE MAQUINARIAS INDUSTRIALES Y AGROPECUARIAS
91	9	91	VENTAS Y SERVICIOS	VENTAS Y SERVICIOS
92	9	92	PEONES AGROPECUARIOS, FORESTALES, PESQUEROS	PEONES AGROPECUARIOS, FORESTALES, PESQUEROS Y AFINES 
93	9	93	PEONES MINERIA, CONSTRUCCIÓN, MANUFACTURERA Y TRANSPORTE	PEONES DE LA MINERIA, LA CONSTRUCCIÓN, LA INDUSTRIA MANUFACTURERA Y EL TRANSPORTE
26	2	26	CIENCIAS ECONOMICAS Y SOCIALES	CIENCIAS ECONOMICAS Y SOCIALES
10	10	10	OTROS	OTROS
94	10	94	BACHILLER	BACHILLER
\.


--
-- TOC entry 7704 (class 0 OID 186685)
-- Dependencies: 491
-- Data for Name: subsistema; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY subsistema (id_subsistema, cod_subsistema, descripcion) FROM stdin;
\.


--
-- TOC entry 7705 (class 0 OID 186688)
-- Dependencies: 492
-- Data for Name: subtipocredencial; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY subtipocredencial (id_subtipo_credencial, id_tipo_credencial, cod_subtipo, nombre) FROM stdin;
\.


--
-- TOC entry 7706 (class 0 OID 186691)
-- Dependencies: 493
-- Data for Name: subtipodotacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY subtipodotacion (id_subtipo_dotacion, id_tipo_dotacion, cod_subtipo, nombre, sexo, costo, color) FROM stdin;
\.


--
-- TOC entry 7707 (class 0 OID 186697)
-- Dependencies: 494
-- Data for Name: sueldopromedio; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY sueldopromedio (id_sueldo_promedio, id_trabajador, promedio_integral, promedio_sueldo, sueldo_anual, promedio_sso, retencion_sso, retencion_spf, promedio_lph, retencion_lph, retencion_fju, promedio_fju, promedio_vacaciones, promedio_utilidad, id_sitp, tiempo_sitp, aporte_sso, aporte_spf, aporte_lph, aporte_fju, promedio_ajustes, promedio_compensacion, promedio_primasc, promedio_primast, promedio_spf, monto_variable_sso, monto_variable_lph, monto_variable_fju, id_tipo_personal, id_grupo_nomina) FROM stdin;
\.


--
-- TOC entry 7708 (class 0 OID 186726)
-- Dependencies: 495
-- Data for Name: suplencia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY suplencia (id_suplencia, fecha_inicio, fecha_fin, persona_suplencia, motivo_suplencia, cargo, dependencia, id_personal, observaciones, id_sitp, tiempo_sitp, organismo) FROM stdin;
11	2010-05-30	2010-05-31	JUDITH INDRIAGO	VACACIONES	JEFE DE DIVISION	RRHH	634		0	\N	\N
\.


--
-- TOC entry 7709 (class 0 OID 186734)
-- Dependencies: 496
-- Data for Name: tabulador; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tabulador (id_tabulador, cod_tabulador, descripcion, fecha_vigencia, indicador_paso, aprobacion_mpd, id_organismo, tipo_tabulador, nombre_moneda, vigente) FROM stdin;
21	02	TABULADOR CONTRATADOS	2008-10-07	S	N	11	4	BOLIVAR	S
20	01	TABULADOR DE ALTO NIVEL	2008-04-30	S	S	11	4	BOLIVAR	S
31	03	TABULADOR DE TRABAJADORES Y TRABAJADORAS	2009-10-07	S	N	11	2	BOLIVAR	S
32	04	TABULADOR HONORARIOS PROFESIONALES	2009-10-07	S	N	11	2	BOLIVAR	S
44	10	TABULADOR DE JUBILADOS	2010-12-15	S	N	11	4	BOLIVAR	S
\.


--
-- TOC entry 7710 (class 0 OID 186744)
-- Dependencies: 497
-- Data for Name: tarifaari; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tarifaari (id_tarifa_ari, tarifa, sustraendo, porcentaje) FROM stdin;
11	2000	75	12
12	1500	30	9
13	2500	155	16
14	3000	255	20
15	4000	375	24
16	6000	575	29
17	1000	0	6
18	30000	875	34
\.


--
-- TOC entry 7711 (class 0 OID 186750)
-- Dependencies: 498
-- Data for Name: tasabcv; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tasabcv (id_tasa_bcv, anio, mes, tasa_promedio, tasa_activa, tasa_fideicomiso) FROM stdin;
\.


--
-- TOC entry 7712 (class 0 OID 186758)
-- Dependencies: 499
-- Data for Name: tesomercantil; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tesomercantil (cuenta, cedula) FROM stdin;
\.


--
-- TOC entry 7713 (class 0 OID 186761)
-- Dependencies: 500
-- Data for Name: tipoacreencia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tipoacreencia (id_tipo_acreencia, cod_tipo_acreencia, descripcion) FROM stdin;
\.


--
-- TOC entry 7714 (class 0 OID 186764)
-- Dependencies: 501
-- Data for Name: tipoamonestacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tipoamonestacion (id_tipo_amonestacion, cod_tipo_amonestacion, descripcion) FROM stdin;
3	FAL	\N
4	OTR	\N
1	ESC	amonestacion 1
2	VER	amonestacion 2
\.


--
-- TOC entry 7715 (class 0 OID 186767)
-- Dependencies: 502
-- Data for Name: tipoausencia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tipoausencia (id_tipo_ausencia, cod_tipo_ausencia, clase, descripcion) FROM stdin;
11	01	J	AUSENCIA JUSTIFICADA
12	02	I	AUSENCIA INJUSTIFICADA
\.


--
-- TOC entry 7716 (class 0 OID 186772)
-- Dependencies: 503
-- Data for Name: tipocaracteristica; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tipocaracteristica (id_tipo_caracteristica, cod_tipo_caracteristica, nombre) FROM stdin;
11	01	ESPOSO (A)
13	02	CONCUBINO (A)
15	01	SOLTERO (A)
16	02	CASADO(A)
17	03	DIVORCIADO(A)
18	04	VIUDO(A)
19	05	HIJO(A)
20	05	HIJO(A) ESPECIAL
\.


--
-- TOC entry 7717 (class 0 OID 186775)
-- Dependencies: 504
-- Data for Name: tipocargo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tipocargo (tipo_cargo, descripcion) FROM stdin;
1	ALTO NIVEL
2	ADMINISTRATIVO
3	TECNICO-PROFESIONAL
4	NO CLASIFICADO
5	OBRERO
6	DOCENTE
\.


--
-- TOC entry 7718 (class 0 OID 186778)
-- Dependencies: 505
-- Data for Name: tipocontrato; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tipocontrato (id_tipo_contrato, cod_tipo_contrato, descripcion) FROM stdin;
11	01	HONORARIOS PROFESIONALES
12	02	TIEMPO DETERMINADO
13	03	TIEMPO INDETERMINADO
\.


--
-- TOC entry 7719 (class 0 OID 186781)
-- Dependencies: 506
-- Data for Name: tipocredencial; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tipocredencial (id_tipo_credencial, cod_tipo_credencial, nombre) FROM stdin;
\.


--
-- TOC entry 7720 (class 0 OID 186784)
-- Dependencies: 507
-- Data for Name: tipocurso; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tipocurso (id_tipo_curso, cod_tipo_curso, descripcion) FROM stdin;
1	1	CURSO
2	2	CONGRESO
3	3	TALLER
4	4	SEMINARIO
5	5	CONFERENCIA
6	6	FORO
\.


--
-- TOC entry 7721 (class 0 OID 186787)
-- Dependencies: 508
-- Data for Name: tipodependencia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tipodependencia (id_tipo_dependencia, cod_tipo_dependencia, nombre) FROM stdin;
70	01	DESPACHO
71	02	DIRECCION GENERAL
72	03	DIRECCION DE LINEA
73	04	DIRECCION ESTADAL
81	05	OFICINA REGIONAL
95	06	COORDINACIÓN
\.


--
-- TOC entry 7722 (class 0 OID 186790)
-- Dependencies: 509
-- Data for Name: tipodotacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tipodotacion (id_tipo_dotacion, cod_tipo_dotacion, nombre) FROM stdin;
\.


--
-- TOC entry 7723 (class 0 OID 186793)
-- Dependencies: 510
-- Data for Name: tipoentidad; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tipoentidad (id_tipo_entidad, cod_tipo_entidad, descripcion) FROM stdin;
12	01	TIPO 1
\.


--
-- TOC entry 7724 (class 0 OID 186796)
-- Dependencies: 511
-- Data for Name: tipohabilidad; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tipohabilidad (id_tipo_habilidad, cod_tipo_habilidad, detalle, descripcion) FROM stdin;
\.


--
-- TOC entry 7725 (class 0 OID 186802)
-- Dependencies: 512
-- Data for Name: tipoidioma; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tipoidioma (id_tipo_idioma, cod_tipo_idioma, descripcion) FROM stdin;
1	01	INGLES
2	02	FRANCES
3	03	ITALIANO
4	04	ALEMAN
\.


--
-- TOC entry 7726 (class 0 OID 186805)
-- Dependencies: 513
-- Data for Name: tipomanual; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tipomanual (id_tipo_manual, cod_tipo_manual, descripcion) FROM stdin;
\.


--
-- TOC entry 7727 (class 0 OID 186808)
-- Dependencies: 514
-- Data for Name: tipootraactividad; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tipootraactividad (id_tipo_otra_actividad, cod_otra_actividad, descripcion, tipo) FROM stdin;
1	001	TEATRO	C
2	002	CORAL	C
3	003	DANZA	C
4	004	SOFTBOL	D
5	005	FUTBOL	D
6	006	BOWLING	D
\.


--
-- TOC entry 7728 (class 0 OID 186813)
-- Dependencies: 515
-- Data for Name: tipopersonal; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tipopersonal (id_tipo_personal, cod_tipo_personal, nombre, multiple_registro, aprobacion_mpd, maneja_rac, calcula_prestaciones, formula_integral, formula_semanal, id_organismo, id_grupo_organismo, id_grupo_nomina, id_clasificacion_personal, id_turno, cotiza_sso, cotiza_spf, cotiza_lph, cotiza_fju, disfruta_vacaciones, asignan_dotaciones, aumento_evaluacion, deuda_regimen_derogado, id_banco_nomina, forma_pago_nomina, id_banco_lph, id_banco_fid, beneficio_cesta_ticket, id_grupo_ticket) FROM stdin;
14	02	CONTRATADOS	N	N	S	S	0	0	11	11	12	2	1	S	S	S	S	S	N	N	N	8	2	332	8	S	11
15	01	ALTO NIVEL	N	N	S	S	0	0	11	11	11	1	1	S	S	S	S	S	N	N	N	8	2	332	8	S	11
22	04	HONORARIOS PROFESIONALES	N	N	N	N	0	0	11	11	20	2	1	N	N	N	N	N	N	N	N	8	2	\N	\N	N	\N
31	03	TRABAJADORES Y TRABAJADORAS	N	N	S	S	0	0	11	11	31	12	1	S	S	S	S	S	S	S	N	8	2	332	8	S	11
33	06	COMISIÓN DE SERVICIO	N	N	S	S	0	0	11	11	33	3	1	S	S	S	S	S	N	N	N	8	1	332	8	S	11
41	07	JUBILADOS	N	N	N	S	0	0	11	11	41	4	1	N	N	N	N	N	N	N	N	8	1	\N	\N	N	\N
\.


--
-- TOC entry 7729 (class 0 OID 186838)
-- Dependencies: 516
-- Data for Name: tiporeconocimiento; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tiporeconocimiento (id_tipo_reconocimiento, cod_tipo_reconocimiento, descripcion) FROM stdin;
1	DIP	DIPLOMA
3	BOT	BOTON
2	CON	CONDECORACION
4	OTR	OTRO
\.


--
-- TOC entry 7730 (class 0 OID 186841)
-- Dependencies: 517
-- Data for Name: tiposede; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tiposede (id_tipo_sede, cod_tipo_sede, descripcion) FROM stdin;
\.


--
-- TOC entry 7731 (class 0 OID 186844)
-- Dependencies: 518
-- Data for Name: tiposiniestro; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tiposiniestro (id_tipo_siniestro, cod_tipo_siniestro, nombre) FROM stdin;
\.


--
-- TOC entry 7732 (class 0 OID 186847)
-- Dependencies: 519
-- Data for Name: titular; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY titular (id_titular, id_personal, id_tipo_personal, id_plan_poliza, id_primas_plan, monto_prima, monto_patron, monto_trabajador, cobertura, cobertura_extra, prima_extra, fecha_inclusion, fecha_exclusion, estatus) FROM stdin;
\.


--
-- TOC entry 7733 (class 0 OID 186857)
-- Dependencies: 520
-- Data for Name: titulo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY titulo (id_titulo, cod_titulo, id_nivel_educativo, id_grupo_profesion, descripcion) FROM stdin;
1	211131	6	2	LIC. EN QUIMICA
2	211132	6	2	LIC. EN  FISICA
3	211133	6	2	LIC. EN MATEMATICA
4	211134	6	2	LIC. EN BIOLOGIA
5	213231	6	2	PROGRAMADOR DE INFORMATICA
6	221131	6	2	INGENIERO EN MATERIALES
7	221132	6	2	INGENIERO METALÚRGICO
8	221133	6	2	INGENIERO EN MINAS
9	221134	6	2	INGENIERO GEOLOGO
10	221136	6	2	INGENIERO GEODESTA
11	221137	6	2	INGENIERO GEOFISICO
12	221138	6	2	INGENIERO PETROLERO
13	221139	6	2	INGENIERO HIDROMETEREOLOGICO
14	221231	6	2	INGENIERO QUIMICO
15	221232	6	2	LIC. EN GEOQUIMICO
16	221233	6	2	INGENIERO EN PRODUCCIÓN
17	221234	6	2	INGENIERO INDUSTRIAL
18	221235	6	2	INGENIERO QUÍMICO PETROLEO Y GAS NATURAL
19	221236	6	2	INGENIERO QUÍMICO ESPECIALIZADO
20	221331	6	2	INGENIERO CIVIL
21	221332	6	2	INGENIERO DE ADMINISTRACIÓN DE OBRAS
22	221333	6	2	INGENIERO DE MANTENIMIENTO DE OBRAS
23	221334	6	2	INGENIERO EN DISEÑO INDUSTRIAL
24	221335	6	2	LIC. EN DISEÑO INDUSTRIAL
25	221336	6	2	LIC. EN DISEÑO GRÁFICO 
26	221337	6	2	ARQUITECTO
27	221338	6	2	URBANISTA
28	221431	6	2	INGENIERO EN SISTEMAS
29	221432	6	2	INGENIERO EN INFORMATICA
30	221433	6	2	INGENIERO EN COMPUTACIÓN
31	221434	6	2	LIC. EN COMPUTACIÓN
32	221435	6	2	LIC. EN INFORMÁTICA
33	221531	6	2	INGENIERO MECÁNICO
34	221532	6	2	INGENIERO EN MANTENIMIENTO INDUSTRIAL
35	221533	6	2	INGENIERO EN MANTENIMIENTO MECANICO
36	221534	6	2	INGENIERO MECANICO ESPECIALIZADO
37	221631	6	2	INGENIERO ELECTRICISTA
38	221632	6	2	INGENIERO ELECTRONICO
39	221633	6	2	INGENIERO ELECTRÓNICO EN COMPUTACIÓN
40	221634	6	2	INGENIERO EN TELECOMUNICACIONES
41	221635	6	2	INGENIERO ELECTRICISTA ESPECIALIZADO
42	221731	6	2	INGENIERO NAVAL
43	221732	6	2	INGENIERO AERONAUTICO
44	221733	6	2	LIC. EN CIENCIAS NAUTICAS
45	221734	6	2	INGENIERO DE VUELO
46	231131	6	2	INGENIERO AGRONOMO
47	231132	6	2	INGENIERO AGRICOLA 
48	231133	6	2	INGENIERO AGRÓNOMO EN PRODUCCIÓN ANIMAL
49	231134	6	2	INGENIERO EN PRODUCCIÓN AGROPECUARIA
50	231135	6	2	INGENIERO  AGROINDUSTRIAL
51	231136	6	2	INGENIERO AGRÓNOMO EN PRODUCCIÓN VEGETAL
52	231231	6	2	INGENIERO FORESTAL
53	231232	6	2	INGENIERO EN INDUSTRIA FORESTAL
54	231233	6	2	INGENIERO EN RECURSOS NATURALES RENOVABLES O  AMBIENTE
55	231234	6	2	LIC. EN ESTUDIOS AMBIENTALES
56	231331	6	2	INGENIERO DE ALIMENTOS 
57	231332	6	2	LIC. EN TECNOLOGÍA DE ALIMENTOS
58	231333	6	2	LIC. EN CIENCIAS Y CULTURA DE LA ALIMENTACIÓN
59	231431	6	2	LIC. EN GERENCIA AGROINDUSTRIAL
60	231432	6	2	LIC. EN ADMINISTRACIÓN DE EMPRESAS  AGROPECUARIAS O  ADMON  DE FINCAS
61	231433	6	2	LIC. EN ECONOMIA AGRÍCOLA O ECONOMISTA AGRICOLA
62	231434	6	2	LIC. EN ECONOMIA DE LA INDUSTRIA FORESTAL
63	231531	6	2	INGENIERO PESQUERO
64	231532	6	2	LIC. EN BIOLOGÍA MARINA
65	231533	6	2	LIC. EN ACUICULTURA
66	231534	6	2	LIC. EN BIOLOGÍA PESQUERA
67	231631	6	2	MEDICO VETERINARIO
68	231632	6	2	ZOOTECNISTA
69	241131	6	2	MEDICO CIRUJANO
70	241132	6	2	LIC. EN ENFERMERIA
71	241133	6	2	LIC. EN BIOANALISIS
72	241134	6	2	LIC. EN NUTRICIÓN Y DIETETICA
73	241135	6	2	MEDICO (ESPECIALISTA)
74	241231	6	2	FARMACEUTICO
75	241232	6	2	ODONTOLOGO
76	251131	6	2	LIC. EN EDUCACIÓN
77	251132	6	2	PROFESOR EN EDUCACIÓN
78	251133	6	2	LIC. EN CIENCIAS PEDAGÓGICAS O PROFESOR EN PEDAGOGÍA SOCIAL  
79	251134	6	2	LIC.  EDUCACIÓN BÁSICA INTEGRAL EDUCACIÓN INTEGRAL O PROFESOR EDUCACIÓN INTEGRAL
80	251135	6	2	LIC. EN EDUCACIÓN PRESCOLAR O PROFESOR  EDUCACIÓN  PRESCOLAR
81	251136	6	2	LIC. EN EDUCACIÓN ESPECIAL
82	251137	6	2	PROFESOR EN EDUCACIÓN ESPECIAL
83	251138	6	2	LIC. EN EDUCACIÓN CIENCIAS Y TECNOLOGÍA DE LA EDUCACIÓN
84	251139	6	2	LIC. EN EDUCACIÓN MENCIÓN ORIENTACIÓN
85	251231	6	2	LIC. EN EDUCACIÓN MENCIÓN CIENCIAS  BIOLÓGICAS O  BIOLOGÍA PROFESOR
86	251232	6	2	LIC. EN EDUCACIÓN MENCIÓN BIOLOGÍA Y QUIMICA
87	251233	6	2	LIC. EN EDUCACIÓN MENCIÓN QUÍMICA O PROFESOR  EN QUIMICA
88	251234	6	2	LIC. EN EDUCACIÓN MENCIÓN CIENCIAS SOCIALES
89	251235	6	2	LIC. EN EDUCACIÓN MENCIÓN HISTORIA O  GEOG E HISTORIA O  PROFESOR GEOGRAFIA E HISTORIA
90	251236	6	2	LIC. EN EDUCACIÓN MENCIÓN GEOGRAFIA Y CIENCIAS DE    LA TIERRA
91	251237	6	2	LIC. EN EDUCACIÓN MENCIÓN FILOSOFIA
92	251238	6	2	LIC. EN EDUCACIÓN MENCIÓN TEOLOGIA O CIENCIA DE  LA RELIGIÓN
93	251331	6	2	LIC. EN EDUCACIÓN MENCIÓN CASTELLANO Y LITERATURA  O LENGUA O LITERATURA
94	251332	6	2	PROFESOR EN LENGUA Y LITERATURA Y LATIN O PROFESOR DE LENGUA Y LITERATURA
95	251333	6	2	LIC. EN EDUCACIÓN MENCIÓN LENGUAS MODERNAS
96	251334	6	2	LIC. EN EDUCACIÓN MENCIÓN INGLES O LENGUAS EXTRANJERAS                  
97	251335	6	2	PROFESOR EN INGLÉS Y FRANCES
98	251336	6	2	PROFESOR EN EDUCACIÓN INTERCULTURAL BILINGÜE
99	251337	6	2	LIC. EN IDIOMAS MODERNOS
100	251431	6	2	LIC. EN EDUCACIÓN MENCIÓN MATEMÁTICA O  PROFESOR EN  MATEMATICA
101	251432	6	2	LIC. EN EDUCACIÓN MENCIÓN INFORMATICA O MATEMATICA O COMPUTACION
102	251433	6	2	PROFESOR EN INFORMATICA
103	251434	6	2	LIC. EN EDUCACIÓN MENCIÓN FÍSICA Y  MATEMATICA
104	251435	6	2	LIC. EN EDUCACIÓN MENCIÓN FÍSICA O PROFESOR EN FISICA
105	251436	6	2	LIC. EN EDUCACIÓN MENCIÓN FISICO-NATURALES
106	251437	6	2	LIC. EN EDUCACIÓN MENCIÓN INDUSTRIAL O PROFESOR DE MECANICA INDUSTRIAL
107	251438	6	2	PROFESOR EN ELECTRONICA INDUSTRIAL
108	251439	6	2	LIC. EN EDUCACIÓN MENCIÓN INDUSTRIAL O PROFESOR DE  ELECTRICIDAD INDUSTRIAL
109	251441	6	2	LIC. EN EDUCACIÓN MENCIÓN TÉCNICA MERCANTIL O PROFESOR EN EDUCACIÓN COMERCIAL
110	251531	6	2	LIC. EN EDUCACIÓN FÍSICA O PROFESOR DE EDUCACIÓN FÍSICA
111	251532	6	2	LIC. EN EDUCACIÓN MENCIÓN CULTURA, FISICA Y RECREACION
112	251533	6	2	LIC. EN EDUCACIÓN MENCIÓN CIENCIA DEL DEPORTE
113	251534	6	2	PROFESOR EN ARTES PLASTICAS Y MUSEOLOGIA
114	251535	6	2	PROFESOR DE ARTES ESCENICAS
115	251536	6	2	PROFESOR DE EDUCACIÓN MUSICAL
116	251537	6	2	PROFESOR DE ARTES INDUSTRIALES
117	251538	6	2	LIC. EN EDUCACIÓN MENCIÓN EDUCACIÓN PARA EL TRABAJO
118	251539	6	2	PROFESOR DE DIBUJO TÉCNICO
119	251631	6	2	LIC. EN EDUCACION  AGROPECUARIA
120	251632	6	2	PROFESOR EN EDUCACIÓN AGROPEQUARIA
121	251633	6	2	PROFESOR EN EDUCACIÓN RURAL
122	261131	6	2	SOCIOLÓGO O LIC. EN SOCIOLOGÍA O LIC  SOCIOLOGÍA  DEL  DESARROLLO
123	261132	6	2	ANTROPOLOGO
124	261133	6	2	LIC. EN GEOGRAFIA
125	261134	6	2	LIC. EN PLANIFICACIÓN
126	261231	6	2	PSICOLOGO
127	261232	6	2	LIC. EN TRABAJO SOCIAL
128	261233	6	2	LIC. EN RELACIONES INDUSTRIALES
129	261234	6	2	LIC. EN GERENCIA DE LOS RECURSOS HUMANOS
130	261235	6	2	PSICOLOGO ESPECIALISTA      
131	261331	6	2	ECONOMISTA
132	261332	6	2	ESTADISTICO
133	261333	6	2	LIC. EN CIENCIAS FISCALES
134	261334	6	2	LIC. EN ADMINISTRACIÓN DE EMPRESAS DE RIESGOS DE SEGUROS
135	261335	6	2	LIC. EN CIENCIAS ACTUARIALES
136	261336	6	2	LIC. EN COMERCIO EXTERNO O INTERNACIONAL
137	261337	6	2	LIC. EN ECONOMIA EMPRESARIAL
138	261338	6	2	ECONOMISTA ESPECIALIZADO
139	261431	6	2	ABOGADO
140	261432	6	2	CRIMINÓLOGO  O LIC. EN CRIMINALISTICA
141	261433	6	2	LIC. EN DERECHO CANONICO    
142	261434	6	2	LIC. EN CIENCIAS POLICIALES
143	261531	6	2	POLITOLOGO
144	261532	6	2	LIC. EN ESTUDIOS POLÍTICOS Y ADMINISTRATIVOS O LIC. EN CIENCIAS POLITICAS
145	261533	6	2	LIC. EN ESTUDIO INTERNACIONALES
146	261631	6	2	CONTADOR PÚBLICO  O LIC. EN CONTADURÍA PÚBLICA
147	261632	6	2	LIC. EN ADMINISTRACIÓN       
148	261633	6	2	LIC. EN ADMINISTRACIÓN COMERCIAL
149	261634	6	2	LIC. EN ADMINISTRACIÓN DE EMPRESAS
150	261635	6	2	LIC. EN CIENCIAS ADMINISTRATIVAS Y GERENCIALES
151	261636	6	2	LIC. EN ADMINISTRACIÓN INDUSTRIAL O GERENCIA INDUSTRIAL
152	261637	6	2	LIC. EN ADMINISTRACIÓN MENCION MATERIALES Y FINANCIEROS 
153	261731	6	2	LIC. EN HOTELERIA
154	261732	6	2	LIC. EN TURISMO
155	261733	6	2	LIC. EN EMPRESAS TURISTICAS
156	261831	6	2	LIC. EN COMUNICACIÓN
157	261832	6	2	LIC. EN PÚBLICIDAD
158	261833	6	2	LIC. ENEMPRESA DE DISEÑO
159	261834	6	2	LIC. EN MERCADEO O EN ADMINISTRACIÓN MENCIÓN MERCADEO
160	271131	6	2	LIC. EN FILOSOFIA
161	271132	6	2	LIC. EN TEOLOGIA
162	271133	6	2	LIC. EN LETRAS O LETRAS HISPANICAS
163	271134	6	2	LIC. EN LETRAS MENCIÓN LENGUA Y LITERATURA HISPANOAMERICANA Y VENEZOLANA
164	271135	6	2	LIC. EN LETRAS MENCIÓN LENGUA Y LITERATURA  MODERNA
165	271136	6	2	LIC. EN LETRAS EN LENGUAS Y LITERATURA CLÁSICA
166	271137	6	2	LIC. EN HISTORIA ECLESIATICA
167	271138	6	2	LIC. EN HISTORIA
168	271231	6	2	LIC. EN LETRAS HISTORIA DEL ARTE
169	271232	6	2	LIC. EN ARTES
170	271233	6	2	LIC. EN ARTES PLASTICAS Y MUSEOLOGIA
171	271234	6	2	LIC. EN ARTES VISUALES
172	271235	6	2	LIC. EN MUSICA MENCIÓN MUSICOLOGIA
173	271236	6	2	LIC. EN TEATRO
174	271237	6	2	LIC. EN DANZA
175	271238	6	2	LIC. EN MEDIOS AUDIO-VISUALES
176	271239	6	2	LIC. EN BIBLIOTECOLOGÍA Y ARCHIVOLOGIA
177	281131	6	2	OFICIAL EFECTIVO DEL EJERCITO Y LIC. EN CIENCIAS  Y ARTES MILITARES OPCIÓN TERRESTRE
178	281132	6	2	SUBTENIENTE DE LA REPÚBLICA Y  LIC CIENCIAS Y ARTES  MILITARES OPCIÓN GUARDIA NACIONAL
179	281133	6	2	OFICIAL DE LA ARMADA Y LIC. EN CIENCIAS  NAVALES
180	281134	6	2	SUBTENIENTE DE LA REPÚBLICA Y LIC  CIENCIAS Y ARTES MILITARES OPCIÓN: AERONAUTICA
181	311111	5	3	TEC. SUPERIOR UNIVERSITARIO EN QUIMICA
182	311112	5	3	TEC. SUPERIOR UNIVERSITARIO EN PROCESO QUIMICO
183	311114	5	3	TEC. SUPERIOR UNIVERSITARIO-TECNOLOGO EN PROCESOS INDUSTRIALES
184	311115	5	3	TEC. SUPERIOR UNIVERSITARIO EN CONTROL DE CALIDAD
185	311116	5	3	TEC. SUPERIOR UNIVERSITARIO EN PRODUCCCION INDUSTRIAL
186	311117	5	3	TEC. SUPERIOR UNIVERSITARIO EN HIGIENE Y  SEGURIDAD INDUSTRIAL
399	351713	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN
187	311118	5	3	TEC. SUPERIOR UNIVERSITARIO EN MANEJO DE EMERGENCIAS Y ACCION CONTRA DESASTRES
188	311119	5	3	TEC. SUPERIOR UNIVERSITARIO EN TECNOLOGIA DE INCENDIOS O TEC.  BOMBERIL
189	311120	5	3	TEC. SUPERIOR EN TECNOLOGIA TEXTIL
190	311133	5	3	TEC. SUPERIOR UNIVERSITARIO EN QUÍMICA INDUSTRIAL
191	311191	4	3	TEC. MEDIO EN QUIMICA
192	311192	4	3	TEC. MEDIO EN QUIMICA INDUSTRIAL
193	311193	4	3	TEC. MEDIO EN ORGANIZACIÓN ADMINISTRACION DE LA SEGUIRIDAD
194	311194	4	3	TEC. MEDIO EN RESCATE Y SALVAMIENTO
196	311195	4	3	TEC. MEDIO EN ELECTRONICA
195	311199	4	3	TEC. MEDIO BOMBERO
197	311196	4	3	TEC. MEDIO EN COMBATE DE INCENDIOS
198	311197	4	3	TEC. MEDIO EN ASEGURAMIENTO DE LA CALIDAD
199	311198	4	3	TEC. MEDIO EN PRODUCCION
200	311211	5	3	TEC. SUPERIOR UNIVERSITARIO EN CONTRUCION CIVIL
201	311212	5	3	TEC. SUPERIOR UNIVERSITARIO EN TOPOGRAFÍA
202	311213	5	3	TEC. SUPERIOR UNIVERSITARIO EN DISEÑO DE OBRAS  CIVILES
203	311214	5	3	TEC. SUPERIOR UNIVERSITARIO EN DISEÑO AMBIENTAL
204	311215	5	3	TEC. SUPERIOR UNIVERSITARIO EN DISEÑO INDUSTRIAL
205	311291	4	3	TEC. MEDIO EN CONSTRUCCION CIVIL
206	311292	4	3	TEC. MEDIO EN TOPOGRAFIA
207	311311	5	3	TEC. SUPERIOR UNIVERSITARIO EN ELECTRICIDAD
208	311312	5	3	TEC. SUPERIOR UNIVERSITARIO EN ELECTROTECNIA  
209	311313	5	3	TEC. SUPERIOR UNIVERSITARIO  EN ELECTRONICA
210	311314	5	3	TEC. SUPERIOR UNIVERSITARIO EN MANTENIMIENTO EQUIPOS ELECTRICOS
211	311315	5	3	TEC. SUPERIOR UNIVERSITARIO EN MANTENIMIENTO INDUSTRIAL
212	311316	5	3	TEC. SUPERIOR UNIVERSITARIO EN INSTRUMENTACIÓN Y CONTROL
213	311317	5	3	TEC. SUPERIOR UNIVERSITARIO EN CONTROL DE PROCESOS DE TELECOMUNICACIONES
214	311318	5	3	TEC. SUPERIOR UNIVERSITARIO EN SERVICIOS  INDUSTRIALES
215	311319	5	3	TEC. SUPERIOR UNIVERSITARIO EN CONTROLES AUTOMATICOS
216	311391	4	3	TEC. MEDIO EN ELECTRICIDAD
217	311392	4	3	TEC. MEDIO EN TRANSMISION
218	311393	4	3	TEC. MEDIO EN COMPUTACION
219	311394	4	3	TEC. MEDIO EN INSTRUMENTACION
220	311396	4	3	TEC. MEDIO EN ACUMULACIONES ELECTRICOS
221	311397	4	3	TEC. MEDIO EN INSTRUMENTACION    
222	311398	4	3	TEC. MEDIO EN COMUNICACIONES Y ELECTRÓNICA
223	311411	5	3	TEC. SUPERIOR UNIVERSITARIO EN COMPUTACION O  TECNOLOGO EN COMPUTACION  
224	311412	5	3	TEC. SUPERIOR UNIVERSITARIO EN ANALISIS  Y DISEÑO DE SISTEMAS O ANALISTA DE SISTEMAS
225	311413	5	3	TEC. SUPERIOR UNIVERSITARIO EN INFORMATICA
226	311414	5	3	TEC. SUPERIOR UNIVERSITARIO EN SISTEMA DE INFORMACION
227	311511	5	3	TEC. SUPERIOR UNIVERSITARIO EN MATENIMIENTO  MECANICO
228	311512	5	3	TEC. SUPERIOR UNIVERSITARIO EN TECNOLOGIA  AUTOMOTRIZ O  MECANICA AUTOMOTRIZ
229	311513	5	3	TEC. SUPERIOR UNIVERSITARIO EN MECANICA
230	311514	5	3	TEC. SUPERIOR UNIVERSITARIO EN MECANICA TERMICA
231	311515	5	3	TEC. SUPERIOR UNIVERSITARIO EN TECNOLOGÍA FERROVIARIA
232	311591	4	3	TEC. MEDIO EN MECANICA
233	311592	4	3	TEC. MEDIO EN METALMECANICA
234	311593	4	3	TEC. MEDIO EN CP CONTROL DE CALIDAD  METALMECANICA
235	311594	4	3	TEC. MEDIO EN MECANICA DE MANTENIMIENTO
236	311611	5	3	TEC. SUPERIOR UNIVERSITARIO EN GEOLOGIA Y MINAS
237	311612	5	3	TEC. SUPERIOR  UNIVERSITARIO EN POLIMEROS
238	311613	5	3	TEC. SUPERIOR UNIVERSITARIO EN METALURGICA Y EN CIENCIA DE LOS METALES
239	311614	5	3	TEC. SUPERIOR UNIVERSITARIO EN METALURGIA  Y SIDERURGIA
240	311615	5	3	TEC. SUPERIOR UNIVERSITARIO EN GEOLOGIA
241	311616	5	3	TEC. SUPERIOR UNIVERSITARIO EN MINERIA O EN  TECNOLOGIA MINERA
242	311617	5	3	TEC. SUPERIOR UNIVERSITARIO EN PETROLEO O EN PROCESOS DE REFINACION DE PETROLEO
243	311618	5	3	TEC. SUPERIOR UNIVERSITARIO EN TECNOLOGIA DEL   GAS
244	311619	5	3	TEC. SUPERIOR UNIVERSITARIO EN HIDROCARBUROS
245	311691	4	3	TEC. MEDIO EN METALURGIA
246	311692	4	3	TEC. MEDIO EN MECANICA DE MANTENIMIENTO DE  PETROLEO
247	311693	4	3	TEC. MEDIO EN PROCESOS MINEROS
248	311694	4	3	TEC. MEDIO EN  MANUFACTURA TERMOPLASTICO Y METALES
249	311711	5	3	TEC. SUPERIOR UNIVERSITARIO EN DISEÑO GRAFICO  PUBLICITARIO O EN DISEÑO GRAFICO
250	311712	5	3	TEC. SUPERIOR UNIVERSITARIO EN DISEÑO TEXTIL
251	311713	5	3	TEC. SUPERIOR UNIVERSITARIO EN DISEÑO DE JOYAS Y FANTASIA
252	311714	5	3	TEC. SUPERIOR UNIVERSITARIO EN DISEÑO INTERIOR
253	311791	4	3	TEC. MEDIO EN TEJEDURIA
254	311792	4	3	TEC. MEDIO EN HILANDERIA
255	311811	5	3	TEC. SUPERIOR UNIVERSITARIO EN MANTENIMIENTO AERONAUTICO
256	311812	5	3	TEC. SUPERIOR UNIVERSITARIO EN TECNOLOGIA NAVAL
257	311813	5	3	TEC. SUPERIOR UNIVERSITARIO EN MECANICA NAVAL
258	311891	4	3	TEC. MEDIO EN CONSTRUCCION NAVAL
259	311892	4	3	TEC. MEDIO EN MANTENIMIENTO AERONAUTICO
260	311991	4	3	TEC. MEDIO EN ARTES MENCION: AUDIO-VISUAL
261	311992	4	3	TEC. MEDIO EN ARTES MENCION: ARTES PLASTICAS
262	311993	4	3	TEC. MEDIO EN PRODUCCION DE PULPA DE PAPEL
263	311994	4	3	TEC. MEDIO EN ARTES MENCION: ARTE PURO
264	311995	4	3	TEC. MEDIO EN ARTES MENCION: ARTE DEL FUEGO
265	321111	5	3	TEC. SUPERIOR UNIVERSITARIO EN AGROINDUSTRIAL
266	321112	5	3	TEC. SUPERIOR UNIVERSITARIO EN TECNOLOGÍA  AGROPECUARIA O EN PRODUCCION AGROPECUARIA
267	321113	5	3	TEC. SUPERIOR UNIVERSITARIO EN TECNOLOGIA AGRÍCOLA O EN AGROTECNICA
268	321114	5	3	TEC. SUPERIOR UNIVERSITARIO EN MANTENIMIENTO DE  MAQUI NARIA AGRICOLA
269	321115	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION MERCADEO AGRICOLA
396	351692	4	3	TEC. MEDIO EN MAQUINAS Y HERRAMIENTAS
271	321191	4	3	TEC. MEDIO EN PRODUCCION AGRICOLA
272	321211	5	3	TEC. SUPERIOR UNIVERSITARIO EN TECNOLOGÍA DE ALIMENTOS
273	321212	5	3	TEC. SUPERIOR UNIVERSITARIO EN PROCESAMIENTO Y CONTROL DE CALIDAD DE LOS ALIMENTOS
274	321213	5	3	TEC. SUPERIOR UNIVERSITARIO EN TECNOLOGÍA FORESTAL
275	321214	5	3	TEC. SUPERIOR UNIVERSITARIO EN RECURSOS NATURALES RENOVABLES
276	321217	5	3	TEC. SUPERIOR UNIVERSITARIO EN PESCA CONTINENTAL
277	321215	5	3	TEC. SUPERIOR UNIVERSITARIO EN TECNOLOGÍA AGROFORESTAL
278	321216	5	3	TEC. SUPERIOR UNIVERSITARIO EN TECNOLOGIA AMBIENTAL
279	321291	4	3	TEC. MEDIO EN TECNICAS DE ALIMENTOS
280	321292	4	3	TEC. MEDIO FORESTAL
281	321293	4	3	TEC. MEDIO AGROECOLOGIA
282	321294	4	3	TEC. MEDIO EN TECNOLOGIA DE ALIMENTO
283	321295	4	3	TEC. MEDIO EN PRODUCCION DE BEBIDAS
284	321296	4	3	TEC. MEDIO EN MOLINERIA E INDUSTRIAS CEREALISTA
285	321311	5	3	TEC. SUPERIOR UNIVERSITARIO EN TECNOLOGÍA PECUARIA
286	321312	5	3	TEC. SUPERIOR UNIVERSITARIO EN ACUICULTURA Y OCEANOGRAFIA
287	321313	5	3	TEC. SUPERIOR UNIVERSITARIO EN TECNOLOGÍA PESQUERA
288	321315	5	3	TEC. SUPERIOR UNIVERSITARIO EN NAVEGACION Y PESCA
289	321316	5	3	TEC. SUPERIOR UNIVERSITARIO EN ASISTENTE VETERINARIO
290	321391	4	3	TEC. MEDIO EN TECNOLOGIA PESQUERA
291	321392	4	3	TEC. MEDIO EN PRODUCCION PECUARIA
292	331111	5	3	TEC. SUPERIOR UNIVERSITARIO EN GERONTOLOGIA
293	331112	5	3	TENICO SUPERIOR UNIVERSITARIO EN CITOTECNOLOGO
294	331113	5	3	TEC. SUPERIOR UNIVERSITARIO EN SALUD BUCAL  (MECANICA DENTAL)
295	331114	5	3	TEC. SUPERIOR UNIVERSITARIO EN SALUD BUCAL (HIGIENE BUCAL)
296	331115	5	3	TEC. SUPERIOR UNIVERSITARIO EN ENFERMERIA
297	331211	5	3	TEC. SUPERIOR UNIVERSITARIO EN TERAPIA DE LENGUAJE
298	331212	5	3	TEC. SUPERIOR UNIVERSITARIO EN FISIOTERAPIA
299	331213	5	3	TEC. SUPERIOR UNIVERSITARIO EN TERAPIA OCUPACIONAL
300	331214	5	3	TEC. SUPERIOR UNIVERSITARIO EN RADIOLOGIA E IMAGENOLOGIA
301	331215	5	3	TEC. SUPERIOR UNIVERSITARIO EN RADIODIAGNOSTICO
302	331216	5	3	TEC. SUPERIOR UNIVERSITARIO EN ELECTROMEDICINA
303	331217	5	3	TEC. SUPERIOR UNIVERSITARIO EN CARDIOPULMONAR
304	331291	4	3	TEC. MEDIO EN ELECTROMEDICINA
305	331292	4	3	TEC. MEDIO EN TRAUMATOLOGIA Y ORTOPEDIA
306	331311	5	3	TEC. SUPERIOR UNIVERSITARIO EN INSPECCION  SANITARIA
307	331312	5	3	TEC. SUPERIOR UNIVERSITARIO EN GERENCIA DE  PROCESOS HOSPITALARIOS SERVICIOS DE SALUD
308	331313	5	3	TEC. SUPERIOR UNIVERSITARIO EN LA INFORMACION DE  LA SALUD EN ESTADISTICA DE LA SALUD
309	331391	4	3	TEC. MEDIO EN REGISTROS Y ESTADISTICAS DE LA SALUD
310	331392	4	3	TEC. MEDIO EN INSPECCION SANITARIA
311	331393	4	3	TEC. MEDIO EN SERVICIOS DE SALUD
312	331394	4	3	TEC. MEDIO EN ADMINISTRACION DE SERVICIOS
313	331395	4	3	TEC. MEDIO EN LABORATORIO CLINICO
314	341111	5	3	TEC. SUPERIOR UNIVERSITARIO EN EDUCACIÓN
315	341112	5	3	TEC. SUPERIOR UNIVERSITARIO EN EDUCACIÓN PREESCOLAR
316	341113	5	3	TEC. SUPERIOR UNIVERSITARIO  EN PSICOPEDAGOGIA
317	341114	5	3	TEC. SUPERIOR UNIVERSITARIO EN EDU FISICA, DEPORTES Y RECREACION NECESIDADES ESPECIALES
318	341115	5	3	TEC. SUPERIOR UNIVERSITARIO EN DEPORTE O FISICA Y DEPORTE
319	341191	4	3	TEC. MEDIO AUXILIAR DOCENTE
320	341192	4	3	TEC. MEDIO EN PROM SOC/ATENCION INFANCIA/ADOLESCENCIA CIRC ESPECIALMENTE DIFICIL
321	341193	4	3	TEC. MEDIO EN PUERICULTURA
322	341194	6	3	MAESTRO DE EDUCACIÓN PREESCOLAR O PRIMARIA
323	341195	6	3	ANALISTA OCUPACIONAL
324	341196	6	3	PLANIFICADOR EDUCATIVO
325	341197	6	3	ORIENTADOR EDUCATIVO
326	341198	6	3	ORIENTADOR OCUPACIONAL
327	341211	5	3	TEC. SUPERIOR DOCENTE ESPECIALISTA EN ELECTRONICA INDUSTRIAL
328	341212	5	3	TEC. SUPERIOR DOCENTE ESPECIALISTA EN MECANICA INDUSTRIAL
329	341213	5	3	TEC. SUPERIOR DOCENTE ESPECIALISTA EN ELECTRICIDAD INDUSTRIAL
330	341991	4	3	TEC. MEDIO EN ARTES MENCION MUSICA       
331	341992	4	3	TEC. MEDIO EN ARTES MENCION DANZA
332	341993	4	3	TEC. MEDIO EN ARTES MENCION TEATRO
333	351111	5	3	TEC. SUPERIOR  UNIVERSITARIO EN ADMINISTRACION-CONTADURIA
334	351112	5	3	TEC. SUPERIOR UNIVERSITARIO EN CONTADURIA
335	351113	5	3	TEC. SUPERIOR  UNIVERSITARIO EN CONTADURIA Y FINANZAS
336	351114	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION
337	351115	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN Y CIENCIAS COMERCIALES
338	351116	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN CONTABILIDAD Y FINANZAS
339	351117	5	3	TEC. SUPERIOR UNIVERSITARIO EN CONTABILIDAD
340	351118	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN CONTABILIDAD Y COSTOS
397	351711	5	3	TEC. SUPERIOR UNIVERSITARIO EN RIESGO Y SEGUROS
342	351120	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION DE  EMPRESAS
343	351191	4	3	TEC. MEDIO EN CONTABILIDAD
344	351192	4	3	TEC. MEDIO EN ADMINISTRACION ADUANERA
345	351193	4	3	TEC. MEDIO EN FINANZAS Y SEGURO
346	351194	4	3	TEC. MEDIO EN ASISTENCIA ADMINISTRATIVA
347	351211	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION-MERCADEO
348	351212	5	3	TEC. SUPERIOR UNIVERSITARIO EN MERCADEO
349	351213	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION DE COMPRAS
350	351214	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN DE VENTAS
400	351714	5	3	TEC. SUPERIOR UNIVERSITARIO DEL TRANSPORTE Y  DISTRIBUCION DE BIENES
353	351217	5	3	TEC. SUPERIOR UNIVERSITARIO EN TURISMO
354	351218	5	3	TEC. SUPERIOR UNIVERSITARIO EN PUBLICIDAD
355	351219	5	3	TEC. SUPERIOR UNIVERSITARIO EN PUBLICIDAD Y MERCADEO
356	351220	5	3	TEC. SUPERIOR UNIVERSITARIO EN PUBLICIDAD Y RELACIONES PÚBLICAS
357	351221	5	3	TEC. SUPERIOR UNIVERSITARIO MENCION PUBLICIDAD
358	351222	5	3	TEC. SUPERIOR UNIVERSITARIO MENCION  MERCADOTECNIA
359	351223	5	3	TEC. SUPERIOR UNIVERSITARIO EN MERCADOTECNIA
360	351224	5	3	TEC. SUPERIOR UNIVERSITARIO EN RECREACION
361	351291	4	3	TEC. MEDIO EN SERVICIOS TURISTICOS
362	351292	4	3	TEC. MEDIO EN MERCADEO
363	351293	4	3	TEC. MEDIO EN TURISMO
364	351294	4	3	TEC. MEDIO EN PROMOCION DE DEPORTES Y RECREACION
365	351311	5	3	TEC. SUPERIOR UNIVERSITARIO MENCION: RENTAS  Y ADUANAS
366	351312	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN BANCARIA Y FINANCIERA
367	351313	5	3	TEC. SUPERIOR UNIVERSITARIO EN BANCA Y FINANZAS
368	351314	5	3	TEC. SUPERIOR UNIVERSITARIO EN GERENCIA FINANCIERA
369	351315	5	3	TEC. SUPERIOR UNIVERSITARIO EN COMERCIO  EXTERIOR
370	351316	5	3	TEC.   SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN  ADUANERA
401	351715	5	3	TEC. SUPERIOR UNIVERSITARIO EN SEGUROS  MERCANTILES
372	351318	5	3	TEC. SUPERIOR UNIVERSITARIO EN GESTION FISCAL Y TRIBUITARIA
402	351716	5	3	TEC. SUPERIOR UNIVERSITARIO EN TRABAJO SOCIAL
374	351411	5	3	TEC. SUPERIOR UNIVERSITARIO TECNOLOGO EN  ESTADISTICA
403	351717	5	3	TEC. SUPERIOR UNIVERSITARIO EN ASISTENCIA ESPECIALIZADA
376	351413	5	3	TEC. SUPERIOR UNIVERSITARIO EN CONTABILIDAD  COMPUTARIZADA
377	351414	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION ORGANIZACION Y SISTEMAS   
378	351491	4	3	TEC. MEDIO EN INFORMATICA
379	351511	5	3	TEC. SUPERIOR UNIVERSITARIO EN RELACIONES  PÚBLICAS
380	351512	5	3	TEC. SUPERIOR UNIVERSITARIO  EN GERENCIA DE  OFICINA
381	351513	5	3	TEC. SUPERIOR UNIVERSITARIO EN GERENCIA PÚBLICA    
382	351514	5	3	TEC. SUPERIOR UNIVERSITARIO EN GERENCIA DE  CONDOMINIO
383	351515	5	3	TEC. SUPERIOR UNIVERSITARIO EN SECRETARIA
384	351516	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION DE PERSONAL O DE RECURSOS HUMANOS
385	351517	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION DE  RECUR SOS FISICOS Y FINANCIEROS
386	351591	4	3	TEC. MEDIO EN SECRETARIADO EJECUTIVO
387	351611	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION DE  EMPRESAS PETROLERAS
404	351791	4	3	TEC. MEDIO EN SEGUROS
405	351792	4	3	TEC. MEDIO EN RAMOS PATRIMONIALES
390	351614	5	3	TEC. SUPERIOR UNIVERSITARIO EN RELACIONES  INDUSTRIALES
391	351615	5	3	TEC. SUPERIOR UNIVERSITARIO EN GERENCIA   INDUSTRIAL
392	351616	5	3	TEC. SUPERIOR UNIVERSITARIO EN LOGÍSTICA  INDUSTRIAL
393	351617	5	3	TEC. SUPERIOR UNIVERSITARIO EN SISTEMAS  DE  MANTENIMIENTO
394	351618	5	3	TEC. SUPERIOR UNIVERSITARIO EN ORGANIZACIÓN  EMPRESARIAL
395	351691	4	3	TEC. MEDIO EN EQUIPOS Y MANTENIMIENTO
406	351811	5	3	TEC. SUPERIOR UNIVERSITARIO EN CIENCIAS POLICIALES
407	351812	5	3	TEC. SUPERIOR UNIVERSITARIO EN POLICIA PREVENTIVA
408	351813	5	3	TEC. SUPERIOR UNIVERSITARIO EN ESTUDIO  PENITENCIARIOS
409	351814	5	3	TEC. SUPERIOR UNIVERSITARIO EN CRIMINALISTICA
410	351891	4	3	TEC. MEDIO POLICIAL
411	351892	4	3	TEC. MEDIO EN DEFENSA CIVIL
412	351991	4	3	TEC. MEDIO EN COMERCIANTE INDUSTRIAL
413	351992	4	3	TEC. MEDIO EN EMPAQUE Y EXPEDICION
414	351993	4	3	TEC. MEDIO EN RECEPCION Y CONSERVACION DEL   MATERIA PRIMA
415	361111	5	3	TEC. SUPERIOR UNIVERSITARIO EN CIENCIAS  AUDIOVISUALES Y FOTOGRAFIA
416	361112	5	3	TEC. SUPERIOR UNIVERSITARIO EN DOCUMENTACION E  INFORMACION
417	361113	5	3	TEC. SUPERIOR UNIVERSITARIO EN IDIOMAS MENCION INGLES
418	361191	4	3	TEC. MEDIO EN INTERCULTURAL
419	361192	4	3	TEC. MEDIO EN BILINGUE
420	361193	4	3	TEC. MEDIO MENCION AUDIOVISUAL
425	261638	6	2	LIC. EN ADMINISTRACIÓN MENCION INFORMATICA
426	261639	6	2	LIC. EN ADMINISTRACIÓN MENCION ORGANIZACION Y SISTEMAS
427	261640	6	2	LIC. EN ADMINISTRACIÓN MENCION RECURSOS HUMANOS
428	428	11	10	BACHILLER EN CIENCIAS 
429	429	11	10	BACHILLER EN HUMANIDADES
430	430	3	10	BACHILLER EN CIENCIAS
431	431	3	10	BACHILLER EN HUMANIDADES
351	351215	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION DE  EMPRESAS TURÍSTICAS
432	361194	4	3	TEC. MEDIO EN  ADMINISTRACION FINANCIERA
270	321116	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN DE EMPRESAS AGROPECUARIAS O DE FINCAS
433	361195	5	3	TEC. SUPERIOR UNIVERSITARIO  EN ADMINISTRACION FINANCIERA
375	351412	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION-INFORMATICA
388	351612	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN DE HIDRO CARBUROS
398	351712	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION DEL TRANSPORTE
352	351216	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN HOTELERIA O EMPRESAS HOTELERAS
389	351613	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN INDUSTRIAL
341	351119	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN MENCION PRESUPUESTO
371	351317	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACION MUNICIPAL
373	351319	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN TRIBU TARIA
434	351121	5	3	TEC. SUPERIOR UNIVERSITARIO EN ADMINISTRACIÓN MENCION GERENCIA ADMINISTRATIVA
435	432	11	10	BACHILLER INTEGRAL
436	433	3	10	BACHILLER INTEGRAL
\.


--
-- TOC entry 7734 (class 0 OID 186860)
-- Dependencies: 521
-- Data for Name: trabajador; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY trabajador (id_trabajador, id_personal, id_tipo_personal, cedula, cod_tipo_personal, estatus, movimiento, situacion, id_registro_cargos, id_cargo, id_detalle_tabulador_med, id_dependencia, id_lugar_pago, codigo_nomina, cod_cargo, sueldo_basico, paso, id_turno, riesgo, regimen, fecha_ingreso, fecha_ingreso_apn, fecha_vacaciones, fecha_prestaciones, fecha_antiguedad, fecha_egreso, fecha_jubilacion, forma_pago, id_banco_nomina, tipo_cta_nomina, cuenta_nomina, id_banco_lph, cuenta_lph, id_banco_fid, cuenta_fid, porcentaje_islr, cotiza_sso, cotiza_spf, cotiza_lph, cotiza_fju, ded_prox_nomina, par_prox_nomina, porcentaje_jubilacion, base_jubilacion, fe_vida, id_causa_movimiento, id_dependencia_real, id_cargo_real, id_organismo, mes_ingreso, dia_ingreso, anio_ingreso, mes_ingreso_apn, dia_ingreso_apn, anio_ingreso_apn, mes_vacaciones, dia_vacaciones, anio_vacaciones, mes_prestaciones, dia_prestaciones, anio_prestaciones, mes_antiguedad, dia_antiguedad, anio_antiguedad, mes_jubilacion, dia_jubilacion, anio_jubilacion, mes_egreso, dia_egreso, anio_egreso, fecha_entrada_sig, fecha_salida_sig, codigo_nomina_real, cod_organismo_adscrito, lunes_primera, lunes_segunda, lunes_retroactivo, hay_retroactivo, dias_trabajados, mes_entrada, dia_entrada, anio_entrada, mes_salida, dia_salida, anio_salida, horas_semanales, fecha_ingreso_cargo, mes_ingreso_cargo, dia_ingreso_cargo, anio_ingreso_cargo, fecha_fe_vida, fecha_encargaduria, fecha_comision_servicio, organismo_comision_servicio, fecha_tipo_personal, fecha_ultimo_movimiento, codigo_patronal, jubilacion_planificada) FROM stdin;
4422	647	15	18528414	01	A	T	1	4284	1384	\N	40	11	3131	EMP796	9648.18000000000029	1	1	1	I	2008-12-01	2008-12-01	2008-12-01	2008-12-01	2008-12-01	\N	\N	1	8	C	01020501840000349952	332	\N	8		0	S	S	S	S	S	N	0	0	S	4	40	1384	11	12	1	2008	12	1	2008	12	1	2008	12	1	2008	12	1	2008	0	0	0	0	0	0	2015-08-24	\N	3131	\N	0	0	0	N	0	8	24	2015	0	0	0	0	\N	0	0	0	\N	\N	\N		\N	2015-08-03		N
4488	4612	14	21281617	02	A	T	1	4869	1604	\N	40	11	3361	EMP844	10667.5799999999999	1	1	1	I	2015-10-16	2015-10-16	2015-10-16	2015-10-16	2015-10-16	\N	\N	1	8	C	01020222100000181411	332	\N	8		0	S	S	S	S	S	N	0	0	S	44	40	1604	11	10	16	2015	10	16	2015	10	16	2015	10	16	2015	10	16	2015	0	0	0	0	0	0	2015-11-05	\N	3361	\N	0	0	2	N	0	11	5	2015	0	0	0	0	\N	0	0	0	\N	\N	\N		\N	2015-10-16		N
4503	4611	14	21092594	02	A	T	1	4893	1604	\N	40	11	3366	EMP844	10667.5799999999999	1	1	1	I	2015-10-16	2015-10-16	2015-10-16	2015-10-16	2015-10-16	2016-02-19	\N	1	8	A	01020124130101261843	332	\N	8		0	S	S	S	S	S	N	0	0	S	49	40	1604	11	10	16	2015	10	16	2015	10	16	2015	10	16	2015	10	16	2015	0	0	0	2	19	2016	2015-11-24	\N	3366	\N	0	0	4	N	0	11	24	2015	0	0	0	0	\N	0	0	0	\N	\N	\N		\N	2015-10-16		N
4359	4542	14	20328536	02	A	A	1	4993	226	\N	40	11	3399	EMP043	10667.5799999999999	1	1	1	I	2015-08-24	2015-08-24	2015-08-24	2015-08-24	2015-08-24	\N	\N	1	8	C	01020130600000092872	332	\N	8		0	S	S	S	S	S	N	0	0	S	5	40	226	11	8	24	2015	8	24	2015	8	24	2015	8	24	2015	8	24	2015	0	0	0	0	0	0	2015-08-21	\N	3399	\N	0	0	0	N	0	8	21	2015	0	0	0	0	\N	0	0	0	\N	\N	\N		\N	2015-08-24		N
4410	4543	14	18712298	02	A	T	1	4736	1553	\N	40	11	3320	EMP838	11348.6399999999994	1	1	1	I	2015-08-24	2015-08-24	2015-08-24	2015-08-24	2015-08-24	\N	\N	1	8	C	01020460730000095840	332	\N	8		0	S	S	S	S	S	N	0	0	S	44	40	1553	11	8	24	2015	8	24	2015	8	24	2015	8	24	2015	8	24	2015	0	0	0	0	0	0	2015-08-21	\N	3320	\N	0	0	0	N	0	8	21	2015	0	0	0	0	\N	0	0	0	\N	\N	\N		\N	2015-08-24		N
811	1401	14	16249561	02	A	T	1	793	321	\N	40	11	655	EMP107	11348.6399999999994	1	1	1	I	2011-06-16	2011-06-16	2011-06-16	2011-06-16	2010-04-27	\N	\N	1	8	C	01020222170000113751	332	\N	8		0	S	S	S	S	S	N	0	0	N	44	40	321	11	6	16	2011	6	16	2011	6	16	2011	6	16	2011	4	27	2010	0	0	0	0	0	0	2011-07-13	\N	655	\N	0	0	0	N	0	7	13	2011	0	0	0	0	\N	0	0	0	\N	\N	\N		\N	2011-06-16		N
4135	4103	15	15911540	01	A	A	1	4700	1522	\N	40	11	3307	EMP812	9648.18000000000029	1	1	1	I	2014-11-10	2014-11-10	2014-11-10	2014-11-10	2014-11-10	\N	\N	1	8	C	01020124140000023731	332	\N	8		0	S	S	S	S	S	N	0	0	S	5	40	1522	11	11	10	2014	11	10	2014	11	10	2014	11	10	2014	11	10	2014	0	0	0	0	0	0	2015-02-10	\N	3307	\N	0	0	0	S	0	2	10	2015	0	0	0	0	\N	0	0	0	\N	\N	\N		\N	2015-02-01		N
3656	4103	14	15911540	02	E	T	1	3892	1303	\N	40	11	3013	EMP830	4889.10000000000036	1	1	1	I	2014-11-10	2014-11-10	2014-11-10	2014-11-10	2014-11-10	2015-01-31	\N	1	8	C	01020124140000023731	332	\N	8		0	S	S	S	S	S	N	0	0	S	66	40	1303	11	11	10	2014	11	10	2014	11	10	2014	11	10	2014	11	10	2014	0	0	0	1	31	2015	2014-11-12	\N	3013	\N	0	0	0	N	0	11	12	2014	0	0	0	0	\N	0	0	0	\N	\N	\N		\N	2014-11-10		N
3048	3496	14	18141986	02	A	T	1	3038	321	\N	40	11	2363	EMP107	11348.6399999999994	1	1	1	I	2014-02-03	2014-02-03	2014-02-03	2014-02-03	2014-02-03	\N	\N	1	8	C	01020501850002915452	332	\N	8		0	S	S	S	S	S	N	0	0	S	44	40	321	11	2	3	2014	2	3	2014	2	3	2014	2	3	2014	2	3	2014	0	0	0	0	0	0	2014-02-10	\N	2363	\N	0	0	0	N	0	2	10	2014	0	0	0	0	\N	0	0	0	\N	\N	\N		\N	2014-02-03		N
138	646	14	17269452	02	A	A	1	1820	127	\N	40	11	937	EMP020	10011.7800000000007	1	1	1	I	2008-11-16	2008-11-16	2008-11-16	2008-11-16	2008-11-16	\N	\N	1	8	C	01020501820000350598	341	\N	8	\N	0	S	S	S	S	S	N	0	0	S	5	40	127	11	11	16	2008	11	16	2008	11	16	2008	11	16	2008	11	16	2008	0	0	0	0	0	0	2011-02-14	\N	937	\N	0	0	0	S	0	2	14	2011	0	0	0	0	\N	0	0	0	\N	\N	\N	0	\N	2008-11-16	\N	N
139	647	14	18528414	02	E	A	1	120	226	\N	40	11	128	EMP043	8205.84000000000015	1	1	1	I	2008-12-01	2008-12-01	2008-12-01	2008-12-01	2008-12-01	2015-08-02	\N	1	8	C	01020501840000349952	341	\N	8	\N	0	S	S	S	S	S	N	0	0	S	66	40	226	11	12	1	2008	12	1	2008	12	1	2008	12	1	2008	12	1	2008	0	0	0	8	2	2015	2011-02-14	\N	128	\N	0	0	0	N	0	2	14	2011	0	0	0	0	\N	0	0	0	\N	\N	\N	0	\N	2008-12-01	\N	N
4338	4528	15	12880477	01	A	T	1	4289	1389	\N	40	11	3136	EMP801	9648.18000000000029	1	1	1	I	2015-07-16	2015-07-16	2015-07-16	2015-07-16	2015-07-16	\N	\N	1	8	C	01020222180000177344	332	\N	8		0	S	S	S	S	S	N	0	0	S	2	40	1389	11	7	16	2015	7	16	2015	7	16	2015	7	16	2015	7	16	2015	0	0	0	0	0	0	2015-08-04	\N	3136	\N	0	0	7	N	0	8	4	2015	0	0	0	0	\N	0	0	0	\N	\N	\N		\N	2015-06-15		N
\.


--
-- TOC entry 7735 (class 0 OID 186912)
-- Dependencies: 522
-- Data for Name: trabajadorasignatura; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY trabajadorasignatura (id_trabajador_asignatura, id_trabajador, id_asignatura, horas) FROM stdin;
\.


--
-- TOC entry 7736 (class 0 OID 186916)
-- Dependencies: 523
-- Data for Name: trabajadorespecifica; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY trabajadorespecifica (id_trabajador_especifica, id_uel_especifica, id_trabajador, anio, porcentaje) FROM stdin;
\.


--
-- TOC entry 7737 (class 0 OID 186921)
-- Dependencies: 524
-- Data for Name: trabajadortemporal; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY trabajadortemporal (id_trabajador, lunes_primera, lunes_segunda, lunes_retroactivo, hay_retroactivo, id_grupo_nomina) FROM stdin;
\.


--
-- TOC entry 7738 (class 0 OID 186928)
-- Dependencies: 525
-- Data for Name: trayectoria; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY trayectoria (id_trayectoria, cedula, primer_apellido, segundo_apellido, primer_nombre, segundo_nombre, anio_preparacion, fecha_preparacion, codigo_anterior_mpd, numero_remesa, numero_movimiento, correlativo_mpd, nombre_corto, nombre_organismo, estatus, fecha_estatus, fecha_vigencia, cod_ubi_geografico, estado, ciudad, municipio, cod_region, nombre_region, cod_dependencia, nombre_dependencia, cod_causa_movimiento, descripcion_movimiento, nombre_corto_grupo, nombre_largo_grupo, caucion, cod_manual_cargo, cod_cargo, descripcion_cargo, cod_relacion, desc_relacion, cod_categoria, desc_categoria, nombramiento, grado, paso, codigo_nomina, monto_jubilacion, porc_jubilacion, sueldo_promedio, monto_jubilacion_sobrev, porc_pension_sobrev, monto_pension_sobrev, monto_pension_invalid, porc_pension_invalid, invalidez_sact, sueldo_basico, compensacion, prima_jerarquia, prima_servicio, ajuste_sueldo, otros_pagos, otros_no_vicepladin, primas_cargo, primas_trabajador, id_personal, horas, cod_concurso, fecha_punto_cuenta, observaciones, origen, punto_cuenta, usuario, cod_grupo_organismo, cod_organismo, fecha_culminacion) FROM stdin;
\.


--
-- TOC entry 7739 (class 0 OID 186962)
-- Dependencies: 526
-- Data for Name: turno; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY turno (id_turno, cod_turno, nombre, jornada_semanal, jornada_diaria, entrada_am, salida_am, entrada_pm, salida_pm, id_organismo, tipo_turno, jornada) FROM stdin;
1	1	DIURNO	7	8	8	12	1	5	11	D	C
21	2	NOCTURNO	40	8	8	1200	1	4.29999999999999982	11	N	P
22	4	EMPLEADO	40	8	8	12	1	4.29999999999999982	11	D	C
\.


--
-- TOC entry 7740 (class 0 OID 186973)
-- Dependencies: 527
-- Data for Name: turnodocente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY turnodocente (id_turno_docente, digito_turno, nombre) FROM stdin;
\.


--
-- TOC entry 7741 (class 0 OID 186976)
-- Dependencies: 528
-- Data for Name: uelespecifica; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY uelespecifica (id_uel_especifica, id_accion_especifica, id_unidad_ejecutora, categoria_presupuesto, anio) FROM stdin;
11	11	11	00580102001	2011
12	11	12	00580102001	2011
\.


--
-- TOC entry 7742 (class 0 OID 186980)
-- Dependencies: 529
-- Data for Name: ultimanomina; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ultimanomina (id_ultima_nomina, id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal, numero_nomina, unidades, monto_asigna, monto_deduce, origen, documento_soporte, id_tipo_personal, id_grupo_nomina, id_nomina_especial, id_concepto, monto_aporte, id_concepto_aporte, mes_sobretiempo, anio_sobretiempo, restituir, unidades_restituir, monto_restituir) FROM stdin;
\.


--
-- TOC entry 7743 (class 0 OID 186994)
-- Dependencies: 530
-- Data for Name: ultimaprenomina; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ultimaprenomina (id_ultima_prenomina, id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal, numero_nomina, unidades, monto_asigna, monto_deduce, origen, documento_soporte, id_tipo_personal, id_grupo_nomina, id_nomina_especial) FROM stdin;
\.


--
-- TOC entry 7744 (class 0 OID 187003)
-- Dependencies: 531
-- Data for Name: unidadadministradora; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY unidadadministradora (id_unidad_administradora, cod_unidad_administ, id_organismo, nombre, tipo_unidad, vigente) FROM stdin;
30	000102	11	OFICINA DE GESTION ADMINISTRATIVA	A	S
\.


--
-- TOC entry 7745 (class 0 OID 187009)
-- Dependencies: 532
-- Data for Name: unidadejecutora; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY unidadejecutora (id_unidad_ejecutora, cod_unidad_ejecutora, id_programa, nombre, vigente) FROM stdin;
11	00101	10	DESPACHO DE LA MINISTRA	S
12	00102	10	OFICINA DE GESTION ADMINISTRATIVA	S
13	00103	10	VICEMINISTERIO PARA LA TRANSVERSALIDAD DE LA POLITICA DE GENERO	S
14	00104	10	DESPACHO DE LA VICEMINISTRA (O) PARA EL DESARROLLO PRODUCTIVO DE LA MUJER	S
15	00105	10	DESPACHO DE LA VICEMINISTRA (O) PARA PROTECCIÓN DE LOS DERECHOS DE LA MUJER	S
16	00106	10	VICEMINISTERIO AFRODESCENDIENTE	S
17	00107	10	DESPACHO DE LA VICEMINISTRA (O) DE IGUALDAD DE GENERO Y NO DISCRIMINACIÓN	S
21	00107E	10	INVESTIGACIONES Y ACTIVIDADES PARA LA FORMACIÓN SOCIALISTA CON PERSPECTIVA DE GÉNERO	S
\.


--
-- TOC entry 7746 (class 0 OID 187013)
-- Dependencies: 533
-- Data for Name: unidadfuncional; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY unidadfuncional (id_unidad_funcional, cod_unidad_funcional, id_organismo, nombre) FROM stdin;
24	102-7	11	OFICINA ESTRATEGICA DE SEGUIMIENTO Y EVALUACION DE POLITICAS PUBLICAS
18	102-1	11	AUDITORIA INTERNA
22	102-5	11	OFICINA DE GESTION ADMINISTRATIVA
25	102-8	11	CONSULTORIA JURIDICA
27	102-10	11	OFICINA DE ATENCION A LA CIUDADANIA
28	102-11	11	OFICINA DE PLANIFICACION Y PRESUPUESTO
23	102-6	11	OFICINA DE GESTIÓN HUMANA
30	104-1	11	DESPACHO DE LA VICEMINISTRA (O) DE DESARROLLO PRODUCTIVO DE LA MUJER
20	102-3	11	OFICINA DE GESTIÓN COMUNICACIONAL
26	102-9	11	OFICINAS DE TECNOLOGÍAS DE LA INFORMACIÓN Y LA COMUNICACIÓN
33	107-1	11	DESPACHO DE LA VICEMINISTRA (O) DE LA IGUALDAD DE GÉNERO Y NO DISCRIMINACIÓN
21	102-4	11	OFICINA DE INTEGRACIÓN Y ASUNTOS INTERNACIONALES
17	101-02	11	DIRECCION GENERAL DEL DESPACHO 
42	101-01	11	DESPACHO DE LA MINISTRA
44	102-12	11	COORDINACION DE SEGURIDAD
55	105-1	11	DESPACHO DE LA VICEMINISTRA (O) PARA PROTECCIÓN DE LOS DERECHOS DE LA MUJER
\.


--
-- TOC entry 7747 (class 0 OID 187016)
-- Dependencies: 534
-- Data for Name: usuario; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY usuario (id_usuario, usuario, password, administrador, apellidos, nombres, cedula, activo, id_region, telefono, id_organismo, cambio_password) FROM stdin;
16	abocca	UenROXacUSo6GVuPrXsjUKfPIX7FnNbJlpqDazZLdytYo0l7y9QAjRmKzaArULx0	S	BOCCA LOPEZ 	ANA CRISTINA	18143192	S	10	0212-3399323	0	2014-11-06
61	jesus	cM0U0QmiKAIu1ohVbgnP4uNXv3+una8FzuHOiz8C+FpIBe5SOzOxPK2c8TTC9Dmo	N	URBINA	JESUS	12226369	N	32		0	2010-09-20
1	sigefirrhh	vO4D6iIRR/odI8oYcaCtbvRcWDCeph6mAb3/RpoNSGIXHdmfK+aJ7viS2pPx7o3i	S	ADMINISTRADOR	SISTEMA	0	S	10		11	2013-04-10
161	ARODRIGUEZ	bPWC3bDq12X4y1HlYbhDMQi6cZyksF5f6wa3DzifSyL6BvLVA0tJhMNhEZ6Ymi3p	N	RODRIGUEZ	ARLETH	14073418	S	10		0	2014-11-07
123	danypire	sT2h8L9kJYzls9MImNQdU7NMJ//eHbujw544xe7R0chYutCrgbvZ+2HiOSlPNq7y	S	PIRE	DANY	11484752	S	10		0	2013-07-09
71	abello	xn6GfjEo+BP1AhmtwEtr2F3D1PDSj9hRLgAWqvd6dXkcyESAtdistWNzpjlgQH4s	S	BELLO	ADRIAN	14166036	S	32		0	2013-07-15
152	MBENITEZ	+xKwJuA6Qm7ckWLnz69NQxnKBa2Ebrwbs3c/lyquYX42+6cdd0gwkvRnpFs9otnv	N	BENITEZ	MAYERLIM	19199072	S	10		0	2015-11-02
212	yuruanyv	d9y331FwYAjiy/h52cmZ7Am/H5XTNof0zkYcdjm+9dXW222CJNHzEYEKq+6XUEIE	S	VILLEGAS	YURUANY	23529925	S	\N		0	2015-11-11
81	ymoreno	shkjh7Xt60v37di63craUC6vAUcFlvRoliY8wGL8eCD7T1Za5fQNw1LBf2pcWdTT	N	MORENO	YARIMA	17158970	S	10		0	2015-11-30
201	CONSULTA	Y6TQ/SLv81DDyjPB6p9weKM70vM5XcKhRq8eGPpqzigeXohCEApuZlNK5kdoDt0Q	N	CONSULTA	CONSULTA	123	S	\N		0	2015-12-08
121	manuelm	zsXZbsmfIOFIFUJujOrhkN0l8eZgejNzzxFre2Fx9TMtE/aqg6VEvf3OSJ17CRuV	S	MARCANO	MANUEL	6301603	S	10		0	2015-12-16
191	JGONZALEZ	e0H8kN1uAie5A1AAveJEptrnNczU+zub5+Q1iGyC1tTqtFre2ORl3NwPdwHtEyaA	S	GONZALEZ	JEFFERSON	23709495	S	10		0	2016-02-12
153	rpereira	buqpeZ2v4MPm/0bjHHvkztbhmDGrvT+rtkR0oBw8lCHH28eqDJF29kXisLhUY1qn	S	PEREIRA	ROSELINE	11488607	S	10		0	2016-02-29
91	carlos	JjM/azIIZ2pne5s8LAwSjAJhkF5/JWIEQjueeuH7D8li6Dpa0FL90ajD2/qT4uGz	N	NAVEDA	CARLOS	6122919	S	32		0	2013-07-31
171	NOELE	Up26qDhVsyZsPsYEb37Twz1/uXYcHUYkFqsyblHMBS4AQ+5MwZRJ+/cs8xA5OxTp	S	ESPINOZA	NOEL	16249561	S	10		0	2016-01-11
111	ORTEGAJ	LOAy90q3J9kNPOkNhvs7B8V7vZyG7jeotgs/Pv78x5B4wTzZ/cm8Al6nXetB/FfP	S	ORTEGA	JESUS	6439891	S	10	5976603	0	2014-04-21
131	QUIRAIMAN	7mP3lgdtUq/uGzuRu12S1HDlg/JlAa1yI9v/lUVi/8weX7pY9SiY4PRYSgOkimRP	N	ESPINOZA	QUIRAIMA	17429921	S	10		0	2013-10-09
141	sulaym	ctKkTfnofSyItjpu3Tf55y2C7N0JLk4RTuwggqtOHwQB4Bl859sOZsON+++0VW0T	N	MILLAN	SULAY	15586570	S	\N		0	2013-10-24
181	prueba	peQ89KgN1oQkqDdcKkpAvmVsRjqHwnRNQGSWqpyDHTJJoBqVYAYKqm7cenbOMRh2	N	M	M	11111111	S	10		0	2014-04-02
\.


--
-- TOC entry 7748 (class 0 OID 187023)
-- Dependencies: 535
-- Data for Name: usuarioorganismo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY usuarioorganismo (id_usuario_organismo, id_usuario, id_organismo) FROM stdin;
11	61	11
21	16	11
22	71	11
31	91	11
32	81	11
141	212	11
41	111	11
52	121	11
54	123	11
61	131	11
71	141	11
81	152	11
82	153	11
91	161	11
101	171	11
111	181	11
121	191	11
131	201	11
\.


--
-- TOC entry 7749 (class 0 OID 187028)
-- Dependencies: 536
-- Data for Name: usuariorol; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY usuariorol (id_usuario_rol, id_usuario, id_rol) FROM stdin;
\.


--
-- TOC entry 7750 (class 0 OID 187033)
-- Dependencies: 537
-- Data for Name: usuariotipopersonal; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY usuariotipopersonal (id_usuario_tipo_personal, id_usuario, id_tipo_personal) FROM stdin;
\.


--
-- TOC entry 7751 (class 0 OID 187038)
-- Dependencies: 538
-- Data for Name: usuariounidadfuncional; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY usuariounidadfuncional (id_usuario_unidad_funcional, id_usuario, id_unidad_funcional) FROM stdin;
\.


--
-- TOC entry 7752 (class 0 OID 187043)
-- Dependencies: 539
-- Data for Name: utiles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY utiles (id_utiles, id_personal, id_familiar, nivel_educativo, fecha_nacimiento, grado, monto, sexo, id_tipo_personal, id_trabajador) FROM stdin;
\.


--
-- TOC entry 7753 (class 0 OID 187047)
-- Dependencies: 540
-- Data for Name: utilidadesporanio; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY utilidadesporanio (id_utilidades_por_anio, id_tipo_personal, anios_servicio, meses_servicios, dias_bono, dias_extra) FROM stdin;
\.


--
-- TOC entry 7754 (class 0 OID 187099)
-- Dependencies: 550
-- Data for Name: vacacion; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY vacacion (id_vacacion, id_personal, id_tipo_personal, tipo_vacacion, anio, dias_disfrute, dias_pendientes, fecha_fin, fecha_inicio, fecha_reintegro, fecha_suspension, suspendida, observaciones) FROM stdin;
\.


--
-- TOC entry 7755 (class 0 OID 187110)
-- Dependencies: 551
-- Data for Name: vacaciondisfrutada; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY vacaciondisfrutada (id_vacacion_disfrutada, id_personal, id_tipo_personal, anio, dias_disfrute, semana_anio, fecha_fin, fecha_inicio, fecha_reintegro, observaciones, id_vacacion) FROM stdin;
\.


--
-- TOC entry 7756 (class 0 OID 187119)
-- Dependencies: 552
-- Data for Name: vacacionesporanio; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY vacacionesporanio (id_vacaciones_por_anio, id_tipo_personal, anios_servicio, dias_disfrutar, dias_bono, dias_extra) FROM stdin;
\.


--
-- TOC entry 7757 (class 0 OID 187126)
-- Dependencies: 553
-- Data for Name: vacacionprogramada; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY vacacionprogramada (id_vacacion_programada, id_personal, id_tipo_personal, anio, dias_disfrute, semana_anio, fecha_fin, fecha_inicio, fecha_reintegro, observaciones) FROM stdin;
\.


--
-- TOC entry 7758 (class 0 OID 187135)
-- Dependencies: 554
-- Data for Name: varemos; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY varemos (id_varemos, cod_varemos, nombre, porcentaje) FROM stdin;
\.


--
-- TOC entry 5695 (class 2606 OID 187140)
-- Name: accioncentralizada_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY accioncentralizada
    ADD CONSTRAINT accioncentralizada_cod UNIQUE (anio, cod_accion_centralizada);


--
-- TOC entry 5697 (class 2606 OID 187142)
-- Name: accioncentralizada_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY accioncentralizada
    ADD CONSTRAINT accioncentralizada_pkey PRIMARY KEY (id_accion_centralizada);


--
-- TOC entry 5699 (class 2606 OID 187144)
-- Name: accionespecifica_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY accionespecifica
    ADD CONSTRAINT accionespecifica_pkey PRIMARY KEY (id_accion_especifica);


--
-- TOC entry 5701 (class 2606 OID 187146)
-- Name: accionevaluacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY accionevaluacion
    ADD CONSTRAINT accionevaluacion_pkey PRIMARY KEY (id_accion_evaluacion);


--
-- TOC entry 5703 (class 2606 OID 187148)
-- Name: acreencia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY acreencia
    ADD CONSTRAINT acreencia_pkey PRIMARY KEY (id_acreencia);


--
-- TOC entry 5705 (class 2606 OID 187150)
-- Name: actividaddocente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY actividaddocente
    ADD CONSTRAINT actividaddocente_pkey PRIMARY KEY (id_actividad_docente);


--
-- TOC entry 5707 (class 2606 OID 187152)
-- Name: adiestramientocargo_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY adiestramientocargo
    ADD CONSTRAINT adiestramientocargo_cod UNIQUE (id_cargo, id_area_conocimiento, nivel);


--
-- TOC entry 5709 (class 2606 OID 187154)
-- Name: adiestramientocargo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY adiestramientocargo
    ADD CONSTRAINT adiestramientocargo_pkey PRIMARY KEY (id_adiestramiento_cargo);


--
-- TOC entry 5711 (class 2606 OID 187156)
-- Name: administradorauel_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY administradorauel
    ADD CONSTRAINT administradorauel_cod UNIQUE (id_unidad_administradora, id_unidad_ejecutora);


--
-- TOC entry 5713 (class 2606 OID 187158)
-- Name: administradorauel_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY administradorauel
    ADD CONSTRAINT administradorauel_pkey PRIMARY KEY (id_administradora_uel);


--
-- TOC entry 5716 (class 2606 OID 187160)
-- Name: afiliacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY afiliacion
    ADD CONSTRAINT afiliacion_pkey PRIMARY KEY (id_afiliacion);


--
-- TOC entry 5718 (class 2606 OID 187162)
-- Name: ajustetabuladoronu_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY ajustetabuladoronu
    ADD CONSTRAINT ajustetabuladoronu_cod UNIQUE (id_tabulador, nivel, estado_civil, anios_servicio);


--
-- TOC entry 5720 (class 2606 OID 187164)
-- Name: ajustetabuladoronu_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY ajustetabuladoronu
    ADD CONSTRAINT ajustetabuladoronu_pkey PRIMARY KEY (id_ajuste_tabulador_onu);


--
-- TOC entry 5724 (class 2606 OID 187166)
-- Name: anticipo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY anticipo
    ADD CONSTRAINT anticipo_pkey PRIMARY KEY (id_anticipo);


--
-- TOC entry 5726 (class 2606 OID 187168)
-- Name: apelacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY apelacion
    ADD CONSTRAINT apelacion_pkey PRIMARY KEY (id_apelacion);


--
-- TOC entry 5728 (class 2606 OID 187170)
-- Name: aperturaescolar_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY aperturaescolar
    ADD CONSTRAINT aperturaescolar_pkey PRIMARY KEY (id_apertura_escolar);


--
-- TOC entry 5730 (class 2606 OID 187172)
-- Name: aplicartabulador_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY aplicartabulador
    ADD CONSTRAINT aplicartabulador_pkey PRIMARY KEY (id_aplicar_tabulador);


--
-- TOC entry 5733 (class 2606 OID 187174)
-- Name: areacarrera_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY areacarrera
    ADD CONSTRAINT areacarrera_pkey PRIMARY KEY (id_area_carrera);


--
-- TOC entry 5736 (class 2606 OID 187176)
-- Name: areaconocimiento_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY areaconocimiento
    ADD CONSTRAINT areaconocimiento_pkey PRIMARY KEY (id_area_conocimiento);


--
-- TOC entry 5738 (class 2606 OID 187178)
-- Name: asignatura_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY asignatura
    ADD CONSTRAINT asignatura_cod UNIQUE (cod_asignatura);


--
-- TOC entry 5740 (class 2606 OID 187180)
-- Name: asignatura_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY asignatura
    ADD CONSTRAINT asignatura_pkey PRIMARY KEY (id_asignatura);


--
-- TOC entry 5742 (class 2606 OID 187182)
-- Name: aumento_evaluacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY aumentoevaluacion
    ADD CONSTRAINT aumento_evaluacion_pkey PRIMARY KEY (id_aumento_evaluacion);


--
-- TOC entry 5746 (class 2606 OID 187184)
-- Name: ausencia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY ausencia
    ADD CONSTRAINT ausencia_pkey PRIMARY KEY (id_ausencia);


--
-- TOC entry 5749 (class 2606 OID 187186)
-- Name: averiguacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY averiguacion
    ADD CONSTRAINT averiguacion_pkey PRIMARY KEY (id_averiguacion);


--
-- TOC entry 5752 (class 2606 OID 187188)
-- Name: banco_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY banco
    ADD CONSTRAINT banco_pkey PRIMARY KEY (id_banco);


--
-- TOC entry 5754 (class 2606 OID 187190)
-- Name: baremopreseleccion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY baremopreseleccionado
    ADD CONSTRAINT baremopreseleccion_pkey PRIMARY KEY (id_baremo_preseleccionado);


--
-- TOC entry 5756 (class 2606 OID 187192)
-- Name: becafamiliar_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY becafamiliar
    ADD CONSTRAINT becafamiliar_pkey PRIMARY KEY (id_beca_familiar);


--
-- TOC entry 5758 (class 2606 OID 187194)
-- Name: becatrabajador_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY becatrabajador
    ADD CONSTRAINT becatrabajador_pkey PRIMARY KEY (id_beca_trabajador);


--
-- TOC entry 5760 (class 2606 OID 187196)
-- Name: beneficiario_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY beneficiario
    ADD CONSTRAINT beneficiario_cod UNIQUE (id_personal, id_familiar);


--
-- TOC entry 5762 (class 2606 OID 187198)
-- Name: beneficiario_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY beneficiario
    ADD CONSTRAINT beneficiario_pkey PRIMARY KEY (id_beneficiario);


--
-- TOC entry 5764 (class 2606 OID 187200)
-- Name: cajaahorro_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cajaahorro
    ADD CONSTRAINT cajaahorro_pkey PRIMARY KEY (id_caja_ahorro);


--
-- TOC entry 5766 (class 2606 OID 187202)
-- Name: cajaahorrocod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cajaahorro
    ADD CONSTRAINT cajaahorrocod UNIQUE (id_trabajador, id_concepto_tipo_personal);


--
-- TOC entry 5768 (class 2606 OID 187204)
-- Name: calculoantiguedad_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY calculoantiguedad
    ADD CONSTRAINT calculoantiguedad_cod UNIQUE (id_trabajador);


--
-- TOC entry 5770 (class 2606 OID 187206)
-- Name: calculoantiguedad_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY calculoantiguedad
    ADD CONSTRAINT calculoantiguedad_pkey PRIMARY KEY (id_calculo_antiguedad);


--
-- TOC entry 5772 (class 2606 OID 187208)
-- Name: calculobonofinanio_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY calculobonofinanio
    ADD CONSTRAINT calculobonofinanio_cod UNIQUE (id_trabajador);


--
-- TOC entry 5774 (class 2606 OID 187210)
-- Name: calculobonofinanio_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY calculobonofinanio
    ADD CONSTRAINT calculobonofinanio_pkey PRIMARY KEY (id_calculo_bono_fin_anio);


--
-- TOC entry 5776 (class 2606 OID 187212)
-- Name: calculoticket_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY calculoticket
    ADD CONSTRAINT calculoticket_pkey PRIMARY KEY (id_calculo_ticket);


--
-- TOC entry 5778 (class 2606 OID 187214)
-- Name: calculovacacional_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY calculovacacional
    ADD CONSTRAINT calculovacacional_cod UNIQUE (id_trabajador);


--
-- TOC entry 5780 (class 2606 OID 187216)
-- Name: calculovacacional_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY calculovacacional
    ADD CONSTRAINT calculovacacional_pkey PRIMARY KEY (id_calculo_vacacional);


--
-- TOC entry 5782 (class 2606 OID 187218)
-- Name: caractdependencia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY caracteristicadependencia
    ADD CONSTRAINT caractdependencia_pkey PRIMARY KEY (id_caracteristica_dependencia);


--
-- TOC entry 5784 (class 2606 OID 187220)
-- Name: caractdependenciacod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY caracteristicadependencia
    ADD CONSTRAINT caractdependenciacod UNIQUE (id_tipo_caracteristica, codigo);


--
-- TOC entry 5786 (class 2606 OID 187222)
-- Name: cargo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cargo
    ADD CONSTRAINT cargo_pkey PRIMARY KEY (id_cargo);


--
-- TOC entry 5788 (class 2606 OID 187224)
-- Name: cargoesp_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cargoespecifica
    ADD CONSTRAINT cargoesp_cod UNIQUE (id_uel_especifica, id_registro_cargos);


--
-- TOC entry 5790 (class 2606 OID 187226)
-- Name: cargoesp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cargoespecifica
    ADD CONSTRAINT cargoesp_pkey PRIMARY KEY (id_cargo_especifica);


--
-- TOC entry 5792 (class 2606 OID 187228)
-- Name: cargosplan_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cargosplan
    ADD CONSTRAINT cargosplan_pkey PRIMARY KEY (id_cargos_plan);


--
-- TOC entry 5795 (class 2606 OID 187230)
-- Name: carrera_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY carrera
    ADD CONSTRAINT carrera_pkey PRIMARY KEY (id_carrera);


--
-- TOC entry 5798 (class 2606 OID 187232)
-- Name: carreraarea_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY carreraarea
    ADD CONSTRAINT carreraarea_pkey PRIMARY KEY (id_carrera_area);


--
-- TOC entry 5801 (class 2606 OID 187234)
-- Name: categoriadocente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY categoriadocente
    ADD CONSTRAINT categoriadocente_pkey PRIMARY KEY (id_categoria_docente);


--
-- TOC entry 5804 (class 2606 OID 187236)
-- Name: categoriapersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY categoriapersonal
    ADD CONSTRAINT categoriapersonal_pkey PRIMARY KEY (id_categoria_personal);


--
-- TOC entry 5807 (class 2606 OID 187238)
-- Name: categoriapresupuesto_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY categoriapresupuesto
    ADD CONSTRAINT categoriapresupuesto_pkey PRIMARY KEY (id_categoria_presupuesto);


--
-- TOC entry 5809 (class 2606 OID 187240)
-- Name: causadocente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY causadocente
    ADD CONSTRAINT causadocente_pkey PRIMARY KEY (id_causa_docente);


--
-- TOC entry 5812 (class 2606 OID 187242)
-- Name: causamovimiento_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY causamovimiento
    ADD CONSTRAINT causamovimiento_pkey PRIMARY KEY (id_causa_movimiento);


--
-- TOC entry 5815 (class 2606 OID 187244)
-- Name: causapersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY causapersonal
    ADD CONSTRAINT causapersonal_pkey PRIMARY KEY (id_causa_personal);


--
-- TOC entry 5817 (class 2606 OID 187246)
-- Name: certificacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY certificacion
    ADD CONSTRAINT certificacion_pkey PRIMARY KEY (id_certificacion);


--
-- TOC entry 5819 (class 2606 OID 187248)
-- Name: certificado_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY certificado
    ADD CONSTRAINT certificado_pkey PRIMARY KEY (id_certificado);


--
-- TOC entry 5821 (class 2606 OID 187250)
-- Name: cierreunidad_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cierreunidad
    ADD CONSTRAINT cierreunidad_cod UNIQUE (id_tipo_personal, mes_cierre);


--
-- TOC entry 5823 (class 2606 OID 187252)
-- Name: cierreunidad_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cierreunidad
    ADD CONSTRAINT cierreunidad_pkey PRIMARY KEY (id_cierre_unidad);


--
-- TOC entry 5827 (class 2606 OID 187254)
-- Name: ciudad_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY ciudad
    ADD CONSTRAINT ciudad_pkey PRIMARY KEY (id_ciudad);


--
-- TOC entry 5829 (class 2606 OID 187256)
-- Name: clasificacion_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY clasificacion
    ADD CONSTRAINT clasificacion_cod UNIQUE (cod_clasificacion);


--
-- TOC entry 5831 (class 2606 OID 187258)
-- Name: clasificacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY clasificacion
    ADD CONSTRAINT clasificacion_pkey PRIMARY KEY (id_clasificacion);


--
-- TOC entry 5833 (class 2606 OID 187260)
-- Name: clasificaciond_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY clasificaciondependencia
    ADD CONSTRAINT clasificaciond_cod UNIQUE (id_dependencia, id_caracteristica_dependencia);


--
-- TOC entry 5835 (class 2606 OID 187262)
-- Name: clasificaciondependencia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY clasificaciondependencia
    ADD CONSTRAINT clasificaciondependencia_pkey PRIMARY KEY (id_clasificacion_dependencia);


--
-- TOC entry 5838 (class 2606 OID 187264)
-- Name: clasificacionpersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY clasificacionpersonal
    ADD CONSTRAINT clasificacionpersonal_pkey PRIMARY KEY (id_clasificacion_personal);


--
-- TOC entry 5842 (class 2606 OID 187266)
-- Name: comisionservicio_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY comisionservicio
    ADD CONSTRAINT comisionservicio_pkey PRIMARY KEY (id_comision_servicio);


--
-- TOC entry 5845 (class 2606 OID 187268)
-- Name: comisionservicioext_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY comisionservicioext
    ADD CONSTRAINT comisionservicioext_pkey PRIMARY KEY (id_comision_servicio_ext);


--
-- TOC entry 5849 (class 2606 OID 187270)
-- Name: concepto_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY concepto
    ADD CONSTRAINT concepto_pkey PRIMARY KEY (id_concepto);


--
-- TOC entry 5853 (class 2606 OID 187272)
-- Name: conceptoasociado_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptoasociado
    ADD CONSTRAINT conceptoasociado_pkey PRIMARY KEY (id_concepto_asociado);


--
-- TOC entry 5855 (class 2606 OID 187274)
-- Name: conceptoc_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptocargo
    ADD CONSTRAINT conceptoc_cod UNIQUE (id_concepto_tipo_personal, id_cargo);


--
-- TOC entry 5857 (class 2606 OID 187276)
-- Name: conceptoc_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptocargo
    ADD CONSTRAINT conceptoc_pkey PRIMARY KEY (id_concepto_cargo);


--
-- TOC entry 5860 (class 2606 OID 187278)
-- Name: conceptocargoanio_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptocargoanio
    ADD CONSTRAINT conceptocargoanio_cod UNIQUE (id_concepto_tipo_personal, id_cargo, anios);


--
-- TOC entry 5862 (class 2606 OID 187280)
-- Name: conceptocargoanio_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptocargoanio
    ADD CONSTRAINT conceptocargoanio_pkey PRIMARY KEY (id_concepto_cargo_anio);


--
-- TOC entry 5864 (class 2606 OID 187282)
-- Name: conceptoconstancia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptoconstancia
    ADD CONSTRAINT conceptoconstancia_pkey PRIMARY KEY (id_concepto_constancia);


--
-- TOC entry 5870 (class 2606 OID 187284)
-- Name: conceptocuencont_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptocuentacontable
    ADD CONSTRAINT conceptocuencont_cod UNIQUE (id_concepto_tipo_personal, id_cuenta_contable);


--
-- TOC entry 5872 (class 2606 OID 187286)
-- Name: conceptocuencont_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptocuentacontable
    ADD CONSTRAINT conceptocuencont_pkey PRIMARY KEY (id_concepto_cuenta);


--
-- TOC entry 5866 (class 2606 OID 187288)
-- Name: conceptocuenta_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptocuenta
    ADD CONSTRAINT conceptocuenta_cod UNIQUE (id_concepto_tipo_personal, id_cuenta_presupuesto);


--
-- TOC entry 5868 (class 2606 OID 187290)
-- Name: conceptocuenta_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptocuenta
    ADD CONSTRAINT conceptocuenta_pkey PRIMARY KEY (id_concepto_cuenta);


--
-- TOC entry 5874 (class 2606 OID 187292)
-- Name: conceptodepend_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptodependencia
    ADD CONSTRAINT conceptodepend_pkey PRIMARY KEY (id_concepto_dependencia);


--
-- TOC entry 5876 (class 2606 OID 187294)
-- Name: conceptodependen_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptodependencia
    ADD CONSTRAINT conceptodependen_cod UNIQUE (id_concepto_tipo_personal, id_dependencia);


--
-- TOC entry 5878 (class 2606 OID 187296)
-- Name: conceptodiplomatico_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptodiplomatico
    ADD CONSTRAINT conceptodiplomatico_pkey PRIMARY KEY (id_concepto_diplomatico);


--
-- TOC entry 5880 (class 2606 OID 187298)
-- Name: conceptodocente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptodocente
    ADD CONSTRAINT conceptodocente_pkey PRIMARY KEY (id_concepto_docente);


--
-- TOC entry 5882 (class 2606 OID 187300)
-- Name: conceptoesp_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptoespecifica
    ADD CONSTRAINT conceptoesp_cod UNIQUE (id_uel_especifica, id_concepto_tipo_personal);


--
-- TOC entry 5884 (class 2606 OID 187302)
-- Name: conceptoesp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptoespecifica
    ADD CONSTRAINT conceptoesp_pkey PRIMARY KEY (id_concepto_especifica);


--
-- TOC entry 5886 (class 2606 OID 187304)
-- Name: conceptoevaluacion_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptoevaluacion
    ADD CONSTRAINT conceptoevaluacion_cod UNIQUE (id_concepto_tipo_personal);


--
-- TOC entry 5888 (class 2606 OID 187306)
-- Name: conceptoevaluacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptoevaluacion
    ADD CONSTRAINT conceptoevaluacion_pkey PRIMARY KEY (id_concepto_evaluacion);


--
-- TOC entry 5894 (class 2606 OID 187308)
-- Name: conceptofijo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptofijo
    ADD CONSTRAINT conceptofijo_pkey PRIMARY KEY (id_concepto_fijo);


--
-- TOC entry 5897 (class 2606 OID 187310)
-- Name: conceptoliquidacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptoliquidacion
    ADD CONSTRAINT conceptoliquidacion_pkey PRIMARY KEY (id_concepto_variable);


--
-- TOC entry 5899 (class 2606 OID 187312)
-- Name: conceptomovimiento_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptomovimiento
    ADD CONSTRAINT conceptomovimiento_pkey PRIMARY KEY (id_concepto_movimiento);


--
-- TOC entry 5901 (class 2606 OID 187314)
-- Name: conceptoprestaciones_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptoprestaciones
    ADD CONSTRAINT conceptoprestaciones_cod UNIQUE (id_concepto_tipo_personal);


--
-- TOC entry 5903 (class 2606 OID 187316)
-- Name: conceptoprestaciones_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptoprestaciones
    ADD CONSTRAINT conceptoprestaciones_pkey PRIMARY KEY (id_concepto_prestaciones);


--
-- TOC entry 5905 (class 2606 OID 187318)
-- Name: conceptopresupuesto_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptopresupuesto
    ADD CONSTRAINT conceptopresupuesto_pkey PRIMARY KEY (id_concepto_presupuesto);


--
-- TOC entry 5907 (class 2606 OID 187320)
-- Name: conceptoproyectado_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptoproyectado
    ADD CONSTRAINT conceptoproyectado_pkey PRIMARY KEY (id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal);


--
-- TOC entry 5909 (class 2606 OID 187322)
-- Name: conceptoresumen_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptoresumen
    ADD CONSTRAINT conceptoresumen_pkey PRIMARY KEY (id_concepto_resumen);


--
-- TOC entry 5912 (class 2606 OID 187324)
-- Name: conceptotipopersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptotipopersonal
    ADD CONSTRAINT conceptotipopersonal_pkey PRIMARY KEY (id_concepto_tipo_personal);


--
-- TOC entry 5914 (class 2606 OID 187326)
-- Name: conceptoutilidades_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptoutilidades
    ADD CONSTRAINT conceptoutilidades_cod UNIQUE (id_tipo_personal, id_concepto_tipo_personal);


--
-- TOC entry 5916 (class 2606 OID 187328)
-- Name: conceptoutilidades_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptoutilidades
    ADD CONSTRAINT conceptoutilidades_pkey PRIMARY KEY (id_concepto_utilidades);


--
-- TOC entry 5918 (class 2606 OID 187330)
-- Name: conceptovacaciones_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptovacaciones
    ADD CONSTRAINT conceptovacaciones_cod UNIQUE (id_tipo_personal, id_concepto_tipo_personal);


--
-- TOC entry 5920 (class 2606 OID 187332)
-- Name: conceptovacaciones_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptovacaciones
    ADD CONSTRAINT conceptovacaciones_pkey PRIMARY KEY (id_concepto_vacaciones);


--
-- TOC entry 5924 (class 2606 OID 187334)
-- Name: conceptovariable_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conceptovariable
    ADD CONSTRAINT conceptovariable_pkey PRIMARY KEY (id_concepto_variable);


--
-- TOC entry 5926 (class 2606 OID 187336)
-- Name: concurso_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY concurso
    ADD CONSTRAINT concurso_pkey PRIMARY KEY (id_concurso);


--
-- TOC entry 5928 (class 2606 OID 187338)
-- Name: concursocargo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY concursocargo
    ADD CONSTRAINT concursocargo_pkey PRIMARY KEY (id_concurso_cargo);


--
-- TOC entry 5930 (class 2606 OID 187340)
-- Name: constancia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY constancia
    ADD CONSTRAINT constancia_pkey PRIMARY KEY (id_constancia);


--
-- TOC entry 5932 (class 2606 OID 187342)
-- Name: continente_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY continente
    ADD CONSTRAINT continente_cod UNIQUE (cod_continente);


--
-- TOC entry 5934 (class 2606 OID 187344)
-- Name: continente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY continente
    ADD CONSTRAINT continente_pkey PRIMARY KEY (id_continente);


--
-- TOC entry 5936 (class 2606 OID 187346)
-- Name: contrato_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY contrato
    ADD CONSTRAINT contrato_cod UNIQUE (id_personal, id_tipo_contrato, fecha_inicio);


--
-- TOC entry 5938 (class 2606 OID 187348)
-- Name: contrato_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY contrato
    ADD CONSTRAINT contrato_pkey PRIMARY KEY (id_contrato);


--
-- TOC entry 5940 (class 2606 OID 187350)
-- Name: contratocolectivo_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY contratocolectivo
    ADD CONSTRAINT contratocolectivo_cod UNIQUE (cod_contrato_colectivo);


--
-- TOC entry 5942 (class 2606 OID 187352)
-- Name: contratocolectivo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY contratocolectivo
    ADD CONSTRAINT contratocolectivo_pkey PRIMARY KEY (id_contrato_colectivo);


--
-- TOC entry 5944 (class 2606 OID 187354)
-- Name: contratosplan_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY contratosplan
    ADD CONSTRAINT contratosplan_pkey PRIMARY KEY (id_contratos_plan);


--
-- TOC entry 5946 (class 2606 OID 187356)
-- Name: credencial_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY credencial
    ADD CONSTRAINT credencial_pkey PRIMARY KEY (id_credencial);


--
-- TOC entry 5948 (class 2606 OID 187358)
-- Name: cuadroonapre_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cuadroonapre
    ADD CONSTRAINT cuadroonapre_pkey PRIMARY KEY (id_cuadro_onapre);


--
-- TOC entry 5950 (class 2606 OID 187360)
-- Name: cuentabanco_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cuentabanco
    ADD CONSTRAINT cuentabanco_cod UNIQUE (cod_cuenta_banco);


--
-- TOC entry 5952 (class 2606 OID 187362)
-- Name: cuentabanco_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cuentabanco
    ADD CONSTRAINT cuentabanco_pkey PRIMARY KEY (id_cuenta_banco);


--
-- TOC entry 5954 (class 2606 OID 187364)
-- Name: cuentacontable_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cuentacontable
    ADD CONSTRAINT cuentacontable_cod UNIQUE (cod_contable);


--
-- TOC entry 5956 (class 2606 OID 187366)
-- Name: cuentacontable_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cuentacontable
    ADD CONSTRAINT cuentacontable_pkey PRIMARY KEY (id_cuenta_contable);


--
-- TOC entry 5958 (class 2606 OID 187368)
-- Name: cuentapresupuesto_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cuentapresupuesto
    ADD CONSTRAINT cuentapresupuesto_cod UNIQUE (cod_presupuesto);


--
-- TOC entry 5960 (class 2606 OID 187370)
-- Name: cuentapresupuesto_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cuentapresupuesto
    ADD CONSTRAINT cuentapresupuesto_pkey PRIMARY KEY (id_cuenta_presupuesto);


--
-- TOC entry 5963 (class 2606 OID 187372)
-- Name: curso_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY curso
    ADD CONSTRAINT curso_pkey PRIMARY KEY (id_curso);


--
-- TOC entry 5968 (class 2606 OID 187374)
-- Name: cursoentidad_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cursoentidad
    ADD CONSTRAINT cursoentidad_pkey PRIMARY KEY (id_curso_entidad);


--
-- TOC entry 5971 (class 2606 OID 187376)
-- Name: declaracion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY declaracion
    ADD CONSTRAINT declaracion_pkey PRIMARY KEY (id_declaracion);


--
-- TOC entry 5974 (class 2606 OID 187378)
-- Name: dedicaciondocente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dedicaciondocente
    ADD CONSTRAINT dedicaciondocente_pkey PRIMARY KEY (id_dedicacion_docente);


--
-- TOC entry 5976 (class 2606 OID 187380)
-- Name: denominacionticket_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY denominacionticket
    ADD CONSTRAINT denominacionticket_cod UNIQUE (id_tipo_personal, valor);


--
-- TOC entry 5978 (class 2606 OID 187382)
-- Name: denominacionticket_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY denominacionticket
    ADD CONSTRAINT denominacionticket_pkey PRIMARY KEY (id_denominacion_ticket);


--
-- TOC entry 5981 (class 2606 OID 187384)
-- Name: dependencia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dependencia
    ADD CONSTRAINT dependencia_pkey PRIMARY KEY (id_dependencia);


--
-- TOC entry 5983 (class 2606 OID 187386)
-- Name: dependenciajud_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dependenciajudicial
    ADD CONSTRAINT dependenciajud_cod UNIQUE (id_dependencia);


--
-- TOC entry 5985 (class 2606 OID 187388)
-- Name: dependenciajud_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dependenciajudicial
    ADD CONSTRAINT dependenciajud_pkey PRIMARY KEY (id_dependencia_judicial);


--
-- TOC entry 5987 (class 2606 OID 187390)
-- Name: descuentoticket_1; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY descuentoticket
    ADD CONSTRAINT descuentoticket_1 UNIQUE (id_trabajador, anio, mes);


--
-- TOC entry 5989 (class 2606 OID 187392)
-- Name: descuentoticket_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY descuentoticket
    ADD CONSTRAINT descuentoticket_pkey PRIMARY KEY (id_descuento_ticket);


--
-- TOC entry 5991 (class 2606 OID 187394)
-- Name: detalledisquete_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY detalledisquete
    ADD CONSTRAINT detalledisquete_cod UNIQUE (id_disquete, tipo_registro, numero_campo);


--
-- TOC entry 5993 (class 2606 OID 187396)
-- Name: detalledisquete_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY detalledisquete
    ADD CONSTRAINT detalledisquete_pkey PRIMARY KEY (id_detalle_disquete);


--
-- TOC entry 5995 (class 2606 OID 187398)
-- Name: detalletabulador_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY detalletabulador
    ADD CONSTRAINT detalletabulador_cod UNIQUE (id_tabulador, grado, sub_grado, paso);


--
-- TOC entry 5997 (class 2606 OID 187400)
-- Name: detalletabulador_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY detalletabulador
    ADD CONSTRAINT detalletabulador_pkey PRIMARY KEY (id_detalle_tabulador);


--
-- TOC entry 5999 (class 2606 OID 187402)
-- Name: detalletabuladormed_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY detalletabuladormed
    ADD CONSTRAINT detalletabuladormed_cod UNIQUE (id_tabulador, cod_cargo);


--
-- TOC entry 6001 (class 2606 OID 187404)
-- Name: detalletabuladormed_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY detalletabuladormed
    ADD CONSTRAINT detalletabuladormed_pkey PRIMARY KEY (id_detalle_tabulador_med);


--
-- TOC entry 6003 (class 2606 OID 187406)
-- Name: detalletabuladormre_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY detalletabuladormre
    ADD CONSTRAINT detalletabuladormre_cod UNIQUE (id_tabulador, id_ciudad, nivel);


--
-- TOC entry 6005 (class 2606 OID 187408)
-- Name: detalletabuladormre_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY detalletabuladormre
    ADD CONSTRAINT detalletabuladormre_pkey PRIMARY KEY (id_detalle_tabulador_mre);


--
-- TOC entry 6007 (class 2606 OID 187410)
-- Name: detalletabuladoronu_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY detalletabuladoronu
    ADD CONSTRAINT detalletabuladoronu_cod UNIQUE (id_tabulador, nivel, estado_civil, anios_servicio);


--
-- TOC entry 6009 (class 2606 OID 187412)
-- Name: detalletabuladoronu_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY detalletabuladoronu
    ADD CONSTRAINT detalletabuladoronu_pkey PRIMARY KEY (id_detalle_tabulador_onu);


--
-- TOC entry 6011 (class 2606 OID 187414)
-- Name: disquete_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY disquete
    ADD CONSTRAINT disquete_cod UNIQUE (cod_disquete);


--
-- TOC entry 6013 (class 2606 OID 187416)
-- Name: disquete_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY disquete
    ADD CONSTRAINT disquete_pkey PRIMARY KEY (id_disquete);


--
-- TOC entry 6015 (class 2606 OID 187418)
-- Name: dotacioncargo_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dotacioncargo
    ADD CONSTRAINT dotacioncargo_cod UNIQUE (id_tipo_personal, id_cargo, id_dotacion_cargo, id_subtipo_dotacion);


--
-- TOC entry 6017 (class 2606 OID 187420)
-- Name: dotacioncargo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dotacioncargo
    ADD CONSTRAINT dotacioncargo_pkey PRIMARY KEY (id_dotacion_cargo);


--
-- TOC entry 6019 (class 2606 OID 187422)
-- Name: dotacionentregada_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dotacionentregada
    ADD CONSTRAINT dotacionentregada_pkey PRIMARY KEY (id_dotacion_entregada);


--
-- TOC entry 6021 (class 2606 OID 187424)
-- Name: dotaciontrabajador_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dotaciontrabajador
    ADD CONSTRAINT dotaciontrabajador_pkey PRIMARY KEY (id_dotacion_trabajador);


--
-- TOC entry 6024 (class 2606 OID 187426)
-- Name: educacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY educacion
    ADD CONSTRAINT educacion_pkey PRIMARY KEY (id_educacion);


--
-- TOC entry 6026 (class 2606 OID 187428)
-- Name: elegible_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elegible
    ADD CONSTRAINT elegible_pkey PRIMARY KEY (id_elegible);


--
-- TOC entry 6028 (class 2606 OID 187430)
-- Name: elegibleactividaddocente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elegibleactividaddocente
    ADD CONSTRAINT elegibleactividaddocente_pkey PRIMARY KEY (id_elegible_actividad_docente);


--
-- TOC entry 6030 (class 2606 OID 187432)
-- Name: elegibleafiliacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elegibleafiliacion
    ADD CONSTRAINT elegibleafiliacion_pkey PRIMARY KEY (id_elegible_afiliacion);


--
-- TOC entry 6032 (class 2606 OID 187434)
-- Name: elegiblecertificacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elegiblecertificacion
    ADD CONSTRAINT elegiblecertificacion_pkey PRIMARY KEY (id_elegible_certificacion);


--
-- TOC entry 6034 (class 2606 OID 187436)
-- Name: elegibleeducacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elegibleeducacion
    ADD CONSTRAINT elegibleeducacion_pkey PRIMARY KEY (id_elegible_educacion);


--
-- TOC entry 6036 (class 2606 OID 187438)
-- Name: elegibleestudio_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elegibleestudio
    ADD CONSTRAINT elegibleestudio_pkey PRIMARY KEY (id_elegible_estudio);


--
-- TOC entry 6038 (class 2606 OID 187440)
-- Name: elegibleexperiencia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elegibleexperiencia
    ADD CONSTRAINT elegibleexperiencia_pkey PRIMARY KEY (id_elegible_experiencia);


--
-- TOC entry 6040 (class 2606 OID 187442)
-- Name: elegiblefamiliar_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elegiblefamiliar
    ADD CONSTRAINT elegiblefamiliar_pkey PRIMARY KEY (id_elegible_familiar);


--
-- TOC entry 6042 (class 2606 OID 187444)
-- Name: elegiblehabilidad_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elegiblehabilidad
    ADD CONSTRAINT elegiblehabilidad_cod UNIQUE (id_elegible, id_tipo_habilidad);


--
-- TOC entry 6044 (class 2606 OID 187446)
-- Name: elegiblehabilidad_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elegiblehabilidad
    ADD CONSTRAINT elegiblehabilidad_pkey PRIMARY KEY (id_elegible_habilidad);


--
-- TOC entry 6046 (class 2606 OID 187448)
-- Name: elegibleidioma_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elegibleidioma
    ADD CONSTRAINT elegibleidioma_cod UNIQUE (id_elegible, id_tipo_idioma);


--
-- TOC entry 6048 (class 2606 OID 187450)
-- Name: elegibleidioma_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elegibleidioma
    ADD CONSTRAINT elegibleidioma_pkey PRIMARY KEY (id_elegible_idioma);


--
-- TOC entry 6050 (class 2606 OID 187452)
-- Name: elegibleorganismo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elegibleorganismo
    ADD CONSTRAINT elegibleorganismo_pkey PRIMARY KEY (id_elegible_organismo);


--
-- TOC entry 6052 (class 2606 OID 187454)
-- Name: elegibleotraactividad_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elegibleotraactividad
    ADD CONSTRAINT elegibleotraactividad_pkey PRIMARY KEY (id_elegible_otra_actividad);


--
-- TOC entry 6054 (class 2606 OID 187456)
-- Name: elegibleprofesion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elegibleprofesion
    ADD CONSTRAINT elegibleprofesion_pkey PRIMARY KEY (id_elegible_profesion);


--
-- TOC entry 6056 (class 2606 OID 187458)
-- Name: elegiblepublicacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY elegiblepublicacion
    ADD CONSTRAINT elegiblepublicacion_pkey PRIMARY KEY (id_elegible_publicacion);


--
-- TOC entry 6058 (class 2606 OID 187460)
-- Name: embargo_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY embargo
    ADD CONSTRAINT embargo_cod UNIQUE (id_personal, fecha_vigencia);


--
-- TOC entry 6060 (class 2606 OID 187462)
-- Name: embargo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY embargo
    ADD CONSTRAINT embargo_pkey PRIMARY KEY (id_embargo);


--
-- TOC entry 6062 (class 2606 OID 187464)
-- Name: embargoconcepto_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY embargoconcepto
    ADD CONSTRAINT embargoconcepto_cod UNIQUE (id_embargo, id_concepto);


--
-- TOC entry 6064 (class 2606 OID 187466)
-- Name: embargoconcepto_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY embargoconcepto
    ADD CONSTRAINT embargoconcepto_pkey PRIMARY KEY (id_embargo_concepto);


--
-- TOC entry 6066 (class 2606 OID 187468)
-- Name: encabezadorendicionmensual_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY encabezadorendicionmensual
    ADD CONSTRAINT encabezadorendicionmensual_pkey PRIMARY KEY (id_encabezado_rendicion_mensual);


--
-- TOC entry 6068 (class 2606 OID 187470)
-- Name: encabezadoresumenmensual_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY encabezadoresumenmensual
    ADD CONSTRAINT encabezadoresumenmensual_pkey PRIMARY KEY (id_encabezado_resumen_mensual);


--
-- TOC entry 6071 (class 2606 OID 187472)
-- Name: encargaduria_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY encargaduria
    ADD CONSTRAINT encargaduria_pkey PRIMARY KEY (id_encargaduria);


--
-- TOC entry 6074 (class 2606 OID 187474)
-- Name: entidadeducativa_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY entidadeducativa
    ADD CONSTRAINT entidadeducativa_pkey PRIMARY KEY (id_entidad_educativa);


--
-- TOC entry 6078 (class 2606 OID 187476)
-- Name: escalacuadroonapre_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY escalacuadroonapre
    ADD CONSTRAINT escalacuadroonapre_pkey PRIMARY KEY (id_escalacuadroonapre);


--
-- TOC entry 6080 (class 2606 OID 187478)
-- Name: establecimientosalud_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY establecimientosalud
    ADD CONSTRAINT establecimientosalud_cod UNIQUE (cod_establecimiento_salud);


--
-- TOC entry 6082 (class 2606 OID 187480)
-- Name: establecimientosalud_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY establecimientosalud
    ADD CONSTRAINT establecimientosalud_pkey PRIMARY KEY (id_establecimiento_salud);


--
-- TOC entry 6086 (class 2606 OID 187482)
-- Name: estado_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY estado
    ADD CONSTRAINT estado_pkey PRIMARY KEY (id_estado);


--
-- TOC entry 6088 (class 2606 OID 187484)
-- Name: estructura_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY estructura
    ADD CONSTRAINT estructura_pkey PRIMARY KEY (id_estructura);


--
-- TOC entry 6091 (class 2606 OID 187486)
-- Name: estudio_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY estudio
    ADD CONSTRAINT estudio_pkey PRIMARY KEY (id_estudio);


--
-- TOC entry 6093 (class 2606 OID 187488)
-- Name: evaluacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY evaluacion
    ADD CONSTRAINT evaluacion_pkey PRIMARY KEY (id_evaluacion);


--
-- TOC entry 6095 (class 2606 OID 187490)
-- Name: excepcionbeneficiario_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY excepcionbeneficiario
    ADD CONSTRAINT excepcionbeneficiario_cod UNIQUE (id_personal, id_familiar, id_plan_poliza);


--
-- TOC entry 6097 (class 2606 OID 187492)
-- Name: excepcionbeneficiario_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY excepcionbeneficiario
    ADD CONSTRAINT excepcionbeneficiario_pkey PRIMARY KEY (id_excepcion_beneficiario);


--
-- TOC entry 6099 (class 2606 OID 187494)
-- Name: excepcionticket_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY excepcionticket
    ADD CONSTRAINT excepcionticket_cod UNIQUE (id_trabajador);


--
-- TOC entry 6101 (class 2606 OID 187496)
-- Name: excepcionticket_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY excepcionticket
    ADD CONSTRAINT excepcionticket_pkey PRIMARY KEY (id_excepcion_ticket);


--
-- TOC entry 6103 (class 2606 OID 187498)
-- Name: excepciontitular_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY excepciontitular
    ADD CONSTRAINT excepciontitular_cod UNIQUE (id_personal, id_plan_poliza);


--
-- TOC entry 6105 (class 2606 OID 187500)
-- Name: excepciontitular_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY excepciontitular
    ADD CONSTRAINT excepciontitular_pkey PRIMARY KEY (id_excepcion_titular);


--
-- TOC entry 6108 (class 2606 OID 187502)
-- Name: experiencia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY experiencia
    ADD CONSTRAINT experiencia_pkey PRIMARY KEY (id_experiencia);


--
-- TOC entry 6110 (class 2606 OID 187504)
-- Name: experienciacargo_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY experienciacargo
    ADD CONSTRAINT experienciacargo_cod UNIQUE (id_cargo, id_cargo_requerido);


--
-- TOC entry 6112 (class 2606 OID 187506)
-- Name: experienciacargo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY experienciacargo
    ADD CONSTRAINT experienciacargo_pkey PRIMARY KEY (id_experiencia_cargo);


--
-- TOC entry 6115 (class 2606 OID 187508)
-- Name: experiencianoest_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY experiencianoest
    ADD CONSTRAINT experiencianoest_pkey PRIMARY KEY (id_experiencia_no_est);


--
-- TOC entry 6117 (class 2606 OID 187510)
-- Name: familiar_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY familiar
    ADD CONSTRAINT familiar_pkey PRIMARY KEY (id_familiar);


--
-- TOC entry 6119 (class 2606 OID 187512)
-- Name: fideicomiso_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY fideicomiso
    ADD CONSTRAINT fideicomiso_pkey PRIMARY KEY (id_fideicomiso);


--
-- TOC entry 6121 (class 2606 OID 187514)
-- Name: firmasreportes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY firmasreportes
    ADD CONSTRAINT firmasreportes_pkey PRIMARY KEY (id_firmas_reportes);


--
-- TOC entry 6125 (class 2606 OID 187516)
-- Name: frecuenciapago_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY frecuenciapago
    ADD CONSTRAINT frecuenciapago_pkey PRIMARY KEY (id_frecuencia_pago);


--
-- TOC entry 6128 (class 2606 OID 187518)
-- Name: frecuenciatipopersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY frecuenciatipopersonal
    ADD CONSTRAINT frecuenciatipopersonal_pkey PRIMARY KEY (id_frecuencia_tipo_personal);


--
-- TOC entry 6130 (class 2606 OID 187520)
-- Name: fuentefinanciamiento_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY fuentefinanciamiento
    ADD CONSTRAINT fuentefinanciamiento_pkey PRIMARY KEY (id_fuente_financiamiento);


--
-- TOC entry 6133 (class 2606 OID 187522)
-- Name: gradodocente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY gradodocente
    ADD CONSTRAINT gradodocente_pkey PRIMARY KEY (id_grado_docente);


--
-- TOC entry 6135 (class 2606 OID 187524)
-- Name: gradoniveldocente_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY gradoniveldocente
    ADD CONSTRAINT gradoniveldocente_cod UNIQUE (id_grado_docente, id_nivel_docente);


--
-- TOC entry 6137 (class 2606 OID 187526)
-- Name: gradoniveldocente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY gradoniveldocente
    ADD CONSTRAINT gradoniveldocente_pkey PRIMARY KEY (id_grado_nivel_docente);


--
-- TOC entry 6140 (class 2606 OID 187528)
-- Name: gremio_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY gremio
    ADD CONSTRAINT gremio_pkey PRIMARY KEY (id_gremio);


--
-- TOC entry 6143 (class 2606 OID 187530)
-- Name: gruponomina_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY gruponomina
    ADD CONSTRAINT gruponomina_pkey PRIMARY KEY (id_grupo_nomina);


--
-- TOC entry 6146 (class 2606 OID 187532)
-- Name: grupoocupacional_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY grupoocupacional
    ADD CONSTRAINT grupoocupacional_pkey PRIMARY KEY (id_grupo_ocupacional);


--
-- TOC entry 6150 (class 2606 OID 187534)
-- Name: grupoorganismo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY grupoorganismo
    ADD CONSTRAINT grupoorganismo_pkey PRIMARY KEY (id_grupo_organismo);


--
-- TOC entry 6153 (class 2606 OID 187536)
-- Name: grupoprofesion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY grupoprofesion
    ADD CONSTRAINT grupoprofesion_pkey PRIMARY KEY (id_grupo_profesion);


--
-- TOC entry 6155 (class 2606 OID 187538)
-- Name: grupoticket_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY grupoticket
    ADD CONSTRAINT grupoticket_pkey PRIMARY KEY (id_grupo_ticket);


--
-- TOC entry 6157 (class 2606 OID 187540)
-- Name: guarderia_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY guarderia
    ADD CONSTRAINT guarderia_cod UNIQUE (cod_guarderia);


--
-- TOC entry 6159 (class 2606 OID 187542)
-- Name: guarderia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY guarderia
    ADD CONSTRAINT guarderia_pkey PRIMARY KEY (id_guarderia);


--
-- TOC entry 6161 (class 2606 OID 187544)
-- Name: guarderiafamiliar_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY guarderiafamiliar
    ADD CONSTRAINT guarderiafamiliar_cod UNIQUE (id_personal, id_familiar);


--
-- TOC entry 6163 (class 2606 OID 187546)
-- Name: guarderiafamiliar_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY guarderiafamiliar
    ADD CONSTRAINT guarderiafamiliar_pkey PRIMARY KEY (id_guarderia_familiar);


--
-- TOC entry 6165 (class 2606 OID 187548)
-- Name: habilidad_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY habilidad
    ADD CONSTRAINT habilidad_cod UNIQUE (id_personal, id_tipo_habilidad);


--
-- TOC entry 6167 (class 2606 OID 187550)
-- Name: habilidad_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY habilidad
    ADD CONSTRAINT habilidad_pkey PRIMARY KEY (id_habilidad);


--
-- TOC entry 6169 (class 2606 OID 187552)
-- Name: habilidadcargo_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY habilidadcargo
    ADD CONSTRAINT habilidadcargo_cod UNIQUE (id_cargo, id_tipo_habilidad, nivel);


--
-- TOC entry 6171 (class 2606 OID 187554)
-- Name: habilidadcargo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY habilidadcargo
    ADD CONSTRAINT habilidadcargo_pkey PRIMARY KEY (id_habilidad_cargo);


--
-- TOC entry 6173 (class 2606 OID 187556)
-- Name: historialapn_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY historialapn
    ADD CONSTRAINT historialapn_pkey PRIMARY KEY (id_historial_apn);


--
-- TOC entry 6175 (class 2606 OID 187558)
-- Name: historialorganismo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY historialorganismo
    ADD CONSTRAINT historialorganismo_pkey PRIMARY KEY (id_historial_organismo);


--
-- TOC entry 6178 (class 2606 OID 187560)
-- Name: historialremun_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY historialremun
    ADD CONSTRAINT historialremun_pkey PRIMARY KEY (id_historial_remun);


--
-- TOC entry 6184 (class 2606 OID 187562)
-- Name: historico_devengado_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY historicodevengadointegral
    ADD CONSTRAINT historico_devengado_cod UNIQUE (id_personal, anio, mes);


--
-- TOC entry 6186 (class 2606 OID 187564)
-- Name: historico_devengado_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY historicodevengadointegral
    ADD CONSTRAINT historico_devengado_pkey PRIMARY KEY (id_historico_devengado_integral);


--
-- TOC entry 6180 (class 2606 OID 187566)
-- Name: historicobaseislr_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY historicobaseislr
    ADD CONSTRAINT historicobaseislr_pkey PRIMARY KEY (id_historico_base_islr);


--
-- TOC entry 6182 (class 2606 OID 187568)
-- Name: historicocargos_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY historicocargos
    ADD CONSTRAINT historicocargos_pkey PRIMARY KEY (id_historico_cargos);


--
-- TOC entry 6191 (class 2606 OID 187570)
-- Name: historiconomina_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY historiconomina
    ADD CONSTRAINT historiconomina_pkey PRIMARY KEY (id_historico_nomina);


--
-- TOC entry 6196 (class 2606 OID 187572)
-- Name: historicoquincena_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY historicoquincena
    ADD CONSTRAINT historicoquincena_pkey PRIMARY KEY (id_historico_quincena);


--
-- TOC entry 6201 (class 2606 OID 187574)
-- Name: historicosemana_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY historicosemana
    ADD CONSTRAINT historicosemana_pkey PRIMARY KEY (id_historico_semana);


--
-- TOC entry 6203 (class 2606 OID 187576)
-- Name: historicoticket_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY historicoticket
    ADD CONSTRAINT historicoticket_pkey PRIMARY KEY (id_historico_ticket);


--
-- TOC entry 6505 (class 2606 OID 187578)
-- Name: id_pueblo_indigena_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY puebloindigena
    ADD CONSTRAINT id_pueblo_indigena_pkey PRIMARY KEY (id_pueblo_indigena);


--
-- TOC entry 6205 (class 2606 OID 187580)
-- Name: identity_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY identity
    ADD CONSTRAINT identity_pkey PRIMARY KEY (name);


--
-- TOC entry 6208 (class 2606 OID 187582)
-- Name: idioma_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY idioma
    ADD CONSTRAINT idioma_pkey PRIMARY KEY (id_idioma);


--
-- TOC entry 6210 (class 2606 OID 187584)
-- Name: inhabilitado_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY inhabilitado
    ADD CONSTRAINT inhabilitado_pkey PRIMARY KEY (id_inhabilitado);


--
-- TOC entry 6212 (class 2606 OID 187586)
-- Name: instancia_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY instancia
    ADD CONSTRAINT instancia_cod UNIQUE (cod_instancia);


--
-- TOC entry 6214 (class 2606 OID 187588)
-- Name: instancia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY instancia
    ADD CONSTRAINT instancia_pkey PRIMARY KEY (id_instancia);


--
-- TOC entry 6217 (class 2606 OID 187590)
-- Name: institucion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY institucion
    ADD CONSTRAINT institucion_pkey PRIMARY KEY (id_institucion);


--
-- TOC entry 6219 (class 2606 OID 187592)
-- Name: interesadicional_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY interesadicional
    ADD CONSTRAINT interesadicional_pkey PRIMARY KEY (id_interes_adicional);


--
-- TOC entry 6221 (class 2606 OID 187594)
-- Name: interesnuevoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY interesnuevoregimen
    ADD CONSTRAINT interesnuevoregimen_pkey PRIMARY KEY (id_interes_nuevo_regimen);


--
-- TOC entry 6223 (class 2606 OID 187596)
-- Name: interesviejoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY interesviejoregimen
    ADD CONSTRAINT interesviejoregimen_pkey PRIMARY KEY (id_interes_viejo_regimen);


--
-- TOC entry 6225 (class 2606 OID 187598)
-- Name: jerarquiacategoriadocente_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jerarquiacategoriadocente
    ADD CONSTRAINT jerarquiacategoriadocente_cod UNIQUE (id_jerarquia_docente, id_categoria_docente);


--
-- TOC entry 6227 (class 2606 OID 187600)
-- Name: jerarquiacategoriadocente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jerarquiacategoriadocente
    ADD CONSTRAINT jerarquiacategoriadocente_pkey PRIMARY KEY (id_jerarquia_categoria_docente);


--
-- TOC entry 6230 (class 2606 OID 187602)
-- Name: jerarquiadocente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jerarquiadocente
    ADD CONSTRAINT jerarquiadocente_pkey PRIMARY KEY (id_jerarquia_docente);


--
-- TOC entry 6233 (class 2606 OID 187604)
-- Name: jubilado_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY jubilado
    ADD CONSTRAINT jubilado_pkey PRIMARY KEY (id_jubilado);


--
-- TOC entry 6235 (class 2606 OID 187606)
-- Name: juguete_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY juguete
    ADD CONSTRAINT juguete_cod UNIQUE (id_personal, id_familiar);


--
-- TOC entry 6237 (class 2606 OID 187608)
-- Name: juguete_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY juguete
    ADD CONSTRAINT juguete_pkey PRIMARY KEY (id_juguete);


--
-- TOC entry 6241 (class 2606 OID 187610)
-- Name: liqinteresnuevoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY liquidacioninteresnuevoregimen
    ADD CONSTRAINT liqinteresnuevoregimen_pkey PRIMARY KEY (id_liquidacion_interes_nuevo_regimen);


--
-- TOC entry 6239 (class 2606 OID 187612)
-- Name: liquidacioninteresadicional_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY liquidacioninteresadicional
    ADD CONSTRAINT liquidacioninteresadicional_pkey PRIMARY KEY (id_liquidacion_interes_adicional);


--
-- TOC entry 6243 (class 2606 OID 187614)
-- Name: liquidacioninteresviejoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY liquidacioninteresviejoregimen
    ADD CONSTRAINT liquidacioninteresviejoregimen_pkey PRIMARY KEY (id_liquidacion_interes_viejo_regimen);


--
-- TOC entry 6245 (class 2606 OID 187616)
-- Name: liquidacionprestmen_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY liquidacionprestacionesmensuales
    ADD CONSTRAINT liquidacionprestmen_cod UNIQUE (id_trabajador, anio, mes);


--
-- TOC entry 6247 (class 2606 OID 187618)
-- Name: liquidacionprestmen_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY liquidacionprestacionesmensuales
    ADD CONSTRAINT liquidacionprestmen_pkey PRIMARY KEY (id_liquidacion_prestaciones_mensuales);


--
-- TOC entry 6249 (class 2606 OID 187620)
-- Name: liquidacionresumennuevoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY liquidacionresumennuevoregimen
    ADD CONSTRAINT liquidacionresumennuevoregimen_pkey PRIMARY KEY (id_liquidacion_resumen_nuevo_regimen);


--
-- TOC entry 6251 (class 2606 OID 187622)
-- Name: liquidacionresumenviejoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY liquidacionresumenviejoregimen
    ADD CONSTRAINT liquidacionresumenviejoregimen_pkey PRIMARY KEY (id_liquidacion_resumen_viejo_regimen);


--
-- TOC entry 6254 (class 2606 OID 187624)
-- Name: lugarpago_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY lugarpago
    ADD CONSTRAINT lugarpago_pkey PRIMARY KEY (id_lugar_pago);


--
-- TOC entry 6257 (class 2606 OID 187626)
-- Name: manualcargo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY manualcargo
    ADD CONSTRAINT manualcargo_pkey PRIMARY KEY (id_manual_cargo);


--
-- TOC entry 6260 (class 2606 OID 187628)
-- Name: manualpersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY manualpersonal
    ADD CONSTRAINT manualpersonal_pkey PRIMARY KEY (id_manual_personal);


--
-- TOC entry 6262 (class 2606 OID 187630)
-- Name: materia_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY materia
    ADD CONSTRAINT materia_cod UNIQUE (cod_materia);


--
-- TOC entry 6264 (class 2606 OID 187632)
-- Name: materia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY materia
    ADD CONSTRAINT materia_pkey PRIMARY KEY (id_materia);


--
-- TOC entry 6267 (class 2606 OID 187634)
-- Name: mes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mes
    ADD CONSTRAINT mes_pkey PRIMARY KEY (id_mes);


--
-- TOC entry 6269 (class 2606 OID 187636)
-- Name: mesesjubilacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mesesjubilacion
    ADD CONSTRAINT mesesjubilacion_pkey PRIMARY KEY (id_trabajador, anio, mes);


--
-- TOC entry 6271 (class 2606 OID 187638)
-- Name: movimientocargo_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY movimientocargo
    ADD CONSTRAINT movimientocargo_cod UNIQUE (cod_movimiento_cargo);


--
-- TOC entry 6273 (class 2606 OID 187640)
-- Name: movimientocargo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY movimientocargo
    ADD CONSTRAINT movimientocargo_pkey PRIMARY KEY (id_movimiento_cargo);


--
-- TOC entry 6276 (class 2606 OID 187642)
-- Name: movimientopersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY movimientopersonal
    ADD CONSTRAINT movimientopersonal_pkey PRIMARY KEY (id_movimiento_personal);


--
-- TOC entry 6278 (class 2606 OID 187644)
-- Name: movimientoregistro_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY movimientoregistro
    ADD CONSTRAINT movimientoregistro_pkey PRIMARY KEY (id_movimiento_registro);


--
-- TOC entry 6280 (class 2606 OID 187646)
-- Name: movimientoscio_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY movimientoscio
    ADD CONSTRAINT movimientoscio_pkey PRIMARY KEY (id_movimiento_scio);


--
-- TOC entry 6282 (class 2606 OID 187648)
-- Name: movimientositp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY movimientositp
    ADD CONSTRAINT movimientositp_pkey PRIMARY KEY (id_movimiento_sitp);


--
-- TOC entry 6284 (class 2606 OID 187650)
-- Name: movimientosplan_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY movimientosplan
    ADD CONSTRAINT movimientosplan_pkey PRIMARY KEY (id_movimientos_plan);


--
-- TOC entry 6287 (class 2606 OID 187652)
-- Name: movremuneracion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY movremuneracion
    ADD CONSTRAINT movremuneracion_pkey PRIMARY KEY (id_mov_remuneracion);


--
-- TOC entry 6291 (class 2606 OID 187654)
-- Name: municipio_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY municipio
    ADD CONSTRAINT municipio_pkey PRIMARY KEY (id_municipio);


--
-- TOC entry 6293 (class 2606 OID 187656)
-- Name: nivelbeca_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nivelbeca
    ADD CONSTRAINT nivelbeca_cod UNIQUE (nivel_educativo);


--
-- TOC entry 6295 (class 2606 OID 187658)
-- Name: nivelbeca_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nivelbeca
    ADD CONSTRAINT nivelbeca_pkey PRIMARY KEY (id_nivel_beca);


--
-- TOC entry 6298 (class 2606 OID 187660)
-- Name: niveldocente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY niveldocente
    ADD CONSTRAINT niveldocente_pkey PRIMARY KEY (id_nivel_docente);


--
-- TOC entry 6301 (class 2606 OID 187662)
-- Name: niveleducativo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY niveleducativo
    ADD CONSTRAINT niveleducativo_pkey PRIMARY KEY (id_nivel_educativo);


--
-- TOC entry 6303 (class 2606 OID 187664)
-- Name: noevaluacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY noevaluacion
    ADD CONSTRAINT noevaluacion_pkey PRIMARY KEY (id_no_evaluacion);


--
-- TOC entry 6306 (class 2606 OID 187666)
-- Name: nombreorganismo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nombreorganismo
    ADD CONSTRAINT nombreorganismo_pkey PRIMARY KEY (id_nombre_organismo);


--
-- TOC entry 6309 (class 2606 OID 187668)
-- Name: nominaconversion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nominaconversion
    ADD CONSTRAINT nominaconversion_pkey PRIMARY KEY (id_nomina_conversion);


--
-- TOC entry 6311 (class 2606 OID 187670)
-- Name: nominadiplomatico_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nominadiplomatico
    ADD CONSTRAINT nominadiplomatico_pkey PRIMARY KEY (id_nomina_diplomatico);


--
-- TOC entry 6313 (class 2606 OID 187672)
-- Name: nominaespecial_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nominaespecial
    ADD CONSTRAINT nominaespecial_pkey PRIMARY KEY (id_nomina_especial);


--
-- TOC entry 6315 (class 2606 OID 187674)
-- Name: opcion_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY opcion
    ADD CONSTRAINT opcion_cod UNIQUE (codigo_opcion);


--
-- TOC entry 6317 (class 2606 OID 187676)
-- Name: opcion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY opcion
    ADD CONSTRAINT opcion_pkey PRIMARY KEY (id_opcion);


--
-- TOC entry 6319 (class 2606 OID 187678)
-- Name: operacion_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY operacion
    ADD CONSTRAINT operacion_cod UNIQUE (cod_operacion);


--
-- TOC entry 6321 (class 2606 OID 187680)
-- Name: operacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY operacion
    ADD CONSTRAINT operacion_pkey PRIMARY KEY (id_operacion);


--
-- TOC entry 6325 (class 2606 OID 187682)
-- Name: organismo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY organismo
    ADD CONSTRAINT organismo_pkey PRIMARY KEY (id_organismo);


--
-- TOC entry 6327 (class 2606 OID 187684)
-- Name: otraactividad_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY otraactividad
    ADD CONSTRAINT otraactividad_pkey PRIMARY KEY (id_otra_actividad);


--
-- TOC entry 6331 (class 2606 OID 187686)
-- Name: otrasalicuotas_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY otrasalicuotas
    ADD CONSTRAINT otrasalicuotas_pkey PRIMARY KEY (id_otras_alicuotas);


--
-- TOC entry 6333 (class 2606 OID 187688)
-- Name: pagoguarderia_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pagoguarderia
    ADD CONSTRAINT pagoguarderia_cod UNIQUE (id_personal, id_familiar, anio, mes, inscripcion);


--
-- TOC entry 6335 (class 2606 OID 187690)
-- Name: pagoguarderia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pagoguarderia
    ADD CONSTRAINT pagoguarderia_pkey PRIMARY KEY (id_pago_guarderia);


--
-- TOC entry 6338 (class 2606 OID 187692)
-- Name: pais_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pais
    ADD CONSTRAINT pais_pkey PRIMARY KEY (id_pais);


--
-- TOC entry 6340 (class 2606 OID 187694)
-- Name: parametroari_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametroari
    ADD CONSTRAINT parametroari_cod UNIQUE (unidad_tributaria);


--
-- TOC entry 6342 (class 2606 OID 187696)
-- Name: parametroari_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametroari
    ADD CONSTRAINT parametroari_pkey PRIMARY KEY (id_parametro_ari);


--
-- TOC entry 6344 (class 2606 OID 187698)
-- Name: parametrobeca_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametrobeca
    ADD CONSTRAINT parametrobeca_pkey PRIMARY KEY (id_parametro_beca);


--
-- TOC entry 6346 (class 2606 OID 187700)
-- Name: parametrobecageneral_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametrobecageneral
    ADD CONSTRAINT parametrobecageneral_pkey PRIMARY KEY (id_parametro_beca_general);


--
-- TOC entry 6348 (class 2606 OID 187702)
-- Name: parametrocaja_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametrocaja
    ADD CONSTRAINT parametrocaja_cod UNIQUE (id_concepto_tipo_personal);


--
-- TOC entry 6350 (class 2606 OID 187704)
-- Name: parametrocaja_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametrocaja
    ADD CONSTRAINT parametrocaja_pkey PRIMARY KEY (id_parametro_caja);


--
-- TOC entry 6352 (class 2606 OID 187706)
-- Name: parametrodotacion_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametrodotacion
    ADD CONSTRAINT parametrodotacion_cod UNIQUE (id_tipo_personal, id_tipo_dotacion);


--
-- TOC entry 6354 (class 2606 OID 187708)
-- Name: parametrodotacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametrodotacion
    ADD CONSTRAINT parametrodotacion_pkey PRIMARY KEY (id_parametro_dotacion);


--
-- TOC entry 6356 (class 2606 OID 187710)
-- Name: parametrogobierno_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametrogobierno
    ADD CONSTRAINT parametrogobierno_cod UNIQUE (id_grupo_organismo);


--
-- TOC entry 6358 (class 2606 OID 187712)
-- Name: parametrogobierno_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametrogobierno
    ADD CONSTRAINT parametrogobierno_pkey PRIMARY KEY (id_parametro_gobierno);


--
-- TOC entry 6360 (class 2606 OID 187714)
-- Name: parametroguarderia_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametroguarderia
    ADD CONSTRAINT parametroguarderia_cod UNIQUE (id_tipo_personal);


--
-- TOC entry 6362 (class 2606 OID 187716)
-- Name: parametroguarderia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametroguarderia
    ADD CONSTRAINT parametroguarderia_pkey PRIMARY KEY (id_parametro_guarderia);


--
-- TOC entry 6364 (class 2606 OID 187718)
-- Name: parametrojubilacion_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametrojubilacion
    ADD CONSTRAINT parametrojubilacion_cod UNIQUE (id_tipo_personal);


--
-- TOC entry 6366 (class 2606 OID 187720)
-- Name: parametrojubilacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametrojubilacion
    ADD CONSTRAINT parametrojubilacion_pkey PRIMARY KEY (id_parametro_jubilacion);


--
-- TOC entry 6368 (class 2606 OID 187722)
-- Name: parametrojuguete_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametrojuguete
    ADD CONSTRAINT parametrojuguete_cod UNIQUE (id_tipo_personal);


--
-- TOC entry 6370 (class 2606 OID 187724)
-- Name: parametrojuguete_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametrojuguete
    ADD CONSTRAINT parametrojuguete_pkey PRIMARY KEY (id_parametro_juguete);


--
-- TOC entry 6372 (class 2606 OID 187726)
-- Name: parametroticket_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametroticket
    ADD CONSTRAINT parametroticket_cod UNIQUE (id_tipo_personal);


--
-- TOC entry 6374 (class 2606 OID 187728)
-- Name: parametroticket_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametroticket
    ADD CONSTRAINT parametroticket_pkey PRIMARY KEY (id_parametro_ticket);


--
-- TOC entry 6377 (class 2606 OID 187730)
-- Name: parametroutiles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametroutiles
    ADD CONSTRAINT parametroutiles_pkey PRIMARY KEY (id_parametro_utiles);


--
-- TOC entry 6379 (class 2606 OID 187732)
-- Name: parametrovarios_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametrovarios
    ADD CONSTRAINT parametrovarios_cod UNIQUE (id_tipo_personal);


--
-- TOC entry 6381 (class 2606 OID 187734)
-- Name: parametrovarios_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parametrovarios
    ADD CONSTRAINT parametrovarios_pkey PRIMARY KEY (id_parametro_varios);


--
-- TOC entry 6385 (class 2606 OID 187736)
-- Name: parroquia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY parroquia
    ADD CONSTRAINT parroquia_pkey PRIMARY KEY (id_parroquia);


--
-- TOC entry 6387 (class 2606 OID 187738)
-- Name: participante_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY participante
    ADD CONSTRAINT participante_pkey PRIMARY KEY (id_participante);


--
-- TOC entry 6389 (class 2606 OID 187740)
-- Name: partidauelespecifica_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY partidauelespecifica
    ADD CONSTRAINT partidauelespecifica_cod UNIQUE (id_uel_especifica, id_cuenta_presupuesto);


--
-- TOC entry 6391 (class 2606 OID 187742)
-- Name: partidauelespecifica_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY partidauelespecifica
    ADD CONSTRAINT partidauelespecifica_pkey PRIMARY KEY (id_partida_uel_especifica);


--
-- TOC entry 6393 (class 2606 OID 187744)
-- Name: pasantia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pasantia
    ADD CONSTRAINT pasantia_pkey PRIMARY KEY (id_pasantia);


--
-- TOC entry 6395 (class 2606 OID 187746)
-- Name: pensioninvalidez_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pensioninvalidez
    ADD CONSTRAINT pensioninvalidez_pkey PRIMARY KEY (id_pension_invalidez);


--
-- TOC entry 6397 (class 2606 OID 187748)
-- Name: pensionsobreviviente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pensionsobreviviviente
    ADD CONSTRAINT pensionsobreviviente_pkey PRIMARY KEY (id_pension_sobreviviente);


--
-- TOC entry 6399 (class 2606 OID 187750)
-- Name: perfil_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY perfil
    ADD CONSTRAINT perfil_cod UNIQUE (id_cargo);


--
-- TOC entry 6401 (class 2606 OID 187752)
-- Name: perfil_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY perfil
    ADD CONSTRAINT perfil_pkey PRIMARY KEY (id_perfil);


--
-- TOC entry 6405 (class 2606 OID 187754)
-- Name: personal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY personal
    ADD CONSTRAINT personal_pkey PRIMARY KEY (id_personal);


--
-- TOC entry 6408 (class 2606 OID 187756)
-- Name: personalorganismo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY personalorganismo
    ADD CONSTRAINT personalorganismo_pkey PRIMARY KEY (id_personal_organismo);


--
-- TOC entry 6410 (class 2606 OID 187758)
-- Name: plan_adiestra_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY planadiestramiento
    ADD CONSTRAINT plan_adiestra_cod UNIQUE (id_unidad_funcional, anio, numero_plan);


--
-- TOC entry 6412 (class 2606 OID 187760)
-- Name: planadiestramiento_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY planadiestramiento
    ADD CONSTRAINT planadiestramiento_pkey PRIMARY KEY (id_plan_adiestramiento);


--
-- TOC entry 6414 (class 2606 OID 187762)
-- Name: planillaarc_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY planillaarc
    ADD CONSTRAINT planillaarc_cod UNIQUE (id_trabajador, anio);


--
-- TOC entry 6416 (class 2606 OID 187764)
-- Name: planillaarc_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY planillaarc
    ADD CONSTRAINT planillaarc_pkey PRIMARY KEY (id_planilla_arc);


--
-- TOC entry 6418 (class 2606 OID 187766)
-- Name: planillaari_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY planillaari
    ADD CONSTRAINT planillaari_cod UNIQUE (id_trabajador, anio);


--
-- TOC entry 6420 (class 2606 OID 187768)
-- Name: planillaari_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY planillaari
    ADD CONSTRAINT planillaari_pkey PRIMARY KEY (id_planilla_ari);


--
-- TOC entry 6422 (class 2606 OID 187770)
-- Name: planpersonal_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY planpersonal
    ADD CONSTRAINT planpersonal_cod UNIQUE (anio, version);


--
-- TOC entry 6424 (class 2606 OID 187772)
-- Name: planpersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY planpersonal
    ADD CONSTRAINT planpersonal_pkey PRIMARY KEY (id_plan_personal);


--
-- TOC entry 6426 (class 2606 OID 187774)
-- Name: planpoliza_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY planpoliza
    ADD CONSTRAINT planpoliza_cod UNIQUE (cod_plan_poliza);


--
-- TOC entry 6428 (class 2606 OID 187776)
-- Name: planpoliza_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY planpoliza
    ADD CONSTRAINT planpoliza_pkey PRIMARY KEY (id_plan_poliza);


--
-- TOC entry 6430 (class 2606 OID 187778)
-- Name: poliza_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY poliza
    ADD CONSTRAINT poliza_cod UNIQUE (cod_poliza);


--
-- TOC entry 6432 (class 2606 OID 187780)
-- Name: poliza_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY poliza
    ADD CONSTRAINT poliza_pkey PRIMARY KEY (id_poliza);


--
-- TOC entry 6434 (class 2606 OID 187782)
-- Name: postuladoconcurso_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY postuladoconcurso
    ADD CONSTRAINT postuladoconcurso_pkey PRIMARY KEY (id_postulado_concurso);


--
-- TOC entry 6436 (class 2606 OID 187784)
-- Name: postuladoexterno_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY postuladoexterno
    ADD CONSTRAINT postuladoexterno_pkey PRIMARY KEY (id_postulado_externo);


--
-- TOC entry 6450 (class 2606 OID 187786)
-- Name: preespecifica_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY presupuestoespecifica
    ADD CONSTRAINT preespecifica_cod UNIQUE (anio, id_uel_especifica, id_cuenta_presupuesto);


--
-- TOC entry 6448 (class 2606 OID 187788)
-- Name: prestamo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY prestamo
    ADD CONSTRAINT prestamo_pkey PRIMARY KEY (id_prestamo);


--
-- TOC entry 6438 (class 2606 OID 187790)
-- Name: prestmen_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY prestacionesmensuales
    ADD CONSTRAINT prestmen_cod UNIQUE (id_trabajador, anio, mes);


--
-- TOC entry 6440 (class 2606 OID 187792)
-- Name: prestmen_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY prestacionesmensuales
    ADD CONSTRAINT prestmen_pkey PRIMARY KEY (id_prestaciones_mensuales);


--
-- TOC entry 6444 (class 2606 OID 187794)
-- Name: prestonapre_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY prestacionesonapre
    ADD CONSTRAINT prestonapre_cod UNIQUE (id_trabajador, anio, mes);


--
-- TOC entry 6446 (class 2606 OID 187796)
-- Name: prestonapre_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY prestacionesonapre
    ADD CONSTRAINT prestonapre_pkey PRIMARY KEY (id_prestaciones_onapre);


--
-- TOC entry 6452 (class 2606 OID 187798)
-- Name: presupuestoespecifica_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY presupuestoespecifica
    ADD CONSTRAINT presupuestoespecifica_pkey PRIMARY KEY (id_presupuesto_especifica);


--
-- TOC entry 6454 (class 2606 OID 187800)
-- Name: primaantiguedad_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY primaantiguedad
    ADD CONSTRAINT primaantiguedad_cod UNIQUE (id_tipo_personal, anios_servicio);


--
-- TOC entry 6456 (class 2606 OID 187802)
-- Name: primaantiguedad_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY primaantiguedad
    ADD CONSTRAINT primaantiguedad_pkey PRIMARY KEY (id_prima_antiguedad);


--
-- TOC entry 6458 (class 2606 OID 187804)
-- Name: primahijo_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY primahijo
    ADD CONSTRAINT primahijo_cod UNIQUE (id_tipo_personal);


--
-- TOC entry 6460 (class 2606 OID 187806)
-- Name: primahijo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY primahijo
    ADD CONSTRAINT primahijo_pkey PRIMARY KEY (id_prima_hijo);


--
-- TOC entry 6462 (class 2606 OID 187808)
-- Name: primascargo_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY primascargo
    ADD CONSTRAINT primascargo_cod UNIQUE (id_primas_plan, id_cargo);


--
-- TOC entry 6464 (class 2606 OID 187810)
-- Name: primascargo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY primascargo
    ADD CONSTRAINT primascargo_pkey PRIMARY KEY (id_primas_cargo);


--
-- TOC entry 6466 (class 2606 OID 187812)
-- Name: primasplan_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY primasplan
    ADD CONSTRAINT primasplan_cod UNIQUE (id_plan_poliza, parentesco, edad_minima);


--
-- TOC entry 6468 (class 2606 OID 187814)
-- Name: primasplan_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY primasplan
    ADD CONSTRAINT primasplan_pkey PRIMARY KEY (id_primas_plan);


--
-- TOC entry 6471 (class 2606 OID 187816)
-- Name: profesion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY profesion
    ADD CONSTRAINT profesion_pkey PRIMARY KEY (id_profesion);


--
-- TOC entry 6473 (class 2606 OID 187818)
-- Name: profesioncargo_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY profesioncargo
    ADD CONSTRAINT profesioncargo_cod UNIQUE (id_cargo, id_profesion);


--
-- TOC entry 6475 (class 2606 OID 187820)
-- Name: profesioncargo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY profesioncargo
    ADD CONSTRAINT profesioncargo_pkey PRIMARY KEY (id_profesion_cargo);


--
-- TOC entry 6478 (class 2606 OID 187822)
-- Name: profesiontrabajador_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY profesiontrabajador
    ADD CONSTRAINT profesiontrabajador_pkey PRIMARY KEY (id_profesion_trabajador);


--
-- TOC entry 6481 (class 2606 OID 187824)
-- Name: programa_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY programa
    ADD CONSTRAINT programa_pkey PRIMARY KEY (id_programa);


--
-- TOC entry 6483 (class 2606 OID 187826)
-- Name: proveedorregion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY proveedorregion
    ADD CONSTRAINT proveedorregion_pkey PRIMARY KEY (id_proveedor_region);


--
-- TOC entry 6485 (class 2606 OID 187828)
-- Name: proveedorticket_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY proveedorticket
    ADD CONSTRAINT proveedorticket_cod UNIQUE (cod_proveedor_ticket);


--
-- TOC entry 6487 (class 2606 OID 187830)
-- Name: proveedorticket_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY proveedorticket
    ADD CONSTRAINT proveedorticket_pkey PRIMARY KEY (id_proveedor_ticket);


--
-- TOC entry 6489 (class 2606 OID 187832)
-- Name: proveedorubicacion_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY proveedorubicacion
    ADD CONSTRAINT proveedorubicacion_cod UNIQUE (codigo_ubicacion, id_proveedor_ticket);


--
-- TOC entry 6491 (class 2606 OID 187834)
-- Name: proveedorubicacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY proveedorubicacion
    ADD CONSTRAINT proveedorubicacion_pkey PRIMARY KEY (id_proveedor_ubicacion);


--
-- TOC entry 6493 (class 2606 OID 187836)
-- Name: proyecto_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY proyecto
    ADD CONSTRAINT proyecto_cod UNIQUE (anio, cod_proyecto);


--
-- TOC entry 6495 (class 2606 OID 187838)
-- Name: proyecto_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY proyecto
    ADD CONSTRAINT proyecto_pkey PRIMARY KEY (id_proyecto);


--
-- TOC entry 6497 (class 2606 OID 187840)
-- Name: pruebapreseleccion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pruebapreseleccionado
    ADD CONSTRAINT pruebapreseleccion_pkey PRIMARY KEY (id_prueba_preseleccionado);


--
-- TOC entry 6499 (class 2606 OID 187842)
-- Name: pruebaseleccion_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pruebaseleccion
    ADD CONSTRAINT pruebaseleccion_cod UNIQUE (cod_prueba);


--
-- TOC entry 6501 (class 2606 OID 187844)
-- Name: pruebaseleccion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pruebaseleccion
    ADD CONSTRAINT pruebaseleccion_pkey PRIMARY KEY (id_prueba_seleccion);


--
-- TOC entry 6503 (class 2606 OID 187846)
-- Name: publicacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY publicacion
    ADD CONSTRAINT publicacion_pkey PRIMARY KEY (id_publicacion);


--
-- TOC entry 6509 (class 2606 OID 187848)
-- Name: ramoocupacional_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY ramoocupacional
    ADD CONSTRAINT ramoocupacional_pkey PRIMARY KEY (id_ramo_ocupacional);


--
-- TOC entry 6512 (class 2606 OID 187850)
-- Name: reconocimiento_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY reconocimiento
    ADD CONSTRAINT reconocimiento_pkey PRIMARY KEY (id_reconocimiento);


--
-- TOC entry 6514 (class 2606 OID 187852)
-- Name: region_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY region
    ADD CONSTRAINT region_pkey PRIMARY KEY (id_region);


--
-- TOC entry 6516 (class 2606 OID 187854)
-- Name: regioncontinente_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY regioncontinente
    ADD CONSTRAINT regioncontinente_cod UNIQUE (cod_region_continente);


--
-- TOC entry 6518 (class 2606 OID 187856)
-- Name: regioncontinente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY regioncontinente
    ADD CONSTRAINT regioncontinente_pkey PRIMARY KEY (id_region_continente);


--
-- TOC entry 6521 (class 2606 OID 187858)
-- Name: registro_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY registro
    ADD CONSTRAINT registro_pkey PRIMARY KEY (id_registro);


--
-- TOC entry 6524 (class 2606 OID 187860)
-- Name: registrocargos_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY registrocargos
    ADD CONSTRAINT registrocargos_pkey PRIMARY KEY (id_registro_cargos);


--
-- TOC entry 6526 (class 2606 OID 187862)
-- Name: registrocargospr_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY registrocargosaprobado
    ADD CONSTRAINT registrocargospr_pkey PRIMARY KEY (id_registro_cargos_aprobado);


--
-- TOC entry 6528 (class 2606 OID 187864)
-- Name: registrodocente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY registrodocente
    ADD CONSTRAINT registrodocente_pkey PRIMARY KEY (id_registro_docente);


--
-- TOC entry 6531 (class 2606 OID 187866)
-- Name: registropersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY registropersonal
    ADD CONSTRAINT registropersonal_pkey PRIMARY KEY (id_registro_personal);


--
-- TOC entry 6533 (class 2606 OID 187868)
-- Name: registrositp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY registrositp
    ADD CONSTRAINT registrositp_pkey PRIMARY KEY (id_registro_sitp);


--
-- TOC entry 6536 (class 2606 OID 187870)
-- Name: relacionpersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY relacionpersonal
    ADD CONSTRAINT relacionpersonal_pkey PRIMARY KEY (id_relacion_personal);


--
-- TOC entry 6538 (class 2606 OID 187872)
-- Name: remesa_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY remesa
    ADD CONSTRAINT remesa_cod UNIQUE (id_organismo, anio, numero);


--
-- TOC entry 6540 (class 2606 OID 187874)
-- Name: remesa_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY remesa
    ADD CONSTRAINT remesa_pkey PRIMARY KEY (id_remesa);


--
-- TOC entry 6542 (class 2606 OID 187876)
-- Name: rendicionmensual_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY rendicionmensual
    ADD CONSTRAINT rendicionmensual_pkey PRIMARY KEY (id_rendicion_mensual);


--
-- TOC entry 6544 (class 2606 OID 187878)
-- Name: restringido_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY restringido
    ADD CONSTRAINT restringido_cod UNIQUE (id_tipo_personal, id_personal_restringido);


--
-- TOC entry 6546 (class 2606 OID 187880)
-- Name: restringido_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY restringido
    ADD CONSTRAINT restringido_pkey PRIMARY KEY (id_restringido);


--
-- TOC entry 6548 (class 2606 OID 187882)
-- Name: resultadoevaluacion_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY resultadoevaluacion
    ADD CONSTRAINT resultadoevaluacion_cod UNIQUE (id_tipo_personal, anio, cod_resultado_evaluacion);


--
-- TOC entry 6550 (class 2606 OID 187884)
-- Name: resultadoevaluacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY resultadoevaluacion
    ADD CONSTRAINT resultadoevaluacion_pkey PRIMARY KEY (id_resultado_evaluacion);


--
-- TOC entry 6552 (class 2606 OID 187886)
-- Name: resumenmensual_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY resumenmensual
    ADD CONSTRAINT resumenmensual_pkey PRIMARY KEY (id_resumen_mensual);


--
-- TOC entry 6554 (class 2606 OID 187888)
-- Name: resumennuevoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY resumennuevoregimen
    ADD CONSTRAINT resumennuevoregimen_pkey PRIMARY KEY (id_resumen_nuevo_regimen);


--
-- TOC entry 6556 (class 2606 OID 187890)
-- Name: resumenviejoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY resumenviejoregimen
    ADD CONSTRAINT resumenviejoregimen_pkey PRIMARY KEY (id_resumen_viejo_regimen);


--
-- TOC entry 6558 (class 2606 OID 187892)
-- Name: retroactivoticket_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY retroactivoticket
    ADD CONSTRAINT retroactivoticket_pkey PRIMARY KEY (id_retroactivo_ticket);


--
-- TOC entry 6560 (class 2606 OID 187894)
-- Name: rol_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY rol
    ADD CONSTRAINT rol_cod UNIQUE (codigo_rol);


--
-- TOC entry 6562 (class 2606 OID 187896)
-- Name: rol_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY rol
    ADD CONSTRAINT rol_pkey PRIMARY KEY (id_rol);


--
-- TOC entry 6564 (class 2606 OID 187898)
-- Name: rolopcion_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY rolopcion
    ADD CONSTRAINT rolopcion_cod UNIQUE (id_rol, id_opcion);


--
-- TOC entry 6566 (class 2606 OID 187900)
-- Name: rolopcion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY rolopcion
    ADD CONSTRAINT rolopcion_pkey PRIMARY KEY (id_rol_opcion);


--
-- TOC entry 6569 (class 2606 OID 187902)
-- Name: sancion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sancion
    ADD CONSTRAINT sancion_pkey PRIMARY KEY (id_sancion);


--
-- TOC entry 6572 (class 2606 OID 187904)
-- Name: sede_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sede
    ADD CONSTRAINT sede_pkey PRIMARY KEY (id_sede);


--
-- TOC entry 6574 (class 2606 OID 187906)
-- Name: sedediplomatica_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sedediplomatica
    ADD CONSTRAINT sedediplomatica_cod UNIQUE (cod_sede);


--
-- TOC entry 6576 (class 2606 OID 187908)
-- Name: sedediplomatica_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sedediplomatica
    ADD CONSTRAINT sedediplomatica_pkey PRIMARY KEY (id_sede_diplomatica);


--
-- TOC entry 6578 (class 2606 OID 187910)
-- Name: seguridadaniversario_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadaniversario
    ADD CONSTRAINT seguridadaniversario_cod UNIQUE (id_tipo_personal, id_concepto);


--
-- TOC entry 6580 (class 2606 OID 187912)
-- Name: seguridadaniversario_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadaniversario
    ADD CONSTRAINT seguridadaniversario_pkey PRIMARY KEY (id_seguridad_aniversario);


--
-- TOC entry 6582 (class 2606 OID 187914)
-- Name: seguridadausencia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadausencia
    ADD CONSTRAINT seguridadausencia_pkey PRIMARY KEY (id_seguridad_ausencia);


--
-- TOC entry 6584 (class 2606 OID 187916)
-- Name: seguridaddocente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridaddocente
    ADD CONSTRAINT seguridaddocente_pkey PRIMARY KEY (id_seguridad_docente);


--
-- TOC entry 6586 (class 2606 OID 187918)
-- Name: seguridadespecial_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadespecial
    ADD CONSTRAINT seguridadespecial_pkey PRIMARY KEY (id_seguridad_especial);


--
-- TOC entry 6588 (class 2606 OID 187920)
-- Name: seguridadguarderia_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadguarderia
    ADD CONSTRAINT seguridadguarderia_cod UNIQUE (id_tipo_personal, anio, mes);


--
-- TOC entry 6590 (class 2606 OID 187922)
-- Name: seguridadguarderia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadguarderia
    ADD CONSTRAINT seguridadguarderia_pkey PRIMARY KEY (id_seguridad_guarderia);


--
-- TOC entry 6592 (class 2606 OID 187924)
-- Name: seguridadinteresadicional_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadinteresadicional
    ADD CONSTRAINT seguridadinteresadicional_cod UNIQUE (id_tipo_personal, anio, mes);


--
-- TOC entry 6594 (class 2606 OID 187926)
-- Name: seguridadinteresadicional_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadinteresadicional
    ADD CONSTRAINT seguridadinteresadicional_pkey PRIMARY KEY (id_seguridad_interes_adicional);


--
-- TOC entry 6596 (class 2606 OID 187928)
-- Name: seguridadnuevoregimen_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadnuevoregimen
    ADD CONSTRAINT seguridadnuevoregimen_cod UNIQUE (id_tipo_personal, anio, mes);


--
-- TOC entry 6598 (class 2606 OID 187930)
-- Name: seguridadnuevoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadnuevoregimen
    ADD CONSTRAINT seguridadnuevoregimen_pkey PRIMARY KEY (id_seguridad_nuevo_regimen);


--
-- TOC entry 6600 (class 2606 OID 187932)
-- Name: seguridadordinaria_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadordinaria
    ADD CONSTRAINT seguridadordinaria_cod UNIQUE (id_grupo_nomina, anio, mes, semana_quincena);


--
-- TOC entry 6602 (class 2606 OID 187934)
-- Name: seguridadordinaria_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadordinaria
    ADD CONSTRAINT seguridadordinaria_pkey PRIMARY KEY (id_seguridad_ordinaria);


--
-- TOC entry 6604 (class 2606 OID 187936)
-- Name: seguridadprest_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadprestaciones
    ADD CONSTRAINT seguridadprest_cod UNIQUE (id_tipo_personal, anio, mes);


--
-- TOC entry 6606 (class 2606 OID 187938)
-- Name: seguridadprest_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadprestaciones
    ADD CONSTRAINT seguridadprest_pkey PRIMARY KEY (id_seguridad_prestaciones);


--
-- TOC entry 6608 (class 2606 OID 187940)
-- Name: seguridadpresupuesto_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadpresupuesto
    ADD CONSTRAINT seguridadpresupuesto_cod UNIQUE (id_categoria_presupuesto, anio, mes);


--
-- TOC entry 6610 (class 2606 OID 187942)
-- Name: seguridadpresupuesto_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadpresupuesto
    ADD CONSTRAINT seguridadpresupuesto_pkey PRIMARY KEY (id_seguridad_presupuesto);


--
-- TOC entry 6612 (class 2606 OID 187944)
-- Name: seguridadticket_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadticket
    ADD CONSTRAINT seguridadticket_pkey PRIMARY KEY (id_seguridad_ticket);


--
-- TOC entry 6614 (class 2606 OID 187946)
-- Name: seguridadvacacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seguridadvacacion
    ADD CONSTRAINT seguridadvacacion_pkey PRIMARY KEY (id_seguridad_vacacion);


--
-- TOC entry 6616 (class 2606 OID 187948)
-- Name: semana_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY semana
    ADD CONSTRAINT semana_cod UNIQUE (id_grupo_nomina, anio, semana_anio);


--
-- TOC entry 6618 (class 2606 OID 187950)
-- Name: semana_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY semana
    ADD CONSTRAINT semana_pkey PRIMARY KEY (id_semana);


--
-- TOC entry 6620 (class 2606 OID 187952)
-- Name: seriecargo_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seriecargo
    ADD CONSTRAINT seriecargo_cod UNIQUE (cod_serie_cargo);


--
-- TOC entry 6622 (class 2606 OID 187954)
-- Name: seriecargo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY seriecargo
    ADD CONSTRAINT seriecargo_pkey PRIMARY KEY (id_serie_cargo);


--
-- TOC entry 6625 (class 2606 OID 187956)
-- Name: servicioexterior_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY servicioexterior
    ADD CONSTRAINT servicioexterior_pkey PRIMARY KEY (id_servicio_exterior);


--
-- TOC entry 6627 (class 2606 OID 187958)
-- Name: sindicato_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sindicato
    ADD CONSTRAINT sindicato_cod UNIQUE (cod_sindicato);


--
-- TOC entry 6629 (class 2606 OID 187960)
-- Name: sindicato_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sindicato
    ADD CONSTRAINT sindicato_pkey PRIMARY KEY (id_sindicato);


--
-- TOC entry 6631 (class 2606 OID 187962)
-- Name: siniestro_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY siniestro
    ADD CONSTRAINT siniestro_pkey PRIMARY KEY (id_siniestro);


--
-- TOC entry 6633 (class 2606 OID 187964)
-- Name: sobreviviente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sobreviviente
    ADD CONSTRAINT sobreviviente_pkey PRIMARY KEY (id_sobreviviente);


--
-- TOC entry 6636 (class 2606 OID 187966)
-- Name: subgrupoprofesion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY subgrupoprofesion
    ADD CONSTRAINT subgrupoprofesion_pkey PRIMARY KEY (id_subgrupo_profesion);


--
-- TOC entry 6638 (class 2606 OID 187968)
-- Name: subsistema_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY subsistema
    ADD CONSTRAINT subsistema_cod UNIQUE (cod_subsistema);


--
-- TOC entry 6640 (class 2606 OID 187970)
-- Name: subsistema_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY subsistema
    ADD CONSTRAINT subsistema_pkey PRIMARY KEY (id_subsistema);


--
-- TOC entry 6642 (class 2606 OID 187972)
-- Name: subtipocredencial_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY subtipocredencial
    ADD CONSTRAINT subtipocredencial_cod UNIQUE (cod_subtipo);


--
-- TOC entry 6644 (class 2606 OID 187974)
-- Name: subtipocredencial_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY subtipocredencial
    ADD CONSTRAINT subtipocredencial_pkey PRIMARY KEY (id_subtipo_credencial);


--
-- TOC entry 6646 (class 2606 OID 187976)
-- Name: subtipodotacion_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY subtipodotacion
    ADD CONSTRAINT subtipodotacion_cod UNIQUE (cod_subtipo);


--
-- TOC entry 6648 (class 2606 OID 187978)
-- Name: subtipodotacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY subtipodotacion
    ADD CONSTRAINT subtipodotacion_pkey PRIMARY KEY (id_subtipo_dotacion);


--
-- TOC entry 6653 (class 2606 OID 187980)
-- Name: sueldopromedio_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sueldopromedio
    ADD CONSTRAINT sueldopromedio_pkey PRIMARY KEY (id_sueldo_promedio);


--
-- TOC entry 6655 (class 2606 OID 187982)
-- Name: sueldopromediocod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sueldopromedio
    ADD CONSTRAINT sueldopromediocod UNIQUE (id_trabajador);


--
-- TOC entry 6657 (class 2606 OID 187984)
-- Name: suplencia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY suplencia
    ADD CONSTRAINT suplencia_pkey PRIMARY KEY (id_suplencia);


--
-- TOC entry 6659 (class 2606 OID 187986)
-- Name: tabulador_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tabulador
    ADD CONSTRAINT tabulador_pkey PRIMARY KEY (id_tabulador);


--
-- TOC entry 6661 (class 2606 OID 187988)
-- Name: tarifaari_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tarifaari
    ADD CONSTRAINT tarifaari_cod UNIQUE (tarifa);


--
-- TOC entry 6663 (class 2606 OID 187990)
-- Name: tarifaari_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tarifaari
    ADD CONSTRAINT tarifaari_pkey PRIMARY KEY (id_tarifa_ari);


--
-- TOC entry 6665 (class 2606 OID 187992)
-- Name: tasabcv_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tasabcv
    ADD CONSTRAINT tasabcv_cod UNIQUE (anio, mes);


--
-- TOC entry 6667 (class 2606 OID 187994)
-- Name: tasabcv_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tasabcv
    ADD CONSTRAINT tasabcv_pkey PRIMARY KEY (id_tasa_bcv);


--
-- TOC entry 6670 (class 2606 OID 187996)
-- Name: tipoacreencia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipoacreencia
    ADD CONSTRAINT tipoacreencia_pkey PRIMARY KEY (id_tipo_acreencia);


--
-- TOC entry 6673 (class 2606 OID 187998)
-- Name: tipoamonestacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipoamonestacion
    ADD CONSTRAINT tipoamonestacion_pkey PRIMARY KEY (id_tipo_amonestacion);


--
-- TOC entry 6676 (class 2606 OID 188000)
-- Name: tipoausencia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipoausencia
    ADD CONSTRAINT tipoausencia_pkey PRIMARY KEY (id_tipo_ausencia);


--
-- TOC entry 6678 (class 2606 OID 188002)
-- Name: tipocaracteristica_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipocaracteristica
    ADD CONSTRAINT tipocaracteristica_pkey PRIMARY KEY (id_tipo_caracteristica);


--
-- TOC entry 6680 (class 2606 OID 188004)
-- Name: tipocargo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipocargo
    ADD CONSTRAINT tipocargo_pkey PRIMARY KEY (tipo_cargo);


--
-- TOC entry 6683 (class 2606 OID 188006)
-- Name: tipocontrato_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipocontrato
    ADD CONSTRAINT tipocontrato_pkey PRIMARY KEY (id_tipo_contrato);


--
-- TOC entry 6685 (class 2606 OID 188008)
-- Name: tipocredencial_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipocredencial
    ADD CONSTRAINT tipocredencial_cod UNIQUE (cod_tipo_credencial);


--
-- TOC entry 6687 (class 2606 OID 188010)
-- Name: tipocredencial_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipocredencial
    ADD CONSTRAINT tipocredencial_pkey PRIMARY KEY (id_tipo_credencial);


--
-- TOC entry 6690 (class 2606 OID 188012)
-- Name: tipocurso_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipocurso
    ADD CONSTRAINT tipocurso_pkey PRIMARY KEY (id_tipo_curso);


--
-- TOC entry 6693 (class 2606 OID 188014)
-- Name: tipodependencia_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipodependencia
    ADD CONSTRAINT tipodependencia_pkey PRIMARY KEY (id_tipo_dependencia);


--
-- TOC entry 6695 (class 2606 OID 188016)
-- Name: tipodotacion_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipodotacion
    ADD CONSTRAINT tipodotacion_cod UNIQUE (cod_tipo_dotacion);


--
-- TOC entry 6697 (class 2606 OID 188018)
-- Name: tipodotacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipodotacion
    ADD CONSTRAINT tipodotacion_pkey PRIMARY KEY (id_tipo_dotacion);


--
-- TOC entry 6700 (class 2606 OID 188020)
-- Name: tipoentidad_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipoentidad
    ADD CONSTRAINT tipoentidad_pkey PRIMARY KEY (id_tipo_entidad);


--
-- TOC entry 6704 (class 2606 OID 188022)
-- Name: tipohabilidad_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipohabilidad
    ADD CONSTRAINT tipohabilidad_pkey PRIMARY KEY (id_tipo_habilidad);


--
-- TOC entry 6707 (class 2606 OID 188024)
-- Name: tipoidioma_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipoidioma
    ADD CONSTRAINT tipoidioma_pkey PRIMARY KEY (id_tipo_idioma);


--
-- TOC entry 6710 (class 2606 OID 188026)
-- Name: tipomanual_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipomanual
    ADD CONSTRAINT tipomanual_pkey PRIMARY KEY (id_tipo_manual);


--
-- TOC entry 6713 (class 2606 OID 188028)
-- Name: tipootraactividad_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipootraactividad
    ADD CONSTRAINT tipootraactividad_pkey PRIMARY KEY (id_tipo_otra_actividad);


--
-- TOC entry 6716 (class 2606 OID 188030)
-- Name: tipopersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tipopersonal
    ADD CONSTRAINT tipopersonal_pkey PRIMARY KEY (id_tipo_personal);


--
-- TOC entry 6719 (class 2606 OID 188032)
-- Name: tiporeconocimiento_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tiporeconocimiento
    ADD CONSTRAINT tiporeconocimiento_pkey PRIMARY KEY (id_tipo_reconocimiento);


--
-- TOC entry 6721 (class 2606 OID 188034)
-- Name: tiposede_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tiposede
    ADD CONSTRAINT tiposede_cod UNIQUE (cod_tipo_sede);


--
-- TOC entry 6723 (class 2606 OID 188036)
-- Name: tiposede_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tiposede
    ADD CONSTRAINT tiposede_pkey PRIMARY KEY (id_tipo_sede);


--
-- TOC entry 6725 (class 2606 OID 188038)
-- Name: tiposiniestro_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tiposiniestro
    ADD CONSTRAINT tiposiniestro_cod UNIQUE (cod_tipo_siniestro);


--
-- TOC entry 6727 (class 2606 OID 188040)
-- Name: tiposiniestro_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tiposiniestro
    ADD CONSTRAINT tiposiniestro_pkey PRIMARY KEY (id_tipo_siniestro);


--
-- TOC entry 6729 (class 2606 OID 188042)
-- Name: titular_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY titular
    ADD CONSTRAINT titular_cod UNIQUE (id_personal);


--
-- TOC entry 6731 (class 2606 OID 188044)
-- Name: titular_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY titular
    ADD CONSTRAINT titular_pkey PRIMARY KEY (id_titular);


--
-- TOC entry 6734 (class 2606 OID 188046)
-- Name: titulo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY titulo
    ADD CONSTRAINT titulo_pkey PRIMARY KEY (id_titulo);


--
-- TOC entry 6741 (class 2606 OID 188048)
-- Name: trabajador_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT trabajador_pkey PRIMARY KEY (id_trabajador);


--
-- TOC entry 6743 (class 2606 OID 188050)
-- Name: trabajadorasignatura_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY trabajadorasignatura
    ADD CONSTRAINT trabajadorasignatura_pkey PRIMARY KEY (id_trabajador_asignatura);


--
-- TOC entry 6747 (class 2606 OID 188052)
-- Name: trabajadorespecifica_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY trabajadorespecifica
    ADD CONSTRAINT trabajadorespecifica_pkey PRIMARY KEY (id_trabajador_especifica);


--
-- TOC entry 6745 (class 2606 OID 188054)
-- Name: trabasignat_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY trabajadorasignatura
    ADD CONSTRAINT trabasignat_cod UNIQUE (id_trabajador, id_asignatura);


--
-- TOC entry 6750 (class 2606 OID 188056)
-- Name: trayectoria_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY trayectoria
    ADD CONSTRAINT trayectoria_pkey PRIMARY KEY (id_trayectoria);


--
-- TOC entry 6753 (class 2606 OID 188058)
-- Name: turno_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY turno
    ADD CONSTRAINT turno_pkey PRIMARY KEY (id_turno);


--
-- TOC entry 6756 (class 2606 OID 188060)
-- Name: turnodocente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY turnodocente
    ADD CONSTRAINT turnodocente_pkey PRIMARY KEY (id_turno_docente);


--
-- TOC entry 6758 (class 2606 OID 188062)
-- Name: uelespecifica_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY uelespecifica
    ADD CONSTRAINT uelespecifica_cod UNIQUE (id_accion_especifica, id_unidad_ejecutora);


--
-- TOC entry 6760 (class 2606 OID 188064)
-- Name: uelespecifica_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY uelespecifica
    ADD CONSTRAINT uelespecifica_pkey PRIMARY KEY (id_uel_especifica);


--
-- TOC entry 6764 (class 2606 OID 188066)
-- Name: ultimanomina_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY ultimanomina
    ADD CONSTRAINT ultimanomina_pkey PRIMARY KEY (id_ultima_nomina);


--
-- TOC entry 6768 (class 2606 OID 188068)
-- Name: ultimaprenomina_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY ultimaprenomina
    ADD CONSTRAINT ultimaprenomina_pkey PRIMARY KEY (id_ultima_prenomina);


--
-- TOC entry 6771 (class 2606 OID 188070)
-- Name: unidadadministradora_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY unidadadministradora
    ADD CONSTRAINT unidadadministradora_pkey PRIMARY KEY (id_unidad_administradora);


--
-- TOC entry 6774 (class 2606 OID 188072)
-- Name: unidadejecutora_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY unidadejecutora
    ADD CONSTRAINT unidadejecutora_pkey PRIMARY KEY (id_unidad_ejecutora);


--
-- TOC entry 6777 (class 2606 OID 188074)
-- Name: unidadfuncional_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY unidadfuncional
    ADD CONSTRAINT unidadfuncional_pkey PRIMARY KEY (id_unidad_funcional);


--
-- TOC entry 6780 (class 2606 OID 188076)
-- Name: usuario_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY usuario
    ADD CONSTRAINT usuario_pkey PRIMARY KEY (id_usuario);


--
-- TOC entry 6782 (class 2606 OID 188078)
-- Name: usuarioorganismo_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY usuarioorganismo
    ADD CONSTRAINT usuarioorganismo_cod UNIQUE (id_usuario, id_organismo);


--
-- TOC entry 6784 (class 2606 OID 188080)
-- Name: usuarioorganismo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY usuarioorganismo
    ADD CONSTRAINT usuarioorganismo_pkey PRIMARY KEY (id_usuario_organismo);


--
-- TOC entry 6786 (class 2606 OID 188082)
-- Name: usuariorol_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY usuariorol
    ADD CONSTRAINT usuariorol_cod UNIQUE (id_usuario, id_rol);


--
-- TOC entry 6788 (class 2606 OID 188084)
-- Name: usuariorol_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY usuariorol
    ADD CONSTRAINT usuariorol_pkey PRIMARY KEY (id_usuario_rol);


--
-- TOC entry 6790 (class 2606 OID 188086)
-- Name: usuariotipopersonal_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY usuariotipopersonal
    ADD CONSTRAINT usuariotipopersonal_cod UNIQUE (id_usuario, id_tipo_personal);


--
-- TOC entry 6792 (class 2606 OID 188088)
-- Name: usuariotipopersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY usuariotipopersonal
    ADD CONSTRAINT usuariotipopersonal_pkey PRIMARY KEY (id_usuario_tipo_personal);


--
-- TOC entry 6794 (class 2606 OID 188090)
-- Name: usuariounidadfuncional_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY usuariounidadfuncional
    ADD CONSTRAINT usuariounidadfuncional_cod UNIQUE (id_usuario, id_unidad_funcional);


--
-- TOC entry 6796 (class 2606 OID 188092)
-- Name: usuariounidadfuncional_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY usuariounidadfuncional
    ADD CONSTRAINT usuariounidadfuncional_pkey PRIMARY KEY (id_usuario_unidad_funcional);


--
-- TOC entry 6798 (class 2606 OID 188094)
-- Name: utiles_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY utiles
    ADD CONSTRAINT utiles_cod UNIQUE (id_personal, id_familiar);


--
-- TOC entry 6800 (class 2606 OID 188096)
-- Name: utiles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY utiles
    ADD CONSTRAINT utiles_pkey PRIMARY KEY (id_utiles);


--
-- TOC entry 6802 (class 2606 OID 188098)
-- Name: utilidadesporanio_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY utilidadesporanio
    ADD CONSTRAINT utilidadesporanio_pkey PRIMARY KEY (id_utilidades_por_anio);


--
-- TOC entry 6804 (class 2606 OID 188100)
-- Name: vacacion_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY vacacion
    ADD CONSTRAINT vacacion_pkey PRIMARY KEY (id_vacacion);


--
-- TOC entry 6806 (class 2606 OID 188102)
-- Name: vacaciondisfrutada_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY vacaciondisfrutada
    ADD CONSTRAINT vacaciondisfrutada_pkey PRIMARY KEY (id_vacacion_disfrutada);


--
-- TOC entry 6809 (class 2606 OID 188104)
-- Name: vacacionesporanio_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY vacacionesporanio
    ADD CONSTRAINT vacacionesporanio_pkey PRIMARY KEY (id_vacaciones_por_anio);


--
-- TOC entry 6811 (class 2606 OID 188106)
-- Name: vacacionprogramada_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY vacacionprogramada
    ADD CONSTRAINT vacacionprogramada_pkey PRIMARY KEY (id_vacacion_programada);


--
-- TOC entry 6813 (class 2606 OID 188108)
-- Name: varemos_cod; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY varemos
    ADD CONSTRAINT varemos_cod UNIQUE (cod_varemos);


--
-- TOC entry 6815 (class 2606 OID 188110)
-- Name: varemos_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY varemos
    ADD CONSTRAINT varemos_pkey PRIMARY KEY (id_varemos);


--
-- TOC entry 5714 (class 1259 OID 188111)
-- Name: afiliacion_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX afiliacion_cod ON afiliacion USING btree (id_personal, id_gremio);


--
-- TOC entry 5721 (class 1259 OID 188112)
-- Name: antecedente_pkey; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX antecedente_pkey ON antecedente USING btree (id_antecedente);


--
-- TOC entry 5722 (class 1259 OID 188113)
-- Name: antecendente_codigo; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX antecendente_codigo ON antecedente USING btree (id_personal, fecha_ingreso);


--
-- TOC entry 5731 (class 1259 OID 188114)
-- Name: areacarrera_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX areacarrera_cod ON areacarrera USING btree (cod_area_carrera);


--
-- TOC entry 5734 (class 1259 OID 188115)
-- Name: areaconocimiento_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX areaconocimiento_cod ON areaconocimiento USING btree (cod_area_conocimiento);


--
-- TOC entry 5743 (class 1259 OID 188116)
-- Name: ausencia_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ausencia_cod ON ausencia USING btree (id_personal, fecha_inicio);


--
-- TOC entry 5744 (class 1259 OID 188117)
-- Name: ausencia_n50; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX ausencia_n50 ON ausencia USING btree (id_personal);


--
-- TOC entry 5750 (class 1259 OID 188118)
-- Name: banco_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX banco_cod ON banco USING btree (cod_banco);


--
-- TOC entry 5793 (class 1259 OID 188119)
-- Name: carrera_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX carrera_cod ON carrera USING btree (cod_carrera);


--
-- TOC entry 5796 (class 1259 OID 188120)
-- Name: carreraarea_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX carreraarea_cod ON carreraarea USING btree (id_area_carrera, id_carrera);


--
-- TOC entry 5799 (class 1259 OID 188121)
-- Name: categoriadocente_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX categoriadocente_cod ON categoriadocente USING btree (digito_categoria);


--
-- TOC entry 5802 (class 1259 OID 188122)
-- Name: categoriapersonal_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX categoriapersonal_cod ON categoriapersonal USING btree (cod_categoria);


--
-- TOC entry 5810 (class 1259 OID 188123)
-- Name: causamovimiento_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX causamovimiento_cod ON causamovimiento USING btree (cod_causa_movimiento);


--
-- TOC entry 5813 (class 1259 OID 188124)
-- Name: causapersonal_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX causapersonal_cod ON causapersonal USING btree (id_causa_movimiento, id_clasificacion_personal);


--
-- TOC entry 5824 (class 1259 OID 188125)
-- Name: ciudad_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ciudad_cod ON ciudad USING btree (id_estado, cod_ciudad);


--
-- TOC entry 5825 (class 1259 OID 188126)
-- Name: ciudad_n49; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX ciudad_n49 ON ciudad USING btree (id_estado);


--
-- TOC entry 5836 (class 1259 OID 188127)
-- Name: clasificacionpersonal_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX clasificacionpersonal_cod ON clasificacionpersonal USING btree (id_categoria_personal, id_relacion_personal);


--
-- TOC entry 5840 (class 1259 OID 188128)
-- Name: comisionservicio_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX comisionservicio_cod ON comisionservicio USING btree (id_personal, fecha_inicio);


--
-- TOC entry 5843 (class 1259 OID 188129)
-- Name: comisionservicioext_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX comisionservicioext_cod ON comisionservicioext USING btree (id_personal, fecha_inicio);


--
-- TOC entry 5846 (class 1259 OID 188130)
-- Name: concepto_1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX concepto_1 ON concepto USING btree (id_concepto_retroactivo);


--
-- TOC entry 5847 (class 1259 OID 188131)
-- Name: concepto_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX concepto_cod ON concepto USING btree (cod_concepto);


--
-- TOC entry 5850 (class 1259 OID 188133)
-- Name: conceptoasociado_1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX conceptoasociado_1 ON conceptoasociado USING btree (id_concepto_asociar);


--
-- TOC entry 5851 (class 1259 OID 188134)
-- Name: conceptoasociado_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX conceptoasociado_cod ON conceptoasociado USING btree (id_concepto_tipo_personal, id_concepto_asociar);


--
-- TOC entry 5858 (class 1259 OID 188135)
-- Name: conceptocargo_1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX conceptocargo_1 ON conceptocargo USING btree (id_cargo, id_concepto_tipo_personal);


--
-- TOC entry 5889 (class 1259 OID 188136)
-- Name: conceptofijo_1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX conceptofijo_1 ON conceptofijo USING btree (id_trabajador, id_concepto_tipo_personal);

ALTER TABLE conceptofijo CLUSTER ON conceptofijo_1;


--
-- TOC entry 5890 (class 1259 OID 188138)
-- Name: conceptofijo_2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX conceptofijo_2 ON conceptofijo USING btree (id_trabajador);


--
-- TOC entry 5891 (class 1259 OID 188141)
-- Name: conceptofijo_3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX conceptofijo_3 ON conceptofijo USING btree (id_trabajador, id_frecuencia_tipo_personal);


--
-- TOC entry 5892 (class 1259 OID 188142)
-- Name: conceptofijo_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX conceptofijo_cod ON conceptofijo USING btree (id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal);


--
-- TOC entry 5910 (class 1259 OID 188143)
-- Name: conceptotipopersonal_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX conceptotipopersonal_cod ON conceptotipopersonal USING btree (id_concepto, id_frecuencia_tipo_personal);


--
-- TOC entry 5921 (class 1259 OID 188144)
-- Name: conceptovariable_1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX conceptovariable_1 ON conceptovariable USING btree (id_trabajador, id_concepto_tipo_personal);


--
-- TOC entry 5922 (class 1259 OID 188145)
-- Name: conceptovariable_2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX conceptovariable_2 ON conceptovariable USING btree (id_trabajador);


--
-- TOC entry 5961 (class 1259 OID 188146)
-- Name: curso_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX curso_cod ON curso USING btree (id_area_conocimiento, cod_curso);


--
-- TOC entry 5964 (class 1259 OID 188147)
-- Name: cursoentidad_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX cursoentidad_cod ON cursoentidad USING btree (id_entidad_educativa, id_curso);


--
-- TOC entry 5965 (class 1259 OID 188148)
-- Name: cursoentidad_n49; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cursoentidad_n49 ON cursoentidad USING btree (id_entidad_educativa);


--
-- TOC entry 5966 (class 1259 OID 188149)
-- Name: cursoentidad_n50; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cursoentidad_n50 ON cursoentidad USING btree (id_curso);


--
-- TOC entry 5969 (class 1259 OID 188150)
-- Name: declaracion_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX declaracion_cod ON declaracion USING btree (fecha_registro, id_personal);


--
-- TOC entry 5972 (class 1259 OID 188151)
-- Name: dedicaciondocente_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX dedicaciondocente_cod ON dedicaciondocente USING btree (digito_dedicacion);


--
-- TOC entry 5979 (class 1259 OID 188152)
-- Name: dependencia_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX dependencia_cod ON dependencia USING btree (id_grupo_organismo, cod_dependencia, fecha_vigencia);


--
-- TOC entry 6022 (class 1259 OID 188153)
-- Name: educacion_1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX educacion_1 ON educacion USING btree (id_personal);

ALTER TABLE educacion CLUSTER ON educacion_1;


--
-- TOC entry 6069 (class 1259 OID 188154)
-- Name: encargaduria_personal; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX encargaduria_personal ON encargaduria USING btree (id_personal, fecha_inicio);


--
-- TOC entry 6072 (class 1259 OID 188155)
-- Name: entidadeducativa_codigo; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX entidadeducativa_codigo ON entidadeducativa USING btree (cod_entidad_educativa);


--
-- TOC entry 6083 (class 1259 OID 188156)
-- Name: estado_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX estado_cod ON estado USING btree (id_pais, cod_estado);


--
-- TOC entry 6084 (class 1259 OID 188157)
-- Name: estado_n49; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX estado_n49 ON estado USING btree (id_pais);


--
-- TOC entry 6089 (class 1259 OID 188158)
-- Name: estudio_1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX estudio_1 ON estudio USING btree (id_personal);

ALTER TABLE estudio CLUSTER ON estudio_1;


--
-- TOC entry 6106 (class 1259 OID 188159)
-- Name: experiencia_fecha; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX experiencia_fecha ON experiencia USING btree (id_personal, fecha_ingreso);


--
-- TOC entry 6113 (class 1259 OID 188160)
-- Name: experiencia_fechanoest; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX experiencia_fechanoest ON experiencianoest USING btree (id_personal, fecha_ingreso);


--
-- TOC entry 6122 (class 1259 OID 188161)
-- Name: frecuenciapago_codigo; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX frecuenciapago_codigo ON frecuenciapago USING btree (id_organismo, cod_frecuencia_pago);


--
-- TOC entry 6123 (class 1259 OID 188162)
-- Name: frecuenciapago_n49; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX frecuenciapago_n49 ON frecuenciapago USING btree (id_organismo);


--
-- TOC entry 6126 (class 1259 OID 188163)
-- Name: frecuenciatipopersonal_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX frecuenciatipopersonal_cod ON frecuenciatipopersonal USING btree (id_tipo_personal, id_frecuencia_pago);


--
-- TOC entry 6131 (class 1259 OID 188164)
-- Name: gradodocente_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX gradodocente_cod ON gradodocente USING btree (digito_grado);


--
-- TOC entry 6138 (class 1259 OID 188165)
-- Name: gremio_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX gremio_cod ON gremio USING btree (cod_gremio);


--
-- TOC entry 6141 (class 1259 OID 188166)
-- Name: gruponomina_codigo; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX gruponomina_codigo ON gruponomina USING btree (id_organismo, cod_grupo_nomina);


--
-- TOC entry 6144 (class 1259 OID 188167)
-- Name: grupoocupacional_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX grupoocupacional_cod ON grupoocupacional USING btree (id_ramo_ocupacional, cod_grupo_ocupacional);


--
-- TOC entry 6147 (class 1259 OID 188168)
-- Name: grupoorganismo_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX grupoorganismo_cod ON grupoorganismo USING btree (id_organismo, cod_grupo_organismo);


--
-- TOC entry 6148 (class 1259 OID 188169)
-- Name: grupoorganismo_n49; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX grupoorganismo_n49 ON grupoorganismo USING btree (id_organismo);


--
-- TOC entry 6151 (class 1259 OID 188170)
-- Name: grupoprofesion_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX grupoprofesion_cod ON grupoprofesion USING btree (cod_grupo_profesion);


--
-- TOC entry 6176 (class 1259 OID 188171)
-- Name: historialremun_codigo; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX historialremun_codigo ON historialremun USING btree (id_personal, fecha_movimiento, numero_movimiento);


--
-- TOC entry 6187 (class 1259 OID 188172)
-- Name: historiconomina_1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX historiconomina_1 ON historiconomina USING btree (id_trabajador, anio, mes);


--
-- TOC entry 6188 (class 1259 OID 188173)
-- Name: historiconomina_2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX historiconomina_2 ON historiconomina USING btree (id_tipo_personal);


--
-- TOC entry 6189 (class 1259 OID 188174)
-- Name: historiconomina_3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX historiconomina_3 ON historiconomina USING btree (id_trabajador);


--
-- TOC entry 6192 (class 1259 OID 188175)
-- Name: historicoquincena_1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX historicoquincena_1 ON historicoquincena USING btree (id_trabajador, anio, mes, id_concepto_tipo_personal);


--
-- TOC entry 6193 (class 1259 OID 188176)
-- Name: historicoquincena_2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX historicoquincena_2 ON historicoquincena USING btree (anio, mes, id_tipo_personal);


--
-- TOC entry 6194 (class 1259 OID 188177)
-- Name: historicoquincena_3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX historicoquincena_3 ON historicoquincena USING btree (id_trabajador);


--
-- TOC entry 6197 (class 1259 OID 188178)
-- Name: historicosemana_1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX historicosemana_1 ON historicosemana USING btree (id_trabajador, anio, mes, id_concepto_tipo_personal);


--
-- TOC entry 6198 (class 1259 OID 188179)
-- Name: historicosemana_2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX historicosemana_2 ON historicosemana USING btree (anio, mes, id_tipo_personal);


--
-- TOC entry 6199 (class 1259 OID 188180)
-- Name: historicosemana_3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX historicosemana_3 ON historicosemana USING btree (id_trabajador);


--
-- TOC entry 6206 (class 1259 OID 188181)
-- Name: idioma_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX idioma_cod ON idioma USING btree (id_personal, id_tipo_idioma);


--
-- TOC entry 6215 (class 1259 OID 188182)
-- Name: institucion_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX institucion_cod ON institucion USING btree (cod_institucion);


--
-- TOC entry 6522 (class 1259 OID 188183)
-- Name: iregcargo; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX iregcargo ON registrocargos USING btree (id_registro, codigo_nomina);


--
-- TOC entry 6735 (class 1259 OID 188184)
-- Name: itrcedula; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX itrcedula ON trabajador USING btree (id_trabajador, id_personal, cedula);


--
-- TOC entry 6228 (class 1259 OID 188185)
-- Name: jerarquia_docente; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX jerarquia_docente ON jerarquiadocente USING btree (digito_jerarquia);


--
-- TOC entry 6231 (class 1259 OID 188186)
-- Name: jubilado_cod1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX jubilado_cod1 ON jubilado USING btree (id_institucion);


--
-- TOC entry 6252 (class 1259 OID 188187)
-- Name: lugarpago_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX lugarpago_cod ON lugarpago USING btree (id_sede, cod_lugar_pago);


--
-- TOC entry 6255 (class 1259 OID 188188)
-- Name: manualcargo_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX manualcargo_cod ON manualcargo USING btree (id_organismo, cod_manual_cargo);


--
-- TOC entry 6258 (class 1259 OID 188189)
-- Name: manualpersonal_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX manualpersonal_cod ON manualpersonal USING btree (id_manual_cargo, id_tipo_personal);


--
-- TOC entry 6265 (class 1259 OID 188190)
-- Name: mes_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX mes_cod ON mes USING btree (anio, mes);


--
-- TOC entry 6274 (class 1259 OID 188191)
-- Name: movimientopersonal_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX movimientopersonal_cod ON movimientopersonal USING btree (cod_movimiento_personal);


--
-- TOC entry 6285 (class 1259 OID 188192)
-- Name: movremuneracion_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX movremuneracion_cod ON movremuneracion USING btree (cod_mov_remuneracion);


--
-- TOC entry 6288 (class 1259 OID 188193)
-- Name: municipio_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX municipio_cod ON municipio USING btree (id_estado, cod_municipio);


--
-- TOC entry 6289 (class 1259 OID 188194)
-- Name: municipio_n49; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX municipio_n49 ON municipio USING btree (id_estado);


--
-- TOC entry 6296 (class 1259 OID 188195)
-- Name: niveldocente_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX niveldocente_cod ON niveldocente USING btree (digito_nivel);


--
-- TOC entry 6299 (class 1259 OID 188196)
-- Name: niveleducativo_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX niveleducativo_cod ON niveleducativo USING btree (cod_nivel_educativo);


--
-- TOC entry 6304 (class 1259 OID 188197)
-- Name: nombreorganismo_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX nombreorganismo_cod ON nombreorganismo USING btree (fecha_vigencia);


--
-- TOC entry 6322 (class 1259 OID 188198)
-- Name: organismo_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX organismo_cod ON organismo USING btree (cod_organismo);


--
-- TOC entry 6323 (class 1259 OID 188199)
-- Name: organismo_n49; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX organismo_n49 ON organismo USING btree (id_ciudad);


--
-- TOC entry 6336 (class 1259 OID 188200)
-- Name: pais_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX pais_cod ON pais USING btree (cod_pais);


--
-- TOC entry 6375 (class 1259 OID 188201)
-- Name: parametroutiles_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX parametroutiles_cod ON parametroutiles USING btree (id_tipo_personal, nivel_educativo);


--
-- TOC entry 6382 (class 1259 OID 188202)
-- Name: parroquia_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX parroquia_cod ON parroquia USING btree (id_municipio, cod_parroquia);


--
-- TOC entry 6383 (class 1259 OID 188203)
-- Name: parroquia_n49; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX parroquia_n49 ON parroquia USING btree (id_municipio);


--
-- TOC entry 6402 (class 1259 OID 188204)
-- Name: personal_1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX personal_1 ON personal USING btree (primer_apellido);


--
-- TOC entry 6403 (class 1259 OID 188205)
-- Name: personal_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX personal_cod ON personal USING btree (cedula);

ALTER TABLE personal CLUSTER ON personal_cod;


--
-- TOC entry 6406 (class 1259 OID 188206)
-- Name: personalorganismo_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX personalorganismo_cod ON personalorganismo USING btree (id_organismo, id_personal);


--
-- TOC entry 6441 (class 1259 OID 188207)
-- Name: prestmensuales01; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX prestmensuales01 ON prestacionesmensuales USING btree (id_tipo_personal, anio, mes);


--
-- TOC entry 6442 (class 1259 OID 188208)
-- Name: prestmensuales02; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX prestmensuales02 ON prestacionesmensuales USING btree (id_trabajador, anio, mes);


--
-- TOC entry 6469 (class 1259 OID 188209)
-- Name: profesion_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX profesion_cod ON profesion USING btree (cod_profesion);


--
-- TOC entry 6476 (class 1259 OID 188210)
-- Name: profesiontrabajador_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX profesiontrabajador_cod ON profesiontrabajador USING btree (id_profesion, id_personal);


--
-- TOC entry 6479 (class 1259 OID 188211)
-- Name: programa_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX programa_cod ON programa USING btree (cod_programa);


--
-- TOC entry 6506 (class 1259 OID 188212)
-- Name: pueblo_indigena_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX pueblo_indigena_cod ON puebloindigena USING btree (cod_pueblo_indigena);


--
-- TOC entry 6507 (class 1259 OID 188213)
-- Name: ramoocupacional_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ramoocupacional_cod ON ramoocupacional USING btree (cod_ramo_ocupacional);


--
-- TOC entry 6510 (class 1259 OID 188214)
-- Name: reconocimiento_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX reconocimiento_cod ON reconocimiento USING btree (id_tipo_reconocimiento, id_personal, fecha);


--
-- TOC entry 6519 (class 1259 OID 188215)
-- Name: registro_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX registro_cod ON registro USING btree (id_organismo, numero_registro);


--
-- TOC entry 6529 (class 1259 OID 188216)
-- Name: registropersonal_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX registropersonal_cod ON registropersonal USING btree (id_registro, id_tipo_personal);


--
-- TOC entry 6534 (class 1259 OID 188217)
-- Name: relacionpersonal_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX relacionpersonal_cod ON relacionpersonal USING btree (cod_relacion);


--
-- TOC entry 6567 (class 1259 OID 188218)
-- Name: sancion_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX sancion_cod ON sancion USING btree (id_personal, id_tipo_amonestacion, fecha);


--
-- TOC entry 6570 (class 1259 OID 188219)
-- Name: sede_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX sede_cod ON sede USING btree (id_organismo, cod_sede);


--
-- TOC entry 6623 (class 1259 OID 188220)
-- Name: servicioexterior_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX servicioexterior_cod ON servicioexterior USING btree (id_personal, fecha_inicio);


--
-- TOC entry 6634 (class 1259 OID 188221)
-- Name: subgrupoprofesion_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX subgrupoprofesion_cod ON subgrupoprofesion USING btree (id_grupo_profesion, cod_subgrupo_profesion);


--
-- TOC entry 6649 (class 1259 OID 188222)
-- Name: sueldopromedio_1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX sueldopromedio_1 ON sueldopromedio USING btree (id_trabajador);


--
-- TOC entry 6650 (class 1259 OID 188223)
-- Name: sueldopromedio_2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX sueldopromedio_2 ON sueldopromedio USING btree (id_grupo_nomina);


--
-- TOC entry 6651 (class 1259 OID 188224)
-- Name: sueldopromedio_3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX sueldopromedio_3 ON sueldopromedio USING btree (id_tipo_personal);


--
-- TOC entry 6668 (class 1259 OID 188225)
-- Name: tipoacreencia_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX tipoacreencia_cod ON tipoacreencia USING btree (cod_tipo_acreencia);


--
-- TOC entry 6671 (class 1259 OID 188226)
-- Name: tipoamonestacion_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX tipoamonestacion_cod ON tipoamonestacion USING btree (cod_tipo_amonestacion);


--
-- TOC entry 6674 (class 1259 OID 188227)
-- Name: tipoausencia_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX tipoausencia_cod ON tipoausencia USING btree (cod_tipo_ausencia);


--
-- TOC entry 6681 (class 1259 OID 188228)
-- Name: tipocontrato_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX tipocontrato_cod ON tipocontrato USING btree (cod_tipo_contrato);


--
-- TOC entry 6688 (class 1259 OID 188229)
-- Name: tipocurso_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX tipocurso_cod ON tipocurso USING btree (cod_tipo_curso);


--
-- TOC entry 6691 (class 1259 OID 188230)
-- Name: tipodependencia_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX tipodependencia_cod ON tipodependencia USING btree (cod_tipo_dependencia);


--
-- TOC entry 6698 (class 1259 OID 188231)
-- Name: tipoentidad_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX tipoentidad_cod ON tipoentidad USING btree (cod_tipo_entidad);


--
-- TOC entry 6702 (class 1259 OID 188232)
-- Name: tipohabilidad_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX tipohabilidad_cod ON tipohabilidad USING btree (cod_tipo_habilidad);


--
-- TOC entry 6705 (class 1259 OID 188233)
-- Name: tipoidioma_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX tipoidioma_cod ON tipoidioma USING btree (cod_tipo_idioma);


--
-- TOC entry 6708 (class 1259 OID 188234)
-- Name: tipomanual_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX tipomanual_cod ON tipomanual USING btree (cod_tipo_manual);


--
-- TOC entry 6711 (class 1259 OID 188235)
-- Name: tipootraactividad_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX tipootraactividad_cod ON tipootraactividad USING btree (cod_otra_actividad);


--
-- TOC entry 6714 (class 1259 OID 188236)
-- Name: tipopersonal_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX tipopersonal_cod ON tipopersonal USING btree (id_organismo, cod_tipo_personal);


--
-- TOC entry 6717 (class 1259 OID 188237)
-- Name: tiporeconocimiento_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX tiporeconocimiento_cod ON tiporeconocimiento USING btree (cod_tipo_reconocimiento);


--
-- TOC entry 6732 (class 1259 OID 188238)
-- Name: titulo_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX titulo_cod ON titulo USING btree (cod_titulo);


--
-- TOC entry 6736 (class 1259 OID 188239)
-- Name: trabajador_1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX trabajador_1 ON trabajador USING btree (id_tipo_personal, cedula);

ALTER TABLE trabajador CLUSTER ON trabajador_1;


--
-- TOC entry 6737 (class 1259 OID 188240)
-- Name: trabajador_2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX trabajador_2 ON trabajador USING btree (id_tipo_personal);


--
-- TOC entry 6738 (class 1259 OID 188241)
-- Name: trabajador_3; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX trabajador_3 ON trabajador USING btree (id_tipo_personal, estatus);


--
-- TOC entry 6739 (class 1259 OID 188242)
-- Name: trabajador_4; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX trabajador_4 ON trabajador USING btree (id_tipo_personal, fecha_prestaciones);


--
-- TOC entry 6748 (class 1259 OID 188243)
-- Name: trabajadortemporal_1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX trabajadortemporal_1 ON trabajadortemporal USING btree (id_trabajador);


--
-- TOC entry 6751 (class 1259 OID 188244)
-- Name: turno_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX turno_cod ON turno USING btree (id_turno);


--
-- TOC entry 6754 (class 1259 OID 188245)
-- Name: turnodocente_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX turnodocente_cod ON turnodocente USING btree (digito_turno);


--
-- TOC entry 6761 (class 1259 OID 188246)
-- Name: ultimanomina_1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX ultimanomina_1 ON ultimanomina USING btree (id_trabajador);


--
-- TOC entry 6762 (class 1259 OID 188247)
-- Name: ultimanomina_2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX ultimanomina_2 ON ultimanomina USING btree (id_grupo_nomina, numero_nomina);


--
-- TOC entry 6765 (class 1259 OID 188248)
-- Name: ultimaprenomina_1; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX ultimaprenomina_1 ON ultimaprenomina USING btree (id_trabajador);


--
-- TOC entry 6766 (class 1259 OID 188249)
-- Name: ultimaprenomina_2; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX ultimaprenomina_2 ON ultimaprenomina USING btree (id_grupo_nomina, numero_nomina);


--
-- TOC entry 6769 (class 1259 OID 188250)
-- Name: unidadadministradora_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX unidadadministradora_cod ON unidadadministradora USING btree (cod_unidad_administ);


--
-- TOC entry 6772 (class 1259 OID 188251)
-- Name: unidadejecutora_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX unidadejecutora_cod ON unidadejecutora USING btree (cod_unidad_ejecutora);


--
-- TOC entry 6775 (class 1259 OID 188252)
-- Name: unidadfuncional_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX unidadfuncional_cod ON unidadfuncional USING btree (cod_unidad_funcional);


--
-- TOC entry 6778 (class 1259 OID 188253)
-- Name: usuario_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX usuario_cod ON usuario USING btree (usuario);


--
-- TOC entry 6807 (class 1259 OID 188254)
-- Name: vacacionesporanio_cod; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX vacacionesporanio_cod ON vacacionesporanio USING btree (id_tipo_personal, anios_servicio);


--
-- TOC entry 6328 (class 1259 OID 188255)
-- Name: xif1otraactividad; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX xif1otraactividad ON otraactividad USING btree (id_tipo_otra_actividad);


--
-- TOC entry 6307 (class 1259 OID 188256)
-- Name: xif2nombreorganismo; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX xif2nombreorganismo ON nombreorganismo USING btree (id_organismo);


--
-- TOC entry 6329 (class 1259 OID 188257)
-- Name: xif2otraactividad; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX xif2otraactividad ON otraactividad USING btree (id_personal);


--
-- TOC entry 6075 (class 1259 OID 188258)
-- Name: xif3entidadeducativa; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX xif3entidadeducativa ON entidadeducativa USING btree (id_tipo_entidad);


--
-- TOC entry 6076 (class 1259 OID 188259)
-- Name: xif4entidadeducativa; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX xif4entidadeducativa ON entidadeducativa USING btree (id_estado);


--
-- TOC entry 5747 (class 1259 OID 188260)
-- Name: xif6ausencia; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX xif6ausencia ON ausencia USING btree (id_tipo_ausencia);


--
-- TOC entry 5805 (class 1259 OID 188261)
-- Name: xpkcategoriapersonal; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX xpkcategoriapersonal ON categoriapersonal USING btree (id_categoria_personal);


--
-- TOC entry 5839 (class 1259 OID 188262)
-- Name: xpkclasificacionpersonal; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX xpkclasificacionpersonal ON clasificacionpersonal USING btree (id_clasificacion_personal);


--
-- TOC entry 6701 (class 1259 OID 188263)
-- Name: xpktipoentidad; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX xpktipoentidad ON tipoentidad USING btree (id_tipo_entidad);


--
-- TOC entry 5895 (class 1259 OID 188264)
-- Name: ññ; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX "ññ" ON conceptofijo_cambio_unidad USING btree (cedula);


--
-- TOC entry 7267 (class 2620 OID 188265)
-- Name: validar_prestamos_activos; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER validar_prestamos_activos BEFORE INSERT OR UPDATE ON prestamo FOR EACH ROW EXECUTE PROCEDURE validar_prestamos_activos();


--
-- TOC entry 6835 (class 2606 OID 188266)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ausencia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_ausencia) REFERENCES tipoausencia(id_tipo_ausencia) ON DELETE SET NULL;


--
-- TOC entry 6867 (class 2606 OID 188271)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ciudad
    ADD CONSTRAINT "$1" FOREIGN KEY (id_estado) REFERENCES estado(id_estado) ON DELETE SET NULL;


--
-- TOC entry 6980 (class 2606 OID 188276)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY entidadeducativa
    ADD CONSTRAINT "$1" FOREIGN KEY (id_estado) REFERENCES estado(id_estado) ON DELETE SET NULL;


--
-- TOC entry 6983 (class 2606 OID 188281)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY estado
    ADD CONSTRAINT "$1" FOREIGN KEY (id_pais) REFERENCES pais(id_pais) ON DELETE SET NULL;


--
-- TOC entry 7006 (class 2606 OID 188286)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY grupoorganismo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7073 (class 2606 OID 188291)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY municipio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_estado) REFERENCES estado(id_estado) ON DELETE SET NULL;


--
-- TOC entry 7074 (class 2606 OID 188296)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nombreorganismo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7086 (class 2606 OID 188301)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organismo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 7107 (class 2606 OID 188306)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY parroquia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_municipio) REFERENCES municipio(id_municipio) ON DELETE SET NULL;


--
-- TOC entry 7005 (class 2606 OID 188311)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY grupoocupacional
    ADD CONSTRAINT "$1" FOREIGN KEY (id_ramo_ocupacional) REFERENCES ramoocupacional(id_ramo_ocupacional) ON DELETE SET NULL;


--
-- TOC entry 6861 (class 2606 OID 188316)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY causamovimiento
    ADD CONSTRAINT "$1" FOREIGN KEY (id_movimiento_personal) REFERENCES movimientopersonal(id_movimiento_personal) ON DELETE SET NULL;


--
-- TOC entry 6869 (class 2606 OID 188321)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY clasificacionpersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_categoria_personal) REFERENCES categoriapersonal(id_categoria_personal) ON DELETE SET NULL;


--
-- TOC entry 6862 (class 2606 OID 188326)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY causapersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_causa_movimiento) REFERENCES causamovimiento(id_causa_movimiento) ON DELETE SET NULL;


--
-- TOC entry 7240 (class 2606 OID 188331)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY turno
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7062 (class 2606 OID 188336)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY manualcargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7002 (class 2606 OID 188341)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY frecuenciatipopersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_frecuencia_pago) REFERENCES frecuenciapago(id_frecuencia_pago) ON DELETE SET NULL;


--
-- TOC entry 6873 (class 2606 OID 188346)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY concepto
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7220 (class 2606 OID 188351)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY titulo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_nivel_educativo) REFERENCES niveleducativo(id_nivel_educativo) ON DELETE SET NULL;


--
-- TOC entry 7206 (class 2606 OID 188356)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY subgrupoprofesion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grupo_profesion) REFERENCES grupoprofesion(id_grupo_profesion) ON DELETE SET NULL;


--
-- TOC entry 6855 (class 2606 OID 188361)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_manual_cargo) REFERENCES manualcargo(id_manual_cargo);


--
-- TOC entry 6995 (class 2606 OID 188366)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY experiencia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6998 (class 2606 OID 188371)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY experiencianoest
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6963 (class 2606 OID 188376)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY educacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6985 (class 2606 OID 188381)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY estudio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6818 (class 2606 OID 188386)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY actividaddocente
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7136 (class 2606 OID 188391)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY profesiontrabajador
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6824 (class 2606 OID 188396)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY afiliacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6837 (class 2606 OID 188401)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY averiguacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6864 (class 2606 OID 188406)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY certificacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6871 (class 2606 OID 188411)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY comisionservicio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6937 (class 2606 OID 188416)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY declaracion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6978 (class 2606 OID 188421)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY encargaduria
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal);


--
-- TOC entry 6999 (class 2606 OID 188426)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY familiar
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7046 (class 2606 OID 188431)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY idioma
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7144 (class 2606 OID 188436)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY reconocimiento
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7178 (class 2606 OID 188441)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY sancion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7198 (class 2606 OID 188446)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY servicioexterior
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6827 (class 2606 OID 188451)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY antecedente
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7024 (class 2606 OID 188456)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historialremun
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7211 (class 2606 OID 188461)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tipopersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grupo_organismo) REFERENCES grupoorganismo(id_grupo_organismo) ON DELETE SET NULL;


--
-- TOC entry 7222 (class 2606 OID 188466)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6940 (class 2606 OID 188471)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dependencia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grupo_organismo) REFERENCES grupoorganismo(id_grupo_organismo) ON DELETE SET NULL;


--
-- TOC entry 7251 (class 2606 OID 188476)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY unidadfuncional
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7250 (class 2606 OID 188481)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY unidadejecutora
    ADD CONSTRAINT "$1" FOREIGN KEY (id_programa) REFERENCES programa(id_programa) ON DELETE SET NULL;


--
-- TOC entry 7149 (class 2606 OID 188486)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registro
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grupo_organismo) REFERENCES grupoorganismo(id_grupo_organismo) ON DELETE SET NULL;


--
-- TOC entry 7151 (class 2606 OID 188491)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrocargos
    ADD CONSTRAINT "$1" FOREIGN KEY (id_registro) REFERENCES registro(id_registro) ON DELETE SET NULL;


--
-- TOC entry 6933 (class 2606 OID 188496)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY curso
    ADD CONSTRAINT "$1" FOREIGN KEY (id_area_conocimiento) REFERENCES areaconocimiento(id_area_conocimiento) ON DELETE SET NULL;


--
-- TOC entry 7164 (class 2606 OID 188501)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registropersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_registro) REFERENCES registro(id_registro) ON DELETE SET NULL;


--
-- TOC entry 7064 (class 2606 OID 188506)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY manualpersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_manual_cargo) REFERENCES manualcargo(id_manual_cargo) ON DELETE SET NULL;


--
-- TOC entry 6859 (class 2606 OID 188511)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY carreraarea
    ADD CONSTRAINT "$1" FOREIGN KEY (id_area_carrera) REFERENCES areacarrera(id_area_carrera) ON DELETE SET NULL;


--
-- TOC entry 7249 (class 2606 OID 188516)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY unidadadministradora
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7181 (class 2606 OID 188521)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY sede
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 6893 (class 2606 OID 188526)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptofijo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 6866 (class 2606 OID 188531)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY certificado
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6872 (class 2606 OID 188536)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY comisionservicioext
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6935 (class 2606 OID 188541)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cursoentidad
    ADD CONSTRAINT "$1" FOREIGN KEY (id_curso) REFERENCES curso(id_curso) ON DELETE SET NULL;


--
-- TOC entry 7060 (class 2606 OID 188546)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY lugarpago
    ADD CONSTRAINT "$1" FOREIGN KEY (id_sede) REFERENCES sede(id_sede) ON DELETE SET NULL;


--
-- TOC entry 7087 (class 2606 OID 188551)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY otraactividad
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7133 (class 2606 OID 188556)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY profesion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_subgrupo_profesion) REFERENCES subgrupoprofesion(id_subgrupo_profesion) ON DELETE SET NULL;


--
-- TOC entry 7265 (class 2606 OID 188561)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY vacacionesporanio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6875 (class 2606 OID 188566)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptoasociado
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7197 (class 2606 OID 188571)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY seriecargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grupo_ocupacional) REFERENCES grupoocupacional(id_grupo_ocupacional) ON DELETE SET NULL;


--
-- TOC entry 6906 (class 2606 OID 188576)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptotipopersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7001 (class 2606 OID 188581)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY frecuenciapago
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7004 (class 2606 OID 188586)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY gruponomina
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7254 (class 2606 OID 188591)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY usuariorol
    ADD CONSTRAINT "$1" FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario) ON DELETE SET NULL;


--
-- TOC entry 7208 (class 2606 OID 188596)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY subtipodotacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_dotacion) REFERENCES tipodotacion(id_tipo_dotacion) ON DELETE SET NULL;


--
-- TOC entry 7097 (class 2606 OID 188601)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY parametrodotacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6958 (class 2606 OID 188606)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dotacioncargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_subtipo_dotacion) REFERENCES subtipodotacion(id_subtipo_dotacion) ON DELETE SET NULL;


--
-- TOC entry 7148 (class 2606 OID 188611)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY regioncontinente
    ADD CONSTRAINT "$1" FOREIGN KEY (id_continente) REFERENCES continente(id_continente) ON DELETE SET NULL;


--
-- TOC entry 7184 (class 2606 OID 188616)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY sedediplomatica
    ADD CONSTRAINT "$1" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 6845 (class 2606 OID 188621)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY calculoantiguedad
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7186 (class 2606 OID 188626)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY seguridadaniversario
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7129 (class 2606 OID 188631)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY primaantiguedad
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7130 (class 2606 OID 188636)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY primahijo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6913 (class 2606 OID 188641)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptovacaciones
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7200 (class 2606 OID 188646)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY sindicato
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto) REFERENCES concepto(id_concepto) ON DELETE SET NULL;


--
-- TOC entry 7252 (class 2606 OID 188651)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY usuarioorganismo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario) ON DELETE SET NULL;


--
-- TOC entry 7256 (class 2606 OID 188656)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY usuariotipopersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario) ON DELETE SET NULL;


--
-- TOC entry 6928 (class 2606 OID 188661)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cuentabanco
    ADD CONSTRAINT "$1" FOREIGN KEY (id_banco) REFERENCES banco(id_banco) ON DELETE SET NULL;


--
-- TOC entry 7099 (class 2606 OID 188666)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY parametrogobierno
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grupo_organismo) REFERENCES grupoorganismo(id_grupo_organismo) ON DELETE SET NULL;


--
-- TOC entry 7096 (class 2606 OID 188671)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY parametrocaja
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7192 (class 2606 OID 188676)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY seguridadordinaria
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 6916 (class 2606 OID 188681)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptovariable
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7124 (class 2606 OID 188686)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY prestamo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7209 (class 2606 OID 188691)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY sueldopromedio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7196 (class 2606 OID 188696)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY semana
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7094 (class 2606 OID 188701)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pais
    ADD CONSTRAINT "$1" FOREIGN KEY (id_region_continente) REFERENCES regioncontinente(id_region_continente) ON DELETE SET NULL;


--
-- TOC entry 7138 (class 2606 OID 188706)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY programa
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7105 (class 2606 OID 188711)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY parametrovarios
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7012 (class 2606 OID 188716)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY habilidad
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6822 (class 2606 OID 188721)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY administradorauel
    ADD CONSTRAINT "$1" FOREIGN KEY (id_unidad_administradora) REFERENCES unidadadministradora(id_unidad_administradora) ON DELETE SET NULL;


--
-- TOC entry 7089 (class 2606 OID 188726)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY otrasalicuotas
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7147 (class 2606 OID 188732)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY region
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7170 (class 2606 OID 188737)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY restringido
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7210 (class 2606 OID 188742)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tabulador
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7066 (class 2606 OID 188747)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY materia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_clasificacion) REFERENCES clasificacion(id_clasificacion) ON DELETE SET NULL;


--
-- TOC entry 7048 (class 2606 OID 188752)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY instancia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_clasificacion) REFERENCES clasificacion(id_clasificacion) ON DELETE SET NULL;


--
-- TOC entry 6947 (class 2606 OID 188757)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dependenciajudicial
    ADD CONSTRAINT "$1" FOREIGN KEY (id_operacion) REFERENCES operacion(id_operacion) ON DELETE SET NULL;


--
-- TOC entry 6885 (class 2606 OID 188762)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptodependencia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7071 (class 2606 OID 188767)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY movimientoscio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7068 (class 2606 OID 188772)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY movimientoregistro
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6956 (class 2606 OID 188777)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY disquete
    ADD CONSTRAINT "$1" FOREIGN KEY (id_banco) REFERENCES banco(id_banco) ON DELETE SET NULL;


--
-- TOC entry 7109 (class 2606 OID 188782)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY perfil
    ADD CONSTRAINT "$1" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 6820 (class 2606 OID 188787)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY adiestramientocargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7014 (class 2606 OID 188792)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY habilidadcargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7134 (class 2606 OID 188797)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY profesioncargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 6996 (class 2606 OID 188802)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY experienciacargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 6828 (class 2606 OID 188807)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY anticipo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6951 (class 2606 OID 188812)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY detalledisquete
    ADD CONSTRAINT "$1" FOREIGN KEY (id_disquete) REFERENCES disquete(id_disquete) ON DELETE SET NULL;


--
-- TOC entry 6923 (class 2606 OID 188817)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contrato
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_contrato) REFERENCES tipocontrato(id_tipo_contrato) ON DELETE SET NULL;


--
-- TOC entry 6853 (class 2606 OID 188822)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY calculovacacional
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 6877 (class 2606 OID 188827)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptocargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6878 (class 2606 OID 188833)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptocargoanio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6902 (class 2606 OID 188838)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptoprestaciones
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6931 (class 2606 OID 188843)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cuentacontable
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7000 (class 2606 OID 188848)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY firmasreportes
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7193 (class 2606 OID 188853)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY seguridadprestaciones
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6932 (class 2606 OID 188858)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cuentapresupuesto
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 6904 (class 2606 OID 188863)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptopresupuesto
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6972 (class 2606 OID 188868)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY elegiblehabilidad
    ADD CONSTRAINT "$1" FOREIGN KEY (id_elegible) REFERENCES elegible(id_elegible) ON DELETE SET NULL;


--
-- TOC entry 6975 (class 2606 OID 188873)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY elegibleotraactividad
    ADD CONSTRAINT "$1" FOREIGN KEY (id_elegible) REFERENCES elegible(id_elegible) ON DELETE SET NULL;


--
-- TOC entry 7016 (class 2606 OID 188878)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historialapn
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7121 (class 2606 OID 188883)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY planpersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 7120 (class 2606 OID 188888)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY planillaari
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7262 (class 2606 OID 188893)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY utilidadesporanio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7020 (class 2606 OID 188898)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historialorganismo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7166 (class 2606 OID 188903)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrositp
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7241 (class 2606 OID 188908)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY uelespecifica
    ADD CONSTRAINT "$1" FOREIGN KEY (id_accion_especifica) REFERENCES accionespecifica(id_accion_especifica) ON DELETE SET NULL;


--
-- TOC entry 6816 (class 2606 OID 188913)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY accioncentralizada
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7141 (class 2606 OID 188918)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY proyecto
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 6881 (class 2606 OID 188923)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptocuenta
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6856 (class 2606 OID 188928)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cargoespecifica
    ADD CONSTRAINT "$1" FOREIGN KEY (id_uel_especifica) REFERENCES uelespecifica(id_uel_especifica) ON DELETE SET NULL;


--
-- TOC entry 6833 (class 2606 OID 188933)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY aumentoevaluacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7238 (class 2606 OID 188938)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajadorespecifica
    ADD CONSTRAINT "$1" FOREIGN KEY (id_uel_especifica) REFERENCES uelespecifica(id_uel_especifica) ON DELETE SET NULL;


--
-- TOC entry 6832 (class 2606 OID 188943)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY aplicartabulador
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 6891 (class 2606 OID 188948)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptoespecifica
    ADD CONSTRAINT "$1" FOREIGN KEY (id_uel_especifica) REFERENCES uelespecifica(id_uel_especifica) ON DELETE SET NULL;


--
-- TOC entry 6899 (class 2606 OID 188953)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptomovimiento
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6921 (class 2606 OID 188958)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY constancia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6879 (class 2606 OID 188963)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptoconstancia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_constancia) REFERENCES constancia(id_constancia) ON DELETE SET NULL;


--
-- TOC entry 7102 (class 2606 OID 188968)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY parametrojuguete
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7104 (class 2606 OID 188973)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY parametroutiles
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7103 (class 2606 OID 188978)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY parametroticket
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7100 (class 2606 OID 188983)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY parametroguarderia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7054 (class 2606 OID 188988)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY juguete
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6849 (class 2606 OID 188993)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY calculoticket
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 6939 (class 2606 OID 188998)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY denominacionticket
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7042 (class 2606 OID 189003)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historicoticket
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7175 (class 2606 OID 189008)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY retroactivoticket
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 6992 (class 2606 OID 189013)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY excepcionticket
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7008 (class 2606 OID 189018)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY guarderiafamiliar
    ADD CONSTRAINT "$1" FOREIGN KEY (id_guarderia) REFERENCES guarderia(id_guarderia) ON DELETE SET NULL;


--
-- TOC entry 6838 (class 2606 OID 189023)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY beneficiario
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7216 (class 2606 OID 189028)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY titular
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7201 (class 2606 OID 189033)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY siniestro
    ADD CONSTRAINT "$1" FOREIGN KEY (id_plan_poliza) REFERENCES planpoliza(id_plan_poliza) ON DELETE SET NULL;


--
-- TOC entry 6984 (class 2606 OID 189040)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY estructura
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7172 (class 2606 OID 189045)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY resultadoevaluacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6993 (class 2606 OID 189050)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY excepciontitular
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6989 (class 2606 OID 189055)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY excepcionbeneficiario
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7131 (class 2606 OID 189062)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY primascargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7176 (class 2606 OID 189068)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY rolopcion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_opcion) REFERENCES opcion(id_opcion) ON UPDATE SET DEFAULT ON DELETE SET NULL;


--
-- TOC entry 7007 (class 2606 OID 189073)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY grupoticket
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 6961 (class 2606 OID 189078)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dotaciontrabajador
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 6982 (class 2606 OID 189083)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY establecimientosalud
    ADD CONSTRAINT "$1" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 7123 (class 2606 OID 189088)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY poliza
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7122 (class 2606 OID 189093)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY planpoliza
    ADD CONSTRAINT "$1" FOREIGN KEY (id_poliza) REFERENCES poliza(id_poliza) ON DELETE SET NULL;


--
-- TOC entry 6896 (class 2606 OID 189098)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptoliquidacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7067 (class 2606 OID 189103)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY mesesjubilacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7101 (class 2606 OID 189108)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY parametrojubilacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7263 (class 2606 OID 189113)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY vacacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7264 (class 2606 OID 189118)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY vacaciondisfrutada
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7266 (class 2606 OID 189123)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY vacacionprogramada
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7195 (class 2606 OID 189128)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY seguridadvacacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7057 (class 2606 OID 189133)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY liquidacioninteresviejoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7055 (class 2606 OID 189138)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY liquidacioninteresadicional
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7059 (class 2606 OID 189143)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY liquidacionresumenviejoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7056 (class 2606 OID 189148)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY liquidacioninteresnuevoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7058 (class 2606 OID 189153)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY liquidacionresumennuevoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7191 (class 2606 OID 189158)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY seguridadnuevoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7050 (class 2606 OID 189163)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY interesnuevoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7173 (class 2606 OID 189168)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY resumennuevoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7049 (class 2606 OID 189173)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY interesadicional
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7051 (class 2606 OID 189178)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY interesviejoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7174 (class 2606 OID 189183)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY resumenviejoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7190 (class 2606 OID 189188)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY seguridadinteresadicional
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7029 (class 2606 OID 189193)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historicodevengadointegral
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6826 (class 2606 OID 189198)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ajustetabuladoronu
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tabulador) REFERENCES tabulador(id_tabulador) ON DELETE SET NULL;


--
-- TOC entry 6858 (class 2606 OID 189203)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cargosplan
    ADD CONSTRAINT "$1" FOREIGN KEY (id_plan_personal) REFERENCES planpersonal(id_plan_personal) ON DELETE SET NULL;


--
-- TOC entry 6868 (class 2606 OID 189208)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY clasificaciondependencia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 6887 (class 2606 OID 189213)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptodiplomatico
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6889 (class 2606 OID 189218)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptodocente
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6953 (class 2606 OID 189223)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY detalletabuladormre
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tabulador) REFERENCES tabulador(id_tabulador) ON DELETE SET NULL;


--
-- TOC entry 6955 (class 2606 OID 189228)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY detalletabuladoronu
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tabulador) REFERENCES tabulador(id_tabulador) ON DELETE SET NULL;


--
-- TOC entry 6968 (class 2606 OID 189233)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY elegibleactividaddocente
    ADD CONSTRAINT "$1" FOREIGN KEY (id_elegible) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7003 (class 2606 OID 189238)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY gradoniveldocente
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grado_docente) REFERENCES gradodocente(id_grado_docente) ON DELETE SET NULL;


--
-- TOC entry 7052 (class 2606 OID 189243)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY jerarquiacategoriadocente
    ADD CONSTRAINT "$1" FOREIGN KEY (id_jerarquia_docente) REFERENCES jerarquiadocente(id_jerarquia_docente) ON DELETE SET NULL;


--
-- TOC entry 7075 (class 2606 OID 189248)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nominaconversion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7079 (class 2606 OID 189253)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nominadiplomatico
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7091 (class 2606 OID 189258)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pagoguarderia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7108 (class 2606 OID 189263)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY partidauelespecifica
    ADD CONSTRAINT "$1" FOREIGN KEY (id_uel_especifica) REFERENCES uelespecifica(id_uel_especifica) ON DELETE SET NULL;


--
-- TOC entry 7157 (class 2606 OID 189268)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrocargosaprobado
    ADD CONSTRAINT "$1" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7194 (class 2606 OID 189273)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY seguridadpresupuesto
    ADD CONSTRAINT "$1" FOREIGN KEY (id_categoria_presupuesto) REFERENCES categoriapresupuesto(id_categoria_presupuesto) ON DELETE SET NULL;


--
-- TOC entry 7236 (class 2606 OID 189278)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajadorasignatura
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7258 (class 2606 OID 189283)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY usuariounidadfuncional
    ADD CONSTRAINT "$1" FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario) ON DELETE SET NULL;


--
-- TOC entry 7160 (class 2606 OID 189288)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrodocente
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 6911 (class 2606 OID 189293)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptoutilidades
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6847 (class 2606 OID 189298)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY calculobonofinanio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 6883 (class 2606 OID 189303)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptocuentacontable
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7127 (class 2606 OID 189308)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY presupuestoespecifica
    ADD CONSTRAINT "$1" FOREIGN KEY (id_uel_especifica) REFERENCES uelespecifica(id_uel_especifica) ON DELETE SET NULL;


--
-- TOC entry 7189 (class 2606 OID 189313)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY seguridadguarderia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7260 (class 2606 OID 189318)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY utiles
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7140 (class 2606 OID 189323)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY proveedorubicacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_proveedor_ticket) REFERENCES proveedorticket(id_proveedor_ticket) ON DELETE SET NULL;


--
-- TOC entry 7116 (class 2606 OID 189328)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY planadiestramiento
    ADD CONSTRAINT "$1" FOREIGN KEY (id_unidad_funcional) REFERENCES unidadfuncional(id_unidad_funcional) ON DELETE SET NULL;


--
-- TOC entry 6830 (class 2606 OID 189333)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY apelacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6843 (class 2606 OID 189338)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cajaahorro
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7207 (class 2606 OID 189343)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY subtipocredencial
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_credencial) REFERENCES tipocredencial(id_tipo_credencial) ON DELETE SET NULL;


--
-- TOC entry 6926 (class 2606 OID 189348)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY credencial
    ADD CONSTRAINT "$1" FOREIGN KEY (id_subtipo_credencial) REFERENCES subtipocredencial(id_subtipo_credencial) ON DELETE SET NULL;


--
-- TOC entry 7119 (class 2606 OID 189353)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY planillaarc
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7223 (class 2606 OID 189358)
-- Name: $10; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$10" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7224 (class 2606 OID 189363)
-- Name: $11; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$11" FOREIGN KEY (id_lugar_pago) REFERENCES lugarpago(id_lugar_pago) ON DELETE SET NULL;


--
-- TOC entry 7030 (class 2606 OID 189368)
-- Name: $11; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historiconomina
    ADD CONSTRAINT "$11" FOREIGN KEY (id_sede) REFERENCES sede(id_sede) ON DELETE SET NULL;


--
-- TOC entry 7225 (class 2606 OID 189373)
-- Name: $12; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$12" FOREIGN KEY (id_turno) REFERENCES turno(id_turno) ON DELETE SET NULL;


--
-- TOC entry 7031 (class 2606 OID 189378)
-- Name: $12; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historiconomina
    ADD CONSTRAINT "$12" FOREIGN KEY (id_region) REFERENCES region(id_region) ON DELETE SET NULL;


--
-- TOC entry 7226 (class 2606 OID 189383)
-- Name: $13; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$13" FOREIGN KEY (id_causa_movimiento) REFERENCES causamovimiento(id_causa_movimiento) ON DELETE SET NULL;


--
-- TOC entry 7227 (class 2606 OID 189388)
-- Name: $14; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$14" FOREIGN KEY (id_dependencia_real) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7228 (class 2606 OID 189393)
-- Name: $15; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$15" FOREIGN KEY (id_cargo_real) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 6936 (class 2606 OID 189398)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cursoentidad
    ADD CONSTRAINT "$2" FOREIGN KEY (id_entidad_educativa) REFERENCES entidadeducativa(id_entidad_educativa) ON DELETE SET NULL;


--
-- TOC entry 6981 (class 2606 OID 189403)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY entidadeducativa
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_entidad) REFERENCES tipoentidad(id_tipo_entidad) ON DELETE SET NULL;


--
-- TOC entry 7088 (class 2606 OID 189408)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY otraactividad
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_otra_actividad) REFERENCES tipootraactividad(id_tipo_otra_actividad) ON DELETE SET NULL;


--
-- TOC entry 6870 (class 2606 OID 189413)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY clasificacionpersonal
    ADD CONSTRAINT "$2" FOREIGN KEY (id_relacion_personal) REFERENCES relacionpersonal(id_relacion_personal) ON DELETE SET NULL;


--
-- TOC entry 6863 (class 2606 OID 189418)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY causapersonal
    ADD CONSTRAINT "$2" FOREIGN KEY (id_clasificacion_personal) REFERENCES clasificacionpersonal(id_clasificacion_personal) ON DELETE SET NULL;


--
-- TOC entry 7114 (class 2606 OID 189423)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY personalorganismo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7110 (class 2606 OID 189428)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY personal
    ADD CONSTRAINT "$2" FOREIGN KEY (id_parroquia) REFERENCES parroquia(id_parroquia) ON DELETE SET NULL;


--
-- TOC entry 6964 (class 2606 OID 189433)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY educacion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_nivel_educativo) REFERENCES niveleducativo(id_nivel_educativo) ON DELETE SET NULL;


--
-- TOC entry 6986 (class 2606 OID 189438)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY estudio
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_curso) REFERENCES tipocurso(id_tipo_curso) ON DELETE SET NULL;


--
-- TOC entry 7137 (class 2606 OID 189443)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY profesiontrabajador
    ADD CONSTRAINT "$2" FOREIGN KEY (id_profesion) REFERENCES profesion(id_profesion) ON DELETE SET NULL;


--
-- TOC entry 6865 (class 2606 OID 189448)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY certificacion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_area_conocimiento) REFERENCES areaconocimiento(id_area_conocimiento) ON DELETE SET NULL;


--
-- TOC entry 6938 (class 2606 OID 189453)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY declaracion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 6979 (class 2606 OID 189458)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY encargaduria
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7047 (class 2606 OID 189463)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY idioma
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_idioma) REFERENCES tipoidioma(id_tipo_idioma) ON DELETE SET NULL;


--
-- TOC entry 7145 (class 2606 OID 189468)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY reconocimiento
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_reconocimiento) REFERENCES tiporeconocimiento(id_tipo_reconocimiento) ON DELETE SET NULL;


--
-- TOC entry 7179 (class 2606 OID 189473)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY sancion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_amonestacion) REFERENCES tipoamonestacion(id_tipo_amonestacion) ON DELETE SET NULL;


--
-- TOC entry 7025 (class 2606 OID 189478)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historialremun
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7229 (class 2606 OID 189483)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7061 (class 2606 OID 189488)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY lugarpago
    ADD CONSTRAINT "$2" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 7150 (class 2606 OID 189493)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registro
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 6934 (class 2606 OID 189498)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY curso
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_curso) REFERENCES tipocurso(id_tipo_curso) ON DELETE SET NULL;


--
-- TOC entry 7165 (class 2606 OID 189503)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registropersonal
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7065 (class 2606 OID 189508)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY manualpersonal
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6860 (class 2606 OID 189513)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY carreraarea
    ADD CONSTRAINT "$2" FOREIGN KEY (id_carrera) REFERENCES carrera(id_carrera) ON DELETE SET NULL;


--
-- TOC entry 7182 (class 2606 OID 189518)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY sede
    ADD CONSTRAINT "$2" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 6894 (class 2606 OID 189523)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptofijo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6819 (class 2606 OID 189528)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY actividaddocente
    ADD CONSTRAINT "$2" FOREIGN KEY (id_carrera) REFERENCES carrera(id_carrera) ON DELETE SET NULL;


--
-- TOC entry 6825 (class 2606 OID 189533)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY afiliacion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_gremio) REFERENCES gremio(id_gremio) ON DELETE SET NULL;


--
-- TOC entry 6836 (class 2606 OID 189538)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ausencia
    ADD CONSTRAINT "$2" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6941 (class 2606 OID 189543)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dependencia
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7212 (class 2606 OID 189548)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tipopersonal
    ADD CONSTRAINT "$2" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7221 (class 2606 OID 189553)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY titulo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_grupo_profesion) REFERENCES grupoprofesion(id_grupo_profesion) ON DELETE SET NULL;


--
-- TOC entry 6907 (class 2606 OID 189558)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptotipopersonal
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7152 (class 2606 OID 189563)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrocargos
    ADD CONSTRAINT "$2" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7177 (class 2606 OID 189568)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY rolopcion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_rol) REFERENCES rol(id_rol) ON DELETE SET NULL;


--
-- TOC entry 7255 (class 2606 OID 189573)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY usuariorol
    ADD CONSTRAINT "$2" FOREIGN KEY (id_rol) REFERENCES rol(id_rol) ON DELETE SET NULL;


--
-- TOC entry 7098 (class 2606 OID 189578)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY parametrodotacion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6959 (class 2606 OID 189583)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dotacioncargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7095 (class 2606 OID 189588)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pais
    ADD CONSTRAINT "$2" FOREIGN KEY (id_region_continente) REFERENCES regioncontinente(id_region_continente) ON DELETE SET NULL;


--
-- TOC entry 7185 (class 2606 OID 189593)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY sedediplomatica
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_sede) REFERENCES tiposede(id_tipo_sede) ON DELETE SET NULL;


--
-- TOC entry 6846 (class 2606 OID 189598)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY calculoantiguedad
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7187 (class 2606 OID 189603)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY seguridadaniversario
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto) REFERENCES concepto(id_concepto) ON DELETE SET NULL;


--
-- TOC entry 6914 (class 2606 OID 189608)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptovacaciones
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7253 (class 2606 OID 189613)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY usuarioorganismo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7257 (class 2606 OID 189618)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY usuariotipopersonal
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6929 (class 2606 OID 189623)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cuentabanco
    ADD CONSTRAINT "$2" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 6917 (class 2606 OID 189628)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptovariable
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7125 (class 2606 OID 189633)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY prestamo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7106 (class 2606 OID 189638)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY parametrovarios
    ADD CONSTRAINT "$2" FOREIGN KEY (id_grupo_organismo) REFERENCES grupoorganismo(id_grupo_organismo) ON DELETE SET NULL;


--
-- TOC entry 6876 (class 2606 OID 189643)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptoasociado
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_asociar) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7013 (class 2606 OID 189648)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY habilidad
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_habilidad) REFERENCES tipohabilidad(id_tipo_habilidad) ON DELETE SET NULL;


--
-- TOC entry 7084 (class 2606 OID 189653)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nominaespecial
    ADD CONSTRAINT "$2" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 6823 (class 2606 OID 189658)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY administradorauel
    ADD CONSTRAINT "$2" FOREIGN KEY (id_unidad_ejecutora) REFERENCES unidadejecutora(id_unidad_ejecutora) ON DELETE SET NULL;


--
-- TOC entry 7090 (class 2606 OID 189663)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY otrasalicuotas
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_alicuota) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 7171 (class 2606 OID 189668)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY restringido
    ADD CONSTRAINT "$2" FOREIGN KEY (id_personal_restringido) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7063 (class 2606 OID 189673)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY manualcargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tabulador) REFERENCES tabulador(id_tabulador) ON DELETE SET NULL;


--
-- TOC entry 6948 (class 2606 OID 189678)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dependenciajudicial
    ADD CONSTRAINT "$2" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 6886 (class 2606 OID 189683)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptodependencia
    ADD CONSTRAINT "$2" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7188 (class 2606 OID 189688)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY seguridadespecial
    ADD CONSTRAINT "$2" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7072 (class 2606 OID 189693)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY movimientoscio
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7069 (class 2606 OID 189698)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY movimientoregistro
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 6957 (class 2606 OID 189703)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY disquete
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 6977 (class 2606 OID 189708)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embargoconcepto
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto) REFERENCES concepto(id_concepto) ON DELETE SET NULL;


--
-- TOC entry 7139 (class 2606 OID 189713)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY proveedorregion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_region) REFERENCES region(id_region) ON DELETE SET NULL;


--
-- TOC entry 6821 (class 2606 OID 189718)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY adiestramientocargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_area_conocimiento) REFERENCES areaconocimiento(id_area_conocimiento) ON DELETE SET NULL;


--
-- TOC entry 7015 (class 2606 OID 189723)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY habilidadcargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_habilidad) REFERENCES tipohabilidad(id_tipo_habilidad) ON DELETE SET NULL;


--
-- TOC entry 7135 (class 2606 OID 189728)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY profesioncargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_profesion) REFERENCES profesion(id_profesion) ON DELETE SET NULL;


--
-- TOC entry 6997 (class 2606 OID 189733)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY experienciacargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cargo_requerido) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 6829 (class 2606 OID 189738)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY anticipo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6952 (class 2606 OID 189743)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY detalledisquete
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto) REFERENCES concepto(id_concepto) ON DELETE SET NULL;


--
-- TOC entry 6924 (class 2606 OID 189748)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contrato
    ADD CONSTRAINT "$2" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6854 (class 2606 OID 189753)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY calculovacacional
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6903 (class 2606 OID 189758)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptoprestaciones
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6905 (class 2606 OID 189763)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptopresupuesto
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cuenta_presupuesto) REFERENCES cuentapresupuesto(id_cuenta_presupuesto) ON DELETE SET NULL;


--
-- TOC entry 6970 (class 2606 OID 189768)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY elegibleafiliacion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_gremio) REFERENCES gremio(id_gremio) ON DELETE SET NULL;


--
-- TOC entry 6973 (class 2606 OID 189773)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY elegiblehabilidad
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_habilidad) REFERENCES tipohabilidad(id_tipo_habilidad) ON DELETE SET NULL;


--
-- TOC entry 6919 (class 2606 OID 189778)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY concurso
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 6920 (class 2606 OID 189783)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY concursocargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concurso) REFERENCES concurso(id_concurso) ON DELETE SET NULL;


--
-- TOC entry 6874 (class 2606 OID 189788)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY concepto
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_aporte) REFERENCES concepto(id_concepto) ON UPDATE SET NULL;


--
-- TOC entry 7167 (class 2606 OID 189793)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrositp
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7242 (class 2606 OID 189798)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY uelespecifica
    ADD CONSTRAINT "$2" FOREIGN KEY (id_unidad_ejecutora) REFERENCES unidadejecutora(id_unidad_ejecutora) ON DELETE SET NULL;


--
-- TOC entry 7239 (class 2606 OID 189803)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajadorespecifica
    ADD CONSTRAINT "$2" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 6882 (class 2606 OID 189808)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptocuenta
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cuenta_presupuesto) REFERENCES cuentapresupuesto(id_cuenta_presupuesto) ON DELETE SET NULL;


--
-- TOC entry 6857 (class 2606 OID 189813)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cargoespecifica
    ADD CONSTRAINT "$2" FOREIGN KEY (id_registro_cargos) REFERENCES registrocargos(id_registro_cargos) ON DELETE SET NULL;


--
-- TOC entry 6892 (class 2606 OID 189818)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptoespecifica
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6900 (class 2606 OID 189823)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptomovimiento
    ADD CONSTRAINT "$2" FOREIGN KEY (id_frecuencia_tipo_personal) REFERENCES frecuenciatipopersonal(id_frecuencia_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6922 (class 2606 OID 189828)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY constancia
    ADD CONSTRAINT "$2" FOREIGN KEY (id_constancia) REFERENCES constancia(id_constancia) ON DELETE SET NULL;


--
-- TOC entry 6880 (class 2606 OID 189833)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptoconstancia
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6850 (class 2606 OID 189838)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY calculoticket
    ADD CONSTRAINT "$2" FOREIGN KEY (id_proveedor_ticket) REFERENCES proveedorticket(id_proveedor_ticket) ON DELETE SET NULL;


--
-- TOC entry 7043 (class 2606 OID 189843)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historicoticket
    ADD CONSTRAINT "$2" FOREIGN KEY (id_proveedor_ticket) REFERENCES proveedorticket(id_proveedor_ticket) ON DELETE SET NULL;


--
-- TOC entry 7009 (class 2606 OID 189848)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY guarderiafamiliar
    ADD CONSTRAINT "$2" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6839 (class 2606 OID 189853)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY beneficiario
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7217 (class 2606 OID 189858)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY titular
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7202 (class 2606 OID 189863)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY siniestro
    ADD CONSTRAINT "$2" FOREIGN KEY (id_beneficiario) REFERENCES beneficiario(id_beneficiario) ON DELETE SET NULL;


--
-- TOC entry 6976 (class 2606 OID 189868)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6994 (class 2606 OID 189873)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY excepciontitular
    ADD CONSTRAINT "$2" FOREIGN KEY (id_plan_poliza) REFERENCES planpoliza(id_plan_poliza) ON DELETE SET NULL;


--
-- TOC entry 6990 (class 2606 OID 189878)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY excepcionbeneficiario
    ADD CONSTRAINT "$2" FOREIGN KEY (id_plan_poliza) REFERENCES planpoliza(id_plan_poliza) ON DELETE SET NULL;


--
-- TOC entry 7132 (class 2606 OID 189883)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY primascargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_primas_plan) REFERENCES primasplan(id_primas_plan) ON DELETE SET NULL;


--
-- TOC entry 6962 (class 2606 OID 189888)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dotaciontrabajador
    ADD CONSTRAINT "$2" FOREIGN KEY (id_subtipo_dotacion) REFERENCES subtipodotacion(id_subtipo_dotacion) ON DELETE SET NULL;


--
-- TOC entry 6897 (class 2606 OID 189893)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptoliquidacion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6888 (class 2606 OID 189898)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptodiplomatico
    ADD CONSTRAINT "$2" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 6890 (class 2606 OID 189903)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptodocente
    ADD CONSTRAINT "$2" FOREIGN KEY (id_frecuencia_tipo_personal) REFERENCES frecuenciatipopersonal(id_frecuencia_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6954 (class 2606 OID 189908)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY detalletabuladormre
    ADD CONSTRAINT "$2" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 6969 (class 2606 OID 189913)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY elegibleactividaddocente
    ADD CONSTRAINT "$2" FOREIGN KEY (id_carrera) REFERENCES carrera(id_carrera) ON DELETE SET NULL;


--
-- TOC entry 7053 (class 2606 OID 189918)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY jerarquiacategoriadocente
    ADD CONSTRAINT "$2" FOREIGN KEY (id_categoria_docente) REFERENCES categoriadocente(id_categoria_docente) ON DELETE SET NULL;


--
-- TOC entry 7076 (class 2606 OID 189923)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nominaconversion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON UPDATE SET NULL;


--
-- TOC entry 7080 (class 2606 OID 189928)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nominadiplomatico
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON UPDATE SET NULL;


--
-- TOC entry 7092 (class 2606 OID 189933)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pagoguarderia
    ADD CONSTRAINT "$2" FOREIGN KEY (id_familiar) REFERENCES familiar(id_familiar) ON DELETE SET NULL;


--
-- TOC entry 7158 (class 2606 OID 189938)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrocargosaprobado
    ADD CONSTRAINT "$2" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7237 (class 2606 OID 189943)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajadorasignatura
    ADD CONSTRAINT "$2" FOREIGN KEY (id_asignatura) REFERENCES asignatura(id_asignatura) ON DELETE SET NULL;


--
-- TOC entry 7259 (class 2606 OID 189948)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY usuariounidadfuncional
    ADD CONSTRAINT "$2" FOREIGN KEY (id_usuario_unidad_funcional) REFERENCES unidadfuncional(id_unidad_funcional) ON DELETE SET NULL;


--
-- TOC entry 7161 (class 2606 OID 189953)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrodocente
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 6912 (class 2606 OID 189958)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptoutilidades
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6848 (class 2606 OID 189963)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY calculobonofinanio
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6884 (class 2606 OID 189968)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptocuentacontable
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cuenta_contable) REFERENCES cuentacontable(id_cuenta_contable) ON DELETE SET NULL;


--
-- TOC entry 7128 (class 2606 OID 189973)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY presupuestoespecifica
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cuenta_presupuesto) REFERENCES cuentapresupuesto(id_cuenta_presupuesto) ON DELETE SET NULL;


--
-- TOC entry 7261 (class 2606 OID 189978)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY utiles
    ADD CONSTRAINT "$2" FOREIGN KEY (id_familiar) REFERENCES familiar(id_familiar) ON DELETE SET NULL;


--
-- TOC entry 7117 (class 2606 OID 189983)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY planadiestramiento
    ADD CONSTRAINT "$2" FOREIGN KEY (id_area_conocimiento) REFERENCES areaconocimiento(id_area_conocimiento) ON DELETE SET NULL;


--
-- TOC entry 6844 (class 2606 OID 189988)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cajaahorro
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6927 (class 2606 OID 189993)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY credencial
    ADD CONSTRAINT "$2" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6908 (class 2606 OID 189998)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptotipopersonal
    ADD CONSTRAINT "$3" FOREIGN KEY (id_frecuencia_tipo_personal) REFERENCES frecuenciatipopersonal(id_frecuencia_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6965 (class 2606 OID 190003)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY educacion
    ADD CONSTRAINT "$3" FOREIGN KEY (id_carrera) REFERENCES carrera(id_carrera) ON DELETE SET NULL;


--
-- TOC entry 6987 (class 2606 OID 190008)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY estudio
    ADD CONSTRAINT "$3" FOREIGN KEY (id_area_conocimiento) REFERENCES areaconocimiento(id_area_conocimiento) ON DELETE SET NULL;


--
-- TOC entry 7146 (class 2606 OID 190013)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY reconocimiento
    ADD CONSTRAINT "$3" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7180 (class 2606 OID 190018)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY sancion
    ADD CONSTRAINT "$3" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7026 (class 2606 OID 190023)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historialremun
    ADD CONSTRAINT "$3" FOREIGN KEY (id_clasificacion_personal) REFERENCES clasificacionpersonal(id_clasificacion_personal) ON DELETE SET NULL;


--
-- TOC entry 7213 (class 2606 OID 190028)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tipopersonal
    ADD CONSTRAINT "$3" FOREIGN KEY (id_clasificacion_personal) REFERENCES clasificacionpersonal(id_clasificacion_personal) ON DELETE SET NULL;


--
-- TOC entry 7230 (class 2606 OID 190033)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$3" FOREIGN KEY (id_banco_nomina) REFERENCES banco(id_banco) ON DELETE SET NULL;


--
-- TOC entry 6942 (class 2606 OID 190038)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dependencia
    ADD CONSTRAINT "$3" FOREIGN KEY (id_tipo_dependencia) REFERENCES tipodependencia(id_tipo_dependencia) ON DELETE SET NULL;


--
-- TOC entry 6895 (class 2606 OID 190043)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptofijo
    ADD CONSTRAINT "$3" FOREIGN KEY (id_frecuencia_tipo_personal) REFERENCES frecuenciatipopersonal(id_frecuencia_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7199 (class 2606 OID 190048)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY servicioexterior
    ADD CONSTRAINT "$3" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7153 (class 2606 OID 190053)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrocargos
    ADD CONSTRAINT "$3" FOREIGN KEY (id_gremio) REFERENCES gremio(id_gremio) ON DELETE SET NULL;


--
-- TOC entry 7115 (class 2606 OID 190058)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY personalorganismo
    ADD CONSTRAINT "$3" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 6960 (class 2606 OID 190063)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dotacioncargo
    ADD CONSTRAINT "$3" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6930 (class 2606 OID 190068)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cuentabanco
    ADD CONSTRAINT "$3" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 6918 (class 2606 OID 190073)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptovariable
    ADD CONSTRAINT "$3" FOREIGN KEY (id_frecuencia_tipo_personal) REFERENCES frecuenciatipopersonal(id_frecuencia_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7126 (class 2606 OID 190078)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY prestamo
    ADD CONSTRAINT "$3" FOREIGN KEY (id_frecuencia_tipo_personal) REFERENCES frecuenciatipopersonal(id_frecuencia_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6915 (class 2606 OID 190083)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptovacaciones
    ADD CONSTRAINT "$3" FOREIGN KEY (id_concepto_alicuota) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7183 (class 2606 OID 190088)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY sede
    ADD CONSTRAINT "$3" FOREIGN KEY (id_region) REFERENCES region(id_region) ON DELETE SET NULL;


--
-- TOC entry 6949 (class 2606 OID 190093)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dependenciajudicial
    ADD CONSTRAINT "$3" FOREIGN KEY (id_materia) REFERENCES materia(id_materia) ON DELETE SET NULL;


--
-- TOC entry 6925 (class 2606 OID 190098)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contrato
    ADD CONSTRAINT "$3" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6974 (class 2606 OID 190103)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY elegibleorganismo
    ADD CONSTRAINT "$3" FOREIGN KEY (id_elegible) REFERENCES elegible(id_elegible) ON DELETE SET NULL;


--
-- TOC entry 7017 (class 2606 OID 190108)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historialapn
    ADD CONSTRAINT "$3" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7021 (class 2606 OID 190113)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historialorganismo
    ADD CONSTRAINT "$3" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7168 (class 2606 OID 190118)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrositp
    ADD CONSTRAINT "$3" FOREIGN KEY (id_causa_movimiento) REFERENCES causamovimiento(id_causa_movimiento) ON DELETE SET NULL;


--
-- TOC entry 6901 (class 2606 OID 190123)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptomovimiento
    ADD CONSTRAINT "$3" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 6851 (class 2606 OID 190128)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY calculoticket
    ADD CONSTRAINT "$3" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7044 (class 2606 OID 190133)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historicoticket
    ADD CONSTRAINT "$3" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7010 (class 2606 OID 190138)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY guarderiafamiliar
    ADD CONSTRAINT "$3" FOREIGN KEY (id_familiar) REFERENCES familiar(id_familiar) ON DELETE SET NULL;


--
-- TOC entry 6840 (class 2606 OID 190143)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY beneficiario
    ADD CONSTRAINT "$3" FOREIGN KEY (id_plan_poliza) REFERENCES planpoliza(id_plan_poliza) ON DELETE SET NULL;


--
-- TOC entry 7218 (class 2606 OID 190148)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY titular
    ADD CONSTRAINT "$3" FOREIGN KEY (id_plan_poliza) REFERENCES planpoliza(id_plan_poliza) ON DELETE SET NULL;


--
-- TOC entry 7203 (class 2606 OID 190153)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY siniestro
    ADD CONSTRAINT "$3" FOREIGN KEY (id_titular) REFERENCES titular(id_titular) ON DELETE SET NULL;


--
-- TOC entry 6991 (class 2606 OID 190158)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY excepcionbeneficiario
    ADD CONSTRAINT "$3" FOREIGN KEY (id_familiar) REFERENCES familiar(id_familiar) ON DELETE SET NULL;


--
-- TOC entry 6898 (class 2606 OID 190163)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptoliquidacion
    ADD CONSTRAINT "$3" FOREIGN KEY (id_frecuencia_tipo_personal) REFERENCES frecuenciatipopersonal(id_frecuencia_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6831 (class 2606 OID 190168)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY aperturaescolar
    ADD CONSTRAINT "$3" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7077 (class 2606 OID 190173)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nominaconversion
    ADD CONSTRAINT "$3" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7081 (class 2606 OID 190178)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nominadiplomatico
    ADD CONSTRAINT "$3" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7093 (class 2606 OID 190183)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pagoguarderia
    ADD CONSTRAINT "$3" FOREIGN KEY (id_guarderia) REFERENCES guarderia(id_guarderia) ON DELETE SET NULL;


--
-- TOC entry 7159 (class 2606 OID 190188)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrocargosaprobado
    ADD CONSTRAINT "$3" FOREIGN KEY (id_region) REFERENCES region(id_region) ON DELETE SET NULL;


--
-- TOC entry 7162 (class 2606 OID 190193)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrodocente
    ADD CONSTRAINT "$3" FOREIGN KEY (id_apertura_escolar) REFERENCES aperturaescolar(id_apertura_escolar) ON DELETE SET NULL;


--
-- TOC entry 7118 (class 2606 OID 190198)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY planadiestramiento
    ADD CONSTRAINT "$3" FOREIGN KEY (id_tipo_curso) REFERENCES tipocurso(id_tipo_curso) ON DELETE SET NULL;


--
-- TOC entry 7111 (class 2606 OID 190203)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY personal
    ADD CONSTRAINT "$4" FOREIGN KEY (id_ciudad_residencia) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 6966 (class 2606 OID 190208)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY educacion
    ADD CONSTRAINT "$4" FOREIGN KEY (id_titulo) REFERENCES titulo(id_titulo) ON DELETE SET NULL;


--
-- TOC entry 7027 (class 2606 OID 190213)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historialremun
    ADD CONSTRAINT "$4" FOREIGN KEY (id_mov_remuneracion) REFERENCES movremuneracion(id_mov_remuneracion) ON DELETE SET NULL;


--
-- TOC entry 7214 (class 2606 OID 190218)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tipopersonal
    ADD CONSTRAINT "$4" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7231 (class 2606 OID 190223)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$4" FOREIGN KEY (id_banco_lph) REFERENCES banco(id_banco) ON DELETE SET NULL;


--
-- TOC entry 6988 (class 2606 OID 190228)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY estudio
    ADD CONSTRAINT "$4" FOREIGN KEY (id_pais) REFERENCES pais(id_pais) ON DELETE SET NULL;


--
-- TOC entry 6909 (class 2606 OID 190233)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptotipopersonal
    ADD CONSTRAINT "$4" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7154 (class 2606 OID 190238)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrocargos
    ADD CONSTRAINT "$4" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7243 (class 2606 OID 190243)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ultimanomina
    ADD CONSTRAINT "$4" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7246 (class 2606 OID 190248)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ultimaprenomina
    ADD CONSTRAINT "$4" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7039 (class 2606 OID 190253)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historicosemana
    ADD CONSTRAINT "$4" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6943 (class 2606 OID 190258)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dependencia
    ADD CONSTRAINT "$4" FOREIGN KEY (id_administradora_uel) REFERENCES administradorauel(id_administradora_uel) ON DELETE SET NULL;


--
-- TOC entry 7035 (class 2606 OID 190263)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historicoquincena
    ADD CONSTRAINT "$4" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6950 (class 2606 OID 190269)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dependenciajudicial
    ADD CONSTRAINT "$4" FOREIGN KEY (id_instancia) REFERENCES instancia(id_instancia) ON DELETE SET NULL;


--
-- TOC entry 7070 (class 2606 OID 190274)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY movimientoregistro
    ADD CONSTRAINT "$4" FOREIGN KEY (id_causa_movimiento) REFERENCES causamovimiento(id_causa_movimiento) ON DELETE SET NULL;


--
-- TOC entry 6971 (class 2606 OID 190279)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY elegibleestudio
    ADD CONSTRAINT "$4" FOREIGN KEY (id_pais) REFERENCES pais(id_pais) ON DELETE SET NULL;


--
-- TOC entry 7018 (class 2606 OID 190284)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historialapn
    ADD CONSTRAINT "$4" FOREIGN KEY (id_causa_movimiento) REFERENCES causamovimiento(id_causa_movimiento) ON DELETE SET NULL;


--
-- TOC entry 7022 (class 2606 OID 190289)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historialorganismo
    ADD CONSTRAINT "$4" FOREIGN KEY (id_causa_movimiento) REFERENCES causamovimiento(id_causa_movimiento) ON DELETE SET NULL;


--
-- TOC entry 7169 (class 2606 OID 190294)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrositp
    ADD CONSTRAINT "$4" FOREIGN KEY (id_clasificacion_personal) REFERENCES clasificacionpersonal(id_clasificacion_personal) ON DELETE SET NULL;


--
-- TOC entry 6834 (class 2606 OID 190299)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY aumentoevaluacion
    ADD CONSTRAINT "$4" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 6852 (class 2606 OID 190304)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY calculoticket
    ADD CONSTRAINT "$4" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7045 (class 2606 OID 190309)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historicoticket
    ADD CONSTRAINT "$4" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7011 (class 2606 OID 190314)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY guarderiafamiliar
    ADD CONSTRAINT "$4" FOREIGN KEY (id_guarderia) REFERENCES guarderia(id_guarderia) ON DELETE SET NULL;


--
-- TOC entry 6841 (class 2606 OID 190320)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY beneficiario
    ADD CONSTRAINT "$4" FOREIGN KEY (id_primas_plan) REFERENCES primasplan(id_primas_plan) ON DELETE SET NULL;


--
-- TOC entry 7219 (class 2606 OID 190325)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY titular
    ADD CONSTRAINT "$4" FOREIGN KEY (id_primas_plan) REFERENCES primasplan(id_primas_plan) ON DELETE SET NULL;


--
-- TOC entry 7204 (class 2606 OID 190330)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY siniestro
    ADD CONSTRAINT "$4" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7078 (class 2606 OID 190335)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nominaconversion
    ADD CONSTRAINT "$4" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7082 (class 2606 OID 190340)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nominadiplomatico
    ADD CONSTRAINT "$4" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7163 (class 2606 OID 190347)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrodocente
    ADD CONSTRAINT "$4" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7032 (class 2606 OID 190352)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historiconomina
    ADD CONSTRAINT "$4" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7112 (class 2606 OID 190358)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY personal
    ADD CONSTRAINT "$5" FOREIGN KEY (id_ciudad_nacimiento) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 6967 (class 2606 OID 190363)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY educacion
    ADD CONSTRAINT "$5" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 7232 (class 2606 OID 190368)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$5" FOREIGN KEY (id_banco_fid) REFERENCES banco(id_banco) ON DELETE SET NULL;


--
-- TOC entry 6944 (class 2606 OID 190373)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dependencia
    ADD CONSTRAINT "$5" FOREIGN KEY (id_dependencia_anterior) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7028 (class 2606 OID 190378)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historialremun
    ADD CONSTRAINT "$5" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo);


--
-- TOC entry 7155 (class 2606 OID 190383)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrocargos
    ADD CONSTRAINT "$5" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7244 (class 2606 OID 190388)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ultimanomina
    ADD CONSTRAINT "$5" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7247 (class 2606 OID 190393)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ultimaprenomina
    ADD CONSTRAINT "$5" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7040 (class 2606 OID 190398)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historicosemana
    ADD CONSTRAINT "$5" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7036 (class 2606 OID 190403)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historicoquincena
    ADD CONSTRAINT "$5" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 6910 (class 2606 OID 190409)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conceptotipopersonal
    ADD CONSTRAINT "$5" FOREIGN KEY (id_contrato_colectivo) REFERENCES contratocolectivo(id_contrato_colectivo) ON DELETE SET NULL;


--
-- TOC entry 7019 (class 2606 OID 190414)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historialapn
    ADD CONSTRAINT "$5" FOREIGN KEY (id_clasificacion_personal) REFERENCES clasificacionpersonal(id_clasificacion_personal) ON DELETE SET NULL;


--
-- TOC entry 7023 (class 2606 OID 190419)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historialorganismo
    ADD CONSTRAINT "$5" FOREIGN KEY (id_clasificacion_personal) REFERENCES clasificacionpersonal(id_clasificacion_personal) ON DELETE SET NULL;


--
-- TOC entry 7142 (class 2606 OID 190424)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY proyecto
    ADD CONSTRAINT "$5" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 7215 (class 2606 OID 190429)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tipopersonal
    ADD CONSTRAINT "$5" FOREIGN KEY (id_turno) REFERENCES turno(id_turno) ON DELETE SET NULL;


--
-- TOC entry 6842 (class 2606 OID 190434)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY beneficiario
    ADD CONSTRAINT "$5" FOREIGN KEY (id_familiar) REFERENCES familiar(id_familiar) ON DELETE SET NULL;


--
-- TOC entry 7205 (class 2606 OID 190439)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY siniestro
    ADD CONSTRAINT "$5" FOREIGN KEY (id_establecimiento_salud) REFERENCES establecimientosalud(id_establecimiento_salud) ON DELETE SET NULL;


--
-- TOC entry 7083 (class 2606 OID 190444)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nominadiplomatico
    ADD CONSTRAINT "$5" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7033 (class 2606 OID 190449)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historiconomina
    ADD CONSTRAINT "$5" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7113 (class 2606 OID 190454)
-- Name: $6; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY personal
    ADD CONSTRAINT "$6" FOREIGN KEY (id_pais_nacionalidad) REFERENCES pais(id_pais) ON DELETE SET NULL;


--
-- TOC entry 6945 (class 2606 OID 190459)
-- Name: $6; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dependencia
    ADD CONSTRAINT "$6" FOREIGN KEY (id_unidad_funcional) REFERENCES unidadfuncional(id_unidad_funcional) ON DELETE SET NULL;


--
-- TOC entry 7233 (class 2606 OID 190464)
-- Name: $6; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$6" FOREIGN KEY (id_registro_cargos) REFERENCES registrocargos(id_registro_cargos) ON DELETE SET NULL;


--
-- TOC entry 7156 (class 2606 OID 190469)
-- Name: $6; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY registrocargos
    ADD CONSTRAINT "$6" FOREIGN KEY (id_sede) REFERENCES sede(id_sede) ON DELETE SET NULL;


--
-- TOC entry 7245 (class 2606 OID 190474)
-- Name: $6; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ultimanomina
    ADD CONSTRAINT "$6" FOREIGN KEY (id_nomina_especial) REFERENCES nominaespecial(id_nomina_especial) ON UPDATE SET NULL;


--
-- TOC entry 7248 (class 2606 OID 190479)
-- Name: $6; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ultimaprenomina
    ADD CONSTRAINT "$6" FOREIGN KEY (id_nomina_especial) REFERENCES nominaespecial(id_nomina_especial) ON UPDATE SET NULL;


--
-- TOC entry 7143 (class 2606 OID 190484)
-- Name: $6; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY proyecto
    ADD CONSTRAINT "$6" FOREIGN KEY (id_municipio) REFERENCES municipio(id_municipio) ON DELETE SET NULL;


--
-- TOC entry 7234 (class 2606 OID 190489)
-- Name: $7; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$7" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7041 (class 2606 OID 190494)
-- Name: $7; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historicosemana
    ADD CONSTRAINT "$7" FOREIGN KEY (id_nomina_especial) REFERENCES nominaespecial(id_nomina_especial) ON UPDATE SET NULL;


--
-- TOC entry 6946 (class 2606 OID 190499)
-- Name: $7; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dependencia
    ADD CONSTRAINT "$7" FOREIGN KEY (id_sede) REFERENCES sede(id_sede) ON DELETE SET NULL;


--
-- TOC entry 7034 (class 2606 OID 190504)
-- Name: $7; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historiconomina
    ADD CONSTRAINT "$7" FOREIGN KEY (id_nomina_especial) REFERENCES nominaespecial(id_nomina_especial) ON UPDATE SET NULL;


--
-- TOC entry 7235 (class 2606 OID 190509)
-- Name: $8; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$8" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7037 (class 2606 OID 190514)
-- Name: $9; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historicoquincena
    ADD CONSTRAINT "$9" FOREIGN KEY (id_nomina_especial) REFERENCES nominaespecial(id_nomina_especial) ON DELETE SET NULL;


--
-- TOC entry 7038 (class 2606 OID 190519)
-- Name: fk_historico_nomina; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY historicoquincena
    ADD CONSTRAINT fk_historico_nomina FOREIGN KEY (id_historico_nomina) REFERENCES historiconomina(id_historico_nomina);


--
-- TOC entry 7085 (class 2606 OID 190524)
-- Name: fk_nominaespecial_id_frecuencia_pago; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nominaespecial
    ADD CONSTRAINT fk_nominaespecial_id_frecuencia_pago FOREIGN KEY (id_frecuencia_pago) REFERENCES frecuenciapago(id_frecuencia_pago) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 6817 (class 2606 OID 190532)
-- Name: xif1acreencia; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY acreencia
    ADD CONSTRAINT xif1acreencia FOREIGN KEY (id_tipo_acreencia) REFERENCES tipoacreencia(id_tipo_acreencia) ON DELETE SET NULL;


--
-- TOC entry 7765 (class 0 OID 0)
-- Dependencies: 6
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


-- Completed on 2016-03-16 14:18:45 VET

--
-- PostgreSQL database dump complete
--

